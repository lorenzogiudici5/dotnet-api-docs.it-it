<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="11c53433ec9c440cab6a320698ef0e9d9f5cdf8d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30528835" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Restituisce dati dall'evento <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di <xref:System.Speech.Synthesis.SpeakProgressEventArgs> viene creato quando il <xref:System.Speech.Synthesis.SpeechSynthesizer> oggetto genera il <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento. Il <xref:System.Speech.Synthesis.SpeechSynthesizer> genera questo evento per ogni nuovo termine che parla in un prompt dei comandi utilizzando uno del <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, o <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> metodi.  
  
 I dati restituiti sono basati sul riconoscimento vocale sintesi Markup Language (SSML) che genera il codice. I valori restituiti per <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> includere spazi e i caratteri e il contenuto dei tag SSML generato dal codice.  
  
   
  
## Examples  
 L'esempio seguente illustra le informazioni che sono disponibile da <xref:System.Speech.Synthesis.SpeakProgressEventArgs>. Nota come il <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, e <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> influire sui metodi di <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> per l'aggiunta di ** \<p >**, **  \< /p >**, ** \<s >**, e ** \</s >** tag per l'elemento SSML generato. Inoltre, esistono due voci nell'output per "30%", uno per ogni parola di parlare di questa stringa numerica (pari al 30%). Il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> e <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> sono gli stessi per ogni voce e rappresentano i caratteri "30%. Tuttavia, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> cambia per riflettere la pronuncia delle parole "30" e "percentuale" per il <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character postion to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la posizione audio dell'evento.</summary>
        <value>Restituisce la posizione dell'evento nel flusso di output audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizza i numeri con le parole che corrispondono a come il numero verrà letta. Ad esempio, il sintetizzatore legge il numero "4003" come "quattro mille tre". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento per ciascuno dei dialoghi e restituisce il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> per ogni parola.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di caratteri della parola che è stata pronunciata subito prima della generazione dell'evento.</summary>
        <value>Restituisce il numero di caratteri della parola che è stata pronunciata subito prima della generazione dell'evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizza i numeri con le parole che corrispondono a come il numero verrà letta. Ad esempio, il sintetizzatore legge il numero "4003" come "quattro mille tre". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento per ogni parola pronunciata. Tuttavia, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> proprietà per ognuna delle tre parole è lo stesso. Il numero di caratteri del numero "4003" nel testo del messaggio di richiesta, in questo caso, è quattro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di caratteri e spazi dall'inizio della richiesta alla posizione prima della prima lettera della parola che è stata appena pronunciata.</summary>
        <value>Restituisce il numero di caratteri e spazi dall'inizio della richiesta alla posizione prima della prima lettera della parola che è stata appena pronunciata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> include il conteggio per i caratteri nei tag XML, inclusi i relativi racchiuso tra parentesi. Quando si usa uno qualsiasi del <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, o <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> metodi, il contenuto viene aggiunto a un prompt SSML che include l'apertura e chiusura `speak` elementi. L'apertura `speak` elemento aggiunge un offset di 82 caratteri e spazi per il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> di tutte le parole e le lettere nella richiesta. Ad esempio, nel seguente frammento, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> della prima parola, "this", è 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 Nell'esempio precedente il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> della parola "test" è 92. Nel seguente frammento di <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> della parola "test" è di 23 caratteri superiore (115) poiché l'apertura ** \<tono prosody = "alto" >** tag che lo precede contiene 23 caratteri e gli spazi (il due carattere di escape caratteri "\\" non vengono conteggiati).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 Se si utilizza il <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> metodi per aggiungere contenuto a un prompt dei comandi specificando un file, l'apertura `xml` dichiarazione e `speak` elementi nel file non utilizzati o conteggiati. Il primo carattere nel file dopo l'apertura `speak` tag sarà nella posizione 82 se è il primo contenuto nella richiesta.  
  
 Al contrario, il parametro della stringa di un <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> metodo non richiedere di essere aggiunti a un prompt SSML prima parlata. Pertanto, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> della prima parola, "", nel seguente frammento è uguale a zero.  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 Il <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizza i numeri con le parole che corrispondono a come il numero verrà letta. Ad esempio, il sintetizzatore legge il numero "4003" come "quattro mille tre". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento per ognuna delle tre parole parlate. Tuttavia, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> proprietà per ognuna delle tre parole è lo stesso. È la posizione prima del primo carattere del numero "4003" nel testo del messaggio.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Speech.Synthesis.PromptBuilder> e aggiunge il contenuto SSML di un file XML utilizzando <xref:System.Xml.XmlReader>. Nell'esempio vengono restituite vocale in un file di formato per la riproduzione. Il contenuto del file XML contenente l'elemento SSML vengono visualizzate sotto il codice di esempio.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Il testo appena pronunciata quando è stato generato l'evento.</summary>
        <value>Restituisce il testo appena pronunciato quando è stato generato l'evento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Speech.Synthesis.SpeechSynthesizer> Normalizza i numeri con le parole che corrispondono a come il numero verrà letta. Ad esempio, il sintetizzatore legge il numero "4003" come "quattro mille tre". Genera un <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> evento per ogni parola pronunciata. Tuttavia, il <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> proprietà per ognuna delle tre parole è lo stesso. È il testo "4003" dal prompt di.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> segnalazioni di eventi di <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> e <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> proprietà per le stringhe che contengono numeri.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>