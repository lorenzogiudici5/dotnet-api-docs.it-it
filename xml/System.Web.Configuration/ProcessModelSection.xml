<Type Name="ProcessModelSection" FullName="System.Web.Configuration.ProcessModelSection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0daa4ba635e67a7144ea88c6075f05706dfaaa63" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540965" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ProcessModelSection : System.Configuration.ConfigurationSection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ProcessModelSection extends System.Configuration.ConfigurationSection" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.ProcessModelSection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ProcessModelSection&#xA;Inherits ConfigurationSection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProcessModelSection sealed : System::Configuration::ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationSection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Configura le impostazioni del modello di processo ASP.NET su un server Web IIS (Internet Information Services). Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.Web.Configuration.ProcessModelSection> fornisce un modo per accedere e modificare a livello di codice la sezione `processModel` di un file di configurazione.  
  
 La <xref:System.Web.Configuration.ProcessModelSection> classe controlla vari aspetti del processo di lavoro ASP.NET, inclusa la relativa durata, il numero di istanze create per volta, le identità di sicurezza con cui viene eseguito e le dimensioni di CLR thread del pool per rispondere alle richieste.  
  
 Quando si esegue ASP.NET con IIS 6 in modalità nativa, ASP.NET utilizza il modello di processo IIS 6 e ignora la maggior parte delle impostazioni in questa sezione. Utilizzare l'interfaccia utente di amministrazione IIS (UI) per configurare tali proprietà. ASP.NET utilizza ancora le proprietà seguenti, che possono essere configurate tramite il file di configurazione: <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A>, <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>, <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>, e <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>.  
  
 Il `processModel` sezione non può essere crittografata con la funzionalità di configurazione protetta o gli strumenti, perché viene utilizzata per l'estensione ISAPI ASP.NET.  
  
   
  
## Examples  
 In questo esempio viene illustrato come specificare i valori in modo dichiarativo per diversi attributi del `processModel` sezione, in cui sono accessibili anche come membri del <xref:System.Web.Configuration.ProcessModelSection> classe.  
  
 Esempio di file di configurazione seguente viene illustrato come specificare i valori in modo dichiarativo per la `processModel` sezione.  
  
```  
<processModel   
  enable="True" timeout="Infinite"   
  idleTimeout="Infinite"   
  shutdownTimeout="00:00:05" requestLimit="Infinite"  
  requestQueueLimit="5000" restartQueueLimit="10"   
  memoryLimit="60" webGarden="False" cpuMask="0xffffffff"   
  userName="machine" password="AutoGenerate" logLevel="Errors"  
  clientConnectedCheck="00:00:05"   
  comAuthenticationLevel="Connect" comImpersonationLevel="Impersonate"  
  responseDeadlockInterval="00:03:00"   
  responseRestartDeadlockInterval="00:03:00" autoConfig="True"  
  maxWorkerThreads="20" maxIoThreads="20" minWorkerThreads="1"  
  minIoThreads="1" serverErrorMessageFile="" pingFrequency="Infinite"  
  pingTimeout="Infinite" asyncOption="20" maxAppDomains="2000"   
/>  
```  
  
 Esempio di codice seguente viene illustrato come utilizzare la <xref:System.Web.Configuration.ProcessModelSection> classe.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#1)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Configuration.ProcessModelSection" />
    <altmember cref="T:System.Web.Configuration.ProcessModelLogLevel" />
    <altmember cref="T:System.Web.Configuration.ProcessModelComAuthenticationLevel" />
    <altmember cref="T:System.Web.Configuration.ProcessModelComImpersonationLevel" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProcessModelSection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.ProcessModelSection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProcessModelSection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.Configuration.ProcessModelSection" /> usando le impostazioni predefinite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Configuration.ProcessModelSection.%23ctor%2A> costruttore non è destinato a essere utilizzato direttamente dal codice. Viene chiamato dal sistema di configurazione ASP.NET. Per ottenere un'istanza di <xref:System.Web.Configuration.ProcessModelSection> classe utilizzando il <xref:System.Configuration.Configuration.GetSection%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationAllowDefinition" />
      </Docs>
    </Member>
    <Member MemberName="AutoConfig">
      <MemberSignature Language="C#" Value="public bool AutoConfig { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoConfig" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.AutoConfig" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoConfig As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoConfig { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("autoConfig", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore indicante se le impostazioni relative alle prestazioni ASP.NET vengono automaticamente configurate per le applicazioni ASP.NET.</summary>
        <value>
          <see langword="true" /> se le impostazioni delle prestazioni vengono automaticamente configurate per le applicazioni ASP.NET; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> è impostato su `false`, i valori di Web. config espliciti vengono utilizzati per determinare la configurazione delle prestazioni per l'applicazione ASP.NET. Se il <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> è impostato su `true`, le prestazioni vengono automaticamente configurate per l'applicazione ASP.NET.  
  
 Il <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> è impostato in modo esplicito su `true` nel file Machine. config. Il valore di codice predefinito viene impostato su `false`.  Se il <xref:System.Web.Configuration.ProcessModelSection.AutoConfig%2A> il valore viene rimosso da Machine. config, vengono utilizzate le impostazioni esplicite anziché le impostazioni configurate automaticamente.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads" />
        <altmember cref="P:System.Web.Configuration.ProcessModelSection.MaxIOThreads" />
        <altmember cref="P:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads" />
        <altmember cref="P:System.Web.Configuration.HttpRuntimeSection.MinLocalRequestFreeThreads" />
        <altmember cref="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection" />
      </Docs>
    </Member>
    <Member MemberName="ClientConnectedCheck">
      <MemberSignature Language="C#" Value="public TimeSpan ClientConnectedCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ClientConnectedCheck" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ClientConnectedCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientConnectedCheck As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ClientConnectedCheck { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("clientConnectedCheck", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore indicante per quanto tempo una richiesta viene lasciata nella coda.</summary>
        <value>Valore di <see cref="T:System.TimeSpan" /> indicante la durata di accodamento. Il valore predefinito è 5 secondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà specifica quanto tempo una richiesta in coda prima che ASP.NET esegua una verifica di client connessi.  
  
> [!NOTE]
>  Se l'intervallo scade durante la richiesta è ancora in coda, viene eseguita una verifica di client connessi prima di passare la richiesta al processo di lavoro ASP.NET per la gestione.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come accedere e modificare il <xref:System.Web.Configuration.ProcessModelSection.ClientConnectedCheck%2A> proprietà.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#18)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComAuthenticationLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelComAuthenticationLevel ComAuthenticationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelComAuthenticationLevel ComAuthenticationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ComAuthenticationLevel As ProcessModelComAuthenticationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelComAuthenticationLevel ComAuthenticationLevel { System::Web::Configuration::ProcessModelComAuthenticationLevel get(); void set(System::Web::Configuration::ProcessModelComAuthenticationLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("comAuthenticationLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelComAuthenticationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il livello di autenticazione per la sicurezza DCOM.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.Configuration.ProcessModelComAuthenticationLevel" />. Il valore predefinito è <see cref="F:System.Web.Configuration.ProcessModelComAuthenticationLevel.Connect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il valore della proprietà è impostato <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel.Default>, DCOM determina il livello di autenticazione utilizzando l'algoritmo di negoziazione di sicurezza normale. Il valore predefinito assegnato a questa proprietà, come specificato nel file Machine config è <xref:System.Web.Configuration.ProcessModelComAuthenticationLevel.Connect>. In questo caso, DCOM autentica le credenziali del client solo quando il client stabilisce una relazione con il server.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.ComAuthenticationLevel%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#21](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#21)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelComImpersonationLevel ComImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelComImpersonationLevel ComImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ComImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ComImpersonationLevel As ProcessModelComImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelComImpersonationLevel ComImpersonationLevel { System::Web::Configuration::ProcessModelComImpersonationLevel get(); void set(System::Web::Configuration::ProcessModelComImpersonationLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("comImpersonationLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelComImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il livello di autenticazione per la sicurezza COM.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.Configuration.ProcessModelComImpersonationLevel" />. Il valore predefinito è <see cref="F:System.Web.Configuration.ProcessModelComImpersonationLevel.Impersonate" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il valore della proprietà è impostato <xref:System.Web.Configuration.ProcessModelComImpersonationLevel.Default>, DCOM determina il livello di rappresentazione utilizzando l'algoritmo di negoziazione di sicurezza normale. Il valore predefinito assegnato a questa proprietà, come specificato nel file Machine config è <xref:System.Web.Configuration.ProcessModelComImpersonationLevel.Impersonate>. In questo caso, il processo server può rappresentare il contesto di sicurezza del client quando agisce per conto del client.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.ComImpersonationLevel%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#22)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CpuMask">
      <MemberSignature Language="C#" Value="public int CpuMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CpuMask" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.CpuMask" />
      <MemberSignature Language="VB.NET" Value="Public Property CpuMask As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CpuMask { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("cpuMask", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica i processori in un server multiprocessore idonei all'esecuzione dei processi ASP.NET.</summary>
        <value>Numero che rappresenta il modello di bit da applicare. Il valore predefinito è 0xFFFFFFFF.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> valore specifica uno schema di bit che indica la CPU idonea a eseguire i thread ASP.NET. Se il <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> è impostata su `true`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> limita i processi di lavoro per il numero di CPU. Il numero massimo consentito di processi di lavoro è uguale al numero di CPU. Per impostazione predefinita, tutte le CPU sono abilitate e ASP.NET avvia un processo per ogni CPU. Se il <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> è impostata su `false`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> attributo viene ignorato e verrà eseguito solo un processo di lavoro.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#25](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#25)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementProperty">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationElementProperty ElementProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationElementProperty ElementProperty" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ElementProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ElementProperty As ConfigurationElementProperty" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationElementProperty ^ ElementProperty { System::Configuration::ConfigurationElementProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationElementProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public bool Enable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enable" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Enable" />
      <MemberSignature Language="VB.NET" Value="Public Property Enable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("enable", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il modello di processo è attivato.</summary>
        <value>
          <see langword="true" /> se il modello di processo è attivato; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Configuration.ProcessModelSection.Enable%2A> proprietà specifica se ASP.NET è ospitato in un processo di lavoro esterno. Se <xref:System.Web.Configuration.ProcessModelSection.Enable%2A> è `true`, ASP.NET è ospitato in un processo di lavoro esterno; in caso contrario, viene eseguito direttamente in Inetinfo.exe.  
  
> [!NOTE]
>  Esecuzione di ASP.NET in Inetinfo.exe non è consigliata perché implica l'esecuzione dell'applicazione nel contesto di sicurezza del sistema locale. Quando ASP.NET viene eseguito in modalità nativa di Internet Information Services (IIS) 6, questa impostazione viene ignorata, pertanto non esiste alcun motivo per impostare l'opzione `false`.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.Enable%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#2)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan IdleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan IdleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.IdleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property IdleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan IdleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("idleTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il periodo di inattività dopo il quale ASP.NET termina automaticamente il processo di lavoro.</summary>
        <value>Un valore di <see cref="T:System.TimeSpan" /> che indica il periodo di inattività. Il valore predefinito è Infinite e corrisponde a <see cref="F:System.TimeSpan.MaxValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il processo di lavoro viene riavviato (animato) quando il <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A> viene raggiunto il valore della proprietà. Per impostazione predefinita, solo due condizioni rallentare il processo di rimbalzo: il processo supera il limite consentito di memoria o il processo supera il numero consentito di richieste che possono essere inseriti nella coda. È possibile aggiungere altre condizioni a quelle predefinite. Ad esempio, è possibile utilizzare il <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A> proprietà per limitare la durata del processo di lavoro è inattivo.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.IdleTimeout%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#16)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogLevel">
      <MemberSignature Language="C#" Value="public System.Web.Configuration.ProcessModelLogLevel LogLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Configuration.ProcessModelLogLevel LogLevel" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.LogLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property LogLevel As ProcessModelLogLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Configuration::ProcessModelLogLevel LogLevel { System::Web::Configuration::ProcessModelLogLevel get(); void set(System::Web::Configuration::ProcessModelLogLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("logLevel", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.ProcessModelLogLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore indicante i tipi di evento da registrare nel log eventi.</summary>
        <value>Uno dei valori di <see cref="T:System.Web.Configuration.ProcessModelLogLevel" />. Il valore predefinito è <see cref="F:System.Web.Configuration.ProcessModelLogLevel.Errors" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tramite questa proprietà in modo corretto, è possibile filtrare gli errori che possa del Registro di sistema. Dopo avere un'idea del malfunzionamento dell'applicazione o i colli di bottiglia, si desidera mettere a punto una strategia che riduca il numero di errori che si è interessati.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.LogLevel%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#23](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#23)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.ProcessModelLogLevel" />
      </Docs>
    </Member>
    <Member MemberName="MaxAppDomains">
      <MemberSignature Language="C#" Value="public int MaxAppDomains { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAppDomains" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxAppDomains" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAppDomains As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAppDomains { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxAppDomains", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero massimo di domini applicazione consentito in un processo.</summary>
        <value>Numero massimo di domini applicazione consentito in un processo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Web.Configuration.ProcessModelSection.MaxAppDomains%2A> viene superata la soglia, viene arrestato il dominio applicazione utilizzato quando si avvia un nuovo dominio applicazione.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MaxAppDomains%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#27](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#27)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#27](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxIOThreads">
      <MemberSignature Language="C#" Value="public int MaxIOThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxIOThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxIOThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxIOThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxIOThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxIoThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il numero massimo di thread I/O per CPU nel pool di thread CLR.</summary>
        <value>Numero massimo di thread. Il valore predefinito è 20.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> deve essere maggiore o uguale al <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> impostazione di `httpRuntime` sezione di configurazione.  
  
 È necessario un controllo tramite l'utilizzo della CPU impostando il numero di thread di lavoro e il thread dei / o, usando il <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> proprietà e <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> proprietà rispettivamente.  
  
 La differenza tra i due tipi di thread è che quest'ultimo siano associato agli oggetti dei / o, ad esempio un flusso o una pipe, e il primo thread tradizionali senza restrizioni. Per Internet Information Services (IIS) versione 6.0 e versioni successive, ASP.NET elabora le richieste nei thread di lavoro. Questo avviene perché ASP.NET è integrato in IIS.  
  
 Questi thread vengono ottenuti dal pool di thread CLR a livello di processo appartenenti a un'applicazione.  
  
> [!NOTE]
>  In genere, i valori predefiniti per i thread consentiti sono sufficienti a mantenere l'utilizzo elevato della CPU. Se per qualche motivo che l'applicazione è lenta, ad esempio in attesa di risorse esterne, è possibile provare a aumentare il numero di thread a un valore inferiore a 100.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#5)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
      </Docs>
    </Member>
    <Member MemberName="MaxWorkerThreads">
      <MemberSignature Language="C#" Value="public int MaxWorkerThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxWorkerThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkerThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxWorkerThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("maxWorkerThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il numero massimo di thread di lavoro per CPU nel pool di thread CLR.</summary>
        <value>Numero massimo di thread. Il valore predefinito è 20.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> deve essere maggiore o uguale al <xref:System.Web.Configuration.HttpRuntimeSection.MinFreeThreads%2A> impostazione di `httpRuntime` sezione di configurazione.  
  
 È necessario un controllo tramite l'utilizzo della CPU impostando il numero di thread di lavoro e il thread dei / o, usando il <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A> proprietà e, <xref:System.Web.Configuration.ProcessModelSection.MaxIOThreads%2A> proprietà, rispettivamente.  
  
 La differenza tra i due tipi di thread è che quest'ultimo siano associato agli oggetti dei / o, ad esempio un flusso o una pipe, e il primo thread tradizionali senza restrizioni. Per Internet Information Services (IIS) versione 6.0 e versioni successive, ASP.NET elabora le richieste nei thread di lavoro. Questo avviene perché ASP.NET è integrato in IIS.  
  
 Questi thread vengono ottenuti dal pool di thread CLR a livello di processo appartenenti a un'applicazione.  
  
> [!NOTE]
>  In genere, i valori predefiniti per i thread consentiti sono sufficienti a mantenere l'utilizzo elevato della CPU. Se per qualche motivo che l'applicazione è lenta, ad esempio in attesa di risorse esterne, è possibile provare a aumentare il numero di thread a un valore inferiore a 100.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MaxWorkerThreads%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#7)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Configuration.HttpRuntimeSection" />
      </Docs>
    </Member>
    <Member MemberName="MemoryLimit">
      <MemberSignature Language="C#" Value="public int MemoryLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MemoryLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property MemoryLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MemoryLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("memoryLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica le dimensioni massime di memoria consentite.</summary>
        <value>Percentuale della memoria totale del sistema. Il valore predefinito è 60%.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le dimensioni della memoria sono espresso come percentuale della memoria di sistema totale. Si tratta della quantità di memoria utilizzata da un processo di lavoro prima del riavvio di ASP.NET (animato) è.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MemoryLimit%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#3)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinIOThreads">
      <MemberSignature Language="C#" Value="public int MinIOThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinIOThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MinIOThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinIOThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinIOThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minIoThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero minimo di thread I/O per CPU nel pool di thread CLR.</summary>
        <value>Numero minimo di thread I/O per CPU nel pool di thread CLR.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MinIOThreads%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#4)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWorkerThreads">
      <MemberSignature Language="C#" Value="public int MinWorkerThreads { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinWorkerThreads" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.MinWorkerThreads" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkerThreads As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinWorkerThreads { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("minWorkerThreads", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MaxValue=2147483646, MinValue=1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il numero minimo di thread di lavoro per CPU nel pool di thread CLR.</summary>
        <value>Numero minimo di thread di lavoro per CPU nel pool di thread CLR.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.MinWorkerThreads%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#6)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Password">
      <MemberSignature Language="C#" Value="public string Password { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Password" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Password" />
      <MemberSignature Language="VB.NET" Value="Public Property Password As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Password { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("password", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore che indica la password da utilizzare per l'identità di Windows.</summary>
        <value>Password da utilizzare. Il valore predefinito è AutoGenerate.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Configuration.ProcessModelSection.Password%2A> proprietà deve essere utilizzata con la <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> proprietà.  
  
 Quando è presente, questi valori di proprietà causano il processo di lavoro per l'esecuzione con l'identità Windows configurata.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.Password%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#20)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PingFrequency">
      <MemberSignature Language="C#" Value="public TimeSpan PingFrequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PingFrequency" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.PingFrequency" />
      <MemberSignature Language="VB.NET" Value="Public Property PingFrequency As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PingFrequency { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pingFrequency", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica l'intervallo di tempo nel quale l'estensione ISAPI esegue il ping del processo di lavoro per determinare se sia in esecuzione.</summary>
        <value>Oggetto <see cref="T:System.TimeSpan" /> che definisce l'intervallo di tempo. Il valore predefinito è 30 secondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il processo di lavoro viene riavviato (animato) se non è in esecuzione il <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> intervallo è scaduto.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#13)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PingTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan PingTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PingTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.PingTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property PingTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PingTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("pingTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica l'intervallo di tempo dopo il quale un processo di lavoro che non risponde viene riavviato.</summary>
        <value>Oggetto <see cref="T:System.TimeSpan" /> che definisce l'intervallo di tempo. Il valore predefinito è 5 secondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le estensioni ISAPI di eseguire il ping del processo di lavoro di <xref:System.Web.Configuration.ProcessModelSection.PingFrequency%2A> intervallo. Se il processo di lavoro non risponde entro il <xref:System.Web.Configuration.ProcessModelSection.PingTimeout%2A> intervallo, il processo viene riavviato.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.PingTimeout%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#14)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestLimit">
      <MemberSignature Language="C#" Value="public int RequestLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RequestLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il valore che indica il numero di richieste consentite prima del riciclo di un processo di lavoro.</summary>
        <value>Numero delle richieste consentite. Il valore predefinito è Infinite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se viene superato il numero di richieste, ASP.NET avvia automaticamente un nuovo processo di lavoro per rendere il posto di quello corrente.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.RequestLimit%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#8)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestQueueLimit">
      <MemberSignature Language="C#" Value="public int RequestQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RequestQueueLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestQueueLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RequestQueueLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("requestQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il numero di richieste consentite nella coda.</summary>
        <value>Numero di richieste consentite in coda. Il valore predefinito è 5000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se viene superato il numero di richieste consentite nella coda, ASP.NET inizia restituendo "503 – Server troppo occupato" errori alle nuove richieste. Quando viene raggiunto questo limite, il sistema funziona in condizioni anomale. Questa operazione potrebbe essere un sintomo di un malfunzionamento o, forse, solo un carico elevato. Il riavvio (saranno rimbalzati) il processo di lavoro potrebbe diventare l'unico modo per evitare ulteriori problemi.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.RequestQueueLimit%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#10)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseDeadlockInterval">
      <MemberSignature Language="C#" Value="public TimeSpan ResponseDeadlockInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ResponseDeadlockInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseDeadlockInterval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ResponseDeadlockInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseDeadlockInterval", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica l'intervallo di tempo per la risposta dal processo di lavoro.</summary>
        <value>Oggetto <see cref="T:System.TimeSpan" /> che definisce l'intervallo. Il valore predefinito è 3 minuti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il processo viene riavviato, se sono presenti richieste in coda e se non è presente una risposta durante l'intervallo di tempo definito da <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#17)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseRestartDeadlockInterval">
      <MemberSignature Language="C#" Value="public TimeSpan ResponseRestartDeadlockInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ResponseRestartDeadlockInterval" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseRestartDeadlockInterval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ResponseRestartDeadlockInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("responseRestartDeadlockInterval", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Non più utilizzato.</summary>
        <value>Non applicabile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà non viene più utilizzata da ASP.NET e viene fornita solo per la compatibilità. Non causerà un errore di configurazione se è già presente in un file di configurazione. Tutti i ricicli in caso di una condizione di deadlock vengono controllati dal <xref:System.Web.Configuration.ProcessModelSection.ResponseDeadlockInterval%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.ResponseRestartDeadlockInterval%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#11)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestartQueueLimit">
      <MemberSignature Language="C#" Value="public int RestartQueueLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RestartQueueLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.RestartQueueLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RestartQueueLimit As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RestartQueueLimit { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteIntConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("restartQueueLimit", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.IntegerValidator(MinValue=0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il numero massimo di richieste in coda dell'ISAPI in attesa di un nuovo processo di lavoro per avviare la gestione delle richieste.</summary>
        <value>Numero di richieste in coda. Il valore predefinito è 10.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando questo limite viene superato, una richiesta client riceverà un errore HTTP 503 fino a quando il processo di lavoro è pronto.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.RestartQueueLimit%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#9)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerErrorMessageFile">
      <MemberSignature Language="C#" Value="public string ServerErrorMessageFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerErrorMessageFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerErrorMessageFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServerErrorMessageFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("serverErrorMessageFile", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il file il cui contenuto deve essere utilizzato quando si verifica un errore irreversibile.</summary>
        <value>Percorso del file utilizzato quando si verifica un errore irreversibile.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il file il cui contenuto viene utilizzato invece il messaggio di Server non disponibile predefinito.  
  
 Il percorso del file può essere un percorso relativo o assoluto.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.ServerErrorMessageFile%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#28](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#28)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan ShutdownTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ShutdownTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.ShutdownTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ShutdownTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ShutdownTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("shutdownTimeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.TimeSpanValidator(MaxValueString="10675199.02:48:05.4775807", MinValueString="00:00:00")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica la durata consentita affinché il processo di lavoro venga chiuso.</summary>
        <value>Oggetto <see cref="T:System.TimeSpan" /> che definisce l'intervallo. Il valore predefinito è 5 secondi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà specifica il numero di minuti consentiti per il processo di lavoro chiuso correttamente. Quando il timeout scade, viene interrotto il processo di lavoro forzatamente.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.ShutdownTimeout%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#15)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public TimeSpan Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Timeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Configuration.InfiniteTimeSpanConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeout", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il numero di minuti dopo i quali ASP.NET avvia un nuovo processo di lavoro.</summary>
        <value>Oggetto <see cref="T:System.TimeSpan" /> che definisce l'intervallo. Il valore predefinito è Infinite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET avvia un nuovo processo di lavoro per rendere il posto di quello corrente.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene illustrato come utilizzare la proprietà <xref:System.Web.Configuration.ProcessModelSection.Timeout%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#10)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.UserName" />
      <MemberSignature Language="VB.NET" Value="Public Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("userName", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica il nome utente per l'identità di Windows.</summary>
        <value>Nome utente. Il valore predefinito è Machine.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se presente, il <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> definisce un'identità di Windows diversa da quello del processo predefinito. Questa identità viene utilizzata per eseguire il processo di lavoro ASP.NET.  
  
 Per impostazione predefinita, <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> è impostata su, il valore speciale macchina e il processo viene eseguito con un account utente denominato ASPNET che viene creato automaticamente quando ASP.NET è installato.  
  
 Il <xref:System.Web.Configuration.ProcessModelSection.Password%2A> proprietà deve essere utilizzata con la <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> proprietà.  
  
 Quando è presente, questi valori di proprietà causano il processo di lavoro per l'esecuzione con l'identità Windows configurata.  
  
> [!NOTE]
>  Se il <xref:System.Web.Configuration.ProcessModelSection.UserName%2A> proprietà è impostata su sistema, con la password AutoGenerate, definisce un'entità che esegue il processo come un account amministrativo e consente tutto il codice utente ASP.NET in esecuzione nel processo di privilegi amministrativi. In tal caso, prestare attenzione in questo caso, per le autorizzazioni consentite.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.UserName%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#19)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebGarden">
      <MemberSignature Language="C#" Value="public bool WebGarden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WebGarden" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.ProcessModelSection.WebGarden" />
      <MemberSignature Language="VB.NET" Value="Public Property WebGarden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WebGarden { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("webGarden", DefaultValue=Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che consente alle CPU disponibili di eseguire i processi di lavoro.</summary>
        <value>
          <see langword="true" /> se la proprietà <see cref="P:System.Web.Configuration.ProcessModelSection.CpuMask" /> viene utilizzata per eseguire il mapping dei processi di lavoro al numero di CPU idonee; <see langword="false" /> se la proprietà <see cref="P:System.Web.Configuration.ProcessModelSection.CpuMask" /> viene ignorata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> proprietà deve essere utilizzata con la <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> proprietà.  
  
 Se il <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A> è impostata su `false`, <xref:System.Web.Configuration.ProcessModelSection.CpuMask%2A> attributo viene ignorato e viene eseguito solo un processo di lavoro.  
  
> [!NOTE]
>  Un server Web multiprocessore viene chiamato un Web garden.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come accedere alla proprietà <xref:System.Web.Configuration.ProcessModelSection.WebGarden%2A>.  
  
 [!code-csharp[System.Web.Configuration.ProcessModelSection#24](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/CS/processmodelsection.cs#24)]
 [!code-vb[System.Web.Configuration.ProcessModelSection#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.ProcessModelSection/VB/processmodelsection.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>