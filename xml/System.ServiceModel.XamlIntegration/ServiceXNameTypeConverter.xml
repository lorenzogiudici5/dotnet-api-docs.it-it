<Type Name="ServiceXNameTypeConverter" FullName="System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="60685d18e0028bbbbc808017896d548bd2782a70" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39901891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceXNameTypeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceXNameTypeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceXNameTypeConverter&#xA;Inherits TypeConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceXNameTypeConverter : System::ComponentModel::TypeConverter" />
  <TypeSignature Language="F#" Value="type ServiceXNameTypeConverter = class&#xA;    inherit TypeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ae474-101">Implementazione specifica di WCF di un convertitore di tipi <see cref="T:System.Xml.Linq.XName" /> che non richiede istanze <see cref="T:System.Xml.Linq.XName" /> che specifichino uno spazio dei nomi.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ae474-101">A WCF-specific implementation of a <see cref="T:System.Xml.Linq.XName" /> type converter that does not require <see cref="T:System.Xml.Linq.XName" /> instances to specify a namespace.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceXNameTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceXNameTypeConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ae474-102">Inizializza una nuova istanza della classe <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-102">Initializes a new instance of the <see cref="T:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertFrom (context As ITypeDescriptorContext, sourceType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ sourceType);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool&#xA;override this.CanConvertFrom : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="serviceXNameTypeConverter.CanConvertFrom (context, sourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ae474-103">Contesto del descrittore del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-103">The type descriptor context</span>
          </span>
        </param>
        <param name="sourceType">
          <span data-ttu-id="ae474-104">Tipo da cui eseguire la conversione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-104">The type to convert from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae474-105">Ottiene un valore che indica se questo convertitore può convertire un oggetto di un tipo in un <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-105">Gets a value that indicates whether this converter can convert an object of one type to an <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae474-106">
            <see langword="true" /> se il convertitore può eseguire la conversione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-106">
              <see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool&#xA;override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="serviceXNameTypeConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ae474-107">Contesto del descrittore del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-107">The type descriptor context.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="ae474-108">Tipo in cui eseguire la conversione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-108">The type to convert to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae474-109">Ottiene un valore che indica se questo convertitore può convertire un'istanza <see cref="T:System.Xml.Linq.XName" /> in un oggetto del tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-109">Gets a value that indicates whether this converter can convert an <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae474-110">
            <see langword="true" /> se il convertitore può eseguire la conversione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-110">
              <see langword="true" /> if the converter can perform the conversion; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertFrom (context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertFrom(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj&#xA;override this.ConvertFrom : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj -&gt; obj" Usage="serviceXNameTypeConverter.ConvertFrom (context, culture, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ae474-111">Contesto del descrittore del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-111">The type descriptor context.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ae474-112">Impostazioni cultura correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-112">The current culture.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="ae474-113">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-113">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae474-114">Converte il valore specificato in un'istanza <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-114">Converts the specified value to a <see cref="T:System.Xml.Linq.XName" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae474-115">Valore convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-115">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae474-116">Se non ne viene specificato uno, questo metodo non aggiungerà uno spazio dei nomi predefinito nell'oggetto convertito.</span><span class="sxs-lookup"><span data-stu-id="ae474-116">This method will not add a default namespace if one is not specified in the object being converted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.XamlIntegration.ServiceXNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj&#xA;override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="serviceXNameTypeConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="ae474-117">Contesto del descrittore del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-117">The type descriptor context.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ae474-118">Impostazioni cultura correnti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-118">The current culture.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="ae474-119">Valore da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-119">The value to convert.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="ae474-120">Tipo in cui convertire il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-120">The type to convert the value to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ae474-121">Converte un'istanza <see cref="T:System.Xml.Linq.XName" /> in un oggetto del tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-121">Converts a <see cref="T:System.Xml.Linq.XName" /> instance to an object of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ae474-122">Valore convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ae474-122">The converted value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ae474-123">Questo metodo restituisce un nome locale non qualificato se non è stato fornito alcuno spazio dei nomi nell'istanza <xref:System.Xml.Linq.XName> convertita.</span><span class="sxs-lookup"><span data-stu-id="ae474-123">This method returns an unqualified local name if no namespace has been provided in the <xref:System.Xml.Linq.XName> being converted.</span></span> <span data-ttu-id="ae474-124">Un nome locale non qualificato è un'istanza <xref:System.Xml.Linq.XName> che non contiene uno spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="ae474-124">An unqualified local name is a <xref:System.Xml.Linq.XName> that contains no namespace.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>