<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc87874d380b94cda9d24cf45f80842dec7b4c24" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36476878" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type MessageQueueInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Allows you to install and configure a queue that your application needs in order to run. This class is called by the installation utility, for example, InstallUtil.exe, when installing a <see cref="T:System.Messaging.MessageQueue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Messaging.MessageQueueInstaller> usato dall'utilità di installazione per scrivere i valori del Registro di sistema che sono associati alla coda. Per ulteriori informazioni sulle utilità di installazione, vedere [Installutil.exe (strumento programma di installazione)](~/docs/framework/tools/installutil-exe-installer-tool.md).  
  
 Per installare una coda, creare una classe installer progetto da cui eredita il <xref:System.Configuration.Install.Installer>e impostare il <xref:System.ComponentModel.RunInstallerAttribute> per la classe a `true`. All'interno del progetto, creare un <xref:System.Messaging.MessageQueueInstaller> istanza per ogni coda nell'installazione e aggiungere l'istanza alla classe del programma di installazione del progetto.  
  
 Quando si crea un <xref:System.Messaging.MessageQueueInstaller> istanza, è possibile passare un oggetto esistente <xref:System.Messaging.MessageQueue> (ad esempio, da un server di prova) per il <xref:System.Messaging.MessageQueueInstaller.%23ctor%2A> costruttore. Questo approccio fornisce automaticamente le impostazioni di configurazione per la nuova coda per il mirroring delle impostazioni della coda passato. In alternativa, è possibile impostare manualmente le proprietà <xref:System.Messaging.MessageQueueInstaller> istanza gli stati desiderati e chiamare il costruttore predefinito.  
  
 Quando viene chiamato l'utilità di installazione, viene cercato il <xref:System.ComponentModel.RunInstallerAttribute>. Se è `true`, l'utilità consente di installare tutte le code di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta associata al programma di installazione del progetto. Se <xref:System.ComponentModel.RunInstallerAttribute> è `false`, l'utilità ignora il programma di installazione di progetto.  
  
 Modificare altre proprietà di un <xref:System.Messaging.MessageQueueInstaller> istanza prima o dopo l'aggiunta dell'istanza di <xref:System.Configuration.Install.Installer.Installers%2A> raccolta del programma di installazione del progetto. Ad esempio, una coda <xref:System.Messaging.MessageQueue.Path%2A> deve essere impostata prima dell'esecuzione di utilità di installazione.  
  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione installutil.exe. L'utilità chiama automaticamente il <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo durante il processo di installazione e chiama <xref:System.Messaging.MessageQueueInstaller.Commit%2A> se l'installazione non ha generato un'eccezione. Per il ripristino da errori, se necessario, chiamando <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> per l'oggetto che ha generato l'eccezione.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato viene continuamente aggiornate come ognuno <xref:System.Messaging.MessageQueueInstaller> istanza viene installata dall'utilità. Non è in genere necessario per il codice modificare in modo esplicito le informazioni sullo stato.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class. Does not set any instance properties.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueueInstaller : System.Messaging.MessageQueue -&gt; System.Messaging.MessageQueueInstaller" Usage="new System.Messaging.MessageQueueInstaller componentToCopy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy">The <see cref="T:System.Messaging.MessageQueue" /> component whose settings determine the property settings of the new queue installed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class, initializing the installation settings to those of an existing <see cref="T:System.Messaging.MessageQueue" /> instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Authenticate : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue to be installed accepts only authenticated messages.</summary>
        <value>
          <see langword="true" /> Se la coda accetta solo messaggi autenticati. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene inviato un messaggio non autenticato a una coda che accetta solo messaggi autenticati, il messaggio viene rifiutato. Applicazione mittente può richiedere la notifica di un rifiuto di messaggio impostando il <xref:System.Messaging.Message.AcknowledgeType%2A> per il messaggio. In caso contrario, non sarà presente alcuna indicazione che il messaggio è stato rifiutato, in modo che il messaggio può essere perso a meno che non si invia alla coda inattiva.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int16 with get, set" Usage="System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the base priority that is used to route a public queue's messages over the network.</summary>
        <value>La priorità di basa unica per tutti i messaggi inviati alla coda pubblica. Il valore predefinito è zero (0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> viene utilizzato per il routing dei messaggi della coda in rete. Utilizzare il <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> per assegnare ai messaggi inviati alla coda un livello più elevata o di priorità più bassa rispetto a quelle di messaggi inviati ad altre code. Quando è impostata la priorità di base di una coda, tutti i messaggi inviati ad esso sono la priorità più alta rispetto a quello dei messaggi inviati alle code con una priorità di basa inferiore. Priorità di base della coda non ha effetto nell'ordine i messaggi nella coda o sul modo in cui i messaggi vengono letti dalla coda.  
  
 Il <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> si applica solo alle code pubbliche accessibili tramite il controller di dominio (in altre parole, tramite il nome di formato pubblico). La priorità di base delle code private e di code pubbliche direttamente a cui si accede è sempre zero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.Category : Guid with get, set" Usage="System.Messaging.MessageQueueInstaller.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an implementation-specific queue type.</summary>
        <value>Oggetto <see cref="T:System.Guid" /> che rappresenta la categoria di coda (o identificatore del tipo di Accodamento messaggi), che consente alle applicazioni suddividere in categorie le code in base alla modalità di utilizzo. Il valore predefinito è <see langword="Guid.empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La categoria di coda consente a un'applicazione suddividere in categorie code associate in base alla modalità di utilizzo. Il <xref:System.Messaging.MessageQueue.Category%2A> può essere un riferimento null. È inoltre possibile definire una nuova categoria.  
  
 Il <xref:System.Messaging.MessageQueue.Category%2A> fornisce l'accesso alle proprietà di identificatore tipo di Accodamento messaggi, che è lettura/scrittura ed è associata a una coda specifica. È possibile usare il <xref:System.Guid.NewGuid%2A> metodo per creare un valore di categoria che è sicuramente univoco tra tutti <xref:System.Guid> valori. Tuttavia, è necessario solo per il valore della categoria essere distinte dalle altre categorie, non da tutti gli altri <xref:System.Guid> valori. Ad esempio, è possibile impostare il <xref:System.Messaging.MessageQueue.Category%2A> per un gruppo di code {00000000-0000-0000-0000-000000000001} e il <xref:System.Messaging.MessageQueue.Category%2A> per un altro gruppo per {00000000-0000-0000-0000-000000000002}.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Commit : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Commit savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</param>
        <summary>Completes the installation process by committing the <see cref="T:System.Messaging.MessageQueue" /> installation information that the <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> method wrote to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione installutil.exe. L'utilità chiama automaticamente il <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo durante il processo di installazione. L'installazione è transazionale, pertanto se si verifica un errore di qualsiasi componente di progetto di installazione durante l'installazione, tutti i componenti installati in precedenza rollback e ripristinarne lo stato pre-installazione. Questa operazione viene eseguita chiamando ogni componente <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> metodo.  
  
 Dopo la corretta installazione di tutti i componenti associati con il progetto di installazione si è verificata, l'utilità di installazione viene eseguito il commit dell'installazione. <xref:System.Messaging.MessageQueueInstaller.Commit%2A> viene completata l'installazione del <xref:System.Messaging.MessageQueue> impostando la coda allo stato iniziale appropriato. Se la coda specificata per il <xref:System.Messaging.MessageQueueInstaller.Path%2A> proprietà esiste già e contiene messaggi, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> Cancella i messaggi. <xref:System.Messaging.MessageQueueInstaller.Commit%2A>, anziché <xref:System.Messaging.MessageQueueInstaller.Install%2A>, Cancella i messaggi perché non può essere eseguito il rollback l'azione di cancellazione dei messaggi.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Messaging.MessageQueueInstaller.Commit%2A> come il `savedState` parametro, viene continuamente aggiornato quando l'utilità esegue il commit di ogni <xref:System.Messaging.MessageQueueInstaller> istanza. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato. Quando la coda è stata cancellata, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> inserisce una voce di log per il `savedState` associato con l'installazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="messageQueueInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">A <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Messaging.MessageQueueInstaller" />.</param>
        <summary>Copies the property values of a <see cref="T:System.Messaging.MessageQueue" /> component that are required at install time for a message queue.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione installutil.exe. <xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> utilizzato dall'utilità di installazione per impostare i valori delle proprietà per il <xref:System.Messaging.MessageQueueInstaller> per i valori di un oggetto esistente <xref:System.Messaging.MessageQueue>.  
  
 Se il <xref:System.Messaging.MessageQueue.Path%2A> del <xref:System.Messaging.MessageQueue> vale a dire passato è una stringa vuota (""), è necessario impostare il <xref:System.Messaging.MessageQueue.Path%2A> proprietà su un valore non vuoto prima dell'esecuzione il programma di installazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The component associated with this <see cref="T:System.Messaging.MessageQueueInstaller" /> is not a <see cref="T:System.Messaging.MessageQueue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionRequired : System.Messaging.EncryptionRequired with get, set" Usage="System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue accepts only private, or encrypted, messages.</summary>
        <value>Uno del <see cref="T:System.Messaging.EncryptionRequired" /> valori che indica il livello di crittografia necessario nei messaggi inviati alla coda. Il valore predefinito è <see langword="Optional" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la crittografia viene specificata, solo il <xref:System.Messaging.Message.Body%2A> di un messaggio è crittografato. Altre proprietà, ad esempio il <xref:System.Messaging.Message.Label%2A>, non vengono crittografati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">A <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        <summary>Performs the installation and writes message queue information to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo scrive le informazioni di coda di messaggi nel Registro di sistema e associa il <xref:System.Messaging.MessageQueue> istanza a una coda che si trova nel percorso specificato dal <xref:System.Messaging.MessageQueueInstaller.Path%2A> proprietà. Se la coda non esiste già, <xref:System.Messaging.MessageQueueInstaller.Install%2A> crea una coda transazionale. <xref:System.Messaging.MessageQueueInstaller.Install%2A> Imposta le proprietà della coda nuova o esistente a quelle specificate nel <xref:System.Messaging.MessageQueueInstaller>. Se la coda esiste già, le relative proprietà verranno reimpostate su quelle del <xref:System.Messaging.MessageQueueInstaller>. Se la coda esistente non è transazionale, viene eliminato e quindi ricreata come una coda transazionale.  
  
> [!CAUTION]
>  Se è necessario ricreare la coda, i messaggi nella coda andranno persi.  
  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione installutil.exe. L'utilità chiama automaticamente il <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo durante il processo di installazione per scrivere le informazioni del Registro di sistema associate alla coda di messaggi in corso l'installazione. L'installazione è transazionale, pertanto se si verifica un errore di qualsiasi componente di progetto di installazione durante l'installazione, tutti i componenti installati in precedenza rollback e ripristinarne lo stato pre-installazione. Questa operazione viene eseguita chiamando ogni componente <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> metodo.  
  
 Dopo la corretta installazione di tutti i componenti associati con il progetto di installazione si è verificata, l'utilità di installazione viene eseguito il commit dell'installazione. <xref:System.Messaging.MessageQueueInstaller.Commit%2A> viene completata l'installazione del <xref:System.Messaging.MessageQueue> impostando la coda allo stato iniziale appropriato. Se la coda specificata per il <xref:System.Messaging.MessageQueueInstaller.Path%2A> proprietà esiste già e contiene messaggi, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> Cancella i messaggi. <xref:System.Messaging.MessageQueueInstaller.Commit%2A>, anziché <xref:System.Messaging.MessageQueueInstaller.Install%2A>, Cancella i messaggi perché non può essere eseguito il rollback l'azione di cancellazione dei messaggi.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Messaging.MessageQueueInstaller.Install%2A> come il `stateSaver` parametro, viene aggiornato continuamente mentre l'utilità installa ciascuno <xref:System.Messaging.MessageQueueInstaller> istanza. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="messageQueueInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">The installer to compare.</param>
        <summary>Determines whether the specified installer can handle the same kind of installation as this installer.</summary>
        <returns>
          <see langword="true" /> if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter can handle the same kind of installation; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> restituisce `true` solo se il programma di installazione e il programma di installazione specificato per il `otherInstaller` parametro sono dello stesso tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a description of the queue.</summary>
        <value>L'etichetta che descrive la coda di messaggi. Il valore predefinito è una stringa vuota ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Messaging.MessageQueue.Label%2A> proprietà non devono essere univoci tra le code.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumJournalSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum size of the journal that is associated with the queue.</summary>
        <value>Le dimensioni massime, in kilobyte, della coda del diario, che registra i messaggi che vengono rimossi dalla coda. Il valore predefinito di Accodamento messaggi non è previsto alcun limite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando viene creata una coda, Accodamento messaggi crea automaticamente un journal della coda nello stesso percorso della nuova coda. Journal della coda viene utilizzato per rilevare i messaggi che vengono rimossi dalla coda.  
  
 Due tipi di messaggi restano non verificati: quelli che vengono rimossi dalla coda perché è scaduto timer relativo alla ricezione e quelli che vengono eliminati dalla coda.  
  
 Le applicazioni non è possibile inviare messaggi nella coda journal. Tuttavia, è necessario cancellare periodicamente la coda da cui rimuovere i messaggi che non sono più necessari. Messaggi archiviati in code journal diminuisce la quota per il computer in cui si trovano le code. (La quota del computer è impostata dall'amministratore).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumQueueSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum size of the queue.</summary>
        <value>Le dimensioni massime, in kilobyte, della coda. Il valore predefinito di Accodamento messaggi non è previsto alcun limite.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La dimensione massima della coda viene in genere impostato al momento della creazione della coda, sebbene possano essere reimpostato in un secondo momento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastAddress : string with get, set" Usage="System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.</summary>
        <value>Un <see cref="T:System.String" /> che contiene un indirizzo multicast valido (nel formato riportato di seguito) o <see langword="null" />, a indicare che la coda non è associata un indirizzo multicast.  
  
```  
&lt;indirizzo&gt;:&lt;porta&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">MSMQ 3.0 is not installed.</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the location of the queue that is referenced by this object.</summary>
        <value>Il percorso che rappresenta il percorso della coda nella rete.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La sintassi per la <xref:System.Messaging.MessageQueue.Path%2A> proprietà dipende da tipo di coda a cui fa riferimento. Nella tabella seguente viene illustrata la sintassi che è consigliabile utilizzare per le code di vario tipo.  
  
|Tipo di coda|Sintassi|  
|----------------|------------|  
|Coda pubblica|`machineName`\\`queueName`|  
|Coda privata|`machineName`\\`Private$`\\`queueName`|  
|Coda journal|`machineName`\\`queueName`\\`Journal$`|  
|Coda journal di computer|`machineName`\\`Journal$`|  
|Computer non recapitabili|`machineName`\\`Deadletter$`|  
|Macchina transazionale non recapitabili|`machineName`\\`XactDeadletter$`|  
  
 Utilizzare "." per il computer locale.  
  
 È anche possibile usare il <xref:System.Messaging.MessageQueue.FormatName%2A> o <xref:System.Messaging.MessageQueue.Label%2A> di un oggetto di applicazione di Accodamento messaggi per descrivere il percorso della coda. La tabella seguente illustra la sintassi corretta per ogni tipo di riferimento.  
  
|Riferimenti|Sintassi|  
|---------------|------------|  
|Nome del formato|Nomeformato: [ *nome di formato* ]|  
|Label|Etichetta: [ *etichetta* ]|  
  
 Se si lavora offline, è necessario utilizzare il nome di formato per definire la coda <xref:System.Messaging.MessageQueue.Path%2A>. In caso contrario, l'applicazione verrà generata un'eccezione, perché il controller di dominio primario non è disponibile per risolvere il <xref:System.Messaging.MessageQueue.Path%2A> nella <xref:System.Messaging.MessageQueue.FormatName%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> was set to an invalid value, possibly because the syntax is not valid.  -or-  The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Permissions : System.Messaging.AccessControlList with get, set" Usage="System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets permissions associated with the queue.</summary>
        <value>Oggetto <see cref="T:System.Messaging.AccessControlList" /> che contiene uno o più voci di controllo di accesso che specificano i domini trusted e autorizzazioni da concedere per la coda.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, l'autore di una coda pubblica o privata abbia il pieno controllo e il gruppo di dominio, chiunque dispone delle autorizzazioni necessarie per ottenere le proprietà della coda, ottenere le autorizzazioni e scrivere nella coda. Accodamento messaggi accede ogni voce di elenco di autorizzazioni a sua volta fino a quando non ne viene trovato uno che sono valide per l'utente corrente e l'operazione corrente. Come con le autorizzazioni del sistema operativo, i diritti in modo specifico negare a un utente ha la precedenza rispetto a quelli necessari.  
  
 Quando si costruisce la <xref:System.Messaging.MessageQueueInstaller.Permissions%2A> proprietà, aggiungere <xref:System.Messaging.AccessControlEntry> istanze per il <xref:System.Messaging.AccessControlList> insieme. Quando si crea ogni voce di controllo di accesso, è possibile specificare i diritti di accesso generici o standard. I diritti a una coda possono essere qualsiasi combinazione delle operazioni seguenti:  
  
-   Eliminare  
  
-   Protezione da lettura  
  
-   Protezione da scrittura  
  
-   Sincronizzare  
  
-   Modifica proprietario  
  
-   Lettura  
  
-   Write  
  
-   Esegui  
  
-   Obbligatorio  
  
-   Tutti  
  
-   nessuno  
  
 Tali diritti sono un set di flag di bit che è possibile combinare mediante l'operatore OR:  
  
-   Controllo completo  
  
-   Eliminare il messaggio  
  
-   Ricezione messaggio  
  
-   Visualizza messaggio  
  
-   Journal delle modifiche del messaggio  
  
-   Ottenere le proprietà della coda  
  
-   Impostare le proprietà della coda  
  
-   Ottenere le autorizzazioni  
  
-   Impostare le autorizzazioni  
  
-   Acquisire la proprietà di coda  
  
-   Scrittura del messaggio  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Restores the computer to the state it was in before the installation, by rolling back the queue information that the installation procedure wrote to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> metodo annulla gli effetti del <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo. <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> viene chiamato se l'installazione di qualsiasi componente nel progetto di installazione non riesce. Il <xref:System.Messaging.MessageQueueInstaller.Install%2A> metodo crea o imposta le proprietà per una coda. <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> Elimina la coda oppure reimposta le proprietà di una coda esistente in base ai valori di pre-installazione.  
  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione InstallUtil.exe. L'utilità chiama automaticamente il <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> metodo dopo un errore di installazione per annullare eventuali modifiche già effettuate dal processo di installazione.  
  
 Routine di installazione di un'applicazione utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> per gestire automaticamente le informazioni sui componenti che sono già stati installati. Queste informazioni sullo stato, che viene passate a <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> come il `savedState` parametro, viene aggiornato continuamente mentre l'utilità esegue il rollback eseguirne il <xref:System.Messaging.MessageQueueInstaller> istanza. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Transactional : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue accepts only messages sent as part of a transaction.</summary>
        <value>
          <see langword="true" /> Se la coda può accettare solo i messaggi inviati come parte di una transazione. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I messaggi possono essere recuperati da una coda di transazione locale con o senza l'utilizzo di una transazione. Se non si specifica un contesto di transazione, Accodamento messaggi crea una singola transazione interna per l'utente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</param>
        <summary>Removes an installation by removing queue information from the registry. This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A> viene `Remove`, <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> elimina anche la coda associata di <xref:System.Messaging.MessageQueue>.  
  
 In genere, non si chiama i metodi del <xref:System.Messaging.MessageQueueInstaller> dall'interno del codice; vengono in genere chiamati solo dall'utilità di installazione InstallUtil.exe (in modalità di disinstallazione). L'utilità chiama automaticamente il <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> metodo per il ripristino delle parti del sistema sono state interessate dall'installazione e ripristinarne lo stato pre-installazione. È necessario anche eliminare le informazioni del Registro di sistema associate MessageQueue da disinstallare.  
  
 Un'applicazione la disinstallazione di routine utilizza il programma di installazione progetto <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> per gestire automaticamente le informazioni sui componenti che sono già stati disinstallati. Queste informazioni sullo stato, che viene passate a <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> come il `savedState` parametro, viene aggiornato continuamente mentre l'utilità disinstalla ognuno <xref:System.Messaging.MessageQueueInstaller> istanza. Non è in genere, necessario per il codice modificare in modo esplicito queste informazioni sullo stato.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates what the installer does with the queue at uninstall time: remove it, restore it to its pre-installation state, or leave it in its current installed state.</summary>
        <value>Uno del <see cref="T:System.Configuration.Install.UninstallAction" /> i valori che indica lo stato di lasciare la coda quando il <see cref="T:System.Messaging.MessageQueue" /> viene disinstallato. Il valore predefinito è <see langword="Remove" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si installa una coda, è possibile utilizzare facoltativamente una coda esistente. Se esegue questa operazione, è necessario decidere se la coda deve restituire lo stato di pre-installazione o rimangono nello stato corrente e post-installazione. Se si sceglie di ripristinare la coda di stato pre-installazione, i messaggi che sono stati eliminati dalla coda al momento dell'installazione non vengono ripristinati. È possibile reimpostare solo le proprietà della coda sono associate i <xref:System.Messaging.MessageQueueInstaller> in base ai valori di pre-installazione.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether messages that are retrieved from the queue are also copied to the associated journal queue.</summary>
        <value>
          <see langword="true" /> Per copiare i messaggi che vengono recuperati dalla coda nella coda journal; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una coda journal consente di tenere traccia dei messaggi anche dopo che sono stati recuperati dalla coda. Tuttavia, rimangono non verificati due tipi di messaggi: quelli che vengono rimossi dalla coda di scadenza del timer relativo alla ricezione e quelli che vengono eliminati dalla coda.  
  
 Una coda journal deve essere cancellata periodicamente per rimuovere i messaggi che non sono più necessari. Messaggi memorizzati nel conteggio coda journal verso la quota per il computer in cui si trova il journal delle modifiche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>