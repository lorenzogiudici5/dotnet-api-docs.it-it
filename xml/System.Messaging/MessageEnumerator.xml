<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dfbd83b435486357a91721f19b050fdc1e7aa258" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52611161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="1eb5b-101">Fornisce un cursore forward-only per enumerare i messaggi in una coda di messaggi.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1eb5b-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-102">Usare <xref:System.Messaging.MessageEnumerator> per l'interazione dinamica con i messaggi in una coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="1eb5b-103">I metodi disponibili tramite il <xref:System.Messaging.MessageQueue> classe può restituire un <xref:System.Messaging.MessageEnumerator> che punta a un elenco dinamico di messaggi nella coda o una matrice che contiene una copia in un determinato istante - snapshot - della coda al momento il metodo specificato è stato chiamato.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="1eb5b-104">A differenza di uno snapshot statico, un enumeratore consente di modificare la raccolta.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="1eb5b-105">Usando un <xref:System.Messaging.MessageEnumerator>, è possibile rimuovere i messaggi dalla coda e la modifica si riflette immediatamente in coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="1eb5b-106">Un enumeratore non rimuove i messaggi dalla coda quando viene eseguita una query della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="1eb5b-107">Restituisce informazioni sul messaggio nella posizione corrente del cursore, ma lascia il messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="1eb5b-108">Oggetto <xref:System.Messaging.MessageEnumerator> viene inizializzato all'inizio di un elenco dinamico di un cursore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="1eb5b-109">L'ordine dell'elenco è lo stesso l'ordine dei messaggi nella coda, in base alla priorità del messaggio.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="1eb5b-110">È possibile spostare il cursore per il primo messaggio nella coda chiamando <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="1eb5b-111">Dopo che l'enumeratore è stato inizializzato, è possibile usare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> per avanzare attraverso i messaggi rimanenti.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="1eb5b-112">È possibile specificare se si desidera attendere un messaggio diventi disponibile mediante il passaggio di un timeout di <xref:System.Messaging.MessageEnumerator.MoveNext%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="1eb5b-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="1eb5b-113">Poiché l'enumeratore è dinamico, un messaggio che viene aggiunto oltre la posizione del cursore corrente (ad esempio, a causa della priorità bassa), sono accessibili dall'enumeratore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="1eb5b-114">Un messaggio inserito prima di iniziare la posizione del cursore corrente non è accessibile.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="1eb5b-115">Non è possibile tornare indietro con un <xref:System.Messaging.MessageEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="1eb5b-116">Un cursore consente lo spostamento di tipo forward-only.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="1eb5b-117">Il <xref:System.Messaging.MessageEnumerator.Reset%2A> metodo consente di posizionare il cursore all'inizio della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="1eb5b-118">Le istanze di <xref:System.Messaging.MessageEnumerator> per una determinata coda funzionano in modo indipendente.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="1eb5b-119">È possibile creare due <xref:System.Messaging.MessageEnumerator> istanze che si applicano alla stessa coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="1eb5b-120">Le modifiche che uno <xref:System.Messaging.MessageEnumerator> rende ai messaggi nella coda verranno riportate immediatamente in un secondo enumeratore se il secondo enumeratore è posizionato prima del primo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="1eb5b-121">Tuttavia, se dispone di due enumeratori nella stessa posizione e uno di essi rimuove il messaggio in tale posizione, viene generata un'eccezione se l'altro enumeratore prova a ottenere il valore della <xref:System.Messaging.MessageEnumerator.Current%2A> proprietà del messaggio appena eliminato.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1eb5b-122">Se si crea un'istanza di <xref:System.Messaging.MessageQueue> con <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> impostato su `true`, nessun altra applicazione può modificare i messaggi dell'enumeratore mentre attiva la connessione alla coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1eb5b-123">Nell'esempio seguente ottiene un elenco dinamico di messaggi in una coda e conta tutti i messaggi con il <xref:System.Messaging.Message.Priority%2A> impostata su <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-124">Rende disponibili le risorse associate all'enumeratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-124">Frees the resources associated with the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-125">Il sistema operativo viene mantenuto un handle aperto per la coda nel corso della durata del cursore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="1eb5b-126">Quando si have terminato di usare con l'enumeratore, chiamare <xref:System.Messaging.MessageEnumerator.Close%2A> per rilasciare le risorse associate all'handle.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-127">Ottiene il <see cref="T:System.Messaging.Message" /> corrente cui punta questo enumeratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1eb5b-128">Il messaggio corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-128">The current message.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-129">Quando viene creato l'enumeratore, fa riferimento all'inizio della coda, in corrispondenza della posizione prima del primo messaggio.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="1eb5b-130">In questo caso, <xref:System.Messaging.MessageEnumerator.Current%2A> non è valido e verrà generata un'eccezione se viene eseguito l'accesso.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="1eb5b-131">È necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> per posizionare il cursore il primo messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="1eb5b-132">È stata chiamata la proprietà <see cref="P:System.Messaging.MessageEnumerator.Current" /> prima della prima chiamata al metodo <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span>
          </span>
          <span data-ttu-id="1eb5b-133">Il cursore precede il primo elemento dell'enumerazione del messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-133">The cursor is located before the first element of the message enumeration.</span>
          </span>
          <span data-ttu-id="1eb5b-134">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-134">-or-</span>
          </span>
          <span data-ttu-id="1eb5b-135">È stato chiamato <see cref="P:System.Messaging.MessageEnumerator.Current" /> dopo che una chiamata a <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> ha restituito <see langword="false" />, il che indica che il cursore è posizionato dopo l'ultimo elemento dell'enumerazione del messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-136">Il messaggio cui l'enumeratore punta correntemente non esiste più.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-136">The message the enumerator is currently pointing to no longer exists.</span>
          </span>
          <span data-ttu-id="1eb5b-137">Potrebbe essere stato eliminato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-137">It might have been deleted.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-138">Ottiene l'handle del cursore nativo di Accodamento messaggi utilizzato per visualizzare i messaggi della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1eb5b-139">L'handle del cursore nativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-139">The native cursor handle.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-140">Questa proprietà contiene l'handle nativo all'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="1eb5b-141">Quando si have terminato di usare con l'enumeratore, chiamare <xref:System.Messaging.MessageEnumerator.Close%2A> per rilasciare la risorsa.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-142">L'handle non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-142">The handle does not exist.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-143">Rilascia le risorse usate da <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-144">Rilascia tutte le risorse usate da <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-145">La chiamata <xref:System.Messaging.MessageEnumerator.Dispose%2A> consente le risorse usate dal <xref:System.Messaging.MessageEnumerator> riallocazione per altri scopi.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="1eb5b-146">Per altre informazioni sulle <xref:System.Messaging.MessageEnumerator.Dispose%2A>, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="1eb5b-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">
          <span data-ttu-id="1eb5b-147">Pulizia delle risorse non gestite</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-147">Cleaning Up Unmanaged Resources</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1eb5b-148">
            <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-148">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-149">Rilascia le risorse non gestite usate da <see cref="T:System.Messaging.MessageEnumerator" /> e, facoltativamente, le risorse gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-150">Questo metodo viene chiamato da parte del pubblico <xref:System.Messaging.MessageEnumerator.Dispose%2A> metodo e <xref:System.Object.Finalize%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="1eb5b-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="1eb5b-151">`Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="1eb5b-152"><xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="1eb5b-153">Se il parametro `disposing` è `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:System.Messaging.MessageEnumerator> fa riferimento.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="1eb5b-154">Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="1eb5b-155">Il metodo 
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1eb5b-155">
                <see langword="Dispose" /> can be called multiple times by other objects.</span>
            </span>
            <span data-ttu-id="1eb5b-156">In caso di override di <see langword="Dispose(Boolean)" />, non fare riferimento a oggetti già eliminati in una chiamata precedente a <see langword="Dispose" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="1eb5b-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span>
            </span>
            <span data-ttu-id="1eb5b-157">Per altre informazioni su come implementare <see langword="Dispose" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            <span class="sxs-lookup">
              <span data-stu-id="1eb5b-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span>
            </span>
            <span data-ttu-id="1eb5b-158">Per altre informazioni sulle <see langword="Dispose" /> e <see langword="Finalize" />, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [override del metodo Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span>
            <span class="sxs-lookup">
              <span data-stu-id="1eb5b-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span>
            </span>
          </para>
        </block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">
          <span data-ttu-id="1eb5b-159">Implementazione di un metodo Dispose</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-159">Implementing a Dispose method</span>
          </span>
        </related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">
          <span data-ttu-id="1eb5b-160">Pulizia delle risorse non gestite</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-160">Cleaning Up Unmanaged Resources</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-161">Rilascia le risorse detenute dall'enumeratore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-161">Releases the resources held by the enumerator.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="1eb5b-162">Questo metodo esegue l'override di <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-162">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="1eb5b-163">Il codice dell'applicazione non deve chiamare questo metodo. metodo Finalize di un oggetto viene richiamato automaticamente durante l'operazione di garbage collection, a meno che non la finalizzazione del garbage collector non è stata disabilitata da una chiamata al <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (metodo).</span><span class="sxs-lookup"><span data-stu-id="1eb5b-163">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="1eb5b-164">Per altre informazioni, vedere [metodi Finalize e distruttori](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md), e [override del metodo Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span><span class="sxs-lookup"><span data-stu-id="1eb5b-164">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-165">Sposta l'enumeratore al messaggio successivo della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-165">Advances the enumerator to the next message in the queue.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-166">Sposta l'enumeratore al messaggio successivo della coda, se ve n'è uno disponibile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-166">Advances the enumerator to the next message in the queue, if one is currently available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-167">
            <see langword="true" />, se l'enumeratore ha completato il passaggio al messaggio successivo; <see langword="false" />, se l'enumeratore ha raggiunto la fine della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-167">
              <see langword="true" /> if the enumerator was succesfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-168">Questo overload restituisce immediatamente se sono presenti messaggi nella coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-168">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="1eb5b-169">È un altro overload in attesa di un determinato <xref:System.TimeSpan> per un messaggio in arrivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-169">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="1eb5b-170">Se un messaggio non è attualmente disponibile perché la coda è vuota o è stata spostata oltre l'ultimo elemento nella raccolta <xref:System.Messaging.MessageEnumerator.MoveNext%2A> restituisce `false` al metodo di chiamata.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-170">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="1eb5b-171">Al momento della creazione, un enumeratore concettualmente precede il primo messaggio della coda e la prima chiamata a <xref:System.Messaging.MessageEnumerator.MoveNext%2A> consente di visualizzare il primo messaggio della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-171">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-172">È stata avviata un'eccezione specifica di Accodamento messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-172">An exception specific to Message Queuing was thrown.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1eb5b-173">Il <see cref="T:System.TimeSpan" /> da attendere perché un messaggio diventi disponibile se l'enumeratore è posizionato alla fine della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-173">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-174">Sposta l'enumeratore al messaggio successivo della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-174">Advances the enumerator to the next message in the queue.</span>
          </span>
          <span data-ttu-id="1eb5b-175">Se l'enumeratore si trova alla fine della coda, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> attende finché non scade il timeout o finché è disponibile un messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-175">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-176">
            <see langword="true" />, se l'enumeratore ha completato il passaggio al messaggio successivo; <see langword="false" />, se l'enumeratore ha raggiunto la fine della coda e un messaggio non si rende disponibile nel tempo specificato dal parametro <paramref name="timeout" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-176">
              <see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-177">Questo overload è in attesa se sono presenti messaggi nella coda o se il cursore ha raggiunto la fine della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-177">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="1eb5b-178">Se un messaggio non è attualmente disponibile perché la coda è vuota o è stata spostata oltre l'ultimo elemento nella raccolta, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> attende il timeout specificato.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-178">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="1eb5b-179">Se il cursore si trova già alla fine della coda <xref:System.Messaging.MessageEnumerator.MoveNext%2A> restituisce solo `true` se il nuovo messaggio pervenuto entro l'intervallo di tempo specificato, ha una priorità inferiore rispetto a tutti i messaggi attualmente nella coda e viene inserito alla fine della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-179">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="1eb5b-180">Un overload senza parametri restituisce immediatamente se sono presenti altri messaggi nella coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-180">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="1eb5b-181">Al momento della creazione, un enumeratore concettualmente precede il primo messaggio di enumerazione e la prima chiamata a <xref:System.Messaging.MessageEnumerator.MoveNext%2A> consente il primo messaggio di enumerazione nella visualizzazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-181">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1eb5b-182">Il valore specificato per il parametro di timeout non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-182">The value specified for the timeout parameter is invalid.</span>
          </span>
          <span data-ttu-id="1eb5b-183">Può rappresentare un numero negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-183">It might represent a negative number.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-184">È stata avviata un'eccezione specifica di Accodamento messaggi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-184">An exception specific to Message Queuing was thrown.</span>
          </span>
          <span data-ttu-id="1eb5b-185">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-185">-or-</span>
          </span>
          <span data-ttu-id="1eb5b-186">Il timeout è scaduto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-186">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-187">Rimuove il messaggio corrente dalla coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-187">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-188">La rimozione del messaggio determina la sua eliminazione dalla coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-188">Removing the message deletes it from the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-189">Il comportamento descritto per questi overload è applicabile solo se il <xref:System.Messaging.MessageEnumerator> istanza viene recuperata utilizzando la <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-189">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="1eb5b-190">Non utilizzare <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> per recuperare un'istanza di <xref:System.Messaging.MessageEnumerator> come questo metodo è stato deprecato.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-190">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-191">Rimuove il messaggio corrente da una coda transazionale o non transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-191">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-192">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-192">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-193">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="1eb5b-195">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-195">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-196">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-196">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-197">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-197">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="1eb5b-198">Se si chiama questo overload su una coda transazionale, il servizio Accodamento messaggi consente di creare una singola transazione interna.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-198">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <span data-ttu-id="1eb5b-199">L'oggetto <see cref="T:System.Messaging.MessageQueueTransaction" /> che specifica la transazione nella quale verrà rimosso il messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-199">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-200">Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-200">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-201">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-201">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-202">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-202">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione interna definito dal `transaction` parametro.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="1eb5b-204">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-204">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-205">Quando si utilizza code transazionali, un rollback di una transazione fa in modo che tutti i messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> da restituire alla coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-205">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1eb5b-206">La rimozione non è irreversibile, fino a quando non viene eseguito il commit della transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-206">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1eb5b-207">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-207">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-208">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-208">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1eb5b-209">Il valore del parametro <paramref name="transaction" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-209">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">
          <span data-ttu-id="1eb5b-210">Uno dei valori di <see cref="T:System.Messaging.MessageQueueTransactionType" /> che descrive il tipo di contesto di transazione da associare al messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-210">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-211">Rimuove il messaggio corrente da una coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-211">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-212">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-212">There is no timeout specified for a message to arrive in the queue.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-213">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-213">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando un contesto di transazione definito dal `transactionType` parametro.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="1eb5b-215">Specificare `Automatic` per il `transactionType` parametro se è già presente un contesto di transazione esterno associato al thread che si desidera usare per ricevere il messaggio.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-215">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="1eb5b-216">Specificare `Single` se si desidera ricevere il messaggio come una singola transazione interna.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-216">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="1eb5b-217">È possibile specificare `None` se si desidera ricevere un messaggio da una coda transazionale all'esterno di un contesto di transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-217">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="1eb5b-218">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-218">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-219">Quando si utilizza code transazionali, un rollback di una transazione fa in modo che tutti i messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> da restituire alla coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-219">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1eb5b-220">La rimozione non è irreversibile, fino a quando non viene eseguito il commit della transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-220">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1eb5b-221">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-221">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-222">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-222">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1eb5b-223">Il parametro <paramref name="transactionType" /> non è uno dei membri di <see cref="T:System.Messaging.MessageQueueTransactionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-223">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1eb5b-224">Il tempo di attesa dell'arrivo del messaggio nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-224">The interval of time to wait for a message to arrive in the queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-225">Rimuove il messaggio corrente dalla coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-225">Removes the current message from the queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-226">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-226">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="1eb5b-227">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-227">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-228">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-228">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="1eb5b-230">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di `timeout` parametro è scaduto.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-230">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1eb5b-231">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-231">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-232">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-232">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-233">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-233">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="1eb5b-234">Se si chiama questo overload su una coda transazionale, il servizio Accodamento messaggi consente di creare una singola transazione interna.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-234">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1eb5b-235">Il valore specificato per il parametro <paramref name="timeout" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-235">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-236">Il timeout è scaduto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-236">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1eb5b-237">Il tempo di attesa per l'eliminazione del messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-237">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transaction">
          <span data-ttu-id="1eb5b-238">L'oggetto <see cref="T:System.Messaging.MessageQueueTransaction" /> che specifica il contesto della transazione per il messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-238">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-239">Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-239">Removes the current message from a transactional queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-240">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-240">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="1eb5b-241">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-241">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-242">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-242">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="1eb5b-244">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di `timeout` parametro è scaduto.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-244">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1eb5b-245">Quando si utilizza code transazionali, un rollback di una transazione fa in modo che tutti i messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> da restituire alla coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-245">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1eb5b-246">La rimozione non è irreversibile, fino a quando non viene eseguito il commit della transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-246">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1eb5b-247">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-247">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-248">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-248">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-249">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-249">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1eb5b-250">Il valore specificato per il parametro <paramref name="timeout" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-250">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1eb5b-251">Il valore del parametro <paramref name="transaction" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-251">The <paramref name="transaction" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-252">Il timeout è scaduto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-252">The timeout has expired.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1eb5b-253">Il tempo di attesa per l'eliminazione del messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-253">The interval of time to wait for the message to be removed.</span>
          </span>
        </param>
        <param name="transactionType">
          <span data-ttu-id="1eb5b-254">Uno dei valori di <see cref="T:System.Messaging.MessageQueueTransactionType" /> che descrive il tipo di contesto di transazione da associare al messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-254">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1eb5b-255">Rimuove il messaggio corrente da una coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-255">Removes the current message from a queue and returns the message to the calling application.</span>
          </span>
          <span data-ttu-id="1eb5b-256">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-256">If there is a message to remove, the method returns it immediately.</span>
          </span>
          <span data-ttu-id="1eb5b-257">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-257">Otherwise, the method waits the specified timeout for a new message to arrive.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1eb5b-258">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al primo messaggio disponibile nella coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-258">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando un contesto di transazione definito dal `transactionType` parametro.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="1eb5b-260">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di `timeout` parametro è scaduto.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-260">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="1eb5b-261">Specificare `Automatic` per il `transactionType` parametro se è già presente un contesto di transazione esterno associato al thread che si desidera usare per ricevere il messaggio.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-261">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="1eb5b-262">Specificare `Single` se si desidera ricevere il messaggio come una singola transazione interna.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-262">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="1eb5b-263">È possibile specificare `None` se si desidera ricevere un messaggio da una coda transazionale all'esterno di un contesto di transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-263">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="1eb5b-264">Se si usa inserimento nel journal della coda, la rimozione del messaggio provoca una copia rimanere nella coda del journal, proprio come le <xref:System.Messaging.MessageQueue> della classe <xref:System.Messaging.MessageQueue.Receive%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-264">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="1eb5b-265">Quando si utilizza code transazionali, un rollback di una transazione fa in modo che tutti i messaggi rimossi da una chiamata a <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> da restituire alla coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-265">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="1eb5b-266">La rimozione non è irreversibile, fino a quando non viene eseguito il commit della transazione.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-266">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="1eb5b-267">Quando si rimuove il messaggio corrente, il cursore viene spostato al messaggio successivo.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-267">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="1eb5b-268">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-268">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1eb5b-269">Il valore specificato per il parametro <paramref name="timeout" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-269">The value specified for the <paramref name="timeout" /> parameter is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.Messaging.MessageQueueException">
          <span data-ttu-id="1eb5b-270">Il timeout è scaduto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-270">The timeout has expired.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="1eb5b-271">Il parametro <paramref name="transactionType" /> non è uno dei membri di <see cref="T:System.Messaging.MessageQueueTransactionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-271">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span>
          </span>
        </exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-272">Reimposta l'enumeratore corrente, in modo che punti all'inizio della coda.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-272">Resets the current enumerator so it points to the head of the queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1eb5b-273">Un enumeratore possibile solo spostare in avanti.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-273">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="1eb5b-274">Utilizzare questo metodo per ricominciare dall'inizio della coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-274">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="1eb5b-275">Dopo aver chiamato <xref:System.Messaging.MessageEnumerator.Reset%2A>, il cursore fa riferimento al primo messaggio.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-275">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="1eb5b-276">Non è necessario chiamare <xref:System.Messaging.MessageEnumerator.MoveNext%2A> dopo la chiamata <xref:System.Messaging.MessageEnumerator.Reset%2A> per spostare in avanti il cursore per il primo messaggio nella coda.</span><span class="sxs-lookup"><span data-stu-id="1eb5b-276">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1eb5b-277">Restituisce un oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al messaggio nella posizione corrente del cursore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-277">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1eb5b-278">Oggetto <see cref="T:System.Messaging.Message" /> che fa riferimento al messaggio nella posizione corrente del cursore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1eb5b-278">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>