<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MessageEnumerator.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56a3039a11d941cd3db611cb997eb17835525e4da.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3039a11d941cd3db611cb997eb17835525e4da</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
          <target state="translated">Fornisce un cursore forward-only per enumerare i messaggi in una coda di messaggi.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for dynamic interaction with messages in a queue.</source>
          <target state="translated">Utilizzare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> per un'interazione dinamica con i messaggi in una coda.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Methods available through the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class can return either a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</source>
          <target state="translated">Metodi disponibili tramite il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> classe può restituire un <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> che punta a un elenco dinamico di messaggi nella coda o una matrice che contiene una copia in un determinato istante - uno snapshot - della coda al momento il metodo specificato è stato chiamato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Unlike a static snapshot, an enumerator allows you to modify the collection.</source>
          <target state="translated">A differenza di uno snapshot statico, un enumeratore consente di modificare la raccolta.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Using a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, you can remove messages from the queue, and the change is immediately reflected in the queue.</source>
          <target state="translated">Utilizzando un <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, è possibile rimuovere i messaggi dalla coda e la modifica viene riflessa immediatamente nella coda.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>An enumerator does not remove the messages from the queue when it queries the queue.</source>
          <target state="translated">Un enumeratore non rimuove i messaggi dalla coda quando viene eseguita una query la coda.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It returns information about the message at the current cursor position, but it leaves the message in the queue.</source>
          <target state="translated">Restituisce informazioni sul messaggio nella posizione corrente del cursore, ma lascia il messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> is a cursor, initialized to the head of a dynamic list.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> è un cursore, inizializzato all'inizio di un elenco dinamico.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The list order is the same as the order of the messages in the queue, according to message priority.</source>
          <target state="translated">L'ordine dell'elenco è identico all'ordine dei messaggi nella coda, in base alla priorità del messaggio.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can move the cursor to the first message in the queue by calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">È possibile spostare il cursore per il primo messaggio nella coda chiamando <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>After the enumerator has been initialized, you can use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to step forward through the remaining messages.</source>
          <target state="translated">Dopo l'enumeratore è stato inizializzato, è possibile utilizzare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> per avanzare tra i messaggi rimanenti.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can specify whether to wait for a message to become available by passing a timeout into the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> method.</source>
          <target state="translated">È possibile specificare se per l'attesa di un messaggio diventi disponibile passando un timeout di <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</source>
          <target state="translated">Poiché l'enumeratore è dinamico, un messaggio che viene aggiunto oltre la posizione del cursore corrente (ad esempio, a causa di priorità bassa), sono accessibili dall'enumeratore.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A message that is inserted before the cursor's current position cannot be accessed.</source>
          <target state="translated">Un messaggio che viene inserito prima che la posizione corrente del cursore non è accessibile.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It is not possible to step backward with a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</source>
          <target state="translated">Non è possibile tornare indietro con un <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A cursor allows forward-only movement.</source>
          <target state="translated">Un cursore consente lo spostamento di tipo forward-only.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> method enables you to place the cursor back at the beginning of the queue.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> metodo consente di posizionare il cursore all'inizio della coda.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Instances of <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for a given queue work independently.</source>
          <target state="translated">Le istanze di <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> per una determinata coda funzionano in modo indipendente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can create two <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instances that apply to the same queue.</source>
          <target state="translated">È possibile creare due <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> istanze che si applicano alla stessa coda.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The changes that one <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</source>
          <target state="translated">Le modifiche che una <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> esegue per i messaggi nella coda verranno riportate immediatamente in un secondo enumeratore se il secondo enumeratore è posizionato prima del primo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> property on the now-deleted message.</source>
          <target state="translated">Tuttavia, se due enumeratori hanno la stessa posizione e uno di essi rimuove il messaggio in tale posizione, viene generata un'eccezione se l'altro enumeratore tenta di ottenere il valore della <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> proprietà sul messaggio appena eliminato.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>If you create an instance of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> set to <ph id="ph3">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.</source>
          <target state="translated">Se si crea un'istanza di <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> con <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> impostato su <ph id="ph3">`true`</ph>, altre applicazioni non possono modificare i messaggi dell'enumeratore mentre è attiva la connessione alla coda.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The following example gets a dynamic list of messages in a queue and counts all messages with the <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> property set to <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene ottenuto un elenco dinamico di messaggi in una coda e conta tutti i messaggi con il <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> proprietà impostata su <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>Frees the resources associated with the enumerator.</source>
          <target state="translated">Rende disponibili le risorse associate all'enumeratore.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>The operating system retains an open handle to the queue during the lifetime of the cursor.</source>
          <target state="translated">Il sistema operativo mantiene un handle aperto per la coda nel corso della durata del cursore.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release the resources associated with the handle.</source>
          <target state="translated">Quando si termina di utilizzare con l'enumeratore, chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> per rilasciare le risorse associate all'handle.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that this enumerator points to.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> corrente cui punta questo enumeratore.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The current message.</source>
          <target state="translated">Il messaggio corrente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>When the enumerator is created, it points to the head of the queue, at a location before the first message.</source>
          <target state="translated">Quando viene creato l'enumeratore, fa riferimento all'inizio della coda, in corrispondenza della posizione prima del primo messaggio.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>In this case, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">In questo caso, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> non è valido e verrà generata un'eccezione se vi si accede.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You must call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to position the cursor at the first message in the queue.</source>
          <target state="translated">È necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> per posizionare il cursore il primo messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> before the first call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>.</source>
          <target state="translated">È stata chiamata la proprietà <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> prima della prima chiamata al metodo <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The cursor is located before the first element of the message enumeration.</source>
          <target state="translated">Il cursore precede il primo elemento dell'enumerazione del messaggio.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> after a call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> had returned <ph id="ph3">&lt;see langword="false" /&gt;</ph> (indicating the cursor is located after the last element of the message enumeration.)</source>
          <target state="translated">È stato chiamato <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> dopo che una chiamata a <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> ha restituito <ph id="ph3">&lt;see langword="false" /&gt;</ph>, il che indica che il cursore è posizionato dopo l'ultimo elemento dell'enumerazione del messaggio.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The message the enumerator is currently pointing to no longer exists.</source>
          <target state="translated">Il messaggio cui l'enumeratore punta correntemente non esiste più.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>It might have been deleted.</source>
          <target state="translated">Potrebbe essere stato eliminato.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>Gets the native Message Queuing cursor handle used to browse messages in the queue.</source>
          <target state="translated">Ottiene l'handle del cursore nativo di Accodamento messaggi utilizzato per visualizzare i messaggi della coda.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The native cursor handle.</source>
          <target state="translated">L'handle del cursore nativo.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>This property contains the native handle to the enumeration.</source>
          <target state="translated">Questa proprietà contiene l'handle nativo di enumerazione.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release this resource.</source>
          <target state="translated">Quando si termina di utilizzare con l'enumeratore, chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> per rilasciare la risorsa.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The handle does not exist.</source>
          <target state="translated">L'handle non esiste.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Rilascia le risorse usate da <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Rilascia tutte le risorse usate da <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> le risorse utilizzate da di <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> riallocazione per altri scopi.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, vedere <bpt id="p1">[</bpt>la pulizia di risorse non gestite<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per rilasciare sia le risorse gestite sia quelle non gestite; <ph id="ph2">&lt;see langword="false" /&gt;</ph> per rilasciare solo le risorse non gestite.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Rilascia le risorse non gestite usate da <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> e, facoltativamente, le risorse gestite.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Questo metodo viene chiamato dal metodo pubblico <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> (metodo) e <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> richiama il metodo protetto <ph id="ph2">`Dispose(Boolean)`</ph> metodo con il <ph id="ph3">`disposing`</ph> parametro impostato su <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> richiama <ph id="ph2">`Dispose`</ph> con <ph id="ph3">`disposing`</ph> impostato su <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> references.</source>
          <target state="translated">Se il parametro <ph id="ph1">`disposing`</ph> è <ph id="ph2">`true`</ph>, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> fa riferimento.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Il metodo richiama il metodo <ph id="ph1">`Dispose()`</ph> di ciascun oggetto cui viene fatto riferimento.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> può essere chiamato più volte da altri oggetti.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">In caso di override di <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, non fare riferimento a oggetti già eliminati in una chiamata precedente a <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su come implementare <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, vedere <bpt id="p1">[</bpt>implementazione di un metodo Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Per ulteriori informazioni su <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> e <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, vedere <bpt id="p1">[</bpt>la pulizia di risorse non gestite<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> e <bpt id="p2">[</bpt>si esegue l'override del metodo Finalize<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Sposta l'enumeratore al messaggio successivo della coda.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Advances the enumerator to the next message in the queue, if one is currently available.</source>
          <target state="translated">Sposta l'enumeratore al messaggio successivo della coda, se ve n'è uno disponibile.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was succesfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, se l'enumeratore ha completato il passaggio al messaggio successivo; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, se l'enumeratore ha raggiunto la fine della coda.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>This overload returns immediately if there is no message in the queue.</source>
          <target state="translated">Questo overload restituisce immediatamente se non sono presenti messaggi nella coda.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>There is another overload that waits a specified <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> for a message to arrive.</source>
          <target state="translated">Un altro overload in attesa di un oggetto specificato è <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> per un messaggio in arrivo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph> to the calling method.</source>
          <target state="translated">Se un messaggio non è attualmente disponibile perché la coda è vuota o perché sono stati spostati oltre l'ultimo elemento nella raccolta, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> restituisce <ph id="ph2">`false`</ph> al metodo di chiamata.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the queue into view.</source>
          <target state="translated">Al momento della creazione, un enumeratore concettualmente prima del primo messaggio della coda e la prima chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> consente di visualizzare il primo messaggio della coda.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">È stata avviata un'eccezione specifica di Accodamento messaggi.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to wait for a message to be available if the enumerator is positioned at the end of the queue.</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> da attendere perché un messaggio diventi disponibile se l'enumeratore è posizionato alla fine della coda.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Sposta l'enumeratore al messaggio successivo della coda.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the enumerator is positioned at the end of the queue, <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> waits until a message is available or the given timeout expires.</source>
          <target state="translated">Se l'enumeratore si trova alla fine della coda, <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> attende finché non scade il timeout o finché è disponibile un messaggio.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator successfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, se l'enumeratore ha completato il passaggio al messaggio successivo; <ph id="ph2">&lt;see langword="false" /&gt;</ph>, se l'enumeratore ha raggiunto la fine della coda e un messaggio non si rende disponibile nel tempo specificato dal parametro <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</source>
          <target state="translated">Questo overload è in attesa se sono presenti messaggi nella coda o se il cursore ha raggiunto la fine della coda.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> waits the specified timeout.</source>
          <target state="translated">Se un messaggio non è attualmente disponibile perché la coda è vuota o perché sono stati spostati oltre l'ultimo elemento nella raccolta, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> attende il timeout specificato.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the cursor is already at the end of the queue, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> only returns <ph id="ph2">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</source>
          <target state="translated">Se il cursore si trova già alla fine della coda, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> restituisce solo <ph id="ph2">`true`</ph> se il nuovo messaggio arriva entro l'intervallo di tempo specificato, ha una priorità inferiore rispetto a tutti i messaggi attualmente nella coda e viene inserito alla fine della coda.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An overload with no parameter returns immediately if no further messages are in the queue.</source>
          <target state="translated">Un overload senza parametri restituisce immediatamente se sono presenti altri messaggi nella coda.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the enumeration into view.</source>
          <target state="translated">Al momento della creazione, un enumeratore concettualmente prima del primo messaggio dell'enumerazione e la prima chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> consente il primo messaggio dell'enumerazione nella visualizzazione.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The value specified for the timeout parameter is invalid.</source>
          <target state="translated">Il valore specificato per il parametro di timeout non è valido.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>It might represent a negative number.</source>
          <target state="translated">Può rappresentare un numero negativo.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">È stata avviata un'eccezione specifica di Accodamento messaggi.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">Il timeout è scaduto.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente dalla coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removing the message deletes it from the queue.</source>
          <target state="translated">La rimozione del messaggio determina la sua eliminazione dalla coda.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The behavior described for these overloads is applicable only if the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instance is retrieved by using the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</source>
          <target state="translated">Il comportamento descritto per questi overload è applicabile solo se il <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> istanza viene recuperata mediante la <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Do not use <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> to retrieve an instance of <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> as this method has been deprecated.</source>
          <target state="translated">Non utilizzare <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> per recuperare un'istanza di <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> come questo metodo è stato deprecato.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente da una coda transazionale o non transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Se si chiama questo overload in una coda transazionale, Accodamento messaggi consente di creare una singola transazione interna.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction in which the message will be removed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> che specifica la transazione nella quale verrà rimosso il messaggio.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id="ph2">`transaction`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione interna definito per il <ph id="ph2">`transaction`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> deve essere restituito alla coda.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore del parametro <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Uno dei valori di <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> che descrive il tipo di contesto di transazione da associare al messaggio.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente da una coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">Non esistono timeout specifici per l'arrivo di un messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione definito dal <ph id="ph2">`transactionType`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Specificare <ph id="ph1">`Automatic`</ph> per il <ph id="ph2">`transactionType`</ph> parametro se è già presente un contesto di transazione esterno associato al thread che si desidera utilizzare per ricevere il messaggio.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Specificare <ph id="ph1">`Single`</ph> se si desidera ricevere il messaggio come una singola transazione interna.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">È possibile specificare <ph id="ph1">`None`</ph> se si desidera ricevere un messaggio da una coda transazionale di fuori di un contesto di transazione.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> deve essere restituito alla coda.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> non è uno dei membri di <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The interval of time to wait for a message to arrive in the queue.</source>
          <target state="translated">Il tempo di attesa dell'arrivo del messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente dalla coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di <ph id="ph1">`timeout`</ph> parametro è scaduto.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Se si chiama questo overload in una coda transazionale, Accodamento messaggi consente di creare una singola transazione interna.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Il valore specificato per il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">Il timeout è scaduto.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Il tempo di attesa per l'eliminazione del messaggio.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction context for the message.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> che specifica il contesto della transazione per il messaggio.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente da una coda transazionale e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di <ph id="ph1">`timeout`</ph> parametro è scaduto.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> deve essere restituito alla coda.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Il valore specificato per il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore del parametro <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The timeout has expired.</source>
          <target state="translated">Il timeout è scaduto.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Il tempo di attesa per l'eliminazione del messaggio.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Uno dei valori di <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> che descrive il tipo di contesto di transazione da associare al messaggio.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Rimuove il messaggio corrente da una coda e restituisce il messaggio all'applicazione che ha eseguito la chiamata.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Se è necessario rimuovere un messaggio, il metodo lo restituisce immediatamente.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">In caso contrario, il metodo attende il timeout specificato per l'arrivo di un nuovo messaggio.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al primo messaggio disponibile nella coda.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Rimuove e restituisce il messaggio nella posizione corrente del cursore, utilizzando il contesto di transazione definito dal <ph id="ph2">`transactionType`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Se il cursore si trova alla fine della coda, l'overload del metodo attende fino a quando non è disponibile un messaggio o l'intervallo specificato da di <ph id="ph1">`timeout`</ph> parametro è scaduto.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Specificare <ph id="ph1">`Automatic`</ph> per il <ph id="ph2">`transactionType`</ph> parametro se è già presente un contesto di transazione esterno associato al thread che si desidera utilizzare per ricevere il messaggio.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Specificare <ph id="ph1">`Single`</ph> se si desidera ricevere il messaggio come una singola transazione interna.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">È possibile specificare <ph id="ph1">`None`</ph> se si desidera ricevere un messaggio da una coda transazionale di fuori di un contesto di transazione.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Se si utilizza l'inserimento nel journal della coda, la rimozione del messaggio provoca una copia da mantenere nella coda journal di come il <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> della classe <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Quando si utilizzano code transazionali, un rollback di una transazione provoca dei messaggi rimossi da una chiamata a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> deve essere restituito alla coda.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La rimozione non è irreversibile fino a quando non viene eseguito il commit della transazione.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Quando si rimuove il messaggio corrente, il cursore viene spostato sul messaggio successivo.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">Il valore specificato per il parametro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> non è valido.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The timeout has expired.</source>
          <target state="translated">Il timeout è scaduto.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> non è uno dei membri di <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Resets the current enumerator so it points to the head of the queue.</source>
          <target state="translated">Reimposta l'enumeratore corrente, in modo che punti all'inizio della coda.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>An enumerator can only move in a forward direction.</source>
          <target state="translated">Un enumeratore possibile solo spostare in avanti.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Use this method to start over at the beginning of the queue.</source>
          <target state="translated">Utilizzare questo metodo per ricominciare all'inizio della coda.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>After calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, the cursor points to the first message.</source>
          <target state="translated">Dopo la chiamata <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, il cursore punta al primo messaggio.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> to move the cursor forward to the first message in the queue.</source>
          <target state="translated">Non è necessario chiamare <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> dopo la chiamata <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> per spostare in avanti il cursore per il primo messaggio nella coda.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Restituisce un oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al messaggio nella posizione corrente del cursore.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> che fa riferimento al messaggio nella posizione corrente del cursore.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>