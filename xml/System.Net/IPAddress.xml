<Type Name="IPAddress" FullName="System.Net.IPAddress">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b382b2e424f3335e396090615b29820d1cd62c1d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class IPAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit IPAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.IPAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class IPAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPAddress" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Primitives</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e2bde-101">Fornisce un indirizzo IP (Internet Protocol).</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2bde-101">Provides an Internet Protocol (IP) address.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-102">La <xref:System.Net.IPAddress> classe contiene l'indirizzo di un computer in una rete IP.</span><span class="sxs-lookup"><span data-stu-id="e2bde-102">The <xref:System.Net.IPAddress> class contains the address of a computer on an IP network.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-103">Esempio di codice seguente viene illustrato come eseguire query su un server per ottenere la famiglia di indirizzi e gli indirizzi IP supporta.</span><span class="sxs-lookup"><span data-stu-id="e2bde-103">The following code example shows how to query a server to obtain the family addresses and the IP addresses it supports.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#1)]
 [!code-csharp[System.Net.IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#1)]
 [!code-vb[System.Net.IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-104">Inizializza una nuova istanza della classe <see cref="T:System.Net.IPAddress" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-104">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="e2bde-105">Valore della matrice di byte dell'indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-105">The byte array value of the IP address.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-106">Inizializza una nuova istanza della classe <see cref="T:System.Net.IPAddress" /> con l'indirizzo specificato come matrice <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-106">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-107">Il <xref:System.Net.IPAddress> viene creato con il <xref:System.Net.IPAddress.Address%2A> proprietà impostata su `address`.</span><span class="sxs-lookup"><span data-stu-id="e2bde-107">The <xref:System.Net.IPAddress> is created with the <xref:System.Net.IPAddress.Address%2A> property set to `address`.</span></span>  
  
 <span data-ttu-id="e2bde-108">Se la lunghezza di `address` è 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> costruisce un indirizzo IPv4; in caso contrario, viene costruito un indirizzo IPv6 con un ambito pari a 0.</span><span class="sxs-lookup"><span data-stu-id="e2bde-108">If the length of `address` is 4, <xref:System.Net.IPAddress.%23ctor%28System.Byte%5B%5D%29> constructs an IPv4 address; otherwise, an IPv6 address with a scope of 0 is constructed.</span></span>  
  
 <span data-ttu-id="e2bde-109">Il <xref:System.Byte> matrice viene considerata nell'ordine dei byte di rete con il byte più significativo prima nella posizione di indice 0.</span><span class="sxs-lookup"><span data-stu-id="e2bde-109">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2bde-110">
            <paramref name="address" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-110">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e2bde-111">
            <paramref name="address" /> contiene un indirizzo IP errato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-111">
              <paramref name="address" /> contains a bad IP address.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (long newAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 newAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (newAddress As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(long newAddress);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="newAddress" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="newAddress">
          <span data-ttu-id="e2bde-112">Valore long dell'indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-112">The long value of the IP address.</span>
          </span>
          <span data-ttu-id="e2bde-113">Ad esempio, il valore 0x2414188f in formato big-endian corrisponde all'indirizzo IP "143.24.20.36".</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-113">For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-114">Inizializza una nuova istanza della classe <see cref="T:System.Net.IPAddress" /> con l'indirizzo specificato struttura <see cref="T:System.Int64" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-114">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-115">Il <xref:System.Net.IPAddress> istanza viene creata con la <xref:System.Net.IPAddress.Address%2A> proprietà impostata su `newAddress`.</span><span class="sxs-lookup"><span data-stu-id="e2bde-115">The <xref:System.Net.IPAddress> instance is created with the <xref:System.Net.IPAddress.Address%2A> property set to `newAddress`.</span></span>  
  
 <span data-ttu-id="e2bde-116">Il <xref:System.Int64> valore si presuppone che nell'ordine dei byte di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-116">The <xref:System.Int64> value is assumed to be in network byte order.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e2bde-117">
            <paramref name="newAddress" /> &lt; 0 o</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-117">
              <paramref name="newAddress" /> &lt; 0 or</span>
          </span>
          <span data-ttu-id="e2bde-118">
            <paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-118">
              <paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (byte[] address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte(), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(cli::array &lt;System::Byte&gt; ^ address, long scopeid);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
        <Parameter Name="scopeid" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="e2bde-119">Valore della matrice di byte dell'indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-119">The byte array value of the IP address.</span>
          </span>
        </param>
        <param name="scopeid">
          <span data-ttu-id="e2bde-120">Valore long dell'identificatore di ambito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-120">The long value of the scope identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-121">Inizializza una nuova istanza della classe <see cref="T:System.Net.IPAddress" /> con l'indirizzo specificato come matrice <see cref="T:System.Byte" /> e l'identificatore di ambito specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-121">Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array and the specified scope identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-122">Questo costruttore crea un'istanza di un indirizzo IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-122">This constructor instantiates an IPv6 address.</span></span> <span data-ttu-id="e2bde-123">Il `scopeid` identifica un'interfaccia di rete nel caso di un indirizzo link-local.</span><span class="sxs-lookup"><span data-stu-id="e2bde-123">The `scopeid` identifies a network interface in the case of a link-local address.</span></span> <span data-ttu-id="e2bde-124">L'ambito è valido solo per gli indirizzi link-local e sito locale.</span><span class="sxs-lookup"><span data-stu-id="e2bde-124">The scope is valid only for link-local and site-local addresses.</span></span>  
  
 <span data-ttu-id="e2bde-125">Il <xref:System.Byte> matrice viene considerata nell'ordine dei byte di rete con il byte più significativo prima nella posizione di indice 0.</span><span class="sxs-lookup"><span data-stu-id="e2bde-125">The <xref:System.Byte> array is assumed to be in network byte order with the most significant byte first in index position 0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2bde-126">
            <paramref name="address" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-126">
              <paramref name="address" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e2bde-127">
            <paramref name="address" /> contiene un indirizzo IP errato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-127">
              <paramref name="address" /> contains a bad IP address.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e2bde-128">
            <paramref name="scopeid" /> &lt; 0 o</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-128">
              <paramref name="scopeid" /> &lt; 0 or</span>
          </span>
          <span data-ttu-id="e2bde-129">
            <paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-129">
              <paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IPAddress (ReadOnlySpan&lt;byte&gt; address, long scopeid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; address, int64 scopeid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.#ctor(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As ReadOnlySpan(Of Byte), scopeid As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IPAddress(ReadOnlySpan&lt;System::Byte&gt; address, long scopeid);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="scopeid" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="scopeid">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public long Address { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.Address" />
      <MemberSignature Language="VB.NET" Value="Public Property Address As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Address { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property has been deprecated. It is address family dependent. Please use IPAddress.Equals method to perform comparisons. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-130">Indirizzo IP (Internet Protocol).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-130">An Internet Protocol (IP) address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-131">Valore long dell'indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-131">The long value of the IP address.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-132">Questa proprietà è obsoleta.</span><span class="sxs-lookup"><span data-stu-id="e2bde-132">This property is obsolete.</span></span> <span data-ttu-id="e2bde-133">Usare <xref:System.Net.IPAddress.GetAddressBytes%2A>.</span><span class="sxs-lookup"><span data-stu-id="e2bde-133">Use <xref:System.Net.IPAddress.GetAddressBytes%2A>.</span></span>  
  
 <span data-ttu-id="e2bde-134">Per convertire <xref:System.Net.IPAddress.Address%2A> in notazione puntata, usare il <xref:System.Net.IPAddress.ToString%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e2bde-134">To convert <xref:System.Net.IPAddress.Address%2A> to dotted-quad notation, use the <xref:System.Net.IPAddress.ToString%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-135">L'esempio seguente usa il <xref:System.Net.IPAddress.Address%2A> parametro per recuperare l'indirizzo IP del <xref:System.Net.IPAddress> istanza.</span><span class="sxs-lookup"><span data-stu-id="e2bde-135">The following example uses the <xref:System.Net.IPAddress.Address%2A> parameter to retrieve the IP address of the <xref:System.Net.IPAddress> instance.</span></span>  
  
 [!code-cpp[IPAddress_Address_AddressFamily#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CPP/ipaddress_address_addressfamily.cpp#2)]
 [!code-csharp[IPAddress_Address_AddressFamily#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/CS/ipaddress_address_addressfamily.cs#2)]
 [!code-vb[IPAddress_Address_AddressFamily#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Address_AddressFamily/VB/ipaddress_address_addressfamily.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="e2bde-136">La famiglia di indirizzi è <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-136">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddressFamily">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.AddressFamily AddressFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.AddressFamily AddressFamily" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.AddressFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AddressFamily As AddressFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::AddressFamily AddressFamily { System::Net::Sockets::AddressFamily get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.AddressFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-137">Ottiene la famiglia di indirizzi dell'indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-137">Gets the address family of the IP address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-138">Restituisce l'enumerazione <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> per IPv4 o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> per IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-138">Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> for IPv6.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2bde-139">Fare riferimento all'esempio di <xref:System.Net.IPAddress> argomento relativo alla classe.</span><span class="sxs-lookup"><span data-stu-id="e2bde-139">Refer to the example in the <xref:System.Net.IPAddress> class topic.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-140">Fornisce un indirizzo IP che indica che il server deve attendere l'attività dei client su tutte le interfacce di rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-140">Provides an IP address that indicates that the server must listen for client activity on all network interfaces.</span>
          </span>
          <span data-ttu-id="e2bde-141">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-141">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-142">Il <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> metodo utilizza il <xref:System.Net.IPAddress.Any> campo per indicare che un <xref:System.Net.Sockets.Socket> istanza deve essere in ascolto per l'attività del client su tutte le interfacce di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-142">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.Any> field to indicate that a <xref:System.Net.Sockets.Socket> instance must listen for client activity on all network interfaces.</span></span>  
  
 <span data-ttu-id="e2bde-143">Il <xref:System.Net.IPAddress.Any> campo equivale a 0.0.0.0 nella notazione puntata.</span><span class="sxs-lookup"><span data-stu-id="e2bde-143">The <xref:System.Net.IPAddress.Any> field is equivalent to 0.0.0.0 in dotted-quad notation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Broadcast">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Broadcast;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Broadcast" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Broadcast" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Broadcast As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Broadcast;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-144">Fornisce l'indirizzo di broadcast IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-144">Provides the IP broadcast address.</span>
          </span>
          <span data-ttu-id="e2bde-145">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-145">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-146">Il <xref:System.Net.IPAddress.Broadcast> campo equivale a 255.255.255.255 nella notazione puntata.</span><span class="sxs-lookup"><span data-stu-id="e2bde-146">The <xref:System.Net.IPAddress.Broadcast> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-147">Nell'esempio seguente viene stampato il <xref:System.Net.IPAddress.Broadcast> indirizzo sulla console.</span><span class="sxs-lookup"><span data-stu-id="e2bde-147">The following example prints the <xref:System.Net.IPAddress.Broadcast> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#2)]
 [!code-csharp[IPAddress_Broadcast_Loopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#2)]
 [!code-vb[IPAddress_Broadcast_Loopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand">
          <span data-ttu-id="e2bde-148">Un'istanza di <see cref="T:System.Net.IPAddress" /> da confrontare con l'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-148">An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-149">Confronta due indirizzi IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-149">Compares two IP addresses.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-150">
            <see langword="true" /> se i due indirizzi sono uguali. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-150">
              <see langword="true" /> if the two addresses are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-151">Il <xref:System.Net.IPAddress.Equals%2A> metodo confronta corrente <xref:System.Net.IPAddress> istanza con il `comparand` parametro e restituisce `true` se le due istanze contengono lo stesso indirizzo IP.</span><span class="sxs-lookup"><span data-stu-id="e2bde-151">The <xref:System.Net.IPAddress.Equals%2A> method compares the current <xref:System.Net.IPAddress> instance with the `comparand` parameter and returns `true` if the two instances contain the same IP address.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-152">Fornisce una copia della classe <see cref="T:System.Net.IPAddress" /> come una matrice di byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-152">Provides a copy of the <see cref="T:System.Net.IPAddress" /> as an array of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-153">Matrice <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-153">A <see cref="T:System.Byte" /> array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e2bde-154">Esempio di codice seguente viene illustrato come ottenere l'indirizzo IP di un server in formato byte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-154">The following code example shows how to get a server IP address in byte format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#2)]
 [!code-csharp[System.Net.IPAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#2)]
 [!code-vb[System.Net.IPAddress#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-155">Restituisce un valore hash per un indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-155">Returns a hash value for an IP address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-156">Valore hash intero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-156">An integer hash value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-157">Il <xref:System.Net.IPAddress.GetHashCode%2A> metodo restituisce un codice hash dell'indirizzo IP.</span><span class="sxs-lookup"><span data-stu-id="e2bde-157">The <xref:System.Net.IPAddress.GetHashCode%2A> method returns a hash code of the IP address.</span></span> <span data-ttu-id="e2bde-158">Questo valore può essere utilizzato come chiave nelle tabelle hash.</span><span class="sxs-lookup"><span data-stu-id="e2bde-158">This value can be used as a key in hash tables.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HostToNetworkOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-159">Converte un valore dall'ordine dei byte dell'host a quello della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-159">Converts a value from host byte order to network byte order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static short HostToNetworkOrder (short host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 HostToNetworkOrder(int16 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short HostToNetworkOrder(short host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="e2bde-160">Il numero da convertire espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-160">The number to convert, expressed in host byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-161">Converte un valore short dall'ordine dei byte dell'host a quello della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-161">Converts a short value from host byte order to network byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-162">Un valore short espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-162">A short value, expressed in network byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-163">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-163">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-164">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-164">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-165">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-165">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-166">Il <xref:System.Net.IPAddress.HostToNetworkOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dall'host per l'ordine dei byte utilizzato dalla rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-166">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static int HostToNetworkOrder (int host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 HostToNetworkOrder(int32 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int HostToNetworkOrder(int host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="e2bde-167">Il numero da convertire espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-167">The number to convert, expressed in host byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-168">Converte un valore intero dall'ordine dei byte dell'host a quello della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-168">Converts an integer value from host byte order to network byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-169">Valore intero espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-169">An integer value, expressed in network byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-170">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-170">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-171">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-171">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-172">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-172">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-173">Il <xref:System.Net.IPAddress.HostToNetworkOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dall'host per l'ordine dei byte utilizzato dalla rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-173">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="HostToNetworkOrder">
      <MemberSignature Language="C#" Value="public static long HostToNetworkOrder (long host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 HostToNetworkOrder(int64 host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HostToNetworkOrder (host As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long HostToNetworkOrder(long host);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="host">
          <span data-ttu-id="e2bde-174">Il numero da convertire espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-174">The number to convert, expressed in host byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-175">Converte un valore long dall'ordine dei byte dell'host a quello della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-175">Converts a long value from host byte order to network byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-176">Un valore long espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-176">A long value, expressed in network byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-177">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-177">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-178">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-178">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-179">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-179">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-180">Il <xref:System.Net.IPAddress.HostToNetworkOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dall'host per l'ordine dei byte utilizzato dalla rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-180">The <xref:System.Net.IPAddress.HostToNetworkOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the host to the byte order used by the network.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="IPv6Any">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Any" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Any As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Any;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-181">Il metodo <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> utilizza il campo <see cref="F:System.Net.IPAddress.IPv6Any" /> per indicare che una classe <see cref="T:System.Net.Sockets.Socket" /> deve attendere l'attività dei client su tutte le interfacce di rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-181">The <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> method uses the <see cref="F:System.Net.IPAddress.IPv6Any" /> field to indicate that a <see cref="T:System.Net.Sockets.Socket" /> must listen for client activity on all network interfaces.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-182">Il <xref:System.Net.IPAddress.IPv6Any> è equivalente a 0:0:0:0:0:0:0:0 in notazione esadecimale con due punti, o al campo:: nella notazione compatta.</span><span class="sxs-lookup"><span data-stu-id="e2bde-182">The <xref:System.Net.IPAddress.IPv6Any> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to :: in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-183">Esempio di codice seguente consente di visualizzare il valore dell'oggetto corrente tutti gli indirizzi dell'host in formato compresso standard.</span><span class="sxs-lookup"><span data-stu-id="e2bde-183">The following code example displays the value of the current host's Any address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#2)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#2)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6Loopback;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-184">Fornisce l'indirizzo di loopback IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-184">Provides the IP loopback address.</span>
          </span>
          <span data-ttu-id="e2bde-185">Questa proprietà è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-185">This property is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-186">Il <xref:System.Net.IPAddress.IPv6Loopback> è equivalente a 0:0:0:0:0:0:0:1 in notazione esadecimale con due punti, o al campo:: 1 nella notazione compatta.</span><span class="sxs-lookup"><span data-stu-id="e2bde-186">The <xref:System.Net.IPAddress.IPv6Loopback> field is equivalent to 0:0:0:0:0:0:0:1 in colon-hexadecimal notation, or to ::1 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-187">Esempio di codice seguente consente di visualizzare il valore dell'indirizzo di loopback dell'host corrente in formato compresso standard.</span><span class="sxs-lookup"><span data-stu-id="e2bde-187">The following code example displays the value of the current host's loopback address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPv6None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress IPv6None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress IPv6None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.IPv6None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IPv6None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ IPv6None;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-188">Fornisce un indirizzo IP che indica che non deve essere utilizzata alcuna interfaccia di rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-188">Provides an IP address that indicates that no network interface should be used.</span>
          </span>
          <span data-ttu-id="e2bde-189">Questa proprietà è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-189">This property is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-190">Il <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> metodo utilizza il <xref:System.Net.IPAddress.IPv6None> campo per indicare che un <xref:System.Net.Sockets.Socket> non deve attendere l'attività del client.</span><span class="sxs-lookup"><span data-stu-id="e2bde-190">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.IPv6None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="e2bde-191">Il <xref:System.Net.IPAddress.IPv6None> è equivalente a 0:0:0:0:0:0:0:0 in notazione esadecimale con due punti, o al campo::/ 0 nella notazione compatta.</span><span class="sxs-lookup"><span data-stu-id="e2bde-191">The <xref:System.Net.IPAddress.IPv6None> field is equivalent to 0:0:0:0:0:0:0:0 in colon-hexadecimal notation, or to ::0 in compact notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-192">Esempio di codice seguente consente di visualizzare il valore corrente dell'host che indirizzo None in formato compresso standard.</span><span class="sxs-lookup"><span data-stu-id="e2bde-192">The following code example displays the value of the current host's None address in standard compressed format.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CPP/noneanyloopback.cpp#3)]
 [!code-csharp[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/CS/noneanyloopback.cs#3)]
 [!code-vb[System.Net.IPAddress.IPv6NoneAnyLoopback#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IPv6NoneAnyLoopback/VB/noneanyloopback.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv4MappedToIPv6">
      <MemberSignature Language="C#" Value="public bool IsIPv4MappedToIPv6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv4MappedToIPv6" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv4MappedToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv4MappedToIPv6 { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-193">Ottiene se l'indirizzo IP è di tipo IPv6 mappato IPv4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-193">Gets whether the IP address is an IPv4-mapped IPv6 address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-194">Restituisce <see cref="T:System.Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-194">Returns <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="e2bde-195">
            <see langword="true" /> se l'indirizzo IP è un indirizzo IPv6 mappato IPv4; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-195">
              <see langword="true" /> if the IP address is an IPv4-mapped IPv6 address; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-196">Socket dual stack richiedono sempre gli indirizzi IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-196">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="e2bde-197">La possibilità di interagire con un indirizzo IPv4 richiede l'utilizzo del formato di indirizzo IPv6 a IPv4 mappati.</span><span class="sxs-lookup"><span data-stu-id="e2bde-197">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="e2bde-198">Tutti gli indirizzi IPv4 devono essere rappresentati nel formato di indirizzo IPv4 mappati IPv6 che consente a un'applicazione sola IPv6 comunicare con un nodo IPv4.</span><span class="sxs-lookup"><span data-stu-id="e2bde-198">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="e2bde-199">Il formato dell'indirizzo IPv6 a IPv4 mappati consente l'indirizzo IPv4 di un nodo IPv4 per essere rappresentato come un indirizzo IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-199">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="e2bde-200">L'indirizzo IPv4 viene codificato in 32 bit meno significativi dell'indirizzo IPv6 e significativi 96 contenere 0:0:0:0:0:FFFF il prefisso predefinito.</span><span class="sxs-lookup"><span data-stu-id="e2bde-200">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="e2bde-201">Il formato dell'indirizzo IPv6 a IPv4 mappati è specificato nella RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="e2bde-201">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="e2bde-202">Per ulteriori informazioni, vedere [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="e2bde-202">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6LinkLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6LinkLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6LinkLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6LinkLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6LinkLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6LinkLocal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-203">Ottiene se l'indirizzo è di tipo link-local IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-203">Gets whether the address is an IPv6 link local address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-204">
            <see langword="true" /> se l'indirizzo è di tipo link-local IPv6; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-204">
              <see langword="true" /> if the IP address is an IPv6 link local address; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Multicast">
      <MemberSignature Language="C#" Value="public bool IsIPv6Multicast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Multicast" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Multicast" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Multicast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Multicast { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-205">Ottiene se l'indirizzo è di tipo multicast globale IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-205">Gets whether the address is an IPv6 multicast global address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-206">
            <see langword="true" /> se l'indirizzo è di tipo multicast globale IPv6; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-206">
              <see langword="true" /> if the IP address is an IPv6 multicast global address; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6SiteLocal">
      <MemberSignature Language="C#" Value="public bool IsIPv6SiteLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6SiteLocal" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6SiteLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6SiteLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6SiteLocal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-207">Ottiene se l'indirizzo è di tipo site-local IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-207">Gets whether the address is an IPv6 site local address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-208">
            <see langword="true" /> se l'indirizzo è di tipo site-local IPv6; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-208">
              <see langword="true" /> if the IP address is an IPv6 site local address; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIPv6Teredo">
      <MemberSignature Language="C#" Value="public bool IsIPv6Teredo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIPv6Teredo" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.IsIPv6Teredo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIPv6Teredo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIPv6Teredo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-209">Ottiene un valore che indica se l'indirizzo è di tipo Teredo IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-209">Gets whether the address is an IPv6 Teredo address.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-210">
            <see langword="true" /> se l'indirizzo IP è di tipo Teredo IPv6. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-210">
              <see langword="true" /> if the IP address is an IPv6 Teredo address; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-211">Un indirizzo Teredo è un indirizzo IPv6 con il prefisso 2001::/ / 32.</span><span class="sxs-lookup"><span data-stu-id="e2bde-211">A Teredo address is an IPv6 address with the prefix of 2001::/32.</span></span> <span data-ttu-id="e2bde-212">Gli indirizzi Teredo possono essere restituiti tramite normale risoluzione dei nomi DNS o enumerati come un indirizzo IPv6 assegnato a un'interfaccia locale.</span><span class="sxs-lookup"><span data-stu-id="e2bde-212">Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)" />
        <altmember cref="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsLoopback">
      <MemberSignature Language="C#" Value="public static bool IsLoopback (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLoopback(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLoopback (address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLoopback(System::Net::IPAddress ^ address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">
          <span data-ttu-id="e2bde-213">Indirizzo IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-213">An IP address.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-214">Indica se l'indirizzo IP specificato è quello di loopback.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-214">Indicates whether the specified IP address is the loopback address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-215">
            <see langword="true" /> se <paramref name="address" /> è l'indirizzo di loopback. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-215">
              <see langword="true" /> if <paramref name="address" /> is the loopback address; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-216">Il <xref:System.Net.IPAddress.IsLoopback%2A> metodo confronta `address` a <xref:System.Net.IPAddress.Loopback> e restituisce `true` se i due indirizzi IP sono uguali.</span><span class="sxs-lookup"><span data-stu-id="e2bde-216">The <xref:System.Net.IPAddress.IsLoopback%2A> method compares `address` to <xref:System.Net.IPAddress.Loopback> and returns `true` if the two IP addresses are the same.</span></span>  
  
 <span data-ttu-id="e2bde-217">Nel caso di IPv4, che il <xref:System.Net.IPAddress.IsLoopback%2A> restituisce `true` per tutti gli indirizzi IP nel formato 127. x.y. z (in cui X, Y e Z sono nell'intervallo 0-255), non solo <xref:System.Net.IPAddress.Loopback> (127.0.0.1).</span><span class="sxs-lookup"><span data-stu-id="e2bde-217">In the case of IPv4, that the <xref:System.Net.IPAddress.IsLoopback%2A> method returns `true` for any IP address of the form 127.X.Y.Z (where X, Y, and Z are in the range 0-255), not just <xref:System.Net.IPAddress.Loopback> (127.0.0.1).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-218">Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Net.IPAddress.IsLoopback%2A> metodo per determinare se l'indirizzo specificato è un indirizzo di loopback.</span><span class="sxs-lookup"><span data-stu-id="e2bde-218">The following code example uses the <xref:System.Net.IPAddress.IsLoopback%2A> method to determine whether the specified address is a loopback address.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CPP/isloopback.cpp#1)]
 [!code-csharp[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/CS/isloopback.cs#1)]
 [!code-vb[System.Net.IPAddress.IsLoopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.IsLoopback/VB/isloopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loopback">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress Loopback;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress Loopback" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.Loopback" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Loopback As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ Loopback;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-219">Fornisce l'indirizzo di loopback IP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-219">Provides the IP loopback address.</span>
          </span>
          <span data-ttu-id="e2bde-220">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-220">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-221">Il <xref:System.Net.IPAddress.Loopback> campo equivale a 127.0.0.1 nella notazione puntata.</span><span class="sxs-lookup"><span data-stu-id="e2bde-221">The <xref:System.Net.IPAddress.Loopback> field is equivalent to 127.0.0.1 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-222">Nell'esempio seguente viene stampato il <xref:System.Net.IPAddress.Loopback> indirizzo sulla console.</span><span class="sxs-lookup"><span data-stu-id="e2bde-222">The following example prints the <xref:System.Net.IPAddress.Loopback> address to the console.</span></span>  
  
 [!code-cpp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CPP/ipaddress_broadcast_loopback.cpp#1)]
 [!code-csharp[IPAddress_Broadcast_Loopback#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/CS/ipaddress_broadcast_loopback.cs#1)]
 [!code-vb[IPAddress_Broadcast_Loopback#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_Broadcast_Loopback/VB/ipaddress_broadcast_loopback.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv4">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv4 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv4() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv4" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv4 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv4();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-223">Esegue il mapping dell'oggetto <see cref="T:System.Net.IPAddress" /> a un indirizzo IPv4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-223">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv4 address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-224">Restituisce <see cref="T:System.Net.IPAddress" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-224">Returns <see cref="T:System.Net.IPAddress" />.</span>
          </span>
          <span data-ttu-id="e2bde-225">Indirizzo IPv4.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-225">An IPv4 address.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-226">Socket dual stack richiedono sempre gli indirizzi IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-226">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="e2bde-227">La possibilità di interagire con un indirizzo IPv4 richiede l'utilizzo del formato di indirizzo IPv6 a IPv4 mappati.</span><span class="sxs-lookup"><span data-stu-id="e2bde-227">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="e2bde-228">Tutti gli indirizzi IPv4 devono essere rappresentati nel formato di indirizzo IPv4 mappati IPv6 che consente a un'applicazione sola IPv6 comunicare con un nodo IPv4.</span><span class="sxs-lookup"><span data-stu-id="e2bde-228">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="e2bde-229">Il formato dell'indirizzo IPv6 a IPv4 mappati consente l'indirizzo IPv4 di un nodo IPv4 per essere rappresentato come un indirizzo IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-229">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="e2bde-230">L'indirizzo IPv4 viene codificato in 32 bit meno significativi dell'indirizzo IPv6 e significativi 96 contenere 0:0:0:0:0:FFFF il prefisso predefinito.</span><span class="sxs-lookup"><span data-stu-id="e2bde-230">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="e2bde-231">Il formato dell'indirizzo IPv6 a IPv4 mappati è specificato nella RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="e2bde-231">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="e2bde-232">Per ulteriori informazioni, vedere [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="e2bde-232">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 <span data-ttu-id="e2bde-233">Se si desidera utilizzare <xref:System.Net.IPAddress.MapToIPv4%2A> per convertire un indirizzo IPv4 dal formato IPv6 in formato IPv4, è necessario assicurarsi innanzitutto che hai un indirizzo IPv4.</span><span class="sxs-lookup"><span data-stu-id="e2bde-233">If you want to use <xref:System.Net.IPAddress.MapToIPv4%2A> to convert an IPv4 address from IPv6 format to IPv4 format, you must first ensure that you've got an IPv4 address.</span></span> <span data-ttu-id="e2bde-234">Chiamare <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, che restituirà `true` se l'indirizzo IP è originariamente IPv4 scritto come IPv6, o `false` in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="e2bde-234">Call <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A>, which will return `true` if the IP address is originally IPv4 written as IPv6, or `false` otherwise.</span></span> <span data-ttu-id="e2bde-235">Se <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> restituisce `true`, utilizzare <xref:System.Net.IPAddress.MapToIPv4%2A> per la conversione.</span><span class="sxs-lookup"><span data-stu-id="e2bde-235">If <xref:System.Net.IPAddress.IsIPv4MappedToIPv6%2A> returns `true`, use <xref:System.Net.IPAddress.MapToIPv4%2A> to make the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapToIPv6">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress MapToIPv6 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.IPAddress MapToIPv6() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.MapToIPv6" />
      <MemberSignature Language="VB.NET" Value="Public Function MapToIPv6 () As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::IPAddress ^ MapToIPv6();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-236">Esegue il mapping dell'oggetto <see cref="T:System.Net.IPAddress" /> a un indirizzo IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-236">Maps the <see cref="T:System.Net.IPAddress" /> object to an IPv6 address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-237">Restituisce <see cref="T:System.Net.IPAddress" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-237">Returns <see cref="T:System.Net.IPAddress" />.</span>
          </span>
          <span data-ttu-id="e2bde-238">Indirizzo IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-238">An IPv6 address.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-239">Socket dual stack richiedono sempre gli indirizzi IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-239">Dual-stack sockets always require IPv6 addresses.</span></span> <span data-ttu-id="e2bde-240">La possibilità di interagire con un indirizzo IPv4 richiede l'utilizzo del formato di indirizzo IPv6 a IPv4 mappati.</span><span class="sxs-lookup"><span data-stu-id="e2bde-240">The ability to interact with an IPv4 address requires the use of the IPv4-mapped IPv6 address format.</span></span> <span data-ttu-id="e2bde-241">Tutti gli indirizzi IPv4 devono essere rappresentati nel formato di indirizzo IPv4 mappati IPv6 che consente a un'applicazione sola IPv6 comunicare con un nodo IPv4.</span><span class="sxs-lookup"><span data-stu-id="e2bde-241">Any IPv4 addresses must be represented in the IPv4-mapped IPv6 address format which enables an IPv6 only application to communicate with an IPv4 node.</span></span> <span data-ttu-id="e2bde-242">Il formato dell'indirizzo IPv6 a IPv4 mappati consente l'indirizzo IPv4 di un nodo IPv4 per essere rappresentato come un indirizzo IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-242">The IPv4-mapped IPv6 address format allows the IPv4 address of an IPv4 node to be represented as an IPv6 address.</span></span> <span data-ttu-id="e2bde-243">L'indirizzo IPv4 viene codificato in 32 bit meno significativi dell'indirizzo IPv6 e significativi 96 contenere 0:0:0:0:0:FFFF il prefisso predefinito.</span><span class="sxs-lookup"><span data-stu-id="e2bde-243">The IPv4 address is encoded into the low-order 32 bits of the IPv6 address, and the high-order 96 bits hold the fixed prefix 0:0:0:0:0:FFFF.</span></span> <span data-ttu-id="e2bde-244">Il formato dell'indirizzo IPv6 a IPv4 mappati è specificato nella RFC 4291.</span><span class="sxs-lookup"><span data-stu-id="e2bde-244">The IPv4-mapped IPv6 address format is specified in RFC 4291.</span></span> <span data-ttu-id="e2bde-245">Per ulteriori informazioni, vedere [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span><span class="sxs-lookup"><span data-stu-id="e2bde-245">For more information, see [www.ietf.org/rfc/rfc4291.txt](http://go.microsoft.com/fwlink/?LinkID=92231).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NetworkToHostOrder">
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-246">Converte un numero dall'ordine dei byte della rete a quello dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-246">Converts a number from network byte order to host byte order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static short NetworkToHostOrder (short network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 NetworkToHostOrder(int16 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short NetworkToHostOrder(short network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="network">
          <span data-ttu-id="e2bde-247">Il numero da convertire espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-247">The number to convert, expressed in network byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-248">Converte un valore short dall'ordine dei byte della rete a quello dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-248">Converts a short value from network byte order to host byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-249">Un valore short espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-249">A short value, expressed in host byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-250">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-250">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-251">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-251">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-252">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-252">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-253">Il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dalla rete per l'ordine dei byte utilizzato dall'host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-253">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-254">L'esempio seguente usa il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo per convertire un valore short dall'ordine dei byte di rete in ordine di byte di host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-254">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a short value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#1)]
 [!code-csharp[IPAddress_NetworkToHost#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#1)]
 [!code-vb[IPAddress_NetworkToHost#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static int NetworkToHostOrder (int network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NetworkToHostOrder(int32 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int NetworkToHostOrder(int network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="network">
          <span data-ttu-id="e2bde-255">Il numero da convertire espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-255">The number to convert, expressed in network byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-256">Converte un valore intero dall'ordine dei byte della rete a quello dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-256">Converts an integer value from network byte order to host byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-257">Valore intero espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-257">An integer value, expressed in host byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-258">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-258">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-259">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-259">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-260">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-260">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-261">Il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dalla rete per l'ordine dei byte utilizzato dall'host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-261">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-262">L'esempio seguente usa il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo per convertire un valore intero dall'ordine dei byte di rete in ordine di byte di host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-262">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert an integer value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#2](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#2)]
 [!code-csharp[IPAddress_NetworkToHost#2](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#2)]
 [!code-vb[IPAddress_NetworkToHost#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="NetworkToHostOrder">
      <MemberSignature Language="C#" Value="public static long NetworkToHostOrder (long network);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 NetworkToHostOrder(int64 network) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkToHostOrder (network As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long NetworkToHostOrder(long network);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="network" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="network">
          <span data-ttu-id="e2bde-263">Il numero da convertire espresso nell'ordine dei byte della rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-263">The number to convert, expressed in network byte order.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-264">Converte un valore long dall'ordine dei byte della rete a quello dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-264">Converts a long value from network byte order to host byte order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-265">Un valore long espresso nell'ordine dei byte dell'host.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-265">A long value, expressed in host byte order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-266">Computer diversi utilizzano convenzioni diverse per l'ordinamento dei byte all'interno di valori integer multibyte.</span><span class="sxs-lookup"><span data-stu-id="e2bde-266">Different computers use different conventions for ordering the bytes within multibyte integer values.</span></span> <span data-ttu-id="e2bde-267">Alcuni computer, inserire innanzitutto il byte più significativo (noti come ordine big-endian) e ad altri utenti, inserire innanzitutto il byte meno significativo (noto come ordine little-endian).</span><span class="sxs-lookup"><span data-stu-id="e2bde-267">Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</span></span> <span data-ttu-id="e2bde-268">Per lavorare con i computer che usano l'ordine dei byte diversi, tutti i valori integer che vengono inviati in rete vengono inviati in ordine di byte di rete con il byte più significativo al primo posto.</span><span class="sxs-lookup"><span data-stu-id="e2bde-268">To work with computers that use different byte ordering, all integer values that are sent over the network are sent in network byte order which has the most significant byte first.</span></span>  
  
 <span data-ttu-id="e2bde-269">Il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo converte i valori integer multibyte che vengono archiviati nel sistema host dall'ordine dei byte utilizzato dalla rete per l'ordine dei byte utilizzato dall'host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-269">The <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method converts multibyte integer values that are stored on the host system from the byte order used by the network to the byte order used by the host.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-270">L'esempio seguente usa il <xref:System.Net.IPAddress.NetworkToHostOrder%2A> metodo per convertire un valore long dall'ordine dei byte di rete in ordine di byte di host.</span><span class="sxs-lookup"><span data-stu-id="e2bde-270">The following example uses the <xref:System.Net.IPAddress.NetworkToHostOrder%2A> method to convert a long value from network byte order to host byte order.</span></span>  
  
 [!code-cpp[IPAddress_NetworkToHost#3](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CPP/ipaddress_networktohost.cpp#3)]
 [!code-csharp[IPAddress_NetworkToHost#3](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_NetworkToHost/CS/ipaddress_networktohost.cs#3)]
 [!code-vb[IPAddress_NetworkToHost#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_NetworkToHost/VB/ipaddress_networktohost.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.IPAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.IPAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.IPAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As IPAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::IPAddress ^ None;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-271">Fornisce un indirizzo IP che indica che non deve essere utilizzata alcuna interfaccia di rete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-271">Provides an IP address that indicates that no network interface should be used.</span>
          </span>
          <span data-ttu-id="e2bde-272">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-272">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-273">Il <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> metodo utilizza il <xref:System.Net.IPAddress.None> campo per indicare che un <xref:System.Net.Sockets.Socket> non deve attendere l'attività del client.</span><span class="sxs-lookup"><span data-stu-id="e2bde-273">The <xref:System.Net.Sockets.Socket.Bind%2A?displayProperty=nameWithType> method uses the <xref:System.Net.IPAddress.None> field to indicate that a <xref:System.Net.Sockets.Socket> must not listen for client activity.</span></span> <span data-ttu-id="e2bde-274">Il <xref:System.Net.IPAddress.None> campo equivale a 255.255.255.255 nella notazione puntata.</span><span class="sxs-lookup"><span data-stu-id="e2bde-274">The <xref:System.Net.IPAddress.None> field is equivalent to 255.255.255.255 in dotted-quad notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-275">L'esempio seguente usa il <xref:System.Net.IPAddress.None> proprietà per indicare che non deve essere utilizzata alcuna interfaccia di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-275">The following example uses the <xref:System.Net.IPAddress.None> property to indicate that no network interface should be used.</span></span>  
  
 [!code-cpp[IPAddress_None#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IPAddress_None/CPP/ipaddress_none.cpp#1)]
 [!code-csharp[IPAddress_None#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IPAddress_None/CS/ipaddress_none.cs#1)]
 [!code-vb[IPAddress_None#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IPAddress_None/VB/ipaddress_none.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As ReadOnlySpan(Of Char)) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(ReadOnlySpan&lt;char&gt; ipString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="ipString">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.IPAddress Parse (string ipString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.IPAddress Parse(string ipString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (ipString As String) As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::IPAddress ^ Parse(System::String ^ ipString);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ipString">
          <span data-ttu-id="e2bde-276">Stringa contenente un indirizzo IP nella notazione a quattro numeri separati da punti per IPv4 e nella notazione a cifre esadecimali separate da due punti per IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-276">A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-277">Converte una stringa di indirizzi IP in un'istanza di <see cref="T:System.Net.IPAddress" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-277">Converts an IP address string to an <see cref="T:System.Net.IPAddress" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-278">Istanza di <see cref="T:System.Net.IPAddress" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-278">An <see cref="T:System.Net.IPAddress" /> instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-279">Il metodo statico <xref:System.Net.IPAddress.Parse%2A> metodo crea un <xref:System.Net.IPAddress> istanza da un indirizzo IP espresso nella notazione puntata per IPv4 e nella notazione esadecimale con due punti per IPv6.</span><span class="sxs-lookup"><span data-stu-id="e2bde-279">The static <xref:System.Net.IPAddress.Parse%2A> method creates an <xref:System.Net.IPAddress> instance from an IP address expressed in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.</span></span>  
  
 <span data-ttu-id="e2bde-280">Il numero di parti (ogni parte è separata da un punto) in `ipString` determina come viene costruito l'indirizzo IP.</span><span class="sxs-lookup"><span data-stu-id="e2bde-280">The number of parts (each part is separated by a period) in `ipString` determines how the IP address is constructed.</span></span> <span data-ttu-id="e2bde-281">Un indirizzo di una parte verrà archiviato direttamente nell'indirizzo di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-281">A one part address is stored directly in the network address.</span></span> <span data-ttu-id="e2bde-282">Un indirizzo di due parti, utile per specificare un indirizzo di classe, inserisce la parte iniziale del primo byte e la parte finale nei tre byte più a destra dell'indirizzo di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-282">A two part address, convenient for specifying a class A address, puts the leading part in the first byte and the trailing part in the right-most three bytes of the network address.</span></span> <span data-ttu-id="e2bde-283">Un indirizzo di tre parti, utile per specificare un indirizzo di classe B, inserisce la prima parte del primo byte, la seconda parte del secondo byte e la parte finale nei due byte più a destra dell'indirizzo di rete.</span><span class="sxs-lookup"><span data-stu-id="e2bde-283">A three part address, convenient for specifying a class B address, puts the first part in the first byte, the second part in the second byte, and the final part in the right-most two bytes of the network address.</span></span> <span data-ttu-id="e2bde-284">Ad esempio:</span><span class="sxs-lookup"><span data-stu-id="e2bde-284">For example:</span></span>  
  
|<span data-ttu-id="e2bde-285">Numero di parti ed esempio `ipString`</span><span class="sxs-lookup"><span data-stu-id="e2bde-285">Number of parts and example `ipString`</span></span>|<span data-ttu-id="e2bde-286">Indirizzo IPv4 per IPAddress</span><span class="sxs-lookup"><span data-stu-id="e2bde-286">IPv4 address for IPAddress</span></span>|  
|--------------------------------------------|--------------------------------|  
|<span data-ttu-id="e2bde-287">1 -- "65535"</span><span class="sxs-lookup"><span data-stu-id="e2bde-287">1 -- "65535"</span></span>|<span data-ttu-id="e2bde-288">0.0.255.255</span><span class="sxs-lookup"><span data-stu-id="e2bde-288">0.0.255.255</span></span>|  
|<span data-ttu-id="e2bde-289">2 -- "20.2"</span><span class="sxs-lookup"><span data-stu-id="e2bde-289">2 -- "20.2"</span></span>|<span data-ttu-id="e2bde-290">20.0.0.2</span><span class="sxs-lookup"><span data-stu-id="e2bde-290">20.0.0.2</span></span>|  
|<span data-ttu-id="e2bde-291">2 -- "20.65535"</span><span class="sxs-lookup"><span data-stu-id="e2bde-291">2 -- "20.65535"</span></span>|<span data-ttu-id="e2bde-292">20.0.255.255</span><span class="sxs-lookup"><span data-stu-id="e2bde-292">20.0.255.255</span></span>|  
|<span data-ttu-id="e2bde-293">3 -- "128.1.2"</span><span class="sxs-lookup"><span data-stu-id="e2bde-293">3 -- "128.1.2"</span></span>|<span data-ttu-id="e2bde-294">128.1.0.2</span><span class="sxs-lookup"><span data-stu-id="e2bde-294">128.1.0.2</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="e2bde-295">Il codice seguente converte una stringa che contiene un indirizzo IP, nella notazione puntata di IPv4 o nella notazione esadecimale con due punti per IPv6, in un'istanza di <xref:System.Net.IPAddress> classe.</span><span class="sxs-lookup"><span data-stu-id="e2bde-295">The following code converts a string that contains an IP address, in dotted-quad notation for IPv4 or in colon-hexadecimal notation for IPv6, into an instance of the <xref:System.Net.IPAddress> class.</span></span> <span data-ttu-id="e2bde-296">Quindi, viene utilizzato il metodo di overload <xref:System.Net.IPAddress.ToString%2A> metodo per visualizzare l'indirizzo nella notazione standard.</span><span class="sxs-lookup"><span data-stu-id="e2bde-296">Then it uses the overloaded <xref:System.Net.IPAddress.ToString%2A> method to display the address in standard notation.</span></span>  
  
 [!code-cpp[System.Net.IPAddress.Parse#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CPP/parse.cpp#1)]
 [!code-csharp[System.Net.IPAddress.Parse#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress.Parse/CS/parse.cs#1)]
 [!code-vb[System.Net.IPAddress.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress.Parse/VB/parse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2bde-297">
            <paramref name="ipString" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-297">
              <paramref name="ipString" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e2bde-298">
            <paramref name="ipString" /> non è un indirizzo IP valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-298">
              <paramref name="ipString" /> is not a valid IP address.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ScopeId">
      <MemberSignature Language="C#" Value="public long ScopeId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ScopeId" />
      <MemberSignature Language="DocId" Value="P:System.Net.IPAddress.ScopeId" />
      <MemberSignature Language="VB.NET" Value="Public Property ScopeId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ScopeId { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-299">Ottiene o imposta l'identificatore di ambito dell'indirizzo IPv6.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-299">Gets or sets the IPv6 address scope identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e2bde-300">Valore long integer che specifica l’ambito dell'indirizzo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-300">A long integer that specifies the scope of the address.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-301">Il significato di <xref:System.Net.IPAddress.ScopeId%2A> modifiche a seconda del contesto in cui viene utilizzato.</span><span class="sxs-lookup"><span data-stu-id="e2bde-301">The meaning of <xref:System.Net.IPAddress.ScopeId%2A> changes depending on the context in which it is used.</span></span>  
  
-   <span data-ttu-id="e2bde-302">Indirizzo locale rispetto al collegamento.</span><span class="sxs-lookup"><span data-stu-id="e2bde-302">Link-local address.</span></span> <span data-ttu-id="e2bde-303">In un host con più interfacce connesse a collegamenti separati, è possibile assegnare lo stesso indirizzo di collegamento locale a più interfacce.</span><span class="sxs-lookup"><span data-stu-id="e2bde-303">On a host with multiple interfaces connected to separate links, the same link-local address can be assigned to multiple interfaces.</span></span> <span data-ttu-id="e2bde-304">Per eliminare questa ambiguità, un identificatore di ambito viene utilizzato per specificare l'interfaccia in cui i messaggi vengono scambiati.</span><span class="sxs-lookup"><span data-stu-id="e2bde-304">To eliminate this ambiguity, a scope identifier is used to specify the interface over which messages are exchanged.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2bde-305">Indirizzi di collegamento locale, identificati da FE80 il prefisso FP (Format), vengono utilizzati dai nodi durante la comunicazione con i nodi adiacenti nello stesso collegamento.</span><span class="sxs-lookup"><span data-stu-id="e2bde-305">Link-local addresses, identified by the Format Prefix (FP) FE80, are used by nodes when communicating with neighboring nodes on the same link.</span></span>  
  
-   <span data-ttu-id="e2bde-306">Indirizzi locali del sito.</span><span class="sxs-lookup"><span data-stu-id="e2bde-306">Site-local addresses.</span></span> <span data-ttu-id="e2bde-307">Un host può essere connesso a più siti.</span><span class="sxs-lookup"><span data-stu-id="e2bde-307">A host can be connected to multiple sites.</span></span> <span data-ttu-id="e2bde-308">In questo caso, è possibile indicare un sito specifico di comunicare con un identificatore di ambito.</span><span class="sxs-lookup"><span data-stu-id="e2bde-308">In this case, a scope identifier is used to indicate a specific site to communicate with.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e2bde-309">Indirizzi di sito locale, identificati da FEC0 il prefisso FP (Format), vengono usati da nodi durante la comunicazione su reti Intranet private.</span><span class="sxs-lookup"><span data-stu-id="e2bde-309">Site-local addresses, identified by the Format Prefix (FP) FEC0, are used by nodes when communicating on private intranets.</span></span>  
  
 <span data-ttu-id="e2bde-310">La notazione che consente di specificare il `ScopeId` con un indirizzo è `Address%ScopeId`.</span><span class="sxs-lookup"><span data-stu-id="e2bde-310">The notation that is used to specify the `ScopeId` with an address is `Address%ScopeId`.</span></span> <span data-ttu-id="e2bde-311">Ad esempio, `FE80::5EFE:192.168.41.30%2.`.</span><span class="sxs-lookup"><span data-stu-id="e2bde-311">For example, `FE80::5EFE:192.168.41.30%2.`</span></span>  
  
   
  
## Examples  
 [!code-cpp[System.Net.IPAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.IPAddress/CPP/ipaddress.cpp#3)]
 [!code-csharp[System.Net.IPAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.IPAddress/CS/ipaddress.cs#3)]
 [!code-vb[System.Net.IPAddress#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.IPAddress/VB/ipaddress.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="e2bde-312">
            <see langword="AddressFamily" /> = <see langword="InterNetwork" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-312">
              <see langword="AddressFamily" /> = <see langword="InterNetwork" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e2bde-313">
            <paramref name="scopeId" /> &lt; 0</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-313">
              <paramref name="scopeId" /> &lt; 0</span>
          </span>
          <span data-ttu-id="e2bde-314">\- oppure -</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-314">\- or -</span>
          </span>  
  
-   <span data-ttu-id="e2bde-315"><paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF</span><span class="sxs-lookup"><span data-stu-id="e2bde-315"><paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2bde-316">Converte un indirizzo Internet nella relativa notazione standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-316">Converts an Internet address to its standard notation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-317">Stringa contenente un indirizzo IP espresso nella notazione IPv4 a quattro numeri separati da punti e nella notazione IPv6 a cifre esadecimali separate da due punti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-317">A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-318">Il <xref:System.Net.IPAddress.ToString%2A> metodo converte l'indirizzo IP che viene archiviato nel <xref:System.Net.IPAddress.Address%2A> proprietà puntata quad IPv4 o IPv6 nella notazione esadecimale.</span><span class="sxs-lookup"><span data-stu-id="e2bde-318">The <xref:System.Net.IPAddress.ToString%2A> method converts the IP address that is stored in the <xref:System.Net.IPAddress.Address%2A> property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">
          <span data-ttu-id="e2bde-319">La famiglia degli indirizzi è <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> e l'indirizzo non è corretto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-319">The address family is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> and the address is bad.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryFormat(System.Span{System.Char},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryFormat(Span&lt;char&gt; destination, [Runtime::InteropServices::Out] int % charsWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.ReadOnlySpan{System.Char},System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As ReadOnlySpan(Of Char), ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="address" Type="System.Net.IPAddress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ipString">To be added.</param>
        <param name="address">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string ipString, out System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string ipString, [out] class System.Net.IPAddress&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (ipString As String, ByRef address As IPAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ ipString, [Runtime::InteropServices::Out] System::Net::IPAddress ^ % address);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipString" Type="System.String" />
        <Parameter Name="address" Type="System.Net.IPAddress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ipString">
          <span data-ttu-id="e2bde-320">Stringa da convalidare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-320">The string to validate.</span>
          </span>
        </param>
        <param name="address">
          <span data-ttu-id="e2bde-321">Versione <see cref="T:System.Net.IPAddress" /> della stringa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-321">The <see cref="T:System.Net.IPAddress" /> version of the string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2bde-322">Determina se una stringa è un indirizzo IP valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-322">Determines whether a string is a valid IP address.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2bde-323">
            <see langword="true" /> se <paramref name="ipString" /> è stato analizzato come indirizzo IP; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2bde-323">
              <see langword="true" /> if <paramref name="ipString" /> was able to be parsed as an IP address; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2bde-324">Si noti che questo metodo accetta come un ipString valido che può essere analizzato come un <xref:System.Int64>e tale Int64 verranno trattate come valore long dell'indirizzo IP nell'ordine dei byte di rete, allo stesso modo che il <xref:System.Net.IPAddress.%23ctor%2A> costruttore non.</span><span class="sxs-lookup"><span data-stu-id="e2bde-324">Note that this method accepts as valid an ipString value that can be parsed as an <xref:System.Int64>, and then treats that Int64 as the long value of an IP address in network byte order, similar to the way that the <xref:System.Net.IPAddress.%23ctor%2A> constructor does.</span></span> <span data-ttu-id="e2bde-325">Ciò significa che questo metodo restituisce true se il valore Int64 viene analizzato correttamente, anche se rappresenta un indirizzo che non è un indirizzo IP valido.</span><span class="sxs-lookup"><span data-stu-id="e2bde-325">This means that this method returns true if the Int64 is parsed successfully, even if it represents an address that's not a valid IP address.</span></span> <span data-ttu-id="e2bde-326">Ad esempio, se ipString è "1", questo metodo restituisce true anche se "1" (o 0.0.0.1) non è un indirizzo IP valido e si potrebbe pensare che questo metodo restituirà false.</span><span class="sxs-lookup"><span data-stu-id="e2bde-326">For example, if ipString is "1", this method returns true even though "1" (or 0.0.0.1) is not a valid IP address and you might expect this method to return false.</span></span> <span data-ttu-id="e2bde-327">Correzione di bug causa l'interruzione App esistenti, in modo non verrà modificato il comportamento corrente.</span><span class="sxs-lookup"><span data-stu-id="e2bde-327">Fixing this bug would break existing apps, so the current behavior will not be changed.</span></span> <span data-ttu-id="e2bde-328">Il codice è possibile evitare questo problema, verificare che solo Usa questo metodo per analizzare gli indirizzi IP in formato decimale.</span><span class="sxs-lookup"><span data-stu-id="e2bde-328">Your code can avoid this behavior by ensuring that it only uses this method to parse IP addresses in dotted-decimal format.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryWriteBytes">
      <MemberSignature Language="C#" Value="public bool TryWriteBytes (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryWriteBytes(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.IPAddress.TryWriteBytes(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryWriteBytes (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryWriteBytes(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Primitives</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>