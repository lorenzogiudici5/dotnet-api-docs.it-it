<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="437366316ce58bcfea56939a19c7db1f254780e9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30609155" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AspNetWebSocket&#xA;Inherits WebSocket" />
  <TypeSignature Language="C++ CLI" Value="public ref class AspNetWebSocket sealed : System::Net::WebSockets::WebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta una connessione full duplex in tempo reale tra un server Web e un client in un'applicazione ASP.NET.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Annulla tutte le operazioni di I/O in sospeso nell'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> e imposta lo stato dell'oggetto in modo che non possa essere usato per avviare altre operazioni di I/O.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo il <xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A> chiamata al metodo, è comunque possibile accedere proprietà e metodi che non riguardano le operazioni dei / o.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Codice di stato dell'operazione di chiusura.</param>
        <param name="statusDescription">Messaggio di stato dell'operazione di chiusura.</param>
        <param name="cancellationToken">Oggetto che annulla un'operazione in sospeso.</param>
        <summary>Invia un messaggio asincrono a un client per chiudere la connessione. Se il server avvia la richiesta di chiusura della connessione, il metodo rimane in attesa che il client riconosca la richiesta prima di restituire un risultato.</summary>
        <returns>Riferimento all'operazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> e <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metodi per le richieste avviate dal server sia avviato dal client chiudere un <xref:System.Web.WebSockets.AspNetWebSocket> connessione. I due metodi gestiscono le richieste avviate dal client nello stesso modo: dopo il client invia un messaggio al server per la chiusura della connessione, il server chiama uno di questi metodi e invia un messaggio di conferma al client e il metodo restituisce.  
  
 Per le richieste avviate dal server, i due metodi funzionano in modo diverso. Il <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> metodo invia un messaggio al client per chiudere la connessione, attende una risposta e quindi restituisce. Il server non attende che i dati aggiuntivi inviati dal client. Al contrario, il <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metodo invia un messaggio al client per chiudere la connessione e restituisce senza attendere una risposta. Dopo il metodo restituisce un risultato, è possibile chiamare il <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> metodo e gestire dati aggiuntivi o il riconoscimento inviato dal client.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> è già stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> si trova in uno stato interrotto.  
  
 oppure  
  
 Operazioni di invio non disponibili.  
  
 oppure  
  
 Operazioni di ricezione non disponibili.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ CloseOutputAsync(System::Net::WebSockets::WebSocketCloseStatus closeStatus, System::String ^ statusDescription, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">Codice di stato dell'operazione di chiusura.</param>
        <param name="statusDescription">Messaggio di stato dell'operazione di chiusura.</param>
        <param name="cancellationToken">Oggetto che annulla un'operazione in sospeso.</param>
        <summary>Invia un messaggio asincrono a un client per chiudere la connessione. Se il server avvia la richiesta di chiusura della connessione, il metodo restituisce un risultato senza attendere una risposta.</summary>
        <returns>Riferimento all'operazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> e <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metodi per le richieste avviate dal server sia avviato dal client chiudere un <xref:System.Web.WebSockets.AspNetWebSocket> connessione. I due metodi gestiscono le richieste avviate dal client nello stesso modo: dopo il client invia un messaggio al server per la chiusura della connessione, il server chiama uno di questi metodi e invia un messaggio di conferma al client e il metodo restituisce.  
  
 Per le richieste avviate dal server, i due metodi funzionano in modo diverso. Il <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> metodo invia un messaggio al client per chiudere la connessione, attende una risposta e quindi restituisce. Il server non attende che i dati aggiuntivi inviati dal client. Al contrario, il <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> metodo invia un messaggio al client per chiudere la connessione e restituisce senza attendere una risposta. Dopo il metodo restituisce un risultato, è possibile chiamare il <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> metodo e gestire dati aggiuntivi o il riconoscimento inviato dal client.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> si trova in uno stato interrotto.  
  
 oppure  
  
 Operazioni di invio non disponibili.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatus As Nullable(Of WebSocketCloseStatus)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; CloseStatus { Nullable&lt;System::Net::WebSockets::WebSocketCloseStatus&gt; get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un codice di stato che indica il motivo per cui un oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> è stato chiuso.</summary>
        <value>Codice di stato.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CloseStatusDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CloseStatusDescription { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un messaggio di stato che indica il motivo per cui un oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> è stato chiuso.</summary>
        <value>Messaggio di stato.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate da un oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET chiama automaticamente il <xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A> metodo su un <xref:System.Web.WebSockets.AspNetWebSocket> oggetto di rilasciare le risorse che rimangono in esecuzione al termine del codice.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Net::WebSockets::WebSocketReceiveResult ^&gt; ^ ReceiveAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice che contiene i dati del messaggio.</param>
        <param name="cancellationToken">Oggetto che annulla un'operazione in sospeso.</param>
        <summary>Riceve un singolo frammento di messaggio da un client remoto.</summary>
        <returns>Riferimento all'attività di ricezione di un messaggio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> è già stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> si trova in uno stato interrotto.  
  
 oppure  
  
 Operazioni di ricezione non disponibili.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ SendAsync(ArraySegment&lt;System::Byte&gt; buffer, System::Net::WebSockets::WebSocketMessageType messageType, bool endOfMessage, System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice che contiene i dati del messaggio.</param>
        <param name="messageType">Il tipo di messaggio.</param>
        <param name="endOfMessage">
          <see langword="true" /> per indicare che un frammento rappresenta la fine di un messaggio completo; in caso contrario, <see langword="false" />.</param>
        <param name="cancellationToken">Oggetto che annulla un'operazione in sospeso.</param>
        <summary>Invia un singolo frammento di messaggio a un client remoto.</summary>
        <returns>Riferimento all'attività di invio di un messaggio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> è stato eliminato.</exception>
        <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> si trova in uno stato interrotto.  
  
 oppure  
  
 Operazioni di invio non disponibili.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As WebSocketState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::WebSockets::WebSocketState State { System::Net::WebSockets::WebSocketState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica lo stato aperto o chiuso dell'oggetto <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <value>Stato corrente.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SubProtocol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SubProtocol { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome di un protocollo specifico dell'applicazione che un client remoto e un server possono usare per scambiare dati su una connessione <see cref="T:System.Web.WebSockets.AspNetWebSocket" />.</summary>
        <value>Nome del protocollo.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      </Docs>
    </Member>
  </Members>
</Type>