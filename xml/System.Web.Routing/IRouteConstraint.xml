<Type Name="IRouteConstraint" FullName="System.Web.Routing.IRouteConstraint">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6a9282664eaba3ced642eebe12b8ecd9940e6f8e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30537395" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRouteConstraint" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRouteConstraint" />
  <TypeSignature Language="DocId" Value="T:System.Web.Routing.IRouteConstraint" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRouteConstraint" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRouteConstraint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Web.Routing, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce il contratto che deve essere implementato da una classe per controllare se un valore di parametro URL è valido per un vincolo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si include un vincolo per un parametro URL in una definizione della route, è necessario rappresentare il vincolo come stringa o come un oggetto che implementa il <xref:System.Web.Routing.IRouteConstraint> interfaccia. Se il vincolo è una stringa, viene considerato come un'espressione regolare. Creare una classe che implementa <xref:System.Web.Routing.IRouteConstraint> quando non è possibile rappresentare la logica di convalida facilmente come un'espressione regolare. Aggiungere la logica di convalida nel <xref:System.Web.Routing.IRouteConstraint.Match%2A> metodo.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public bool Match (System.Web.HttpContextBase httpContext, System.Web.Routing.Route route, string parameterName, System.Web.Routing.RouteValueDictionary values, System.Web.Routing.RouteDirection routeDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.Web.HttpContextBase httpContext, class System.Web.Routing.Route route, string parameterName, class System.Web.Routing.RouteValueDictionary values, valuetype System.Web.Routing.RouteDirection routeDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Routing.IRouteConstraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Match(System::Web::HttpContextBase ^ httpContext, System::Web::Routing::Route ^ route, System::String ^ parameterName, System::Web::Routing::RouteValueDictionary ^ values, System::Web::Routing::RouteDirection routeDirection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="System.Web.HttpContextBase" />
        <Parameter Name="route" Type="System.Web.Routing.Route" />
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="values" Type="System.Web.Routing.RouteValueDictionary" />
        <Parameter Name="routeDirection" Type="System.Web.Routing.RouteDirection" />
      </Parameters>
      <Docs>
        <param name="httpContext">Oggetto che incapsula le informazioni sulla richiesta HTTP.</param>
        <param name="route">Oggetto a cui appartiene questo vincolo.</param>
        <param name="parameterName">Nome del parametro da controllare.</param>
        <param name="values">Oggetto che contiene i parametri per l'URL.</param>
        <param name="routeDirection">Oggetto che indica se il controllo del vincolo viene eseguito quando viene gestita una richiesta in ingresso o quando viene generato un URL.</param>
        <summary>Determina se il parametro URL contiene un valore valido per questo vincolo.</summary>
        <returns>
          <see langword="true" /> se il parametro URL contiene un valore valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Web.Routing.IRouteConstraint.Match%2A> metodo per aggiungere la logica di convalida per il vincolo. Questo metodo viene chiamato dal framework di routing durante l'elaborazione di una richiesta in ingresso e quando viene costruito un URL. È possibile determinare lo scenario corrente esaminando il `routeDirection` parametro.  
  
 Quando viene elaborata una richiesta, il framework di routing determina se il modello e i valori della richiesta in arrivo corrispondono al criterio e i vincoli della route. Quando viene creato un URL, il framework di routing determina se i valori forniti quando il <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> metodo viene chiamato corrispondenti al criterio e i vincoli della route.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>