<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98b2f8e81292b161daf8dee4c4562f466a977207" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30607365" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce il contratto implementato da ASP.NET per elaborare in modo sincrono le richieste Web HTTP mediante gestori HTTP personalizzati.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile scrivere gestori HTTP personalizzati per elaborare i tipi predefiniti specifici di richieste HTTP in qualsiasi linguaggio conforme a Common Language Specification (CLS). Codice eseguibile definito nel `HttpHandler` classi, anziché le pagine ASP o ASP.NET Web tradizionali, risponde a queste richieste specifiche. I gestori HTTP forniscono un mezzo per l'interazione con i servizi di risposta del server Web IIS e la richiesta di basso livello e offrono funzionalità molto simili alle estensioni ISAPI ma con un modello di programmazione più semplice.  
  
 Se il gestore avrà accesso ai valori dello stato sessione, è necessario implementare la <xref:System.Web.SessionState.IRequiresSessionState> interfaccia (un'interfaccia marcatore alcun metodi).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'istanza di <see cref="T:System.Web.IHttpHandler" /> può essere utilizzata da un'altra richiesta.</summary>
        <value>
          <see langword="true" /> se l'istanza <see cref="T:System.Web.IHttpHandler" /> può essere riutilizzata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare in modo esplicito il <xref:System.Web.IHttpHandler.IsReusable%2A> proprietà `true` o `false` da codice fornito per che esegue l'override di <xref:System.Web.IHttpHandler.IsReusable%2A> funzione di accesso alle proprietà (GET).  
  
   
  
## Examples  
 Esempio di codice seguente scrive nel flusso di output HTTP in risposta a una richiesta client per una pagina denominata handler quattro righe di testo. Tutte le richieste di handler sono servite le `MyHttpHandler` classe nello spazio dei nomi `HandlerExample` contenuti nell'assembly HandlerTest.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto <see cref="T:System.Web.HttpContext" /> che fornisce riferimenti agli oggetti intrinseci del server, ad esempio <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> e <see langword="Server" />, utilizzati per gestire le richieste HTTP.</param>
        <summary>Consente di attivare l'elaborazione delle richieste Web HTTP da parte di un oggetto <see langword="HttpHandler" /> personalizzato che implementa l'interfaccia <see cref="T:System.Web.IHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inserire personalizzato `HttpHandler` codice il <xref:System.Web.IHttpHandler.ProcessRequest%2A> metodo virtuale, come mostrato nell'esempio seguente.  
  
   
  
## Examples  
 Esempio di codice seguente scrive nel flusso di output HTTP in risposta a una richiesta client per una pagina denominata handler quattro righe di testo. Tutte le richieste di handler sono servite le `MyHttpHandler` classe nello spazio dei nomi `HandlerExample` contenuti nell'assembly HandlerTest.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>