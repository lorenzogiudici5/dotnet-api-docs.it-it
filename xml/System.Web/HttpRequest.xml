<Type Name="HttpRequest" FullName="System.Web.HttpRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="48982b0cd7a40f21c7ebc1535d74a9dc862f068e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Consente ad ASP.NET di leggere i valori HTTP inviati da un client durante una richiesta Web.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I metodi e proprietà del <xref:System.Web.HttpRequest> classe sono esposte tramite il `Request` le proprietà del <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, e <xref:System.Web.UI.UserControl> classi.  
  
 Per accedere ai dati dal <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, o <xref:System.Web.HttpRequest.ServerVariables%2A> raccolte, è possibile scrivere `Request["key"]`, come illustrato nell'esempio per la <xref:System.Web.HttpRequest.QueryString%2A> proprietà.  
  
> [!NOTE]
>  Supporto Unicode per <xref:System.Web.HttpRequest> membri della classe richiede IIS versione 6.0 o versione successiva.  
  
   
  
## Examples  
 Ai seguenti esempi di accedere il <xref:System.Web.HttpRequest> istanza per la richiesta corrente utilizzando il <xref:System.Web.UI.Page.Request%2A> proprietà del <xref:System.Web.UI.Page> classe.  
  
 È possibile utilizzare una sintassi semplificata per l'accesso ai dati di <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, o <xref:System.Web.HttpRequest.ServerVariables%2A> raccolte. È possibile scrivere `Request["key"]`.  
  
 Nel primo esempio viene illustrato come recuperare un valore di stringa di query durante il caricamento di una pagina.  
  
```csharp  
public partial class AddToCart : Page  
{  
    protected void Page_Load(object sender, EventArgs e)  
    {  
        string rawId = Request["ProductID"];  
        int productId;  
        if (!String.IsNullOrEmpty(rawId) && int.TryParse(rawId, out productId))  
        {  
            using (ShoppingCartActions usersShoppingCart = new ShoppingCartActions())  
            {  
                usersShoppingCart.AddToCart(productId);  
            }  
        }  
        else  
        {  
            throw new Exception("Tried to call AddToCart.aspx without setting a ProductId.");  
        }  
        Response.Redirect("ShoppingCart.aspx");  
    }  
}  
```  
  
```vb  
Public Class AddToCart  
    Inherits Page  
  
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load  
        Dim rawId = Request("ProductID")  
        Dim productId As Integer  
        If Not String.IsNullOrEmpty(rawId) And Integer.TryParse(rawId, productId) Then  
            Using usersShoppingCart As New ShoppingCartActions()  
                usersShoppingCart.AddToCart(productId)  
            End Using  
  
        Else  
            Throw New Exception("Tried to call AddToCart.aspx without setting a ProductId.")  
        End If  
        Response.Redirect("ShoppingCart.aspx")  
    End Sub  
End Class  
```  
  
 Nell'esempio seguente viene illustrato come controllare se la richiesta è autenticata e recuperare l'URL non elaborato.  
  
```csharp  
public partial class RestrictedPage : Page  
{  
    protected void Page_Load(object sender, EventArgs e)  
    {  
        if (!Request.IsAuthenticated)  
        {  
            var rawUrl = Request.RawUrl;  
            Response.Redirect("/Account/Login?ru=" + Server.HtmlEncode(rawUrl));  
        }  
    }  
}  
```  
  
```vb  
Public Class RestrictedPage  
    Inherits Page  
  
    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load  
        If Not Request.IsAuthenticated Then  
            Dim rawUrl = Request.RawUrl  
            Response.Redirect("/Account/Login?ru=" + Server.HtmlEncode(rawUrl))  
        End If  
    End Sub  
End Class  
```  
  
 Un progetto di sito Web di Visual Studio con codice sorgente è disponibile a complemento di questo argomento: [scaricare](http://go.microsoft.com/fwlink/?LinkID=191455).  
  
 Questo esempio viene utilizzato il <xref:System.IO.StreamWriter> classe per la scrittura dei valori di diverse <xref:System.Web.HttpRequest> proprietà in un file di classe. Per le proprietà di tipo stringa, i valori sono codificati come vengono scritti nel file HTML. Le proprietà che rappresentano una raccolta sono un ciclo e ogni coppia chiave/valore che contengono viene scritta nel file.  
  
> [!IMPORTANT]
>  L'esempio include una casella di testo che accetta l'input dell'utente e rappresenta quindi una potenziale minaccia alla sicurezza. Per impostazione predefinita, le pagine Web ASP.NET verificano che l'input dell'utente non includa script o elementi HTML. Per altre informazioni, vedere [Cenni preliminari sugli attacchi tramite script](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.HttpRequest_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRequest (string filename, string url, string queryString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string url, string queryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, url As String, queryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRequest(System::String ^ filename, System::String ^ url, System::String ^ queryString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="queryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Nome del file associato alla richiesta.</param>
        <param name="url">Informazioni sull'URL della richiesta corrente.</param>
        <param name="queryString">Stringa di query completa inviata con la richiesta (caratteri che seguono <c>'?'</c>).</param>
        <summary>Inizializza un oggetto <see cref="T:System.Web.HttpRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è necessario creare la propria istanza di <xref:System.Web.HttpRequest> classe. I metodi e proprietà del <xref:System.Web.HttpRequest> classe sono esposte tramite il `Request` proprietà del <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, e <xref:System.Web.UI.UserControl> classi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Termina forzatamente la connessione TCP sottostante, causando l'esito negativo di eventuali operazioni di I/O. È possibile usare questo metodo in risposta all'attacco di un client HTTP dannoso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è thread-safe. Qualsiasi thread può chiamarlo in qualsiasi momento.  
  
 Questo metodo può essere utilizzato solo in modalità integrata. Se viene richiamato in modalità classica, viene generata un'eccezione. Per determinare la modalità pipeline, utilizzare <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptTypes">
      <MemberSignature Language="C#" Value="public string[] AcceptTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AcceptTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AcceptTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AcceptTypes As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AcceptTypes { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una matrice di stringhe di tipi di accettazione MIME supportati dal client.</summary>
        <value>Matrice di stringhe di tipi di accettazione MIME supportati dal client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente consente di acquisire i valori multipli restituiti dal <xref:System.Web.HttpRequest.AcceptTypes%2A> proprietà in una variabile oggetto e scrive il numero e il nome di ogni valueto una riga separata dell'output HTTP.  
  
 [!code-csharp[Classic HttpRequest.AcceptTypes Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.AcceptTypes Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.AcceptTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.AcceptTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousID">
      <MemberSignature Language="C#" Value="public string AnonymousID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AnonymousID" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AnonymousID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AnonymousID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AnonymousID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore anonimo per l'utente, se presente.</summary>
        <value>Stringa che rappresenta l'identificatore utente anonimo corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.AnonymousID%2A> proprietà assegna un identificatore univoco di lunga durata a un utente non autenticato, che può essere utilizzato per tenere traccia dell'utente o assegnare le proprietà del profilo a tale utente senza archiviare dati in un `Session` oggetto. Per impostazione predefinita, il <xref:System.Web.HttpRequest.AnonymousID%2A> proprietà viene utilizzato un cookie, ma può essere impostato per usare l'URI quando il <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> attributo nella sezione di configurazione dell'identificazione anonima è impostato sul valore di <xref:System.Web.HttpCookieMode.UseUri>, <xref:System.Web.HttpCookieMode.UseDeviceProfile>, o <xref:System.Web.HttpCookieMode.AutoDetect> valore. È necessario cancellare i cookie in modo esplicito se non è più disponibile, ad esempio quando un utente anonimo viene autenticato.  
  
 Identificazione anonima viene utilizzato quando è necessario per identificare le entità che non sono autenticate e quando è necessaria l'autorizzazione. Per ulteriori informazioni, vedere [anonymousIdentification Element (Schema delle impostazioni ASP.NET)](http://msdn.microsoft.com/library/2bd927ef-9057-4703-9c55-4cfb6d7d0929)  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Web.HttpRequest.AnonymousID%2A> proprietà gestendo il <xref:System.Web.Security.AnonymousIdentificationModule.Creating> evento nel file Global. asax. In questo esempio è costituito da due parti:  
  
-   Un metodo nel file Global. asax che gestisce il <xref:System.Web.Security.AnonymousIdentificationModule.Creating> evento.  
  
-   Una pagina Web Form.  
  
 La prima parte dell'esempio di codice viene illustrato come impostare il <xref:System.Web.HttpRequest.AnonymousID%2A> proprietà gestendo il <xref:System.Web.Security.AnonymousIdentificationModule.Creating> evento nel file Global. asax. Il metodo denominato `AnonymousIdentification_Creating` imposta il <xref:System.Web.HttpRequest.AnonymousID%2A> proprietà quando viene creato un ID anonimo.  
  
 [!code-csharp[System.Web.HttpRequest_AnonymousID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/CS/global_asax.cs#2)]
 [!code-vb[System.Web.HttpRequest_AnonymousID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/vb/global_asax.vb#2)]  
  
 La seconda parte dell'esempio di codice viene illustrato come visualizzare il nuovo <xref:System.Web.HttpRequest.AnonymousID%2A> creati tramite il `AnonymousIdentification_Creating` gestore dell'evento nell'esempio precedente.  
  
 [!code-aspx-csharp[System.Web.HttpRequest_AnonymousID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/CS/anonid_cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_AnonymousID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/vb/anonid_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.IsAuthenticated" />
        <altmember cref="E:System.Web.Security.AnonymousIdentificationModule.Creating" />
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso radice dell'applicazione virtuale dell'applicazione ASP.NET sul server.</summary>
        <value>Percorso virtuale dell'applicazione corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per costruire un URL relativo alla radice dell'applicazione da una pagina o di un controllo utente Web che non è presente nella directory radice. In questo modo le pagine e controlli condivisi che esistono a livelli diversi di una struttura di directory per utilizzare lo stesso codice per collegare le risorse in posizioni fisse nell'applicazione.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.IO.StreamWriter.Write%2A> metodo per la codifica HTML e quindi scrivere il valore della <xref:System.Web.HttpRequest.ApplicationPath%2A> proprietà in un file di testo. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe. Si presuppone l'esistenza di un <xref:System.IO.StreamWriter> oggetto denominato `sw`.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]  
  
 L'esempio seguente usa il <xref:System.Web.HttpRequest.ApplicationPath%2A> proprietà a livello di codice, creare un percorso a una risorsa in una posizione fissa nell'applicazione. La pagina che fa riferimento alla risorsa non deve trovarsi nella stessa directory della risorsa.  
  
 [!code-aspx-csharp[System.Web.HttpRequest.ApplicationPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/CS/ApplicationPath.aspx#2)]
 [!code-aspx-vb[System.Web.HttpRequest.ApplicationPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/VB/ApplicationPath.aspx#2)]  
  
 Se si esegue questo esempio in un'applicazione Web denominata WebSite1, `/WebSite1` sarà visualizzato come il valore di <xref:System.Web.HttpRequest.ApplicationPath%2A> proprietà e `/WebSite1/images/Image1.gif` verrà visualizzato come il percorso completo dell'immagine.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppRelativeCurrentExecutionFilePath">
      <MemberSignature Language="C#" Value="public string AppRelativeCurrentExecutionFilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppRelativeCurrentExecutionFilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppRelativeCurrentExecutionFilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AppRelativeCurrentExecutionFilePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso virtuale della radice dell'applicazione e lo converte in relativo tramite la notazione tilde (~) per la radice dell'applicazione, come in "~/page.aspx".</summary>
        <value>Percorso virtuale della radice dell'applicazione per la richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questa proprietà per fornire informazioni di URL che rimarranno invariata, anche se l'applicazione modifica posizione. In questo modo lo stesso codice di mapping di URL da utilizzare in un ambiente di test e nell'ambiente di distribuzione finale o utilizzabile da copie di applicazioni Web in domini diversi.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> proprietà per impostare l'URL di un <xref:System.Web.UI.WebControls.Image> controllo a un'immagine nella stessa directory della pagina. Esecuzione di questa pagina a livelli diversi di una struttura di directory per visualizzare il valore risultante <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> i valori delle proprietà.  
  
 [!code-aspx-csharp[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.AppRelativeCurrentExecutionPath/CS/AppRelativeCurrentExecutionPathCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.AppRelativeCurrentExecutionPath/VB/AppRelativeCurrentExecutionPathVB.aspx#1)]  
  
 L'esempio seguente usa il <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> proprietà per impostare il percorso a una risorsa, in base al percorso corrente della pagina.  
  
 [!code-aspx-csharp[System.Web.HttpRequest.ApplicationPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/CS/apprelativecurrentexecutionfilepath.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.ApplicationPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/VB/apprelativecurrentexecutionfilepath.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryRead">
      <MemberSignature Language="C#" Value="public byte[] BinaryRead (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] BinaryRead(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.BinaryRead(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinaryRead (count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ BinaryRead(int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">Numero di byte da leggere.</param>
        <summary>Esegue una lettura binaria di un determinato numero di byte provenienti dal flusso di input corrente.</summary>
        <returns>Matrice di byte.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.BinaryRead%2A> metodo è fornito per compatibilità con ASP.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> è 0.  
  
 \- oppure -  
  
 <paramref name="count" /> è maggiore del numero di byte disponibili.</exception>
      </Docs>
    </Member>
    <Member MemberName="Browser">
      <MemberSignature Language="C#" Value="public System.Web.HttpBrowserCapabilities Browser { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpBrowserCapabilities Browser" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Browser" />
      <MemberSignature Language="VB.NET" Value="Public Property Browser As HttpBrowserCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpBrowserCapabilities ^ Browser { System::Web::HttpBrowserCapabilities ^ get(); void set(System::Web::HttpBrowserCapabilities ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpBrowserCapabilities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta informazioni sulle funzionalità del browser del client richiedente.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpBrowserCapabilities" /> che elenca le funzionalità del browser client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente invia un elenco di funzionalità del browser client in una pagina HTML.  
  
 [!code-csharp[Classic HttpRequest.Browser Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Browser Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Browser Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Browser Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.ClientTarget" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="P:System.Web.HttpRequest.UserAgent" />
      </Docs>
    </Member>
    <Member MemberName="ClientCertificate">
      <MemberSignature Language="C#" Value="public System.Web.HttpClientCertificate ClientCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpClientCertificate ClientCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ClientCertificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificate As HttpClientCertificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpClientCertificate ^ ClientCertificate { System::Web::HttpClientCertificate ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpClientCertificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il certificato di sicurezza del client della richiesta corrente.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpClientCertificate" /> contenente le informazioni sulle impostazioni del certificato di sicurezza del client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente invia le impostazioni del certificato client in una pagina HTML.  
  
 [!code-csharp[Classic HttpRequest.ClientCertificate Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ClientCertificate Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ClientCertificate Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ClientCertificate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ ContentEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il set di caratteri del corpo dell'entità.</summary>
        <value>Oggetto <see cref="T:System.Text.Encoding" /> che rappresenta il set di caratteri del client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile specificare la codifica del contenuto di predefinito nel [globalization Element (Schema delle impostazioni ASP.NET)](http://msdn.microsoft.com/library/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7) di un file di configurazione. Se la codifica del contenuto viene specificata anche dal client, vengono sottoposte a override le impostazioni di configurazione predefinite.  
  
   
  
## Examples  
 Esempio di codice seguente assegna un valore che rappresenta la descrizione della codifica HTTP corrente a una variabile di stringa.  
  
 [!code-csharp[Classic HttpRequest.ContentEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentEncoding Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentEncoding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public int ContentLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ContentLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifica la lunghezza, in byte, del contenuto inviato dal client.</summary>
        <value>Lunghezza, in byte, del contenuto inviato dal client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente assegna il valore che rappresenta la lunghezza del contenuto della richiesta in ingresso a una variabile integer.  
  
 [!code-csharp[Classic HttpRequest.ContentLength Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentLength Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentLength Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentLength Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tipo di contenuto MIME della richiesta in ingresso.</summary>
        <value>Stringa che rappresenta il tipo di contenuto MIME della richiesta in ingresso, ad esempio "text/html". Altri esempi comuni di tipi MIME sono "audio.wav", "image/gif" e "application/pdf".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente assegna il valore che rappresenta il tipo di contenuto della richiesta in ingresso a una variabile di stringa.  
  
 [!code-csharp[Classic HttpRequest.ContentType Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentType Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentType Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentType Example/VB/source.vb#1)]  
  
 L'esempio seguente mostra l'output che possono essere prodotti da questo codice.  
  
 `GET`  
  
 `127.0.0.1`  
  
 `127.0.0.1`  
  
 `GET`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieCollection Cookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpCookieCollection Cookies" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Cookies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cookies As HttpCookieCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCookieCollection ^ Cookies { System::Web::HttpCookieCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta dei cookie inviati dal client.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpCookieCollection" /> che rappresenta le variabili cookie del client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET include due raccolte di cookie intrinseca. La raccolta a cui si accede tramite il <xref:System.Web.HttpRequest.Cookies%2A> insieme di <xref:System.Web.HttpRequest> contiene i cookie trasmessi dal client al server nel `Cookie` intestazione. La raccolta a cui si accede tramite il <xref:System.Web.HttpResponse.Cookies%2A> insieme di <xref:System.Web.HttpResponse> contiene i nuovi cookie creato nel server e trasmesso al client il `Set-Cookie` intestazione.  
  
> [!NOTE]
>  Dopo aver aggiunto un cookie utilizzando il <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> raccolta, il cookie è immediatamente disponibile nel <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> raccolta, anche se la risposta non è stata inviata al client.  
  
   
  
## Examples  
 Esempio di codice seguente consente di scorrere tutti i cookie inviati dal client e invia il nome, data di scadenza, il parametro di sicurezza e valori di ciascun cookie nell'output HTTP.  
  
 [!code-csharp[Classic HttpRequest.Cookies Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Cookies Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Cookies Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Cookies Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
    <Member MemberName="CurrentExecutionFilePath">
      <MemberSignature Language="C#" Value="public string CurrentExecutionFilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentExecutionFilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.CurrentExecutionFilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentExecutionFilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentExecutionFilePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso virtuale della richiesta corrente.</summary>
        <value>Percorso virtuale della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> Restituisce il percorso del file al gestore di pagina attualmente in esecuzione. Per scenari di reindirizzamento in <xref:System.Web.HttpServerUtility.Execute%2A> e <xref:System.Web.HttpServerUtility.Transfer%2A> metodi, ciò significa che il <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> proprietà restituisce il percorso alla pagina di reindirizzamento (pagina figlio). Tuttavia, quando il client viene reindirizzato a un'altra pagina, il <xref:System.Web.HttpRequest.FilePath%2A> proprietà restituisce il percorso per la pagina originale.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
        <altmember cref="P:System.Web.HttpRequest.Path" />
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
        <altmember cref="M:System.Web.HttpServerUtility.Execute(System.String)" />
        <altmember cref="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentExecutionFilePathExtension">
      <MemberSignature Language="C#" Value="public string CurrentExecutionFilePathExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentExecutionFilePathExtension" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.CurrentExecutionFilePathExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentExecutionFilePathExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentExecutionFilePathExtension { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'estensione del nome file specificato nella proprietà <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" />.</summary>
        <value>Estensione del nome file specificato nella proprietà <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePath">
      <MemberSignature Language="C#" Value="public string FilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.FilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilePath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso virtuale della richiesta corrente.</summary>
        <value>Percorso virtuale della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.FilePath%2A> proprietà non include il <xref:System.Web.HttpRequest.PathInfo%2A> trailer. Ad esempio, per l'URL http://www.contoso.com/virdir/page.html/tail, il <xref:System.Web.HttpRequest.FilePath%2A> valore è /virdir/page.HTML.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.FilePath%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
        <altmember cref="P:System.Web.HttpRequest.Path" />
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="public System.Web.HttpFileCollection Files { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpFileCollection Files" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Files" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Files As HttpFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpFileCollection ^ Files { System::Web::HttpFileCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di file caricati dal client, in formato MIME multipart.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpFileCollection" /> che rappresenta una raccolta di file caricati dal client. Gli elementi dell'oggetto <see cref="T:System.Web.HttpFileCollection" /> sono di tipo <see cref="T:System.Web.HttpPostedFile" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La raccolta di file viene popolata solo quando la richiesta HTTP `Content-Type` valore è "multipart/form-data".  
  
   
  
## Examples  
 Esempio di codice seguente vengono visualizzati i nomi di tutti i file di <xref:System.Web.HttpRequest.Files%2A> insieme.  
  
 [!code-csharp[Classic HttpRequest.Files Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Files Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Files Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Files Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public System.IO.Stream Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream Filter" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ Filter { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il filtro da usare per la lettura del flusso di input corrente.</summary>
        <value>Oggetto <see cref="T:System.IO.Stream" /> da usare come filtro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio di codice seguente crea due nuove classi, `QQQ1` e `QQQ2` che il filtro di <xref:System.Web.HttpRequest.InputStream%2A>. Inserire le classi nel file Global. asax nella directory di un'applicazione ASP.NET in modo che tutti gli input per tutte le pagine Web ASP.NET nell'applicazione verranno filtrati.  
  
 [!code-aspx-csharp[System.Web.HttpRequest.Filter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.Filter/CS/systemwebhttprequestfilter.cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.Filter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.Filter/VB/systemwebhttprequestfilter.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il parametro <see cref="T:System.IO.Stream" /> specificato non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Form { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Form" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Form" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Form As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Form { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di variabili form.</summary>
        <value>Oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" /> che rappresenta una raccolta di variabili form.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.Form%2A> proprietà viene popolata quando la richiesta HTTP `Content-Type` valore è "application/x-www-form-urlencoded" o "multipart/form-data".  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come leggere i valori nella raccolta di modulo registrato da un browser. Ogni coppia nome/valore nella raccolta rappresenta un controllo nel modulo e il relativo valore.  
  
 [!code-csharp[Classic HttpRequest.Form Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Form Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
    <Member MemberName="GetBufferedInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferedInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferedInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferedInputStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferedInputStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferedInputStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</summary>
        <returns>Oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è identico a <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> ad eccezione del fatto che copia i byte di lettura per l'archiviazione interna utilizzata da ASP.NET per popolare il <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, e <xref:System.Web.HttpRequest.InputStream%2A> proprietà. Dato che queste informazioni vengono mantenute, il codice downstream come quello delle pagine Web Form ASP.NET (file aspx) funzionerà correttamente. Non è il caso del metodo <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il corpo dell'entità della richiesta è già stato caricato e analizzato. Tra le proprietà che generano il caricamento e l'analisi del corpo entità vi sono:  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.Form" />.  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.Files" />.  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.InputStream" />.  
  
-   Metodo <see cref="M:System.Web.HttpRequest.GetBufferlessInputStream" />.  
  
 Per evitare questa eccezione, chiamare il metodo di <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> per primo. Questa eccezione viene generata se il client viene disconnesso durante la lettura del corpo di entità.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBufferlessInputStream">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBufferlessInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferlessInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferlessInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferlessInputStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferlessInputStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferlessInputStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</summary>
        <returns>Oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo offre un'alternativa all'utilizzo di <xref:System.Web.HttpRequest.InputStream%2A> proprietà. Il <xref:System.Web.HttpRequest.InputStream%2A> proprietà attende fino a quando l'intera richiesta è stata ricevuta prima di restituire un <xref:System.IO.Stream> oggetto. Al contrario, il <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> metodo restituisce il <xref:System.IO.Stream> oggetto immediatamente. È possibile utilizzare il metodo inizi a elaborare il corpo dell'entità prima che il contenuto completo del corpo è stato ricevuto.  
  
 Il corpo dell'entità (o la parte di esso durante la richiesta e ricevuta) viene restituito solo quando si utilizza l'oggetto restituito da questo metodo per leggere il flusso, chiamando i metodi, ad esempio il <xref:System.IO.Stream.Read%2A> metodo. Si utilizzano i parametri del <xref:System.IO.Stream.Read%2A> per specificare quanta parte del corpo dell'entità per la lettura.  
  
 Il <xref:System.IO.Stream> oggetto restituito da ASP.NET da questo metodo supporta i metodi di lettura sincroni e asincroni. Il <xref:System.IO.Stream> oggetto implementa sia il <xref:System.IO.Stream.BeginRead%2A> e <xref:System.IO.Stream.EndRead%2A> metodi. I metodi asincroni consentono di leggere in modo asincrono l'entità della richiesta in blocchi, mentre ASP.NET rilascia il thread corrente tra ogni iterazione di un ciclo di lettura asincrono.  
  
 Questo metodo può essere utile se la richiesta sta caricando un file di grandi dimensioni e si desidera iniziare l'accesso al contenuto di file prima che il caricamento è completato. Tuttavia, solo utilizzare questo metodo per gli scenari in cui si desidera assumere tutta l'elaborazione del corpo dell'entità. Ciò significa che è possibile utilizzare questo metodo da una pagina aspx, perché quando che una pagina aspx in esecuzione, il corpo dell'entità è già stato letto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il corpo dell'entità della richiesta è già stato caricato e analizzato. Tra le proprietà che generano il caricamento e l'analisi del corpo entità vi sono:  
  
-   <see cref="P:System.Web.HttpRequest.Form" />  
  
-   <see cref="P:System.Web.HttpRequest.InputStream" />  
  
-   <see cref="P:System.Web.HttpRequest.Files" />  
  
-   <see cref="M:System.Web.HttpRequest.GetBufferedInputStream" />  
  
 Per evitare questa eccezione, chiamare il metodo di <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> per primo. Questa eccezione viene generata se il client viene disconnesso durante la lettura del corpo di entità.</exception>
        <altmember cref="M:System.Web.HttpRequest.GetBufferedInputStream" />
      </Docs>
    </Member>
    <Member MemberName="GetBufferlessInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferlessInputStream (bool disableMaxRequestLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferlessInputStream(bool disableMaxRequestLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferlessInputStream(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferlessInputStream (disableMaxRequestLength As Boolean) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferlessInputStream(bool disableMaxRequestLength);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableMaxRequestLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disableMaxRequestLength">
          <see langword="true" /> per disabilitare il limite di lunghezza della richiesta; in caso contrario, <see langword="false" />.</param>
        <summary>Ottiene un oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso, disabilitando facoltativamente il limite di lunghezza della richiesta impostato nella proprietà <see cref="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" />.</summary>
        <returns>Oggetto <see cref="T:System.IO.Stream" /> che può essere usato per leggere il corpo dell'entità HTTP in ingresso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni su questo metodo, vedere il <xref:System.Web.HttpRequest.GetBufferlessInputStream> rapporto di overload.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Il corpo dell'entità della richiesta è già stato caricato e analizzato. Tra le proprietà che generano il caricamento e l'analisi del corpo entità vi sono:  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.Form" />.  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.Files" />.  
  
-   La proprietà <see cref="P:System.Web.HttpRequest.InputStream" />.  
  
-   Metodo <see cref="M:System.Web.HttpRequest.GetBufferedInputStream" />.  
  
 Per evitare questa eccezione, chiamare il metodo di <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> per primo. Questa eccezione viene generata se il client viene disconnesso durante la lettura del corpo di entità.</exception>
        <altmember cref="M:System.Web.HttpRequest.GetBufferedInputStream" />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Headers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Headers As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Headers { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di intestazioni HTTP.</summary>
        <value>Oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" /> di intestazioni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per un elenco di tutte le intestazioni possibili, vedere [i campi di intestazione richiesta](http://go.microsoft.com/fwlink/?LinkId=73147) nel sito Web W3C.  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare i nomi e valori di tutte le intestazioni nella richiesta HTTP.  
  
 [!code-csharp[Classic HttpRequest.Headers Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Headers Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpChannelBinding">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ChannelBinding HttpChannelBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ChannelBinding HttpChannelBinding" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.HttpChannelBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HttpChannelBinding As ChannelBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ChannelBinding ^ HttpChannelBinding { System::Security::Authentication::ExtendedProtection::ChannelBinding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ChannelBinding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> dell'istanza corrente di <see cref="T:System.Web.HttpWorkerRequest" />.</summary>
        <value>Oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> dell'istanza di <see cref="T:System.Web.HttpWorkerRequest" /> corrente.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">L'oggetto <see cref="T:System.Web.HttpWorkerRequest" /> corrente non è un oggetto <see langword="System.Web.Hosting.IIS7WorkerRequest" /> o <see langword="System.Web.Hosting.ISAPIWorkerRequestInProc" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HttpMethod">
      <MemberSignature Language="C#" Value="public string HttpMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HttpMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.HttpMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HttpMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HttpMethod { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il metodo di trasferimento dei dati HTTP, ad esempio <see langword="GET" />, <see langword="POST" /> o <see langword="HEAD" />, usato dal client.</summary>
        <value>Metodo di trasferimento dati HTTP usato dal client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.HttpMethod%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]  
  
 L'esempio seguente mostra l'output prodotto dal codice.  
  
 `GET`  
  
 `127.0.0.1`  
  
 `127.0.0.1`  
  
 `GET`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream InputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream InputStream" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.InputStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ InputStream { System::IO::Stream ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il contenuto del corpo dell'entità HTTP in ingresso.</summary>
        <value>Oggetto <see cref="T:System.IO.Stream" /> che rappresenta il contenuto del corpo dell'entità HTTP in ingresso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente copia il contenuto di un <xref:System.Web.HttpRequest.InputStream%2A> in una stringa.  
  
 [!code-csharp[Classic HttpRequest.InputStream Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.InputStream Example/cs/source.aspx#1)]
 [!code-vb[Classic HttpRequest.InputStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.InputStream Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InsertEntityBody">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fornisce un wrapper gestito per il metodo IIS che inserisce un corpo dell'entità di richiesta HTTP in memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.InsertEntityBody%2A> overload del metodo offrono l'accesso gestito in IIS 7 `IHttpRequest::InsertEntityBody` metodo. Il metodo IIS inserisce un corpo entità di richiesta HTTP (i dati inviati da un client) in memoria. Ciò è utile perché IIS non gestisce una copia dell'entità della richiesta dopo che è stato letto. Il <xref:System.Web.HttpRequest.InsertEntityBody%2A> metodi creare una copia dei dati di entità della richiesta HTTP e renderlo disponibile in IIS per la gestione personalizzata aggiuntiva.  
  
> [!NOTE]
>  Il <xref:System.Web.HttpRequest.InsertEntityBody%2A> overload del metodo funzionano solo in IIS 7.0 o versioni successive, in quanto il `IHttpRequest::InsertEntityBody` metodo è stato aggiunto in IIS 7.0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InsertEntityBody">
      <MemberSignature Language="C#" Value="public void InsertEntityBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEntityBody() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.InsertEntityBody" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEntityBody ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEntityBody();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornisce a IIS una copia del corpo dell'entità di richiesta HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IIS non gestisce una copia della richiesta dopo che è stato letto. Pertanto, è consigliabile che solo il gestore per una richiesta HTTP deve leggere l'entità della richiesta.  
  
 Il <xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType> overload del metodo fornisce a IIS una copia dell'entità della richiesta se in precedenza sono state lette da ASP.NET. Questo overload del metodo è utile nei casi in cui ASP.NET ha letto la richiesta di entità e si desidera riutilizzare i dati della richiesta esistente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Il metodo è stato richiamato su una versione di IIS precedente a IIS 7.0.</exception>
        <permission cref="T:System.Web.AspNetHostingPermission">per operare in un ambiente ospitato. Azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Enumerazione associata: <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /></permission>
      </Docs>
    </Member>
    <Member MemberName="InsertEntityBody">
      <MemberSignature Language="C#" Value="public void InsertEntityBody (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEntityBody(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEntityBody (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEntityBody(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice che contiene i dati dell'entità di richiesta.</param>
        <param name="offset">Posizione in base zero in <c>buffer</c> in corrispondenza della quale iniziare ad archiviare i dati dell'entità di richiesta.</param>
        <param name="count">Numero di byte da leggere nella matrice <c>buffer</c>.</param>
        <summary>Fornisce a IIS una copia del corpo dell'entità di richiesta HTTP nonché le informazioni sull'oggetto entità di richiesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 IIS non gestisce una copia della richiesta dopo che è stato letto. Pertanto, è consigliabile che solo il gestore per una richiesta HTTP deve leggere l'entità della richiesta.  
  
 Il <xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType> overload del metodo è utile quando si desidera eseguire un'elaborazione personalizzata, ad esempio l'inserimento di un corpo entità diverso in memoria.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Il metodo è stato richiamato su una versione di IIS precedente a IIS 7.0.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> è un valore negativo.</exception>
        <exception cref="T:System.ArgumentException">Il numero di elementi nell'oggetto <paramref name="count" /> è maggiore dello spazio disponibile in <paramref name="buffer" />, dato il valore di <paramref name="offset" />.</exception>
        <permission cref="T:System.Web.AspNetHostingPermission">per il funzionamento in un ambiente host. Azione di sicurezza: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Enumerazione associata: <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la richiesta è stata autenticata.</summary>
        <value>
          <see langword="true" /> se la richiesta viene autenticata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpRequest.IsAuthenticated%2A> proprietà per determinare se la richiesta corrente è stata autenticata. Se non è stato autenticato, la richiesta viene reindirizzata a un'altra pagina in cui gli utenti possono immettere le credenziali all'applicazione Web. Si tratta di una tecnica comune utilizzata nella pagina predefinita per un'applicazione.  
  
 [!code-csharp[System.Web.HttpRequest_Sample3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample3/CS/isauthenticatedcs.aspx#1)]
 [!code-vb[System.Web.HttpRequest_Sample3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample3/VB/isauthenticatedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocal">
      <MemberSignature Language="C#" Value="public bool IsLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocal" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLocal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la richiesta proviene dal computer locale.</summary>
        <value>
          <see langword="true" /> se la richiesta proviene dal computer locale; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.IsLocal%2A> restituisce proprietà `true` se l'indirizzo IP del creatore della richiesta è 127.0.0.1 o se l'indirizzo IP della richiesta è uguale all'indirizzo IP del server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecureConnection">
      <MemberSignature Language="C#" Value="public bool IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSecureConnection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecureConnection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se per la connessione HTTP viene usato Secure Sockets, ovvero HTTPS.</summary>
        <value>
          <see langword="true" /> se la connessione è di tipo SSL; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente determina se il <xref:System.Web.HttpRequest.IsSecureConnection%2A> è impostata su false. Questo caso, il <xref:System.Web.HttpResponse.SuppressContent%2A> è impostata su true per interrompere l'invio della risposta.  
  
 [!code-csharp[System.Web.HttpResponse_Sample5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpResponse_Sample5/CS/httpresponsesuppresscontentcs.aspx#3)]
 [!code-vb[System.Web.HttpResponse_Sample5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpResponse_Sample5/VB/httpresponsesuppresscontentvb.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ key); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nome del membro della raccolta da ottenere.</param>
        <summary>Ottiene l'oggetto specificato dalle raccolte <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" /> o <see cref="P:System.Web.HttpRequest.ServerVariables" />.</summary>
        <value>Membro della raccolta <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" /> o <see cref="P:System.Web.HttpRequest.ServerVariables" /> specificato nel parametro <paramref name="key" />. Se il parametro <paramref name="key" /> specificato non viene trovato, viene restituito <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogonUserIdentity">
      <MemberSignature Language="C#" Value="public System.Security.Principal.WindowsIdentity LogonUserIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.WindowsIdentity LogonUserIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.LogonUserIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogonUserIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::WindowsIdentity ^ LogonUserIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il tipo <see cref="T:System.Security.Principal.WindowsIdentity" /> per l'utente corrente.</summary>
        <value>Oggetto <see cref="T:System.Security.Principal.WindowsIdentity" /> per le impostazioni di autenticazione di Microsoft Internet Information Services (IIS).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.LogonUserIdentity%2A> proprietà espone le proprietà e metodi di <xref:System.Security.Principal.WindowsIdentity> per l'utente attualmente connesso a Microsoft Internet Information Services (IIS). L'istanza del <xref:System.Security.Principal.WindowsIdentity> classe esposta da <xref:System.Web.HttpRequest.LogonUserIdentity%2A> tiene traccia del token di richiesta IIS e consente di accedere facilmente a questo token per la richiesta HTTP corrente in corso di elaborazione all'interno di ASP.NET. Un'istanza di <xref:System.Security.Principal.WindowsIdentity> classe viene creata automaticamente in modo che non sia possibile costruita per accedere ai relativi metodi e proprietà.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come recuperare il <xref:System.Web.HttpRequest.LogonUserIdentity%2A> proprietà per l'utente corrente e vengono scritti i valori di ogni elemento in un file di testo. Inserire il codice della pagina ASP.NET a cui fa riferimento il modulo `ACTION` attributo.  
  
 [!code-aspx-csharp[System.Web.HttpRequest_LogonUserIdentity#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_LogonUserIdentity/CS/logonuseridentity_cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_LogonUserIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_LogonUserIdentity/VB/logonuseridentity_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'applicazione Web viene eseguita in modalità integrata IIS 7 e l'evento <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> non è stato ancora generato.</exception>
      </Docs>
    </Member>
    <Member MemberName="MapImageCoordinates">
      <MemberSignature Language="C#" Value="public int[] MapImageCoordinates (string imageFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] MapImageCoordinates(string imageFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapImageCoordinates(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapImageCoordinates (imageFieldName As String) As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ MapImageCoordinates(System::String ^ imageFieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageFieldName">Nome della mappa immagine del form.</param>
        <summary>Esegue il mapping di un parametro form del campo immagine in ingresso ai valori appropriati delle coordinate x e y.</summary>
        <returns>Matrice bidimensionale di interi.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MapPath">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue il mapping del percorso virtuale presente nell'URL richiesto a un percorso fisico sul server per la richiesta corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ virtualPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Percorso virtuale, assoluto o relativo, della richiesta corrente.</param>
        <summary>Esegue il mapping del percorso virtuale specificato a un percorso fisico.</summary>
        <returns>Percorso fisico sul server specificato da <paramref name="virtualPath" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Il <xref:System.Web.HttpRequest.MapPath%2A> proprietà potenzialmente contiene informazioni riservate sull'ambiente di hosting. Il valore restituito non deve essere visibile agli utenti.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpRequest.MapPath%2A> per convertire un percorso virtuale a un percorso fisico completo nel server. In questo esempio è costituito da due parti:  
  
-   Una pagina aspx esegue il mapping di percorso, legge il file e visualizza i risultati dell'operazione di lettura.  
  
-   Una classe, `UpperCaseFilterStream`, che converte tutti i caratteri passati in lettere maiuscole.  
  
 La prima parte dell'esempio viene illustrato come convertire un percorso virtuale in un percorso fisico completo usando il <xref:System.Web.HttpRequest.MapPath%2A> metodo. Il percorso fisico viene quindi passato a un <xref:System.IO.StreamReader> oggetto, che ottiene il contenuto del file. Il <xref:System.Web.HttpResponse.Write%2A> viene quindi chiamato il metodo per visualizzare il contenuto del file della pagina. Il <xref:System.Web.HttpResponse.Filter%2A> proprietà viene utilizzata per associare un filtro nel flusso di risposta che il testo visualizzato per la pagina tutte lettere maiuscola.  
  
 [!code-aspx-csharp[System.Web.HttpRequest_Samples2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/CS/requestsamples2cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_Samples2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/VB/requestsamples2vb.aspx#1)]  
  
 La seconda parte dell'esempio viene illustrata una classe che eredita da <xref:System.IO.Stream> e converte tutti i caratteri in un flusso in lettere maiuscole. Inserire questo codice di `App_Code` cartella per l'applicazione.  
  
 [!code-csharp[System.Web.HttpRequest_Samples2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/CS/responsefilter.cs#2)]
 [!code-vb[System.Web.HttpRequest_Samples2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/VB/responsefilter.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Non è stato definito alcun oggetto <see cref="T:System.Web.HttpContext" /> per la richiesta.</exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (virtualPath As String, baseVirtualDir As String, allowCrossAppMapping As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ virtualPath, System::String ^ baseVirtualDir, bool allowCrossAppMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="baseVirtualDir" Type="System.String" />
        <Parameter Name="allowCrossAppMapping" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Percorso virtuale, assoluto o relativo, della richiesta corrente.</param>
        <param name="baseVirtualDir">Percorso della directory virtuale di base usato per la risoluzione relativa.</param>
        <param name="allowCrossAppMapping">
          <see langword="true" /> per indicare che <c>virtualPath</c> può appartenere a un'altra applicazione; in caso contrario, <see langword="false" />.</param>
        <summary>Esegue il mapping del percorso virtuale specificato a un percorso fisico.</summary>
        <returns>Percorso fisico sul server.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  Il <xref:System.Web.HttpRequest.MapPath%2A> proprietà potenzialmente contiene informazioni riservate sull'ambiente di hosting. Il valore restituito non deve essere visibile agli utenti.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Non è stato definito alcun oggetto <see cref="T:System.Web.HttpContext" /> per la richiesta.</exception>
      </Docs>
    </Member>
    <Member MemberName="MapRawImageCoordinates">
      <MemberSignature Language="C#" Value="public double[] MapRawImageCoordinates (string imageFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64[] MapRawImageCoordinates(string imageFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapRawImageCoordinates(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapRawImageCoordinates (imageFieldName As String) As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ MapRawImageCoordinates(System::String ^ imageFieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageFieldName">Nome del campo immagine.</param>
        <summary>Esegue il mapping di un parametro form del campo immagine in ingresso ai valori appropriati delle coordinate x e y.</summary>
        <returns>Valori delle coordinate x e y.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Params">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Params { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Params" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Params" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Params As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Params { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta combinata di elementi <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" /> e <see cref="P:System.Web.HttpRequest.ServerVariables" />.</summary>
        <value>Un oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Coppie nome-valore vengono aggiunti alla raccolta nell'ordine seguente:  
  
1.  Parametri della stringa di query.  
  
2.  Campi del form.  
  
3.  Cookie.  
  
4.  Variabili server.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come scorrere in ciclo i <xref:System.Web.HttpRequest.Params%2A> proprietà per una pagina e come visualizzare ogni coppia chiave/valore.  
  
 [!code-aspx-csharp[System.Web.HttpRequest.Params#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.Params/CS/requestparamscs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.Params#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.Params/VB/requestparamsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso virtuale della richiesta corrente.</summary>
        <value>Percorso virtuale della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest.Path%2A> è composto il <xref:System.Web.HttpRequest.FilePath%2A> e <xref:System.Web.HttpRequest.PathInfo%2A> trailer. Ad esempio, per l'URL http://www.contoso.com/virdir/page.html/tail, il <xref:System.Web.HttpRequest.Path%2A> è /virdir/page.html/tail.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.Path%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
      </Docs>
    </Member>
    <Member MemberName="PathInfo">
      <MemberSignature Language="C#" Value="public string PathInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PathInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathInfo As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PathInfo { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene informazioni aggiuntive sul percorso di una risorsa con estensione URL.</summary>
        <value>Informazioni aggiuntive sul percorso di una risorsa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per l'URL Http://www.contoso.com/virdir/page.html/tail, il <xref:System.Web.HttpRequest.PathInfo%2A> valore è /tail.  
  
   
  
## Examples  
 Esempio di codice seguente determina se il <xref:System.Web.HttpRequest.PathInfo%2A> proprietà contiene una stringa vuota. In caso affermativo, la <xref:System.IO.StreamWriter.Write%2A> metodo scrive una stringa che indica ciò a un file. In caso contrario, il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo codifica in HTML il valore della <xref:System.Web.HttpRequest.PathInfo%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo scrive il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#4)]
 [!code-vb[System.Web.HttpRequest_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.Path" />
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
      </Docs>
    </Member>
    <Member MemberName="PhysicalApplicationPath">
      <MemberSignature Language="C#" Value="public string PhysicalApplicationPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhysicalApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PhysicalApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PhysicalApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PhysicalApplicationPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso fisico del file system della directory radice dell'applicazione server attualmente in esecuzione.</summary>
        <value>Percorso del file system della directory radice dell'applicazione corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PhysicalPath">
      <MemberSignature Language="C#" Value="public string PhysicalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhysicalPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PhysicalPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PhysicalPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PhysicalPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il percorso fisico del file system corrispondente all'URL richiesto.</summary>
        <value>Percorso del file system della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In scenari di reindirizzamento in <xref:System.Web.HttpServerUtility.Execute%2A> e <xref:System.Web.HttpServerUtility.Transfer%2A>, <xref:System.Web.HttpRequest.PhysicalPath%2A> proprietà restituisce il percorso per la pagina originale. Per individuare il percorso fisico dell'utilizzo di pagina attualmente in esecuzione il <xref:System.Web.HttpRequest.MapPath%2A> con l'argomento di input impostato come il <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.PhysicalPath%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.MapPath(System.String)" />
        <altmember cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.QueryString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueryString As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ QueryString { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di variabili di tipo stringa di query HTTP.</summary>
        <value>Variabili di stringa di query inviate dal client. Chiavi e valori vengono decodificati come una stringa URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente mostra due modi per ottenere il valore di una variabile di stringa di query denominato "fullname". In ogni caso, se l'URL è `http://www.contoso.com/default.aspx?fullname=Fadi%20Fakhouri`, quindi il valore restituito è "Fadi Fakhouri" perché il `%20` viene decodificato come URL in un carattere di spazio. Se l'URL non ha un `fullname` ID di stringa di query, il valore restituito sarà `null`.  
  
 La prima riga del codice cerca la chiave "fullname" solo nella stringa di query; la seconda riga è per la chiave "fullname" in tutte le raccolte di richiesta HTTP. Per ulteriori informazioni sulla seconda riga, vedere <xref:System.Web.HttpRequest.Item%2A>.  
  
```csharp  
string fullname1 = Request.QueryString["fullname"];  
string fullname2 = Request["fullname"];  
  
```  
  
```vb  
Dim fullname1 As String = Request.QueryString("fullname")  
Dim fullname2 As String = Request("fullname")  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
      </Docs>
    </Member>
    <Member MemberName="RawUrl">
      <MemberSignature Language="C#" Value="public string RawUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RawUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawUrl { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'URL non elaborato della richiesta corrente.</summary>
        <value>URL non elaborato della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'URL non elaborato è definito come parte dell'URL dopo le informazioni di dominio. Nella stringa dell'URL http://www.contoso.com/articles/recent.aspx, l'URL non elaborato è /articles/recent.aspx. L'URL non elaborato include la stringa di query, se presente.  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.RawUrl%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEntityBodyMode">
      <MemberSignature Language="C#" Value="public System.Web.ReadEntityBodyMode ReadEntityBodyMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.ReadEntityBodyMode ReadEntityBodyMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ReadEntityBodyMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadEntityBodyMode As ReadEntityBodyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ReadEntityBodyMode ReadEntityBodyMode { System::Web::ReadEntityBodyMode get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ReadEntityBodyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il corpo dell'entità di richiesta è stato letto e, in caso affermativo, la modalità di lettura.</summary>
        <value>Valore che indica come è stato letto il corpo dell'entità di richiesta oppure che il corpo non è stato letto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene utilizzato per evitare l'eccezione che viene generata se il corpo dell'entità è già stato letto e viene effettuato un tentativo di lettura tramite un metodo non compatibile. Metodi e proprietà che leggono il corpo dell'entità includono quanto segue:  
  
-   La proprietà <xref:System.Web.HttpRequest.Form%2A>.  
  
-   La proprietà <xref:System.Web.HttpRequest.Files%2A>.  
  
-   La proprietà <xref:System.Web.HttpRequest.InputStream%2A>.  
  
-   Metodo <xref:System.Web.HttpRequest.GetBufferedInputStream%2A>.  
  
-   Metodo <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestContext">
      <MemberSignature Language="C#" Value="public System.Web.Routing.RequestContext RequestContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Routing.RequestContext RequestContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RequestContext" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestContext As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Routing::RequestContext ^ RequestContext { System::Web::Routing::RequestContext ^ get(); void set(System::Web::Routing::RequestContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Routing.RequestContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'istanza di <see cref="T:System.Web.Routing.RequestContext" /> della richiesta corrente.</summary>
        <value>Istanza di <see cref="T:System.Web.Routing.RequestContext" /> della richiesta corrente. Per le richieste non indirizzate, l'oggetto <see cref="T:System.Web.Routing.RequestContext" /> restituito è vuoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà fornisce l'accesso per il <xref:System.Web.Routing.RouteData> oggetto per la richiesta corrente. Per ulteriori informazioni sul routing di ASP.NET, vedere. [Routing ASP.NET](http://msdn.microsoft.com/library/892441af-8f1d-483e-ab5f-b82c23576f5a).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestType">
      <MemberSignature Language="C#" Value="public string RequestType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestType" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RequestType" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il metodo di trasferimento dei dati HTTP (<see langword="GET" /> o <see langword="POST" />) usato dal client.</summary>
        <value>Stringa che rappresenta il tipo di chiamata HTTP inviata dal client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.RequestType%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename, bool includeHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename, bool includeHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.SaveAs(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String, includeHeaders As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename, bool includeHeaders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="includeHeaders" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filename">Percorso dell'unità fisica.</param>
        <param name="includeHeaders">Valore booleano che specifica se un'intestazione HTTP deve essere salvata su disco.</param>
        <summary>Salva una richiesta HTTP su disco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contesto della richiesta di salvataggio su disco può essere utile per il debug.  
  
   
  
## Examples  
 Nell'esempio di codice viene chiamato il <xref:System.Web.HttpRequest.SaveAs%2A> metodo quando viene caricata una pagina. La chiamata specifica che la richiesta di essere salvato come file di testo in una directory in cui l'identità del processo ASP.NET dispone delle autorizzazioni di scrittura e che le informazioni di intestazione inclusione nella richiesta sono incluso nel file.  
  
 [!code-csharp[System.Web.HttpRequest_Sample6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample6/cs/requestsample6cs.aspx#1)]
 [!code-vb[System.Web.HttpRequest_Sample6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample6/vb/requestsample6vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">La proprietà <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> dell'oggetto <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> è impostata su <see langword="true" />, ma <paramref name="filename" /> non è un percorso assoluto.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection ServerVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ServerVariables" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ServerVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServerVariables As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ ServerVariables { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una raccolta di variabili server Web.</summary>
        <value>Oggetto <see cref="T:System.Collections.Specialized.NameValueCollection" /> di variabili server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per un elenco di variabili server supportate da IIS, vedere [variabili del Server IIS](http://go.microsoft.com/fwlink/?LinkId=52471).  
  
   
  
## Examples  
 Esempio di codice seguente consente di visualizzare i nomi e valori di tutte le variabili di server specificato.  
  
 [!code-csharp[Classic HttpRequest.ServerVariables Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ServerVariables Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ServerVariables Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ServerVariables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedOutToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken TimedOutToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken TimedOutToken" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TimedOutToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimedOutToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken TimedOutToken { System::Threading::CancellationToken get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Threading.CancellationToken" /> che viene attivato quando scade una richiesta.</summary>
        <value>Token di annullamento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il periodo di timeout può essere specificato nel file Web. config (vedere <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=nameWithType>) o a livello di codice (vedere <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType>). Il periodo di timeout viene misurato dal momento in cui che la richiesta. Se il timeout predefinito di secondi 110 è attiva, il token di annullamento verrà attivato non precedente rispetto a 110 secondi dopo l'inizio dell'elaborazione della richiesta. È possibile modificare il <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType> valore della proprietà e come tempo questo token non è stato attivato ancora, il nuovo valore di timeout verrà rispettato.  
  
 Il token fornisce attualmente solo 15 granularità secondo, che significa che se il valore di timeout è 110 secondi, il token verrà essere attivato in un intervallo di tempo tra 110 e 125 secondi dopo l'inizio dell'elaborazione della richiesta. La granularità potrebbe cambiare in futuro.  
  
 Anche se questa proprietà è thread-safe, esistono restrizioni per l'uso. Per ulteriori informazioni, vedere <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=nameWithType>.  
  
 Questa proprietà non produce alcun effetto se è stata avviata l'elaborazione della richiesta WebSocket.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TlsTokenBindingInfo">
      <MemberSignature Language="C#" Value="public System.Web.ITlsTokenBindingInfo TlsTokenBindingInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.ITlsTokenBindingInfo TlsTokenBindingInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TlsTokenBindingInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TlsTokenBindingInfo As ITlsTokenBindingInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ITlsTokenBindingInfo ^ TlsTokenBindingInfo { System::Web::ITlsTokenBindingInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ITlsTokenBindingInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le informazioni di associazione dei token TLS. La proprietà consente alle applicazioni di recuperare informazioni sul token da richieste HTTP in ingresso per l'autenticazione avanzata.</summary>
        <value>Token di associazione per la connessione corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce `null` su piattaforme non windows10.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalBytes">
      <MemberSignature Language="C#" Value="public int TotalBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TotalBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalBytes As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalBytes { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di byte nel flusso di input corrente.</summary>
        <value>Numero di byte nel flusso di input.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente determina se il <xref:System.Web.HttpRequest.TotalBytes%2A> valore della proprietà è maggiore di 1000 byte e scrive le informazioni in un file.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#6)]
 [!code-vb[System.Web.HttpRequest_Sample1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unvalidated">
      <MemberSignature Language="C#" Value="public System.Web.UnvalidatedRequestValues Unvalidated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UnvalidatedRequestValues Unvalidated" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Unvalidated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unvalidated As UnvalidatedRequestValues" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UnvalidatedRequestValues ^ Unvalidated { System::Web::UnvalidatedRequestValues ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UnvalidatedRequestValues</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i valori delle richieste HTTP senza attivare la convalida delle richieste.</summary>
        <value>Valori delle richieste HTTP che non sono stati controllati usando la convalida delle richieste.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Richiesta di controlli di convalida per il markup HTML e script che potrebbero indicare un potenziale attacco di script tra siti. Per impostazione predefinita, tutti i valori sono controllati usando la convalida delle richieste e se i valori contengono markup o uno script, ASP.NET genera un <xref:System.Web.HttpRequestValidationException> eccezione. Utilizzare questo metodo se si prevede che la richiesta contiene markup (ad esempio, si consente agli utenti di pubblicare il contenuto che contiene markup) e si desidera ottenere il valore non elaborato di una richiesta.  
  
> [!IMPORTANT]
>  Se si utilizza questa proprietà, è necessario controllare manualmente i dati per potenziali attacchi script tra siti.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UnvalidatedRequestValues" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene informazioni sull'URL della richiesta corrente.</summary>
        <value>Oggetto <see cref="T:System.Uri" /> che contiene l'URL della richiesta corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice riportato di seguito viene assegnato il <xref:System.Uri> oggetto della richiesta corrente a una variabile oggetto e consente di visualizzare il valore di due proprietà dell'URL dell'oggetto nell'output HTTP.  
  
 [!code-csharp[Classic HttpRequest.Url Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Url Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Url Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Url Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="P:System.Web.HttpRequest.RawUrl" />
      </Docs>
    </Member>
    <Member MemberName="UrlReferrer">
      <MemberSignature Language="C#" Value="public Uri UrlReferrer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri UrlReferrer" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UrlReferrer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UrlReferrer As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ UrlReferrer { Uri ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene informazioni sull'URL della richiesta precedente del client collegato all'URL corrente.</summary>
        <value>Un oggetto <see cref="T:System.Uri" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente consente di visualizzare il valore di due proprietà dell'URL a cui il client all'applicazione corrente.  
  
 [!code-csharp[Classic HttpRequest.UrlReferrer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UrlReferrer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UrlReferrer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UrlReferrer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException">L'intestazione della richiesta <see langword="Referer" /> HTTP è in formato non valido e non può essere convertita in un oggetto <see cref="T:System.Uri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserAgent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserAgent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserAgent { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la stringa dell'agente utente non elaborata del browser client.</summary>
        <value>Stringa dell'agente utente non elaborata del browser client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente assegna l'identificazione del tipo di browser richiedente a una variabile di stringa.  
  
 [!code-csharp[Classic HttpRequest.UserAgent Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UserAgent Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UserAgent Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UserAgent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.ClientTarget" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="P:System.Web.HttpRequest.Browser" />
      </Docs>
    </Member>
    <Member MemberName="UserHostAddress">
      <MemberSignature Language="C#" Value="public string UserHostAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserHostAddress" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserHostAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserHostAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserHostAddress { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'indirizzo host IP del client remoto.</summary>
        <value>Indirizzo IP del client remoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.UserHostAddress%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserHostName">
      <MemberSignature Language="C#" Value="public string UserHostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserHostName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserHostName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserHostName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserHostName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome DNS del client remoto.</summary>
        <value>Nome DNS del client remoto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Web.HttpUtility.HtmlEncode%2A> metodo per la codifica HTML il valore della <xref:System.Web.HttpRequest.UserHostName%2A> proprietà e <xref:System.IO.TextWriter.WriteLine%2A> metodo per scrivere il valore codificato nel file. Questo esempio di codice fa parte di un esempio più esaustivo disponibile per la <xref:System.Web.HttpRequest> classe.  
  
 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLanguages">
      <MemberSignature Language="C#" Value="public string[] UserLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] UserLanguages" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserLanguages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserLanguages As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ UserLanguages { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene una matrice di stringhe ordinata di preferenze linguistiche del client.</summary>
        <value>Matrice di stringhe ordinata di preferenze linguistiche del client oppure <see langword="null" /> se è vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Esempio di codice seguente consente di acquisire i valori multipli restituiti dal <xref:System.Web.HttpRequest.UserLanguages%2A> proprietà in una matrice di stringhe e scrive il nome di ogni lingua su una riga separata dell'output HTTP.  
  
 I nomi di linguaggio vengono forniti dal browser, ed è presente alcun elenco di tutti i codici possibili definitivo.  In genere costituiti da un codici a due caratteri per la lingua, un trattino e un codice di due caratteri per le impostazioni cultura, ad esempio "en-us" per gli Stati Uniti Inglese e "fr-ca" per il francese canadese.  
  
 [!code-csharp[Classic HttpRequest.UserLanguages Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UserLanguages Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UserLanguages Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UserLanguages Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateInput">
      <MemberSignature Language="C#" Value="public void ValidateInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.ValidateInput" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateInput ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateInput();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina la convalida delle raccolte accessibili mediante le proprietà <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" /> e <see cref="P:System.Web.HttpRequest.QueryString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.HttpRequest> classe utilizza il flag di convalida dell'input per tenere traccia se si desidera eseguire la convalida degli insiemi di richieste tramiti il <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, e <xref:System.Web.HttpRequest.QueryString%2A> proprietà. Il <xref:System.Web.HttpRequest.ValidateInput%2A> metodo imposta questi flag, che, quando le funzioni di accesso get di <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, o <xref:System.Web.HttpRequest.QueryString%2A> proprietà vengono richiamati, viene eseguita la convalida dell'input. La convalida funziona controllando tutti i dati di input con un elenco hardcoded di dati potenzialmente pericolosi.  
  
 Se la funzionalità di convalida è abilitata dall'istruzione di pagina o una configurazione, questo metodo viene chiamato durante la pagina `ProcessRequest` fase di elaborazione. Il <xref:System.Web.HttpRequest.ValidateInput%2A> metodo può essere chiamato dal codice, se non è abilitata la funzionalità di convalida.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpRequestValidationException">Il client ha ricevuto dati potenzialmente pericolosi.</exception>
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
  </Members>
</Type>