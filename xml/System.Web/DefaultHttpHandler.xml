<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="243bdb762c424c9d4cab131c8ae7f5f6cce92362" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46657735" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta le proprietà e i metodi di un gestore HTTP predefinito.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Web.DefaultHttpHandler> oggetto intercetta le richieste in ingresso nella pipeline HTTP quando sia l'intercettazione delle richieste è stato configurato tramite Internet Information Services (IIS) 6.0 e nessun associazioni esplicite si applicano all'estensione richiesta.  
  
 Intercettazione di richiesta può essere impostata tramite la funzionalità di mapping applicazioni jolly introdotta in IIS 6.0. Per altre informazioni, consultare il [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) per informazioni sull'uso di mapping applicazioni jolly per modificare il mapping di un URL.  
  
 Il <xref:System.Web.DefaultHttpHandler> classe implementa il <xref:System.Web.IHttpAsyncHandler> interfaccia per fornire l'elaborazione della richiesta asincrona. Per informazioni generali sui gestori HTTP, vedere [Panoramica di moduli HTTP e gestori HTTP](http://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). Inoltre, per altre informazioni, vedere gli argomenti seguenti:  
  
-   Informazioni sulla creazione di gestori HTTP asincroni, vedere [procedura dettagliata: creazione di un gestore HTTP asincrono](http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9).  
  
-   Sulla registrazione di gestori HTTP, vedere [procedura: registrare i gestori HTTP](http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60).  
  
 Le classi possono derivare il <xref:System.Web.DefaultHttpHandler> classe per fornire la gestione personalizzata delle richieste. Un gestore HTTP asincrono derivato dal <xref:System.Web.DefaultHttpHandler> è stato possibile eseguire l'override di <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> metodo per modificare la modalità di elaborazione richieste.  
  
 Oggetto <xref:System.Web.DefaultHttpHandler> non usa gli errori ASP.NET. Il contenuto esistente che usa gli errori di IIS o un meccanismo di errore personalizzato ISAPI decenza funzionerebbe invariato.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come implementare un gestore HTTP personalizzato mediante derivazione da di <xref:System.Web.DefaultHttpHandler> classe.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Procedura: registrare i gestori HTTP</related>
    <related type="Article" href="http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Procedura: creare un gestore HTTP asincrono</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto che fornisce riferimenti agli oggetti server intrinseci utilizzati per soddisfare le richieste HTTP.</param>
        <param name="callback">Metodo da chiamare una volta completata la chiamata asincrona al metodo. Se <c>callback</c> è <see langword="null" />, il delegato non viene chiamato.</param>
        <param name="state">Dati di stato necessari per l'elaborazione della richiesta.</param>
        <summary>Avvia una chiamata asincrona al gestore HTTP.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> che contiene informazioni relative allo stato del processo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si crea un gestore HTTP per l'utilizzo asincrono, il gestore deve implementare asincrona <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> e <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metodi che vengono chiamati in modo asincrono da ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Le precondizioni per elaborare una richiesta hanno esito negativo e il file richiesto presenta il suffisso ASP oppure la richiesta è stata inviata tramite POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il contesto associato all'oggetto <see cref="T:System.Web.DefaultHttpHandler" /> corrente.</summary>
        <value>Oggetto <see cref="T:System.Web.HttpContext" /> che contiene il contesto corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DefaultHttpHandler.Context%2A> proprietà offre l'accesso all'oggetto corrente <xref:System.Web.HttpContext> oggetto per le classi derivate. Un' <xref:System.Web.HttpContext> oggetto consente di accedere alle proprietà intrinseche <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, e <xref:System.Web.HttpApplication.Server%2A> proprietà per la richiesta. Per altre informazioni sull'accesso alle informazioni contestuali, vedere <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Oggetto che contiene informazioni relative allo stato del processo.</param>
        <summary>Fornisce un metodo di fine per un processo asincrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> metodo consente di generare le eccezioni vengono intercettate durante il processo asincrono.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme delle intestazioni e dei valori della richiesta da trasferire insieme alla richiesta.</summary>
        <value>Classe <see cref="T:System.Collections.Specialized.NameValueCollection" /> contenente le intestazioni e i valori della richiesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> proprietà restituisce una raccolta vuota, a meno che non venga inserita in una classe derivata dal <xref:System.Web.DefaultHttpHandler> classe. Le intestazioni che vengono aggiunte vengono aggiunti alla raccolta di intestazioni della richiesta prima di passare la richiesta torna a Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore booleano che indica che l'istanza corrente della classe <see cref="T:System.Web.DefaultHttpHandler" /> può essere utilizzata da un'altra richiesta.</summary>
        <value>
          <see langword="true" /> se la classe <see cref="T:System.Web.DefaultHttpHandler" /> può essere riutilizzata; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare in modo esplicito il <xref:System.Web.DefaultHttpHandler.IsReusable%2A> proprietà `true` o `false`, eseguire l'override di <xref:System.Web.DefaultHttpHandler.IsReusable%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Viene chiamato quando le precondizioni impediscono l'elaborazione di una richiesta da parte dell'oggetto <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le precondizioni sono specificate dal client i campi di intestazione di richiesta e vengono valutate nel server Web. Ad esempio, usando le precondizioni, i client possono impedire un metodo richiesto (ad esempio, GET) di essere applicata a una risorsa diversa da quella desiderata. Per altre informazioni, vedere la sezione 14, "Definizioni di campo di intestazione", nelle [Hypertext Transfer Protocol, protocollo HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) specifica sul sito Web del World Wide Web Consortium (W3C).  
  
 Il <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> viene chiamato quando le precondizioni impediscono il <xref:System.Web.DefaultHttpHandler> oggetto da una richiesta di elaborazione. Una classe derivata potrebbe quindi sostituire il <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> metodo per generare un'eccezione quando le condizioni preliminari hanno esito negativo. Il <xref:System.Web.DefaultHttpHandler> non viene generata un'eccezione <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> (metodo).  
  
 Uno dei seguenti provocherà l'esito negativo delle precondizioni:  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Modifica dei criteri di cache per la risposta.  
  
-   Aggiunta di un <xref:System.IO.Stream> oggetto come un filtro per il <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue l'override dell'URL di destinazione per la richiesta corrente.</summary>
        <returns>URL sottoposto a override da utilizzare nella richiesta oppure <see langword="null" /> se non viene fornito un URL sottoposto a override.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> restituzione del metodo `null` a meno che non sia sottoposta a override in una classe derivata dal <xref:System.Web.DefaultHttpHandler> classe.  
  
 Il <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> viene chiamato il metodo solo se ASP.NET è in esecuzione in modalità di isolamento di processo di lavoro in IIS 6.0 e se la risposta non è stato modificato prima di <xref:System.Web.DefaultHttpHandler> oggetto è stato chiamato. La risposta viene modificata da una delle operazioni seguenti:  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Chiamata del metodo <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Modifica dei criteri di cache per la risposta.  
  
-   Aggiunta di un <xref:System.IO.Stream> oggetto come un filtro per il <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> proprietà.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Oggetto che fornisce riferimenti agli oggetti server intrinseci utilizzati per soddisfare le richieste HTTP.</param>
        <summary>Consente a un oggetto <see cref="T:System.Web.DefaultHttpHandler" /> di elaborare le richieste Web HTTP Web.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> metodo non deve essere chiamato in modo sincrono. Le classi che derivano dal <xref:System.Web.DefaultHttpHandler> classe può eseguire l'override di <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> per garantire l'elaborazione di richieste personalizzato.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> viene chiamato in modo sincrono.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>