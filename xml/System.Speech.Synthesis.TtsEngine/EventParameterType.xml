<Type Name="EventParameterType" FullName="System.Speech.Synthesis.TtsEngine.EventParameterType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="47e367688800a4539a5eb1761c4a6ade51e841bf" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36408936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum EventParameterType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed EventParameterType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.EventParameterType" />
  <TypeSignature Language="VB.NET" Value="Public Enum EventParameterType" />
  <TypeSignature Language="C++ CLI" Value="public enum class EventParameterType" />
  <TypeSignature Language="F#" Value="type EventParameterType = " />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Enumera i tipi di puntatori di dati passati agli eventi di sintesi vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> viene utilizzato per costruire un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> oggetto. Un'istanza di <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> passato come il `parameterType` argomento del costruttore per <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> specifica il modo in cui `param2` argomento del costruttore (che deve essere un `System.IntPtr`) viene interpretato.  
  
 La scelta della <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> dipende dal tipo di evento richiesto, come specificato da un membro del <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 Per informazioni dettagliate su come utilizzare <xref:System.Speech.Synthesis.TtsEngine.EventParameterType>, vedere la documentazione per <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>  
  
   
  
## Examples  
 Nell'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzato che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> trovato dal valore di enumerazione dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà sul <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza è <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da leggere.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione il <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene usata per creare un evento per unità viene creato un indicatore di avanzamento sintetizzatore.  
  
         I parametri nel <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, tra cui la <xref:System.Speech.Synthesis.TtsEngine.EventParameterType> valore del membro restituito da <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>, vengono utilizzate per registrare l'evento generato mediante la `LogSpeechEvent` (metodo).  
  
3.  Viene quindi chiamato il motore di rendering vocale con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
         LogSpeechEvent(spEvent.EventId,   
                        spEvent.ParameterType,   
                        spEvent.Param1,  
                        spEvent.Param2);  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" />
  </Docs>
  <Members>
    <Member MemberName="Object">
      <MemberSignature Language="C#" Value="Object" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Object = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberSignature Language="VB.NET" Value="Object" />
      <MemberSignature Language="C++ CLI" Value="Object" />
      <MemberSignature Language="F#" Value="Object = 2" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Object" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Attualmente non supportato.</summary>
      </Docs>
    </Member>
    <Member MemberName="Pointer">
      <MemberSignature Language="C#" Value="Pointer" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Pointer = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberSignature Language="VB.NET" Value="Pointer" />
      <MemberSignature Language="C++ CLI" Value="Pointer" />
      <MemberSignature Language="F#" Value="Pointer = 3" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Pointer" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Attualmente non supportato.</summary>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="String" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType String = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberSignature Language="VB.NET" Value="String" />
      <MemberSignature Language="C++ CLI" Value="String" />
      <MemberSignature Language="F#" Value="String = 4" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.String" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Indica che l'argomento <paramref name="param2" /> all'oggetto <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> è <see langword="System.IntPtr" /> creato utilizzando <see langword="System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni" /> che fa riferimento a un oggetto <see langword="System.String" />; il parametro <paramref name="param1" /> può accettare qualsiasi valore.</summary>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="Token" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Token = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberSignature Language="VB.NET" Value="Token" />
      <MemberSignature Language="C++ CLI" Value="Token" />
      <MemberSignature Language="F#" Value="Token = 1" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Token" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Indica che l'argomento <paramref name="param2" /> all'oggetto <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> è</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 è un `System.IntPtr` creato utilizzando `System.Runtime.InteropServices.Marshal.PtrToStructure`  
  
 riferimento a un Windows Desktop vocale tecnologia token - un tecnologia vocale Desktop Windows oggetto che rappresenta una risorsa, ad esempio una voce (<xref:System.Speech.Synthesis.VoiceInfo>); `param1` può accettare qualsiasi valore.  
  
> [!NOTE]
>  Attualmente le istanze di un gestito sintetica vocale, scritto utilizzando i membri del <xref:System.Speech.Synthesis> spazio dei nomi, non è possibile modificare le risorse dopo la costruzione  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Undefined">
      <MemberSignature Language="C#" Value="Undefined" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Synthesis.TtsEngine.EventParameterType Undefined = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberSignature Language="VB.NET" Value="Undefined" />
      <MemberSignature Language="C++ CLI" Value="Undefined" />
      <MemberSignature Language="F#" Value="Undefined = 0" Usage="System.Speech.Synthesis.TtsEngine.EventParameterType.Undefined" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.EventParameterType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Indica che l'argomento <paramref name="param2" /> all'oggetto <see cref="T:System.Speech.Synthesis.TtsEngine.SpeechEventInfo" /> non è definito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere `param1` e `param2` verranno ignorati. Tuttavia, se <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> viene <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary>, può essere generato un evento di indicatore di stato `param1` deve essere un intero contenente la lunghezza della parola corrente, e `param2` un `System.IntPtr` che fanno riferimento a un numero intero che contiene l'offset dell'oggetto corrente Word.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>