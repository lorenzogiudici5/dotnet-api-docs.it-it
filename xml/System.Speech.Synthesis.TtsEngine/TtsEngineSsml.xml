<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c219b0e7a240dcdb864633218b0d33ebd17771c9" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TtsEngineSsml" />
  <TypeSignature Language="C++ CLI" Value="public ref class TtsEngineSsml abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Classe base astratta che deve essere implementata da tutti i motori di sintesi vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per creare un modulo personalizzato sintesi vocale, un'applicazione deve sempre implementare una classe derivata dalla classe base astratta <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>.  
  
 Un'implementazione correttamente registrata di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> può quindi essere utilizzato come una voce di sintetizzatore da <xref:System.Speech.Synthesis> applicazioni basate sullo spazio dei nomi.  
  
 Gli oggetti che ereditano da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> deve eseguire l'override dei seguenti membri: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> e <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>.  
  
 Il membro di più importante di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> classe da implementare è il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> (metodo).  
  
 Il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> metodo viene chiamato dal parser testo infrastrutture ricezione:  
  
1.  Un riferimento di <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaccia, che fornisce l'accesso ai servizi di sistema, ad esempio anche l'accodamento dei messaggi e la scrittura dell'output audio.  
  
2.  Matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza generato da un input vocale sintesi Markup Language (SSML). Oltre a testo da sottoporre a rendering come riconoscimento vocale, l'analisi dell'elemento SSML archivia informazioni sugli attributi richiesti del contenuto vocale in un <xref:System.Speech.Synthesis.TtsEngine.FragmentState> istanza associata a ogni ingresso <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oggetto.  
  
 Un'applicazione di sintetizzatore vocale può facoltativamente effettuare richieste per un formato di output specificato mediante l'implementazione <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> chiamata dalla piattaforma durante il tentativo di fornire output audio corretto.  
  
 Un responsabile dell'implementazione può anche fornire il supporto per la gestione di definizioni esterne di pronunce o dizionari, loro implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> e <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (registryKey As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TtsEngineSsml(System::String ^ registryKey);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">Nome completo della chiave del Registro di sistema per il token vocale associato all'implementazione di <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />. motore.</param>
        <summary>Costruisce una nuova istanza di <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> in base a una chiave del Registro di sistema appropriata per il token vocale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere generate da chiamate a questo costruttore <xref:System.Speech.Synthesis> applicazioni selezionando una voce sintetizzatore utilizzabile da un'istanza di <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
 Oggetto <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> deve essere registro HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Speech\Voices\Tokens.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void AddLexicon(Uri ^ uri, System::String ^ mediaType, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Istanza valida di <see langword="System.Uri" /> che indica la posizione delle informazioni del lessico.</param>
        <param name="mediaType">Stringa contenente il nome del tipo di supporto del lessico. Per i tipi di supporti non viene fatta distinzione tra maiuscole e minuscole.</param>
        <param name="site">Riferimento a un'interfaccia <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> utilizzata per interagire con l'infrastruttura della piattaforma.</param>
        <summary>Aggiunge un lessico all'oggetto <see langword="Synthesizer" /><see langword="Voice" /> implementato dall'istanza corrente di <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un dizionario di pronuncia è una raccolta di parole o frasi con le pronunce specificati utilizzando un alfabeto pronuncia appropriato.  
  
 Questo metodo viene in genere chiamato dall'infrastruttura della piattaforma in risposta a un <xref:System.Speech.Synthesis> basato su applicazioni che chiamano <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> e utilizzando la voce sintetizzatore implementata dall'oggetto corrente <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> istanza.  
  
 Il valore di `mediaType` è in genere una specifica MIME, la specifica SSML utilizza MIME per le specifiche dei supporti.  
  
   
  
## Examples  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> utilizza il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaccia passato per caricare una libreria di oggetti da una risorsa. Viene quindi archiviata una `System.IO.Stream` per il dizionario in una `System.Collections.Generic.Dictionary` istanza, indicizzata da lessico URI.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È responsabilità dell'implementazione completamente acquisire familiarità con ed essere in grado di elaborare il dizionario è archiviato in <paramref name="uri" />. L'implementazione deve inoltre tenere traccia e gestire la durata di tutti i dizionari che vengono aggiunti.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IntPtr GetOutputFormat(System::Speech::Synthesis::TtsEngine::SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">Membro valido dell'enumerazione di <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> che indica il tipo del formato di audio di output richiesto.</param>
        <param name="targetWaveFormat">Puntatore a un oggetto <see langword="struct" /> contenente l'impostazione di dettaglio per il tipo di formato audio richiesto dall'argomento <c>speakOutputFormat</c>.</param>
        <summary>Restituisce il migliore output audio corrispondente supportato da una determinata riposta di un motore di sintesi a una richiesta del motore sintetizzatore per il supporto di un particolare formato di output.</summary>
        <returns>Restituisce un'istanza di <see langword="IntPtr" /> valida che fa riferimento a un oggetto <see langword="struct" /> contenente informazioni dettagliate sul formato di output.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La struttura utilizzata come `targetWaveFormat` e restituito dalla deve compatibile con il metodo di `WAVEFORMATEX` disponibile in SAPI, e il valore restituito deve essere allocato utilizzando `CoTaskMemAlloc`.  
  
 Il `struct` deve fornire funzionalità equivalente a:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 L'implementazione di esempio seguente convalida input selezionato, utilizzarle se sono all'interno di tolleranza, in caso contrario utilizzando i valori predefiniti.  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Oggetto che eredita da <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> deve esaminare il formato di output richiesto come specificato da <paramref name="targetWaveFormat" /> e restituire il formato più vicino che supporta.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void RemoveLexicon(Uri ^ uri, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">Istanza valida di <see langword="System.Uri" /> che indica la posizione delle informazioni del lessico.</param>
        <param name="site">Riferimento a un'interfaccia <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> passata dall'infrastruttura della piattaforma per consentire l'accesso alle risorse dell'infrastruttura.</param>
        <summary>Rimuove un lessico attualmente caricato dall'oggetto <see langword="Synthesizer" /><see langword="Voice" /> implementato dall'istanza corrente di <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un dizionario di pronuncia è una raccolta di parole o frasi con le pronunce specificati utilizzando un alfabeto pronuncia appropriato.  
  
 Questo metodo viene chiamato in genere in risposta a un <xref:System.Speech.Synthesis> basato su applicazioni che chiamano <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> e utilizzando la voce sintetizzatore implementata dall'oggetto corrente <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> istanza.  
  
   
  
## Examples  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> utilizza lessico URI per un'istanza di query `System.Collections.Generic.Dictionary` per il `System.IO.Stream`, chiude il flusso e rimuove l'uri che fa riferimento a lessico.  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>È responsabilità dell'implementazione completamente acquisire familiarità con ed essere in grado di elaborare il dizionario è archiviato in <paramref name="uri" />. L'implementazione deve inoltre tenere traccia e gestire la durata di tutti i dizionari che vengono rimossi.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Speak (fragment As TextFragment(), waveHeader As IntPtr, site As ITtsEngineSite)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Speak(cli::array &lt;System::Speech::Synthesis::TtsEngine::TextFragment ^&gt; ^ fragment, IntPtr waveHeader, System::Speech::Synthesis::TtsEngine::ITtsEngineSite ^ site);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">Matrice di istanze di <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> che contengono il testo di cui eseguire il rendering come input vocale.</param>
        <param name="waveHeader">
          <see langword="IntPtr" /> che punta a una struttura contenente il formato di output audio.</param>
        <param name="site">Riferimento a un'interfaccia <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> passata dall'infrastruttura della piattaforma per consentire l'accesso alle risorse dell'infrastruttura.</param>
        <summary>Esegue il rendering della matrice <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> nel formato di output specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La struttura utilizzata come `waveHeader` e restituito dalla deve compatibile con il metodo di `WAVEFORMATEX` disponibile in SAPI.  
  
 Il `struct` deve fornire funzionalità equivalente a:  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## Examples  
 Nell'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzato che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valore di enumerazione da trovato dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da leggere.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> il tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene utilizzata per creare un evento per l'unità viene creato un indicatore di avanzamento sintetizzatore.  
  
3.  Viene quindi chiamato il motore di rendering vocale con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sintetizzatore vocale personalizzato implementa usando <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> e <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> funzionano come filtri o gli intermediari tra applicazioni sintetizzatore costruite usando l'infrastruttura della piattaforma tra i membri del <see cref="N:System.Speech.Synthesis" /> dello spazio dei nomi e moduli di sintesi vocale sistema sottostante.  
  
 Oggetto <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementazione:  
  
1.  Intercettazione o modificare gli aspetti di in ingresso <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> oggetti  
  
2.  Genera gli eventi necessari, utilizzare il sito di riferimento a un <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> istanza  
  
3.  Genera il sintetizzato effettivo.  
  
 Generazione di riconoscimento vocale viene generalmente eseguita chiamando <c>Speak</c> su uno del contenuto vocale forniti dal sistema operativo di motori di rendering.  
  
 Se uno dei motori di rendering disponibili vocale non viene utilizzato, un oggetto che eredita da <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> deve creare il proprio motore di rendering di riconoscimento vocale.  
  
 L'accesso al <c>Speak</c> metodo ottenuto mediante il Registro di sistema e reflection. .  
  
 Quando si eredita da <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, è necessario eseguire l'override dei seguenti membri: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, e <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>