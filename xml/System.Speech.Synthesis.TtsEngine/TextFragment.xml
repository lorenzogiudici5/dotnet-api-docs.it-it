<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="95f9a243133d9579a5ca29531196e3a51c19a98d" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37610119" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFragment" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFragment" />
  <TypeSignature Language="F#" Value="type TextFragment = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene informazioni sugli attributi di testo e vocali da utilizzare nel motore di sintesi vocale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'infrastruttura della piattaforma vocale decomprime la struttura basata su XML di input SSML e costrutti <xref:System.Speech.Synthesis.TtsEngine.TextFragment> oggetti.  
  
 Contenuto vocale è disponibile tramite il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, e <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> delle proprietà di un <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza.  
  
 Vocale attributo informazioni, ad esempio vengono ottenuti enfasi y, x e frequenza, il <xref:System.Speech.Synthesis.TtsEngine.FragmentState> oggetto restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment> <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà.  
  
   
  
## Examples  
 L'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzata che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice del <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
     Particolare attenzione viene utilizzato in modo da rispettare il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sull'originale <xref:System.Speech.Synthesis.TtsEngine.TextFragment> quando si crea il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sul nuovo <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valore di enumerazione da trovato dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza è <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da pronunciare.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione il <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene usata per creare un evento all'unità viene creato un indicatore di avanzamento del sintetizzatore.  
  
3.  Un motore di rendering di sintesi vocale viene quindi chiamato con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFragment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Costruisce una nuova istanza di <see langword="TextFragment" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Costruttore predefinito per <xref:System.Speech.Synthesis.TtsEngine.TextFragment>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As FragmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Synthesis::TtsEngine::FragmentState State { System::Speech::Synthesis::TtsEngine::FragmentState get(); void set(System::Speech::Synthesis::TtsEngine::FragmentState value); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Synthesis.TtsEngine.FragmentState with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le informazioni sugli attributi vocali per <see langword="TextFragment" />.</summary>
        <value>Un'istanza di <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> viene restituita o utilizzata per impostare le informazioni sugli attributi vocali per <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito di questa proprietà è `null`.  
  
 Informazioni di prosodia possono essere ottenute dall'istanza di <xref:System.Speech.Synthesis.TtsEngine.Prosody> restituito dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> proprietà nell'istanza di <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito da <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la lunghezza del testo pronunciato nel frammento.</summary>
        <value>Un <see langword="int" /> viene restituito o può essere utilizzato per impostare la lunghezza, in caratteri, della stringa di testo associata al frammento da risolvere.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito di questa proprietà è 0.  
  
   
  
## Examples  
 L'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzata che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice del <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
     Particolare attenzione viene utilizzato in modo da rispettare il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sull'originale <xref:System.Speech.Synthesis.TtsEngine.TextFragment> quando si crea il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sul nuovo <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valore di enumerazione da trovato dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza è <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da pronunciare.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione il <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene usata per creare un evento all'unità viene creato un indicatore di avanzamento del sintetizzatore.  
  
3.  Un motore di rendering di sintesi vocale viene quindi chiamato con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property TextOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TextOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TextOffset : int with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione iniziale del testo nel frammento.</summary>
        <value>Un <see langword="int" /> viene restituito o può essere utilizzato per impostare la posizione iniziale, in caratteri, della parte della stringa di testo associata a questo frammento da risolvere.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito di questa proprietà è 0.  
  
   
  
## Examples  
 L'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzata che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice del <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
     Particolare attenzione viene utilizzato in modo da rispettare il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sull'originale <xref:System.Speech.Synthesis.TtsEngine.TextFragment> quando si crea il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sul nuovo <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valore di enumerazione da trovato dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza è <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da pronunciare.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione il <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene usata per creare un evento all'unità viene creato un indicatore di avanzamento del sintetizzatore.  
  
3.  Un motore di rendering di sintesi vocale viene quindi chiamato con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberSignature Language="VB.NET" Value="Public Property TextToSpeak As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TextToSpeak { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextToSpeak : string with get, set" Usage="System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Imposta o ottiene il testo pronunciato del frammento.</summary>
        <value>
          <see langword="System.String" /> viene restituito o può essere utilizzato per impostare il testo pronunciato da utilizzare nel motore di sintesi vocale per generare l'output audio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore predefinito di questa proprietà è `System.String.Empty`.  
  
 Le applicazioni sono liberi di modificare completamente il valore di <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>.  
  
 Reimpostazione del valore di <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> non verrà modificato il valore di <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> e <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>.  
  
   
  
## Examples  
 L'esempio seguente fa parte di un'implementazione di sintesi vocale personalizzata che eredita da <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>e tramite l'utilizzo di <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, e <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>.  
  
 L'implementazione di <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  Riceve una matrice di <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze e crea una nuova matrice del <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze deve essere passato il `Speak` metodo su un motore di sintesi sottostante.  
  
     Particolare attenzione viene utilizzato in modo da rispettare il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> sull'originale <xref:System.Speech.Synthesis.TtsEngine.TextFragment> quando si crea il <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> sul nuovo <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanze.  
  
2.  Se il <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> valore di enumerazione da trovato dal <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> proprietà le <xref:System.Speech.Synthesis.TtsEngine.FragmentState> restituito dal <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> proprietà di ogni <xref:System.Speech.Synthesis.TtsEngine.TextFragment> istanza è <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, l'implementazione  
  
    -   Traduce Americanism a Britishisms nel testo da pronunciare.  
  
    -   Se il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> proprietà il <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfacce fornite per il supporto di implementazione il <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> tipo di evento, un <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> istanza viene usata per creare un evento all'unità viene creato un indicatore di avanzamento del sintetizzatore.  
  
3.  Un motore di rendering di sintesi vocale viene quindi chiamato con modificato <xref:System.Speech.Synthesis.TtsEngine.TextFragment> matrice.  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>