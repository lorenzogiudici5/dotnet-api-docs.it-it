<Type Name="ICommandService" FullName="System.Activities.Presentation.Hosting.ICommandService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a16ab0752b5ebaa133db0c7281c6d508dee972a" />
    <Meta Name="ms.sourcegitcommit" Value="d0bb31ec8354fa58c62c2a646057eec11d3e2150" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/17/2018" />
    <Meta Name="ms.locfileid" Value="36653876" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICommandService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandService" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.ICommandService" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandService" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandService" />
  <TypeSignature Language="F#" Value="type ICommandService = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="aa016-101">Rappresenta un'interfaccia di comando usata per l'integrazione delle azioni di Progettazione flussi di lavoro, ad esempio il menu di scelta rapida, con implementazioni personalizzate, quali il servizio del visualizzatore delle proprietà, il servizio di debug e così via.</span>
      <span class="sxs-lookup">
        <span data-stu-id="aa016-101">Represents a command interface that is used for integration of Windows Workflow Designer actions (for example, context menu), with custom-provided implementations, such as property browser service, debugging service, and so on.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanExecuteCommand">
      <MemberSignature Language="C#" Value="public bool CanExecuteCommand (int commandId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanExecuteCommand(int32 commandId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.ICommandService.CanExecuteCommand(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanExecuteCommand (commandId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanExecuteCommand(int commandId);" />
      <MemberSignature Language="F#" Value="abstract member CanExecuteCommand : int -&gt; bool" Usage="iCommandService.CanExecuteCommand commandId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandId">
          <span data-ttu-id="aa016-102">Identificatore di comando da controllare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-102">The command identifier to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa016-103">Verifica se è possibile eseguire il comando specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-103">Verifies whether the specified command can be executed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aa016-104">
            <see langword="true" /> se il comando specificato può essere eseguito; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-104">
              <see langword="true" /> if the specified command can be executed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="aa016-105">Il comando non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-105">The command is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public void ExecuteCommand (int commandId, System.Collections.Generic.Dictionary&lt;string,object&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecuteCommand(int32 commandId, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.ICommandService.ExecuteCommand(System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteCommand (commandId As Integer, parameters As Dictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteCommand(int commandId, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteCommand : int * System.Collections.Generic.Dictionary&lt;string, obj&gt; -&gt; unit" Usage="iCommandService.ExecuteCommand (commandId, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.Int32" />
        <Parameter Name="parameters" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="commandId">
          <span data-ttu-id="aa016-106">Identificatore di comando da controllare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-106">The command identifier to be checked.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="aa016-107">Parametri del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-107">The parameters of the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa016-108">Esegue il comando con i parametri e l'identificatore di comando specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-108">Executes the command with the specified command identifier and parameters.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="aa016-109">Il comando non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-109">The command is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsCommandSupported">
      <MemberSignature Language="C#" Value="public bool IsCommandSupported (int commandId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsCommandSupported(int32 commandId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.ICommandService.IsCommandSupported(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCommandSupported (commandId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsCommandSupported(int commandId);" />
      <MemberSignature Language="F#" Value="abstract member IsCommandSupported : int -&gt; bool" Usage="iCommandService.IsCommandSupported commandId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandId">
          <span data-ttu-id="aa016-110">Identificatore di comando da controllare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-110">The command identifier to be checked.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="aa016-111">Restituisce un valore booleano che indica se l'identificatore di comando specificato è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-111">Returns a Boolean value that indicates whether the specified command identifier is supported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="aa016-112">
            <see langword="true" /> se l'ID di comando specificato è supportato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="aa016-112">
              <see langword="true" /> if the specified command ID is supported; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>