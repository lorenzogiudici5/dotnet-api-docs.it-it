<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8a4da782ccae3726e97d3194a82fddde8727ec0" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316739" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Consente a un implementatore di controllare il messaggio di errore restituito al chiamante e facoltativamente di eseguire un'elaborazione di errori personalizzata, ad esempio la registrazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per controllare in modo esplicito il comportamento dell'applicazione quando viene generata un'eccezione, implementare il <xref:System.ServiceModel.Dispatcher.IErrorHandler> interfaccia e aggiungerla al <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>del <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> proprietà. <xref:System.ServiceModel.Dispatcher.IErrorHandler> consente di controllare in modo esplicito l'errore SOAP generato, decidere se restituirlo al client ed eseguire attività associate, ad esempio la registrazione. I gestori di errori vengono chiamati nell'ordine in cui sono stati aggiunti alla proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 Implementare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> per controllare il messaggio di errore restituito al client.  
  
 Implementare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> per garantire i comportamenti relativi all'errore, inclusa la registrazione dell'errore, l'esecuzione di un FailFast, la chiusura dell'applicazione e così via.  
  
> [!NOTE]
>  Poiché è possibile chiamare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> da posizioni diverse, non vi è alcun modo di sapere su quale thread viene chiamato il metodo. Non basarsi sul metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> chiamato sul thread dell'operazione.  
  
 Tutte le implementazioni di <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> vengono chiamate prima di inviare un messaggio di risposta. Quando tutte le implementazioni di <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> sono state chiamate e hanno restituito e se l'elemento `fault` è non  `null`, viene restituito al client in base al contratto dell'operazione. Se `fault` è `null` dopo che tutte le implementazioni sono state chiamate, il messaggio di risposta viene controllato dal valore della proprietà <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Possono verificarsi eccezioni dopo che tutte le implementazioni di <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> sono state chiamate e un messaggio di risposta è stato affidato al canale. Se si verifica un'eccezione di canale (ad esempio, la serializzazione del messaggio difficoltà) <xref:System.ServiceModel.Dispatcher.IErrorHandler> oggetti vengono visualizzata una notifica. In questo caso, deve ancora assicurarsi che l'ambiente di sviluppo memorizza nella cache e visualizza tali eccezioni o si avvalgono di analisi per individuare il problema. Per ulteriori informazioni sulla traccia, vedere [utilizzando opzioni di traccia per risolvere i problemi dell'applicazione](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  
  
 Una volta inviato il messaggio di risposta, tutte le implementazioni di <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> vengono chiamate nello stesso ordine.  
  
 In genere, un'implementazione di <xref:System.ServiceModel.Dispatcher.IErrorHandler> viene aggiunta alla proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> nel servizio (e nel client nel caso di comunicazione duplex).  
  
 È possibile aggiungere <xref:System.ServiceModel.Dispatcher.IErrorHandler> alla fase di esecuzione implementando un comportamento (un oggetto <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> ) e utilizzare il comportamento a livello di programmazione, da un file di configurazione o con un attributo personalizzato per allegare <xref:System.ServiceModel.Dispatcher.IErrorHandler>.  
  
 Per ulteriori informazioni sull'utilizzo dei comportamenti per modificare il runtime, vedere [la configurazione e l'estensione del Runtime con i comportamenti](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato un servizio che implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> che restituisce solo <xref:System.ServiceModel.FaultException%601> di tipo `GreetingFault` quando un metodo del servizio genera un'eccezione gestita.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio per aggiungere l'implementazione di <xref:System.ServiceModel.Dispatcher.IErrorHandler> alla proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrato come configurare il servizio per caricare il comportamento del servizio utilizzando un file di configurazione dell'applicazione. Per ulteriori dettagli su come esporre il comportamento di un servizio in un file di configurazione, vedere <xref:System.ServiceModel.Description.IServiceBehavior>.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">To be added.</param>
        <param name="exception">To be added.</param>
        <summary>Consente l'elaborazione relativa agli errori e restituisce un valore che indica se il dispatcher interrompe la sessione e il contesto dell'istanza in alcuni casi.</summary>
        <returns>
          <see langword="true" /> se Windows Communication Foundation (WCF) non deve interrompere la sessione, se presente, e il contesto dell'istanza se il contesto dell'istanza non è <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> per implementare i comportamenti relativi agli errori, ad esempio la registrazione degli errori, le notifiche di sistema, la chiusura dell'applicazione e così via e restituire un valore che specifichi se l'eccezione è stata gestita in modo appropriato.  
  
> [!NOTE]
>  Poiché è possibile chiamare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> da posizioni diverse, non vi è alcun modo di sapere su quale thread viene chiamato il metodo. Non basarsi sul metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> chiamato sul thread dell'operazione.  
  
 Vengono chiamate tutte le implementazioni <xref:System.ServiceModel.Dispatcher.IErrorHandler>. Per impostazione predefinita (quando il valore restituito è `false`), se si è verificata un'eccezione, il dispatcher interrompe qualsiasi sessione e <xref:System.ServiceModel.InstanceContext> se <xref:System.ServiceModel.InstanceContextMode> è diverso da <xref:System.ServiceModel.InstanceContextMode.Single>.  L'eccezione viene considerata non gestita e qualsiasi stato viene considerato danneggiato.  
  
 Restituire `true` da <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> per evitare questo comportamento predefinito. Se un gestore di errori restituisce `true` indica a WCF che è possibile continuare a utilizzare lo stato associato alla richiesta non riuscita.  
  
 Se nessun gestore di errori restituisce `true` dal metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>, l'eccezione viene considerata non gestita e viene applicata la risposta predefinita, comportando una potenziale interruzione di <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> e del canale durante la comunicazione su un canale della sessione oppure la proprietà <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> non è impostata su <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.  
  
 Il parametro `error` non è mai `null` e contiene l'oggetto eccezione generato.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato un servizio che implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> che restituisce solo <xref:System.ServiceModel.FaultException%601> di tipo `GreetingFault` quando un metodo del servizio genera un'eccezione gestita.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio per aggiungere l'implementazione di <xref:System.ServiceModel.Dispatcher.IErrorHandler> alla proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrato come configurare il servizio per caricare il comportamento del servizio utilizzando un file di configurazione dell'applicazione. Per ulteriori dettagli su come esporre il comportamento di un servizio in un file di configurazione, vedere <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">To be added.</param>
        <param name="exception">To be added.</param>
        <param name="version">La versione SOAP del messaggio.</param>
        <param name="fault">L'oggetto <see cref="T:System.ServiceModel.Channels.Message" /> restituito al client o al servizio, nel caso duplex.</param>
        <summary>Consente di creare un oggetto <see cref="T:System.ServiceModel.FaultException`1" /> restituito da un'eccezione nel corso di un metodo del servizio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> per creare un messaggio di errore personalizzato da restituire al client.  Il <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> metodo sarà sempre chiamato per le eccezioni che lasciano operazioni, ad eccezione di quando il runtime WCF riconosce l'eccezione come particolarmente irreversibile e rigenera l'eccezione stessa. Quando tutte le implementazioni di <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> sono state chiamate, il messaggio di errore viene restituito al client (se l'elemento `fault` è non  `null`). Se il `fault` parametro `null` il messaggio di errore predefinito viene inviato al client.  
  
> [!NOTE]
>  Il messaggio in entrata che causa l'errore di elaborazione è disponibile durante l'applicazione di questo metodo dalla proprietà <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Poiché è possibile chiamare il metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> da posizioni diverse, non vi è alcun modo di sapere su quale thread viene chiamato il metodo. Non basarsi sul metodo <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> chiamato sul thread dell'operazione.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato un servizio che implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> che restituisce solo <xref:System.ServiceModel.FaultException%601> di tipo `GreetingFault` quando un metodo del servizio genera un'eccezione gestita.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un comportamento del servizio per aggiungere l'implementazione di <xref:System.ServiceModel.Dispatcher.IErrorHandler> alla proprietà <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrato come configurare il servizio per caricare il comportamento del servizio utilizzando un file di configurazione dell'applicazione. Per ulteriori dettagli su come esporre il comportamento di un servizio in un file di configurazione, vedere <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>