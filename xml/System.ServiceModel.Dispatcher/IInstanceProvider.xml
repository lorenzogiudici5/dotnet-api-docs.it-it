<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IInstanceProvider.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b7255c2b59b9a9ddabd3da143f0a84813cb214e52d9.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55c2b59b9a9ddabd3da143f0a84813cb214e52d9</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Declares methods that provide a service object or recycle a service object for a Windows Communication Foundation (WCF) service.</source>
          <target state="translated">Dichiara metodi che specificano un oggetto servizio o lo riciclano per un servizio di Windows Communication Foundation (WCF).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface to control the creation and recycling of service objects when one is requested or disposed by an <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object.</source>
          <target state="translated">Implementare l'interfaccia <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> per controllare la creazione e il riciclaggio di oggetti servizio quando un oggetto <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> ne richiede o ne elimina uno.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Once the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> interface is implemented, you must assign your custom instance provider object to the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> property using either an endpoint behavior (a <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph> object) or a contract behavior (a <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> object).</source>
          <target state="translated">Una volta implementata l'interfaccia <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph>, è necessario assegnare l'oggetto provider di istanze personalizzato alla proprietà <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A&gt;</ph> utilizzando un comportamento dell'endpoint (un oggetto <ph id="ph3">&lt;xref:System.ServiceModel.Description.IEndpointBehavior&gt;</ph>) o un comportamento del contratto (un oggetto <ph id="ph4">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is an endpoint behavior you can also implement a <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> object that can insert your custom behavior using a configuration file.</source>
          <target state="translated">Se il meccanismo di inserimento è un comportamento dell'endpoint, è anche possibile implementare un oggetto <ph id="ph1">&lt;xref:System.ServiceModel.Configuration.BehaviorExtensionElement&gt;</ph> in grado di inserire il comportamento personalizzato utilizzando un file di configurazione.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the insertion mechanism is a contract behavior, you can insert the behavior programmatically prior to the opening of the service host or you can implement a custom attribute.</source>
          <target state="translated">Se il meccanismo di inserimento è un comportamento del contratto, è possibile inserire il comportamento a livello di programmazione prima dell'apertura dell'host del servizio o implementare un attributo personalizzato.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>(For an example of the contract behavior approach, see the Example section.)</source>
          <target state="translated">Per un'esempio dell'approccio relativo al comportamento del contratto, vedere la sezione relativa agli esempi.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> has two methods, <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> dispone di due metodi: <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> e <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>These methods are typically implemented to create service objects using a non-default constructor or to initialize or dispose of some state related to the lifetime of the object.</source>
          <target state="translated">Questi metodi vengono in genere implementati per creare oggetti servizio utilizzando un costruttore non predefinito oppure per inizializzare o eliminare stati correlati alla durata dell'oggetto.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Service object pooling is one example of custom <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> functionality.</source>
          <target state="translated">Il pooling degli oggetti servizio è un esempio di funzionalità <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> personalizzata.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> invokes the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> when the <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is first created and invokes the <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method when the <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> in genere richiama <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> quando l'oggetto <ph id="ph3">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> viene creato inizialmente e chiama il metodo <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> quando <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> viene chiuso.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>There are two ways to cause an <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> object to release a service object before the <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> is closed.</source>
          <target state="translated">Sono disponibili due modalità per fare in modo che un oggetto <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> rilasci un oggetto servizio prima che <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> venga chiuso.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The first method is to set the <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> to <ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> or <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</source>
          <target state="translated">Il primo metodo consiste nell'impostare <ph id="ph1">&lt;xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A&gt;</ph> su<ph id="ph2">&lt;xref:System.ServiceModel.ReleaseInstanceMode.AfterCall&gt;</ph> o su <ph id="ph3">&lt;xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The second method is to call the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> method.</source>
          <target state="translated">La seconda possibilità consiste nel chiamare il metodo <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If this is done, the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> calls the <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method on the dispatcher's instance provider.</source>
          <target state="translated">Se si procede in questo modo, <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContext&gt;</ph> chiama il metodo <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> sul provider di istanze del dispatcher.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If a new message arrives after the instance has been released, WCF creates a new instance using the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> method.</source>
          <target state="translated">Se arriva un nuovo messaggio dopo che l'istanza è stata rilasciata, WCF crea una nuova istanza utilizzando il <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> of the service is <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, the system does not call the <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> or <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> methods even when the user did not provide a well-known service object unless the user directly calls <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> and then calls <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</source>
          <target state="translated">Se l'oggetto <ph id="ph1">&lt;xref:System.ServiceModel.InstanceContextMode&gt;</ph> del servizio è <ph id="ph2">&lt;xref:System.ServiceModel.InstanceContextMode.Single&gt;</ph>, il sistema non chiama i metodi <ph id="ph3">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A&gt;</ph> e <ph id="ph4">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> anche se l'utente non ha fornito un oggetto servizio noto, a meno che l'utente non chiami direttamente <ph id="ph5">&lt;xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A&gt;</ph> e quindi <ph id="ph6">&lt;xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un oggetto <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> al fine di inserire il provider di istanze del servizio personalizzato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Implementa inoltre <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph> che ne associa l'utilizzo a un contratto specifico.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IInstanceProvider">
          <source>Returns a service object.</source>
          <target state="translated">Restituisce un oggetto servizio.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Restituisce un oggetto servizio dato l'oggetto <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>A user-defined service object.</source>
          <target state="translated">Oggetto servizio definito dall'utente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> method to control the exact service object that a WCF service receives when it attempts to create a new one.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29&gt;</ph> metodo per controllare l'oggetto servizio esatto che un servizio WCF riceve quando tenta di crearne uno nuovo.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un oggetto <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> al fine di inserire il provider di istanze del servizio personalizzato.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Implementa inoltre <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph> che ne associa l'utilizzo a un contratto specifico.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The message that triggered the creation of a service object.</source>
          <target state="translated">Messaggio che ha causato la creazione di un oggetto servizio.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Returns a service object given the specified <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object.</source>
          <target state="translated">Restituisce un oggetto servizio dato l'oggetto <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The service object.</source>
          <target state="translated">Oggetto servizio.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> method to control the exact service object that a WCF service receives when it attempts to create a new one.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29&gt;</ph> metodo per controllare l'oggetto servizio esatto che un servizio WCF riceve quando tenta di crearne uno nuovo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> that provides "singleton" behavior; it always returns the same service instance and does not recycle it.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un oggetto <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider&gt;</ph> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>The following code example shows how to implement a custom attribute that implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> to insert the custom service instance provider.</source>
          <target state="translated">Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehavior&gt;</ph> al fine di inserire il provider di istanze del servizio personalizzato.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)">
          <source>It also implements <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph>, which binds its use to a specific contract.</source>
          <target state="translated">Implementa inoltre <ph id="ph1">&lt;xref:System.ServiceModel.Description.IContractBehaviorAttribute&gt;</ph> che ne associa l'utilizzo a un contratto specifico.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service's instance context.</source>
          <target state="translated">Contesto dell'istanza del servizio.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>The service object to be recycled.</source>
          <target state="translated">Oggetto servizio da riciclare.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Called when an <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> object recycles a service object.</source>
          <target state="translated">Chiamato quando un oggetto <ph id="ph1">&lt;see cref="T:System.ServiceModel.InstanceContext" /&gt;</ph> ricicla un oggetto servizio.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> method to perform some custom resource disposal or other recycling customization when a service recycles a service object.</source>
          <target state="translated">Utilizzare il metodo <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A&gt;</ph> per eliminare o riciclare alcune risorse in modo personalizzato quando un servizio ricicla un oggetto servizio.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>