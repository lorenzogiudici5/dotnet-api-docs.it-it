<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55c2b59b9a9ddabd3da143f0a84813cb214e52d9" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32692070" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Dichiara metodi che specificano un oggetto servizio o lo riciclano per un servizio di Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Dispatcher.IInstanceProvider> per controllare la creazione e il riciclaggio di oggetti servizio quando un oggetto <xref:System.ServiceModel.InstanceContext> ne richiede o ne elimina uno.  
  
 Una volta implementata l'interfaccia <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, è necessario assegnare l'oggetto provider di istanze personalizzato alla proprietà <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> utilizzando un comportamento dell'endpoint (un oggetto <xref:System.ServiceModel.Description.IEndpointBehavior>) o un comportamento del contratto (un oggetto <xref:System.ServiceModel.Description.IContractBehavior>).  
  
 Se il meccanismo di inserimento è un comportamento dell'endpoint, è anche possibile implementare un oggetto <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> in grado di inserire il comportamento personalizzato utilizzando un file di configurazione. Se il meccanismo di inserimento è un comportamento del contratto, è possibile inserire il comportamento a livello di programmazione prima dell'apertura dell'host del servizio o implementare un attributo personalizzato. Per un'esempio dell'approccio relativo al comportamento del contratto, vedere la sezione relativa agli esempi.  
  
 L'oggetto <xref:System.ServiceModel.Dispatcher.IInstanceProvider> dispone di due metodi: <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Questi metodi vengono in genere implementati per creare oggetti servizio utilizzando un costruttore non predefinito oppure per inizializzare o eliminare stati correlati alla durata dell'oggetto. Il pooling degli oggetti servizio è un esempio di funzionalità <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizzata.  
  
 <xref:System.ServiceModel.InstanceContext> in genere richiama <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> quando l'oggetto <xref:System.ServiceModel.InstanceContext> viene creato inizialmente e chiama il metodo <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> quando <xref:System.ServiceModel.InstanceContext> viene chiuso.  
  
 Sono disponibili due modalità per fare in modo che un oggetto <xref:System.ServiceModel.InstanceContext> rilasci un oggetto servizio prima che <xref:System.ServiceModel.InstanceContext> venga chiuso. Il primo metodo consiste nell'impostare <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> su<xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> o su <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. La seconda possibilità consiste nel chiamare il metodo <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>. Se si procede in questo modo, <xref:System.ServiceModel.InstanceContext> chiama il metodo <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> sul provider di istanze del dispatcher. Se arriva un nuovo messaggio dopo che l'istanza è stata rilasciata, WCF crea una nuova istanza utilizzando il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> metodo.  
  
> [!NOTE]
>  Se l'oggetto <xref:System.ServiceModel.InstanceContextMode> del servizio è <xref:System.ServiceModel.InstanceContextMode.Single>, il sistema non chiama i metodi <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> e <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> anche se l'utente non ha fornito un oggetto servizio noto, a meno che l'utente non chiami direttamente <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> e quindi <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come implementare un oggetto <xref:System.ServiceModel.Dispatcher.IInstanceProvider> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute> che ne associa l'utilizzo a un contratto specifico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un oggetto servizio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Oggetto <see cref="T:System.ServiceModel.InstanceContext" /> corrente.</param>
        <summary>Restituisce un oggetto servizio dato l'oggetto <see cref="T:System.ServiceModel.InstanceContext" /> specificato.</summary>
        <returns>Oggetto servizio definito dall'utente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> metodo per controllare l'oggetto servizio esatto che un servizio WCF riceve quando tenta di crearne uno nuovo.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come implementare un oggetto <xref:System.ServiceModel.Dispatcher.IInstanceProvider> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute> che ne associa l'utilizzo a un contratto specifico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Oggetto <see cref="T:System.ServiceModel.InstanceContext" /> corrente.</param>
        <param name="message">Messaggio che ha causato la creazione di un oggetto servizio.</param>
        <summary>Restituisce un oggetto servizio dato l'oggetto <see cref="T:System.ServiceModel.InstanceContext" /> specificato.</summary>
        <returns>Oggetto servizio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> metodo per controllare l'oggetto servizio esatto che un servizio WCF riceve quando tenta di crearne uno nuovo.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrato come implementare un oggetto <xref:System.ServiceModel.Dispatcher.IInstanceProvider> che fornisca un comportamento "singleton", restituisca sempre la stessa istanza del servizio e non la ricicli.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come implementare un attributo personalizzato che implementi <xref:System.ServiceModel.Description.IContractBehavior> al fine di inserire il provider di istanze del servizio personalizzato. Implementa inoltre <xref:System.ServiceModel.Description.IContractBehaviorAttribute> che ne associa l'utilizzo a un contratto specifico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Contesto dell'istanza del servizio.</param>
        <param name="instance">Oggetto servizio da riciclare.</param>
        <summary>Chiamato quando un oggetto <see cref="T:System.ServiceModel.InstanceContext" /> ricicla un oggetto servizio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> per eliminare o riciclare alcune risorse in modo personalizzato quando un servizio ricicla un oggetto servizio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>