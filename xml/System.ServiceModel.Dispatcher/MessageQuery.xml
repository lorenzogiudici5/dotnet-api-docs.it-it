<Type Name="MessageQuery" FullName="System.ServiceModel.Dispatcher.MessageQuery">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bb07a111190334c2109754a10955de4ce506c208" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30517995" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageQuery" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQuery abstract" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Definisce il comportamento principale di classi utilizzato per cercare dati correlati specifici in un messaggio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe <xref:System.ServiceModel.Dispatcher.MessageQuery> è simile alla classe <xref:System.ServiceModel.Dispatcher.MessageFilter>.  Tuttavia, anziché restituire corrispondenze, il metodo <xref:System.ServiceModel.Dispatcher.MessageQuery.Evaluate%2A> restituisce i risultati della valutazione di una query rispetto a un messaggio. Il risultato della query è un valore all'interno del messaggio. Utilizzare il valore come chiave per correlare il messaggio agli altri messaggi. Per aggiungere una nuova proprietà per i dati, utilizzare il metodo <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add%2A> della classe <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty>.  
  
> [!NOTE]
>  Per una corretta implementazione dell'oggetto <xref:System.ServiceModel.Dispatcher.MessageQuery>, vedere la classe <xref:System.ServiceModel.XPathMessageQuery>.  
  
## <a name="using-the-xpathmessagequery-and-messagequerycollection-classes"></a>Utilizzo delle classi XPathMessageQuery e MessageQueryCollection  
 È possibile ottimizzare il processo della query creando un set di oggetti query e inserendoli in un'istanza della classe <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>.  
  
> [!NOTE]
>  Per una corretta implementazione dell'oggetto <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>, vedere la classe <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection>.  
  
 Un utilizzo comune è quello di popolare la raccolta con query che dispongono dello stesso predicato XPath, ma che differiscono solo nel valore della foglia finale. Ad esempio, le query XPath seguenti sono identiche a eccezione della clausola finale. Le prime query per tutti gli elementi che hanno l'attributo di quantità impostato su 1 e le seconde query per gli elementi con attributo del prodotto impostato su 'Contoso'):  
  
```  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@quantity = 1]"  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@product = 'Contoso']"  
```  
  
 La classe <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> consente di creare tabelle di query che differiscono solo leggermente, consentendo un'elaborazione più efficiente.  
  
 In alternativa, è possibile utilizzare la classe <xref:System.ServiceModel.Dispatcher.MessageQueryTable%601> per archiviare e valutare le query del messaggio.  
  
   
  
## Examples  
 Nell'esempio seguente viene effettuata la creazione di un messaggio e delle query del messaggio XPath. Le query vengono valutate dagli oggetti <xref:System.ServiceModel.XPathMessageQuery> contenuti in un oggetto <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection>. I risultati di ogni query vengono testati utilizzando la proprietà <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> della classe <xref:System.ServiceModel.Dispatcher.XPathResult>.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.XPathMessageQuery" />
    <altmember cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQuery();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageQueryCollection">
      <MemberSignature Language="C#" Value="public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageQueryCollection () As MessageQueryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Dispatcher::MessageQueryCollection ^ CreateMessageQueryCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.MessageQueryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una raccolta di query che restituisce un tipo specifico di dati ad essa associati.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> Raccolta di query associata al tipo di dati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo deve essere utilizzato dalla classe <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Evaluate&lt;TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, esegue una query rispetto al messaggio e restituisce un valore che soddisfa la query.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La differenza tra i due overload è che uno accetta un parametro <xref:System.ServiceModel.Channels.Message> e non ha la possibilità di esaminare il corpo del messaggio; l'altro accetta un parametro <xref:System.ServiceModel.Channels.MessageBuffer> e ha la possibilità di esaminare qualsiasi parte del messaggio. Le intestazioni del messaggio vengono automaticamente memorizzate nel buffer e possono essere sottoposte a query senza essere utilizzate. Tuttavia, se il corpo deve essere sottoposto a query, allora l'intero messaggio deve essere memorizzato nel buffer perché un corpo del messaggio non memorizzato nel buffer può essere utilizzato dalla query.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Tipo di valore da restituire.</typeparam>
        <param name="message">Messaggio alla query.</param>
        <summary>Se sottoposto a override in una classe derivata, esegue una query rispetto al messaggio e restituisce un risultato. Non è possibile sottoporre a query il corpo.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
 Raccolta enumerabile dei risultati che soddisfano la query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (buffer As MessageBuffer) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">Tipo di oggetto da restituire.</typeparam>
        <param name="buffer">Messaggio alla query.</param>
        <summary>Se sottoposto a override in una classe derivata, esegue una query rispetto al messaggio e restituisce un risultato.</summary>
        <returns>
          <see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
 Raccolta enumerabile dei risultati che soddisfano la query.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene effettuata la creazione di un messaggio e delle query del messaggio XPath. Le query vengono valutate dagli oggetti <xref:System.ServiceModel.XPathMessageQuery> contenuti in un oggetto <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection>. I risultati di ogni query vengono testati utilizzando la proprietà <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> della classe <xref:System.ServiceModel.Dispatcher.XPathResult>.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>