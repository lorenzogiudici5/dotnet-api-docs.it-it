<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a91725c4814fdb8a0e3543bbc61d74c9d0b7d187" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415674" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <TypeSignature Language="F#" Value="type IClientMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce un oggetto di controllo messaggi che può essere aggiunto alla raccolta <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> per visualizzare o modificare i messaggi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interfaccia e aggiungerla al <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> insieme per controllare o modificare i messaggi quando passano un oggetto client WCF. Per informazioni dettagliate, vedere <xref:System.ServiceModel.Dispatcher.ClientRuntime>.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveReply :  * obj -&gt; unit" Usage="iClientMessageInspector.AfterReceiveReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Il messaggio da trasformare in tipi e restituito all'applicazione client.</param>
        <param name="correlationState">Dati relativi allo stato di correlazione.</param>
        <summary>Consente di controllare o modificare un messaggio dopo che è stato ricevuto un messaggio di risposta, ma prima che venga restituito all'applicazione client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> per controllare o modificare un messaggio di risposta dopo che è stato ricevuto dall'oggetto client WCF, ma prima che venga deserializzato in oggetti che vengono restituiti all'applicazione client.  
  
 `correlationState` è l'oggetto restituito dall'utente quando il metodo <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> viene chiamato per questo messaggio. La procedura consigliata è di trasformarlo in una struttura <xref:System.Guid?displayProperty=nameWithType> per garantire che non ci siano due oggetti `correlationState` uguali.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendRequest :  * System.ServiceModel.IClientChannel -&gt; obj" Usage="iClientMessageInspector.BeforeSendRequest (request, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request">Il messaggio da inviare al servizio.</param>
        <param name="channel">Il canale dell'oggetto client WCF.</param>
        <summary>Consente di controllare o modificare un messaggio prima che venga inviato un messaggio di richiesta a un servizio.</summary>
        <returns>L'oggetto restituito come argomento <paramref name="correlationState" /> del metodo <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />. Risulta uguale a <see langword="null" /> se non vengono utilizzati stati di correlazione.  La procedura consigliata è di trasformarlo in una struttura <see cref="T:System.Guid" /> per garantire che non ci siano due oggetti <paramref name="correlationState" /> uguali.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il metodo <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> per controllare o modificare un messaggio di richiesta prima che venga inviato.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>