<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClientMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IClientMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="35189-101">Definisce un oggetto di controllo messaggi che può essere aggiunto alla raccolta <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> per visualizzare o modificare i messaggi.</span><span class="sxs-lookup"><span data-stu-id="35189-101">Defines a message inspector object that can be added to the <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" /> collection to view or modify messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35189-102">Implementare il <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interfaccia e aggiungerla al <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> insieme per controllare o modificare i messaggi quando passano un oggetto client WCF.</span><span class="sxs-lookup"><span data-stu-id="35189-102">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector> interface and add it to the <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A> collection to inspect or modify messages as they pass through a WCF client object.</span></span> <span data-ttu-id="35189-103">Per informazioni dettagliate, vedere <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span><span class="sxs-lookup"><span data-stu-id="35189-103">For details, see <xref:System.ServiceModel.Dispatcher.ClientRuntime>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35189-104">Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.</span><span class="sxs-lookup"><span data-stu-id="35189-104">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="35189-105">Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.</span><span class="sxs-lookup"><span data-stu-id="35189-105">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="35189-106">Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.</span><span class="sxs-lookup"><span data-stu-id="35189-106">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterReceiveReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterReceiveReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply"><span data-ttu-id="35189-107">Il messaggio da trasformare in tipi e restituito all'applicazione client.</span><span class="sxs-lookup"><span data-stu-id="35189-107">The message to be transformed into types and handed back to the client application.</span></span></param>
        <param name="correlationState"><span data-ttu-id="35189-108">Dati relativi allo stato di correlazione.</span><span class="sxs-lookup"><span data-stu-id="35189-108">Correlation state data.</span></span></param>
        <summary><span data-ttu-id="35189-109">Consente di controllare o modificare un messaggio dopo che è stato ricevuto un messaggio di risposta, ma prima che venga restituito all'applicazione client.</span><span class="sxs-lookup"><span data-stu-id="35189-109">Enables inspection or modification of a message after a reply message is received but prior to passing it back to the client application.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35189-110">Implementare <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> per controllare o modificare un messaggio di risposta dopo che è stato ricevuto dall'oggetto client WCF, ma prima che venga deserializzato in oggetti che vengono restituiti all'applicazione client.</span><span class="sxs-lookup"><span data-stu-id="35189-110">Implement <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A> to inspect or modify a reply message after it has been received by the WCF client object but before it is deserialized into objects that are returned to the client application.</span></span>  
  
 <span data-ttu-id="35189-111">`correlationState` è l'oggetto restituito dall'utente quando il metodo <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> viene chiamato per questo messaggio.</span><span class="sxs-lookup"><span data-stu-id="35189-111">The `correlationState` is the object returned by the user when <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> is called for this message.</span></span> <span data-ttu-id="35189-112">La procedura consigliata è di trasformarlo in una struttura <xref:System.Guid?displayProperty=nameWithType> per garantire che non ci siano due oggetti `correlationState` uguali.</span><span class="sxs-lookup"><span data-stu-id="35189-112">The best practice is to make this a <xref:System.Guid?displayProperty=nameWithType> to ensure that no two `correlationState` objects are the same.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35189-113">Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.</span><span class="sxs-lookup"><span data-stu-id="35189-113">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="35189-114">Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.</span><span class="sxs-lookup"><span data-stu-id="35189-114">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="35189-115">Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.</span><span class="sxs-lookup"><span data-stu-id="35189-115">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeSendRequest (ByRef request As Message, channel As IClientChannel) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeSendRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="35189-116">Il messaggio da inviare al servizio.</span><span class="sxs-lookup"><span data-stu-id="35189-116">The message to be sent to the service.</span></span></param>
        <param name="channel"><span data-ttu-id="35189-117">Il canale dell'oggetto client WCF.</span><span class="sxs-lookup"><span data-stu-id="35189-117">The WCF client object channel.</span></span></param>
        <summary><span data-ttu-id="35189-118">Consente di controllare o modificare un messaggio prima che venga inviato un messaggio di richiesta a un servizio.</span><span class="sxs-lookup"><span data-stu-id="35189-118">Enables inspection or modification of a message before a request message is sent to a service.</span></span></summary>
        <returns><span data-ttu-id="35189-119">L'oggetto restituito come argomento <paramref name="correlationState" /> del metodo <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="35189-119">The object that is returned as the <paramref name="correlationState" /> argument of the <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span></span> <span data-ttu-id="35189-120">Risulta uguale a <see langword="null" /> se non vengono utilizzati stati di correlazione.</span><span class="sxs-lookup"><span data-stu-id="35189-120">This is <see langword="null" /> if no correlation state is used.</span></span>  
  
 <span data-ttu-id="35189-121">La procedura consigliata è di trasformarlo in una struttura <see cref="T:System.Guid" /> per garantire che non ci siano due oggetti <paramref name="correlationState" /> uguali.</span><span class="sxs-lookup"><span data-stu-id="35189-121">The best practice is to make this a <see cref="T:System.Guid" /> to ensure that no two <paramref name="correlationState" /> objects are the same.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="35189-122">Implementare il metodo <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> per controllare o modificare un messaggio di richiesta prima che venga inviato.</span><span class="sxs-lookup"><span data-stu-id="35189-122">Implement the <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> to inspect or modify a request message before it is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="35189-123">Nell'esempio di codice seguente viene visualizzata un'implementazione che scrive stringhe sulla console quando viene chiamata.</span><span class="sxs-lookup"><span data-stu-id="35189-123">The following code example shows an implementation that writes strings to the console when the implementation is called.</span></span>  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 <span data-ttu-id="35189-124">Nell'esempio di codice seguente viene illustrato come utilizzare un <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> per inserire il controllo di messaggio del client nell'endpoint client.</span><span class="sxs-lookup"><span data-stu-id="35189-124">The following code example shows how to use an <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> to insert the client message inspector in the client endpoint.</span></span>  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 <span data-ttu-id="35189-125">Nell'esempio di codice seguente viene infine mostrata la procedura per modificare il file di configurazione del client in modo da utilizzare il comportamento dell'endpoint tramite un determinato endpoint.</span><span class="sxs-lookup"><span data-stu-id="35189-125">Finally, the following code example shows how to modify the client configuration file to use the endpoint behavior with a particular endpoint.</span></span>  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>