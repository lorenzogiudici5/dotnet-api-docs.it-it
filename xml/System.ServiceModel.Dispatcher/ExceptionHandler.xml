<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f02d4a390bb9bb135205dfb9606eecfe3a51a31e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48638098" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="11cb3-101">Estendere la classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> per creare un gestore di eccezioni per le eccezioni non gestite che si verificano nel runtime di Windows Communication Foundation (WCF).</span>
      <span class="sxs-lookup">
        <span data-stu-id="11cb3-101">Extend the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11cb3-102">Estendere la classe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> ed eseguire l'override del metodo <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> per determinare se un'eccezione deve determinare la chiusura dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="11cb3-102">Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application.</span></span> <span data-ttu-id="11cb3-103">Quindi creare una nuova istanza della tua personalizzata <xref:System.ServiceModel.Dispatcher.ExceptionHandler> classi e assegnarla alla proprietà statica <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> proprietà prima di creare client WCF o servizi.</span><span class="sxs-lookup"><span data-stu-id="11cb3-103">Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating WCF clients or services.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11cb3-104">Nell'esempio di codice seguente viene illustrata un'implementazione della classe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> astratta che esegue l'override del metodo <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.</span><span class="sxs-lookup"><span data-stu-id="11cb3-104">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 <span data-ttu-id="11cb3-105">Esempio di codice seguente viene illustrato come abilitare l'oggetto personalizzato `MyExceptionHandler` per le eccezioni non gestite che si verificano nel runtime di WCF.</span><span class="sxs-lookup"><span data-stu-id="11cb3-105">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11cb3-106">Inizializza una nuova istanza della classe <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11cb3-107">Ottiene un'istanza di <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> che gestisce tutte le eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-107">Gets an instance of <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> that handles all exceptions.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11cb3-108">Un oggetto <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> che restituisce <see langword="true" /> per tutte le eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-108">An <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that returns <see langword="true" /> for all exceptions.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>get: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11cb3-109">Ottiene o imposta l'implementazione di <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> corrente per il dominio dell'applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-109">Gets or sets the current <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11cb3-110">Assegnare un oggetto personalizzato <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> oggetto che riceve le eccezioni che si verificano nel thread asincroni di Windows Communication Foundation (WCF) non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-110">Assign a custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur on asynchronous Windows Communication Foundation (WCF) threads.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11cb3-111">Per impostazione predefinita, il <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> è di proprietà `null`, e le eccezioni non gestite sui thread WCF asincrona per terminare l'applicazione.</span><span class="sxs-lookup"><span data-stu-id="11cb3-111">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous WCF threads terminate the application.</span></span>  <span data-ttu-id="11cb3-112">Impostare questa proprietà su un oggetto <xref:System.ServiceModel.Dispatcher.ExceptionHandler> per ricevere e reagire a queste eccezioni.</span><span class="sxs-lookup"><span data-stu-id="11cb3-112">Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="11cb3-113">Se un'eccezione non gestita si verifica su un thread WCF asincrono e raggiunge il gestore, lo stato del dominio dell'applicazione potrà essere compromessi.</span><span class="sxs-lookup"><span data-stu-id="11cb3-113">If an unhandled exception occurs on an asynchronous WCF thread and reaches this handler, the state of the application domain may be compromised.</span></span>  <span data-ttu-id="11cb3-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> non deve restituire `true` per queste eccezioni.</span><span class="sxs-lookup"><span data-stu-id="11cb3-114"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="11cb3-115">Eccezione che si è verificata nella fase di esecuzione di Windows Communication Foundation (WCF) e che può determinare la chiusura dell'applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-115">The exception the occurred within the Windows Communication Foundation (WCF) runtime and which may terminate the application.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="11cb3-116">Quando sottoposto a override in una classe derivata, restituisce <see langword="true" /> se l'eccezione è stata gestita o <see langword="false" /> se l'eccezione deve essere rigenerata e l'applicazione terminata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-116">When overridden in a derived class, returns <see langword="true" /> if the exception has been handled, or <see langword="false" /> if the exception should be rethrown and the application terminated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="11cb3-117">
            <see langword="true" /> se l'eccezione è stata gestita; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-117">
              <see langword="true" /> if the exception has been handled; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11cb3-118">La proprietà <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> restituisce `true` se l'eccezione è stata gestita.</span><span class="sxs-lookup"><span data-stu-id="11cb3-118">The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled.</span></span> <span data-ttu-id="11cb3-119">Se restituisce `false` o genera un'eccezione diversa, l'eccezione originale viene rigenerata.</span><span class="sxs-lookup"><span data-stu-id="11cb3-119">If it returns `false` or throws a different exception, the original exception is rethrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11cb3-120">Nell'esempio di codice seguente viene illustrata un'implementazione della classe <xref:System.ServiceModel.Dispatcher.ExceptionHandler> astratta che esegue l'override del metodo <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.</span><span class="sxs-lookup"><span data-stu-id="11cb3-120">The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.</span></span>  
  
  
  
 <span data-ttu-id="11cb3-121">Esempio di codice seguente viene illustrato come abilitare l'oggetto personalizzato `MyExceptionHandler` per le eccezioni non gestite che si verificano nel runtime di WCF.</span><span class="sxs-lookup"><span data-stu-id="11cb3-121">The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the WCF runtime.</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11cb3-122">Ottiene o imposta il trasporto di <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> corrente per il dominio dell'applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-122">Gets or sets the current transport <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> implementation for the application domain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11cb3-123">Un oggetto personalizzato <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> oggetto che riceve le eccezioni che si verificano all'interno i trasporti di Windows Communication Foundation (WCF) globali non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11cb3-123">A custom <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> object that receives unhandled exceptions that occur within the global Windows Communication Foundation (WCF) transports.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11cb3-124">Per impostazione predefinita, il <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> proprietà è impostata sul valore di <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, provocando eccezioni non gestite all'interno di trasporti WCF deve essere ignorata.</span><span class="sxs-lookup"><span data-stu-id="11cb3-124">By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within WCF transports to be ignored.</span></span>  <span data-ttu-id="11cb3-125">Impostare questa proprietà su un'istanza di <xref:System.ServiceModel.Dispatcher.ExceptionHandler> per ricevere e reagire a queste eccezioni.</span><span class="sxs-lookup"><span data-stu-id="11cb3-125">Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.</span></span>  
  
 <span data-ttu-id="11cb3-126">Se un'eccezione non gestita si verifica all'interno di un trasporto WCF globale e raggiunge il gestore, è possibile che lo stato del dominio dell'applicazione venga compromesso.</span><span class="sxs-lookup"><span data-stu-id="11cb3-126">If an unhandled exception occurs within a global WCF transport and reaches this handler, there is a possibility that the state of the application domain is compromised.</span></span> <span data-ttu-id="11cb3-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> può restituire `false` per queste eccezioni determinino la chiusura dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="11cb3-127"><xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>