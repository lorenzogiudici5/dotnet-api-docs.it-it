<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e416b8638c703157c2decb16d6181f2737de4ced" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37615982" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce i metodi che consentono il controllo o la modifica personalizzati di messaggi dell'applicazione in entrata e in uscita nelle applicazioni di servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> per controllare o modificare messaggi dell'applicazione in entrata o in uscita prima di distribuire un messaggio di richiesta a un'operazione o prima di restituire un messaggio di risposta a un chiamante. Esistono molti scenari che richiedono un'intercettazione dei messaggi prima di richiamare l'operazione alla quale sono destinati. Ad esempio, è possibile registrare i messaggi dell'applicazione in entrata o eseguire alcune funzionalità in base a un'intestazione del messaggio.  
  
 In genere, i controlli messaggi vengono inseriti da un comportamento del servizio (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), da un comportamento dell'endpoint (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) o un comportamento del contratto (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). Il comportamento aggiunge quindi il controllo messaggi alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>. Per altre informazioni sull'estensione del runtime mediante i comportamenti, vedere [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   Il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> abilita il comportamento personalizzato dopo avere ricevuto il messaggio, ma prima di distribuirlo all'operazione desiderata.  
  
-   Il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> abilita il comportamento personalizzato dopo che l'operazione restituisce, ma prima che venga inviata la risposta.  
  
> [!NOTE]
>  Gli oggetti <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> sono chiamati sempre allo stesso punto, durante la distribuzione del messaggio, indipendentemente dal fatto che si tratti di un'operazione unidirezionale o di tipo request/reply.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Il messaggio di richiesta.</param>
        <param name="channel">Il canale in entrata.</param>
        <param name="instanceContext">L'istanza del servizio corrente.</param>
        <summary>Il metodo chiamato dopo la ricezione di un messaggio in entrata, ma prima che il messaggio venga distribuito all'operazione desiderata.</summary>
        <returns>L'oggetto utilizzato per correlare lo stato. Questo oggetto viene restituito al metodo <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> per controllare o modificare il messaggio in entrata, il canale client che lo ha fornito e l'istanza del servizio corrente. Il valore restituito può corrispondere a qualsiasi oggetto che si desidera utilizzare ai fini della correlazione. Viene restituito come il parametro `correlationState` nel metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.  
  
> [!IMPORTANT]
>  È possibile utilizzare il corpo del messaggio solo se l'intero messaggio viene memorizzato nel buffer e ne viene fatta una copia. In questo caso, è necessario fare due copie del messaggio: una da controllare e l'altra per sovrascrivere il parametro `request`.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Il messaggio di risposta. Questo valore è null se l'operazione è unidirezionale.</param>
        <param name="correlationState">L'oggetto di correlazione restituito dal metodo <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</param>
        <summary>Metodo chiamato dopo che l'operazione restituisce, ma prima che venga inviato il messaggio di risposta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> per eseguire un comportamento personalizzato prima di inviare il messaggio di risposta. L'elemento `correlationState` è l'oggetto restituito dal metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> da utilizzare per eseguire la correlazione tra le chiamate in entrata e in uscita per supportare il comportamento.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>