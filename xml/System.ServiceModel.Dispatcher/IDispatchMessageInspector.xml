<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="338473ae149afc3abbbba5fe33991b0f472b9e6d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39855098" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <TypeSignature Language="F#" Value="type IDispatchMessageInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="dfe0e-101">Definisce i metodi che consentono il controllo o la modifica personalizzati di messaggi dell'applicazione in entrata e in uscita nelle applicazioni di servizio.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dfe0e-101">Defines the methods that enable custom inspection or modification of inbound and outbound application messages in service applications.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfe0e-102">Implementare <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> per controllare o modificare messaggi dell'applicazione in entrata o in uscita prima di distribuire un messaggio di richiesta a un'operazione o prima di restituire un messaggio di risposta a un chiamante.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-102">Implement <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to inspect or modify inbound or outbound application messages either prior to dispatching a request message to an operation or before returning a reply message to a caller.</span></span> <span data-ttu-id="dfe0e-103">Esistono molti scenari che richiedono un'intercettazione dei messaggi prima di richiamare l'operazione alla quale sono destinati.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-103">There are a large number of scenarios that require intercepting messages prior to invoking the operation for which it is destined.</span></span> <span data-ttu-id="dfe0e-104">Ad esempio, è possibile registrare i messaggi dell'applicazione in entrata o eseguire alcune funzionalità in base a un'intestazione del messaggio.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-104">For example, you can log incoming application messages or perform some feature based on a message header.</span></span>  
  
 <span data-ttu-id="dfe0e-105">In genere, i controlli messaggi vengono inseriti da un comportamento del servizio (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), da un comportamento dell'endpoint (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>) o un comportamento del contratto (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="dfe0e-105">Typically, message inspectors are inserted by a service behavior (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), an endpoint behavior (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), or a contract behavior (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>).</span></span> <span data-ttu-id="dfe0e-106">Il comportamento aggiunge quindi il controllo messaggi alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-106">The behavior then adds the message inspector to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span> <span data-ttu-id="dfe0e-107">Per altre informazioni sull'estensione del runtime mediante i comportamenti, vedere [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span><span class="sxs-lookup"><span data-stu-id="dfe0e-107">For more information about extending the runtime using behaviors, see [Extending ServiceHost and the Service Model Layer](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).</span></span>  
  
-   <span data-ttu-id="dfe0e-108">Il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> abilita il comportamento personalizzato dopo avere ricevuto il messaggio, ma prima di distribuirlo all'operazione desiderata.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-108">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method enables custom behavior after receiving the message but before dispatching it to the intended operation.</span></span>  
  
-   <span data-ttu-id="dfe0e-109">Il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> abilita il comportamento personalizzato dopo che l'operazione restituisce, ma prima che venga inviata la risposta.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-109">The <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method enables custom behavior after the operation returns but before the reply is sent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dfe0e-110">Gli oggetti <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> sono chiamati sempre allo stesso punto, durante la distribuzione del messaggio, indipendentemente dal fatto che si tratti di un'operazione unidirezionale o di tipo request/reply.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-110"><xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> objects are always called at the same point during message dispatch regardless of whether an operation is one-way or request-reply.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfe0e-111">Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-111">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="dfe0e-112">Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-112">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="dfe0e-113">Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-113">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member AfterReceiveRequest :  * System.ServiceModel.IClientChannel * System.ServiceModel.InstanceContext -&gt; obj" Usage="iDispatchMessageInspector.AfterReceiveRequest (request, channel, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">
          <span data-ttu-id="dfe0e-114">Il messaggio di richiesta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-114">The request message.</span>
          </span>
        </param>
        <param name="channel">
          <span data-ttu-id="dfe0e-115">Il canale in entrata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-115">The incoming channel.</span>
          </span>
        </param>
        <param name="instanceContext">
          <span data-ttu-id="dfe0e-116">L'istanza del servizio corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-116">The current service instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dfe0e-117">Il metodo chiamato dopo la ricezione di un messaggio in entrata, ma prima che il messaggio venga distribuito all'operazione desiderata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-117">Called after an inbound message has been received but before the message is dispatched to the intended operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dfe0e-118">L'oggetto utilizzato per correlare lo stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-118">The object used to correlate state.</span>
          </span>
          <span data-ttu-id="dfe0e-119">Questo oggetto viene restituito al metodo <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-119">This object is passed back in the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" /> method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfe0e-120">Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> per controllare o modificare il messaggio in entrata, il canale client che lo ha fornito e l'istanza del servizio corrente.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-120">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method to inspect or modify the incoming message, the client channel that provided it, and the current service instance.</span></span> <span data-ttu-id="dfe0e-121">Il valore restituito può corrispondere a qualsiasi oggetto che si desidera utilizzare ai fini della correlazione. Viene restituito come il parametro `correlationState` nel metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-121">The return value can be any object that you want to use for correlation purposes; it is returned to you as the `correlationState` parameter in the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="dfe0e-122">È possibile utilizzare il corpo del messaggio solo se l'intero messaggio viene memorizzato nel buffer e ne viene fatta una copia.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-122">You cannot use the body of the message unless you buffer the entire message and make a copy.</span></span> <span data-ttu-id="dfe0e-123">In questo caso, è necessario fare due copie del messaggio: una da controllare e l'altra per sovrascrivere il parametro `request`.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-123">If you do this, you must make two copies of the message: one to inspect, and the other to overwrite the `request` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfe0e-124">Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-124">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="dfe0e-125">Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-125">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="dfe0e-126">Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-126">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member BeforeSendReply :  * obj -&gt; unit" Usage="iDispatchMessageInspector.BeforeSendReply (reply, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">
          <span data-ttu-id="dfe0e-127">Il messaggio di risposta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-127">The reply message.</span>
          </span>
          <span data-ttu-id="dfe0e-128">Questo valore è null se l'operazione è unidirezionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-128">This value is null if the operation is one way.</span>
          </span>
        </param>
        <param name="correlationState">
          <span data-ttu-id="dfe0e-129">L'oggetto di correlazione restituito dal metodo <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-129">The correlation object returned from the <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" /> method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dfe0e-130">Metodo chiamato dopo che l'operazione restituisce, ma prima che venga inviato il messaggio di risposta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dfe0e-130">Called after the operation has returned but before the reply message is sent.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dfe0e-131">Utilizzare il metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> per eseguire un comportamento personalizzato prima di inviare il messaggio di risposta.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-131">Use the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> method to perform custom behavior prior to sending the return message.</span></span> <span data-ttu-id="dfe0e-132">L'elemento `correlationState` è l'oggetto restituito dal metodo <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> da utilizzare per eseguire la correlazione tra le chiamate in entrata e in uscita per supportare il comportamento.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-132">The `correlationState` is the object returned from the <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> method that you can use to perform correlation between inbound and outbound calls to support your behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dfe0e-133">Nell'esempio di codice seguente viene illustrata un'interfaccia <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> di base che scrive una stringa sulla console quando viene richiamata.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-133">The following code example shows a basic <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> that writes a string to the console when it is invoked.</span></span>  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 <span data-ttu-id="dfe0e-134">Nell'esempio di codice seguente viene illustrata l'implementazione di un <xref:System.ServiceModel.Description.IServiceBehavior> che aggiunge il `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> alla raccolta <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-134">The following code example shows the implementation of an <xref:System.ServiceModel.Description.IServiceBehavior> that adds the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> to the <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> collection.</span></span>  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 <span data-ttu-id="dfe0e-135">Nell'esempio di codice seguente viene illustrato come utilizzare un file di configurazione dell'applicazione per caricare il comportamento del servizio che inserisce l'interfaccia `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span><span class="sxs-lookup"><span data-stu-id="dfe0e-135">The following code example shows the use of an application configuration file to load the service behavior that inserts the `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.</span></span>  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>