<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f09c1ed8a176f8b5b39b70faa3205d49cb92cfc0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36614785" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definisce il contratto implementato dai controlli del parametro personalizzati che consente di controllare o modificare le informazioni prima e dopo le chiamate sia sul client che sul servizio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare l'interfaccia <xref:System.ServiceModel.Dispatcher.IParameterInspector> per creare un controllo del parametro personalizzato che può visualizzare e modificare il contenuto di una chiamata sia prima che dopo la chiamata nelle applicazioni client o di servizio.  
  
 Nelle chiamate in uscita da un client, il controllo viene richiamato prima che il contenuto della richiesta sia serializzato e inviato al servizio. Il controllo viene chiamato anche dopo che la risposta è stata deserializzata ma prima che i valori restituiti vengano distribuiti al metodo del proxy.  
  
 Su chiamate in entrata a un servizio, il controllo viene richiamato dopo la deserializzazione dei parametri, ma prima di essere distribuiti all'operazione del servizio.  
  
 Utilizzare le proprietà <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> per aggiungere un'implementazione <xref:System.ServiceModel.Dispatcher.IParameterInspector> alla raccolta di controlli per un'operazione specifica.  
  
 **Nota** sviluppatori e amministratori devono assicurarsi che l'interazione con altre <xref:System.ServiceModel.Dispatcher.IParameterInspector> implementazioni è stato riconosciuto.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector> che:  
  
-   Scrive nella console il nome e il valore restituito dell'operazione dopo che il servizio ha deserializzato una risposta o che un client ha serializzato una richiesta.  
  
-   Scrive nella console il nome dell'operazione dopo che il client ha deserializzato una risposta o che un servizio ha serializzato una richiesta.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> per inserire oggetti <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Il nome dell'operazione richiamata.</param>
        <param name="outputs">Gli oggetti di output.</param>
        <param name="returnValue">Il valore restituito dall'operazione.</param>
        <param name="correlationState">Lo stato di correlazione restituito dal metodo <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" /> o <see langword="null" />.</param>
        <summary>Metodo chiamato dopo che le chiamate del client vengono restituite e prima che le risposte del servizio vengano inviate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nelle chiamate in uscita da un client, il controllo viene richiamato prima che il contenuto della richiesta sia serializzato e inviato al servizio. Il controllo viene chiamato anche dopo che la risposta è stata deserializzata ma prima che i valori restituiti vengano distribuiti al metodo del proxy.  
  
 Su chiamate in entrata a un servizio, il controllo viene richiamato dopo la deserializzazione dei parametri, ma prima di essere distribuiti all'operazione del servizio.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector> che:  
  
-   Scrive nella console il nome e il valore restituito dell'operazione dopo che il servizio ha deserializzato una risposta o che un client ha serializzato una richiesta.  
  
-   Scrive nella console il nome dell'operazione dopo che il client ha deserializzato una risposta o che un servizio ha serializzato una richiesta.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> per inserire oggetti <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Nome dell'operazione.</param>
        <param name="inputs">Gli oggetti passati al metodo dal client.</param>
        <summary>Metodo chiamato prima che vengano inviate le chiamate del client e dopo che vengono restituite le risposte del servizio.</summary>
        <returns>Lo stato di correlazione restituito come parametro <paramref name="correlationState" /> in <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Restituire <see langword="null" /> se non si intende utilizzare lo stato di correlazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nelle chiamate in uscita da un client, il controllo viene richiamato prima che il contenuto della richiesta sia serializzato e inviato al servizio. Il controllo viene chiamato anche dopo che la risposta è stata deserializzata ma prima che i valori restituiti vengano distribuiti al metodo del proxy.  
  
 Nelle chiamate in entrata in un servizio, il controllo viene richiamato dopo che il contenuto della richiesta sia deserializzato e inviato all'operazione del servizio e prima che il contenuto della risposta sia serializzato e distribuito al client.  
  
   
  
## Examples  
 Nell'esempio di codice seguente viene visualizzata un'implementazione di <xref:System.ServiceModel.Dispatcher.IParameterInspector> che:  
  
-   Scrive nella console il nome e il valore restituito dell'operazione dopo che il servizio ha deserializzato una risposta o che un client ha serializzato una richiesta.  
  
-   Scrive nella console il nome dell'operazione dopo che il client ha deserializzato una risposta o che un servizio ha serializzato una richiesta.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Nell'esempio di codice seguente viene illustrato come utilizzare <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> per inserire oggetti <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>