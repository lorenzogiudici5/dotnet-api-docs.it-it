<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54fcf7590327e9d2356fc883bfae633d190f6a78" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408885" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="24175-101">Funzioni in Componenti in coda nella gestione anomala di errori di riproduzione lato server e di errori lato client del meccanismo di recapito Accodamento messaggi.</span>
      <span class="sxs-lookup">
        <span data-stu-id="24175-101">Functions in Queued Components in the abnormal handling of server-side playback errors and client-side failures of the Message Queuing delivery mechanism.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24175-102">La classe di eccezione definita per il componente nel catalogo COM+ implementa sia <xref:System.EnterpriseServices.IPlaybackControl> e l'interfaccia per la classe originale.</span><span class="sxs-lookup"><span data-stu-id="24175-102">The exception class defined for the component in the COM+ catalog implements both <xref:System.EnterpriseServices.IPlaybackControl> and the interface for the original class.</span></span> <span data-ttu-id="24175-103">Le implementazioni del metodo dell'interfaccia della classe originale vengono utilizzate per eseguire la gestione delle eccezioni per i metodi non riusciti nella classe stessa.</span><span class="sxs-lookup"><span data-stu-id="24175-103">The method implementations of the original class interface are used to perform the exception handling for the failed methods in the class itself.</span></span> <span data-ttu-id="24175-104">Verranno chiamate dopo <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> o <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> per elaborare le eccezioni per il metodo chiamato in origine.</span><span class="sxs-lookup"><span data-stu-id="24175-104">They will be called after <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> or <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> to process exceptions for the method originally called.</span></span>  
  
 <span data-ttu-id="24175-105">Il lettore di componenti in coda chiama i metodi di <xref:System.EnterpriseServices.IPlaybackControl> per informare l'oggetto di gestore di eccezioni che un messaggio sta per essere inseriti nella coda collocando o recapitabili finale.</span><span class="sxs-lookup"><span data-stu-id="24175-105">The Queued Components Player calls the methods of <xref:System.EnterpriseServices.IPlaybackControl> to inform the exception-handler object that a message is about to be placed on the final resting or dead letter queue.</span></span> <span data-ttu-id="24175-106">Il lettore di componenti in coda chiama quindi lo stesso metodo nell'oggetto del gestore di eccezioni che non è riuscita nella chiamata al metodo originale.</span><span class="sxs-lookup"><span data-stu-id="24175-106">The Queued Components Player then calls the same method in the exception-handler object that had failed in the original method call.</span></span> <span data-ttu-id="24175-107">L'oggetto di gestore di eccezioni può implementare un'alternativa, ad esempio, raccogliere le informazioni di diagnosi di problemi o generando un oggetto o un messaggio che informa il client del problema.</span><span class="sxs-lookup"><span data-stu-id="24175-107">The exception-handler object can implement an alternative, for example, by gathering problem diagnosis information or generating an object or message that informs the client of the problem.</span></span> <span data-ttu-id="24175-108">Se l'applicazione non implementa <xref:System.EnterpriseServices.IPlaybackControl>, il messaggio non elaborabile viene inserito nella coda finale collocando o recapitabili quando il lettore di componenti in coda esaurirà tutti i tentativi.</span><span class="sxs-lookup"><span data-stu-id="24175-108">If the application does not implement <xref:System.EnterpriseServices.IPlaybackControl>, the poison message is placed on the final resting or dead letter queue when the Queued Components Player exhausts all retries.</span></span>  
  
 <span data-ttu-id="24175-109">Un messaggio non elaborabile è un messaggio non è possibile elaborare per qualche motivo, forse a causa di un problema con il server o un sistema di Accodamento.</span><span class="sxs-lookup"><span data-stu-id="24175-109">A poison message is a message that cannot be processed for some reason, perhaps because of a problem with the server or queuing system.</span></span> <span data-ttu-id="24175-110">Viene eseguito il rollback della transazione e il messaggio non elaborabile viene inserito all'inizio della coda.</span><span class="sxs-lookup"><span data-stu-id="24175-110">The transaction is rolled back, and the poison message goes to the top of the queue.</span></span> <span data-ttu-id="24175-111">Quando si è rimosso di nuovo il messaggio, la stessa condizione.</span><span class="sxs-lookup"><span data-stu-id="24175-111">When the message is dequeued again, the same condition occurs.</span></span> <span data-ttu-id="24175-112">Questo messaggio può continuare ciclo all'infinito finché non viene effettuata un'operazione per risolvere il problema.</span><span class="sxs-lookup"><span data-stu-id="24175-112">This message can continue looping indefinitely until something is done to correct the problem.</span></span> <span data-ttu-id="24175-113">Il servizio componenti in coda gestisce il messaggio non elaborabile mediante una serie di tentativi.</span><span class="sxs-lookup"><span data-stu-id="24175-113">The Queued Components service handles the poison message by using a series of retries.</span></span> <span data-ttu-id="24175-114">Dopo diversi tentativi non riusciti, il messaggio viene spostato da una coda in sospeso finale.</span><span class="sxs-lookup"><span data-stu-id="24175-114">After several unsuccessful retries, the message is moved to a final resting queue.</span></span> <span data-ttu-id="24175-115">I messaggi non elaborabili rimangono nella coda in sospeso finché non vengono spostati manualmente utilizzando lo strumento di spostamento dei messaggi di componenti in coda.</span><span class="sxs-lookup"><span data-stu-id="24175-115">Poison messages remain in the resting queue until manually moved by using the Queued Components Message Mover tool.</span></span>  
  
 <span data-ttu-id="24175-116">La situazione di messaggi non elaborabili può essere risolto anche a livello di programmazione, utilizzando il <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> metodo, che informa l'autore dei componenti lato server che tutti i tentativi di riprodurre l'attivazione rinviata non sono riusciti.</span><span class="sxs-lookup"><span data-stu-id="24175-116">The poison message situation can also be resolved programmatically, using the <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> method, which informs the server-side component author that all attempts to play back the deferred activation have failed.</span></span>  
  
 <span data-ttu-id="24175-117">Se si individua un messaggio non elaborabile, potrebbe essere in grado di risolvere rapidamente la causa del problema.</span><span class="sxs-lookup"><span data-stu-id="24175-117">If you discover a poison message, you might be able to solve the underlying cause of the problem quickly.</span></span> <span data-ttu-id="24175-118">Ad esempio, se il server era offline per qualche motivo, è possibile riportare online il server.</span><span class="sxs-lookup"><span data-stu-id="24175-118">For example, if the server was offline for some reason, you can bring the server back online.</span></span> <span data-ttu-id="24175-119">Se è possibile risolvere rapidamente il problema, è possibile generare automaticamente un'altra transazione che notifica il richiedente che non è stata eseguita la transazione.</span><span class="sxs-lookup"><span data-stu-id="24175-119">If you cannot solve the problem quickly, you can automatically generate another transaction that notifies the requestor that the transaction did not occur.</span></span> <span data-ttu-id="24175-120">Il richiedente può quindi rendere una transazione di compensazione che inverte l'effetto di una transazione che è già stato eseguito il commit.</span><span class="sxs-lookup"><span data-stu-id="24175-120">The requestor can then make a compensating transaction that reverses the effect of a transaction that has already committed.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="24175-121">Informa il componente per la gestione delle eccezioni lato client che tutti i tentativi di Accodamento messaggi di recapitare il messaggio al server sono stati rifiutati e che il messaggio è finito nella coda messaggi non recapitabili relativi alle transazioni lato client.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24175-121">Informs the client-side exception-handling component that all Message Queuing attempts to deliver the message to the server were rejected, and the message ended up on the client-side Xact Dead Letter queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24175-122">Quando i messaggi arrivano nella coda recapitabili Xact, COM+ tenta di richiamare un gestore di eccezioni lato client correlato alla classe server per recapitare la notifica.</span><span class="sxs-lookup"><span data-stu-id="24175-122">As messages arrive in the Xact Dead Letter queue, COM+ attempts to invoke a client-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="24175-123">Tale scopo, chiamare prima il metodo <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, quindi chiamare la versione di gestione delle eccezioni del metodo non riuscito nell'oggetto del gestore di eccezioni.</span><span class="sxs-lookup"><span data-stu-id="24175-123">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, then calling the exception-handling version of the failed method in the exception-handler object.</span></span> <span data-ttu-id="24175-124">Questo metodo può quindi richiedere un'azione di eccezione, ad esempio la registrazione dell'errore, l'invio di un messaggio di posta elettronica all'amministratore o agire sul lato client compensazione (invertendo l'effetto di una transazione precedente).</span><span class="sxs-lookup"><span data-stu-id="24175-124">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="24175-125">Se il metodo di eccezione non viene completato, il messaggio viene lasciato la coda non recapitabili Xact.</span><span class="sxs-lookup"><span data-stu-id="24175-125">If the exception method is not successful, the message is left on the Xact Dead Letter queue.</span></span>  
  
 <span data-ttu-id="24175-126">La coda non recapitabili Xact può essere visualizzato in Esplora risorse di Microsoft Message Queue (MSMQ).</span><span class="sxs-lookup"><span data-stu-id="24175-126">The Xact Dead Letter queue can be viewed in the Microsoft Message Queue (MSMQ) Explorer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="24175-127">Informa l'implementazione della classe di eccezioni lato server che tutti i tentativi di riprodurre l'attivazione rinviata sul server non sono riusciti e che il messaggio verrà spostato nella coda in sospeso finale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="24175-127">Informs the server-side exception class implementation that all attempts to play back the deferred activation to the server have failed, and the message is about to be moved to its final resting queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="24175-128">Quando i messaggi arrivano nella coda recapitabili Xact, COM+ tenta di richiamare un gestore di eccezioni lato server correlato alla classe server per recapitare la notifica.</span><span class="sxs-lookup"><span data-stu-id="24175-128">As messages arrive on the Xact Dead Letter queue, COM+ attempts to invoke a server-side exception handler related to the server class to deliver this notification.</span></span> <span data-ttu-id="24175-129">Tale scopo, chiamare prima il metodo <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, quindi chiamare la versione del metodo non riuscito nell'oggetto di gestore di eccezioni di gestione delle eccezioni.</span><span class="sxs-lookup"><span data-stu-id="24175-129">It does so by first calling <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, then calling the exception handling version of the failed method in the exception handler object.</span></span> <span data-ttu-id="24175-130">Questo metodo può quindi richiedere un'azione di eccezione, ad esempio la registrazione dell'errore, l'invio di un messaggio di posta elettronica all'amministratore o agire sul lato client compensazione (invertendo l'effetto di una transazione precedente).</span><span class="sxs-lookup"><span data-stu-id="24175-130">This exception method can then take an exception action, such as recording the failure, sending a mail message to the administrator, or taking client-side compensating action (reversing the effect of an earlier transaction).</span></span> <span data-ttu-id="24175-131">L'oggetto server deve assicurarsi di completare la transazione.</span><span class="sxs-lookup"><span data-stu-id="24175-131">The server object should make every effort to complete this transaction successfully.</span></span> <span data-ttu-id="24175-132">In caso contrario, è necessario intervenire manualmente per rielaborare il messaggio.</span><span class="sxs-lookup"><span data-stu-id="24175-132">Otherwise, manual intervention is required to reprocess the message.</span></span> <span data-ttu-id="24175-133">Se il metodo di eccezione non viene completato, il messaggio viene spostato dalla coda di attesa finale.</span><span class="sxs-lookup"><span data-stu-id="24175-133">If the exception method is not successful, the message is moved to the final resting queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>