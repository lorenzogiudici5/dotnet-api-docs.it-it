<Type Name="IPlaybackControl" FullName="System.EnterpriseServices.IPlaybackControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="642ac9e3f2ad478ab2e2f243b5892ce7ec311488" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39983161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPlaybackControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPlaybackControl" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IPlaybackControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPlaybackControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPlaybackControl" />
  <TypeSignature Language="F#" Value="type IPlaybackControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.Guid("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Funzioni in Componenti in coda nella gestione anomala di errori di riproduzione lato server e di errori lato client del meccanismo di recapito Accodamento messaggi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La classe di eccezione definita per il componente nel catalogo COM+ implementa sia <xref:System.EnterpriseServices.IPlaybackControl> e l'interfaccia per la classe originale. Le implementazioni del metodo dell'interfaccia della classe originale vengono utilizzate per eseguire la gestione delle eccezioni per i metodi non riusciti nella classe stessa. Verrà chiamati dopo <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A> o <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> per elaborare le eccezioni per il metodo chiamato originariamente.  
  
 Riproduttore componenti chiama i metodi di <xref:System.EnterpriseServices.IPlaybackControl> per informare l'oggetto del gestore di eccezioni che un messaggio deve essere inserito nella coda degli collocando o lettera non consegnata finale. Riproduttore componenti quindi chiama il metodo di stesso nell'oggetto del gestore di eccezioni che non è riuscita nella chiamata al metodo originale. L'oggetto del gestore di eccezioni può implementare in alternativa, ad esempio, raccogliere le informazioni di diagnosi di problemi o generando un oggetto o un messaggio che informa il client del problema. Se l'applicazione non implementa <xref:System.EnterpriseServices.IPlaybackControl>, il messaggio non elaborabile viene inserito il finale nella coda o in lettera non consegnata quando il giocatore di componenti in coda esaurisce tutti i tentativi.  
  
 Un messaggio non elaborabile è un messaggio che non può essere elaborato per qualche motivo, forse a causa di un problema con il server o un sistema di Accodamento. Viene eseguito il rollback della transazione e il messaggio non elaborabile viene inserito all'inizio della coda. Quando il messaggio viene rimosso dalla coda anche in questo caso, si verifica la stessa condizione. Questo messaggio può continuare all'infinito finché non viene effettuata un'operazione per risolvere il problema di ciclo. Il servizio di componenti in coda gestisce il messaggio non elaborabile usando una serie di tentativi. Dopo diversi tentativi non riusciti, il messaggio viene spostato a una coda in sospeso finale. I messaggi non elaborabili rimangono nella coda in sospeso finché non vengono spostati manualmente usando lo strumento di spostamento dei messaggi di componenti in coda.  
  
 La situazione dei messaggi non elaborabili può essere risolto anche a livello di codice usando il <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A> metodo, che informa l'autore dei componenti lato server che non sono riusciti tutti i tentativi di riprodurre l'attivazione rinviata.  
  
 Se si individua un messaggio non elaborabile, potrebbe essere in grado di risolvere rapidamente la causa principale del problema. Ad esempio, se il server era offline per qualche motivo, è possibile portare online il server. Se è possibile risolvere rapidamente il problema, è possibile generare automaticamente un'altra transazione che invia una notifica al richiedente che la transazione non si è verificato. Il richiedente può quindi rendere una transazione di compensazione che inverte l'effetto di una transazione che ha già eseguito il commit.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="FinalClientRetry">
      <MemberSignature Language="C#" Value="public void FinalClientRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalClientRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalClientRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalClientRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalClientRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalClientRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalClientRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa il componente per la gestione delle eccezioni lato client che tutti i tentativi di Accodamento messaggi di recapitare il messaggio al server sono stati rifiutati e che il messaggio è finito nella coda messaggi non recapitabili relativi alle transazioni lato client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando i messaggi arrivano nella coda di lettera non consegnata Xact, COM+ tenta di richiamare un gestore di eccezioni lato client correlato alla classe di server per recapitare la notifica. Esegue l'operazione da chiamare prima <xref:System.EnterpriseServices.IPlaybackControl.FinalClientRetry%2A>, quindi chiamare tale versione di gestione delle eccezioni del metodo non riuscita nell'oggetto del gestore di eccezioni. Questo metodo può quindi richiedere un'azione di eccezione, ad esempio la registrazione dell'errore, inviare un messaggio di posta elettronica all'amministratore o eseguire azioni di compensazione lato client (invertendo l'effetto di una transazione precedente). Se il metodo dell'eccezione non ha esito positivo, il messaggio viene lasciato nella coda di lettera non consegnata Xact.  
  
 La coda non recapitabili Xact può essere visualizzato in Esplora Microsoft Message Queue (MSMQ).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalServerRetry">
      <MemberSignature Language="C#" Value="public void FinalServerRetry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalServerRetry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IPlaybackControl.FinalServerRetry" />
      <MemberSignature Language="VB.NET" Value="Public Sub FinalServerRetry ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FinalServerRetry();" />
      <MemberSignature Language="F#" Value="abstract member FinalServerRetry : unit -&gt; unit" Usage="iPlaybackControl.FinalServerRetry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa l'implementazione della classe di eccezioni lato server che tutti i tentativi di riprodurre l'attivazione rinviata sul server non sono riusciti e che il messaggio verrà spostato nella coda in sospeso finale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando i messaggi arrivano nella coda di lettera non consegnata Xact, COM+ tenta di richiamare un gestore di eccezioni lato server correlato alla classe di server per recapitare la notifica. Esegue l'operazione da chiamare prima <xref:System.EnterpriseServices.IPlaybackControl.FinalServerRetry%2A>, quindi la versione del metodo non riuscito nell'oggetto di gestore di eccezioni di gestione delle eccezioni. Questo metodo può quindi richiedere un'azione di eccezione, ad esempio la registrazione dell'errore, inviare un messaggio di posta elettronica all'amministratore o eseguire azioni di compensazione lato client (invertendo l'effetto di una transazione precedente). L'oggetto server debba sforzarsi per completare correttamente questa transazione. In caso contrario, è necessario un intervento manuale per rielaborare il messaggio. Se il metodo dell'eccezione non ha esito positivo, il messaggio viene spostato nella coda in sospeso finale.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>