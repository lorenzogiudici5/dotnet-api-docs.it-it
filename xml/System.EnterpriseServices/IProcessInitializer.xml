<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71de6c95b5ac06ee9ff4c5ad83a05ad3542abd35" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30408235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Supporta i metodi che è possibile chiamare quando un componente COM viene avviato o arrestato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il <xref:System.EnterpriseServices.IProcessInitializer> metodi di interfaccia sui componenti serviti, se si desidera eseguire l'inizializzazione o arrestare il codice quando un processo server (Dllhost.exe) viene avviato o arrestato, rispettivamente.  
  
 Fornita da COM+ `Startup` e `Shutdown` eventi quando Dllhost.exe inizia e termina. Questa funzionalità consente a tutti i componenti COM+ che vengono installati in un'applicazione server COM+ (definita per i componenti server successivamente) per eseguire l'inizializzazione personalizzata e codice di pulitura. Un'istanza di ogni componente che implementa il <xref:System.EnterpriseServices.IProcessInitializer> verrà creata e archiviata per la durata del processo e chiamata i metodi di interfaccia durante l'avvio e arresto interfaccia. Quando viene implementato in una <xref:System.EnterpriseServices.ServicedComponent>, durante la registrazione del componente, il `InitializesServerApplication` parametro il `COMAdminCatalogObject` all'interno di componenti di raccolta è impostata su `true`.  
  
 Utilizzo di `Startup` e `Shutdown` eventi, è possibile inizializzare le risorse, creare connessioni, inizializzare i dati condivisi ed esegue il codice di pulizia. Tuttavia, non è necessario accedere stati che sono specifici di COM+ in quanto le istanze dei componenti server non sono ancora state create. Inoltre, il codice di `Startup` e `Shutdown` eventi devono restituire il più rapidamente possibile, poiché il sistema attende solo 90 secondi per Dllhost.exe preparare accettare le attivazioni dopo che il processo di avvio del sistema. Se Dllhost.exe non segnala che è pronto entro 90 secondi, il sistema termina il processo. di conseguenza, tutti l'inizializzazione deve essere completato entro questo periodo di tempo di elaborazione. Ogni componente che fa parte di inizializzazione deve supportare il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia. All'avvio di DllHost.exe, COM+ crea tutti i componenti server che ha richiesto il servizio, le chiamate `QueryInterface` per il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia e chiama il <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> (funzione). Analogamente, quando viene arrestato il processo DllHost.exe, chiama il <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funzione su quelli archiviati in precedenza i puntatori di interfaccia.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue azioni di arresto. Chiamato quando Dllhost.exe viene arrestato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> non viene chiamato durante un failfast o altri eventi di arresto irreversibile.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">In Microsoft Windows XP, puntatore all'interfaccia <see langword="IUnknown" /> del componente COM in fase di avvio. In Microsoft Windows 2000 questo argomento è sempre <see langword="null" />.</param>
        <summary>Esegue l'inizializzazione all'avvio. Chiamato quando Dllhost.exe viene avviato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto a cui fa riferimento `punkProcessControl` implementa un <xref:System.EnterpriseServices.IProcessInitControl> interfaccia. <xref:System.EnterpriseServices.IProcessInitControl> supporta il metodo singolo <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Il codice di inizializzazione in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> può chiamare il <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, con il valore di timeout uguale al numero di secondi rimanenti prima dell'avvio del componente timeout.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>