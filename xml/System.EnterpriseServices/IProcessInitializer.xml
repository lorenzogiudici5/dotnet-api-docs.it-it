<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71de6c95b5ac06ee9ff4c5ad83a05ad3542abd35" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f41a2-101">Supporta i metodi che è possibile chiamare quando un componente COM viene avviato o arrestato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f41a2-101">Supports methods that can be called when a COM component starts up or shuts down.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f41a2-102">Implementare il <xref:System.EnterpriseServices.IProcessInitializer> metodi di interfaccia sui componenti serviti, se si desidera eseguire l'inizializzazione o arrestare il codice quando un processo server (Dllhost.exe) viene avviato o arrestato, rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="f41a2-102">Implement the <xref:System.EnterpriseServices.IProcessInitializer> interface methods on serviced components if you want to run initialization or shutdown code when a server process (Dllhost.exe) starts up or shuts down, respectively.</span></span>  
  
 <span data-ttu-id="f41a2-103">Fornita da COM+ `Startup` e `Shutdown` eventi quando Dllhost.exe inizia e termina.</span><span class="sxs-lookup"><span data-stu-id="f41a2-103">COM+ provides `Startup` and `Shutdown` events when Dllhost.exe starts and ends.</span></span> <span data-ttu-id="f41a2-104">Questa funzionalità consente a tutti i componenti COM+ che vengono installati in un'applicazione server COM+ (definita per i componenti server successivamente) per eseguire l'inizializzazione personalizzata e codice di pulitura.</span><span class="sxs-lookup"><span data-stu-id="f41a2-104">This feature enables any COM+ components that are installed in a COM+ server application (referred to as server components hereafter) to run custom initialization and clean up code.</span></span> <span data-ttu-id="f41a2-105">Un'istanza di ogni componente che implementa il <xref:System.EnterpriseServices.IProcessInitializer> verrà creata e archiviata per la durata del processo e chiamata i metodi di interfaccia durante l'avvio e arresto interfaccia.</span><span class="sxs-lookup"><span data-stu-id="f41a2-105">An instance of each component that implements the <xref:System.EnterpriseServices.IProcessInitializer> interface will be created and stored for the duration of the process, and called on the interface methods during startup and shutdown.</span></span> <span data-ttu-id="f41a2-106">Quando viene implementato in una <xref:System.EnterpriseServices.ServicedComponent>, durante la registrazione del componente, il `InitializesServerApplication` parametro il `COMAdminCatalogObject` all'interno di componenti di raccolta è impostata su `true`.</span><span class="sxs-lookup"><span data-stu-id="f41a2-106">When implemented on a <xref:System.EnterpriseServices.ServicedComponent>, during registration of the component, the `InitializesServerApplication` parameter in the `COMAdminCatalogObject` within the Components collection is set to `true`.</span></span>  
  
 <span data-ttu-id="f41a2-107">Utilizzo di `Startup` e `Shutdown` eventi, è possibile inizializzare le risorse, creare connessioni, inizializzare i dati condivisi ed esegue il codice di pulizia.</span><span class="sxs-lookup"><span data-stu-id="f41a2-107">Using the `Startup` and `Shutdown` events, you can initialize resources, create connections, initialize shared data, and run cleanup code.</span></span> <span data-ttu-id="f41a2-108">Tuttavia, non è necessario accedere stati che sono specifici di COM+ in quanto le istanze dei componenti server non sono ancora state create.</span><span class="sxs-lookup"><span data-stu-id="f41a2-108">However, you must not access states that are specific to COM+ because instances of server components have not yet been created.</span></span> <span data-ttu-id="f41a2-109">Inoltre, il codice di `Startup` e `Shutdown` eventi devono restituire il più rapidamente possibile, poiché il sistema attende solo 90 secondi per Dllhost.exe preparare accettare le attivazioni dopo che il processo di avvio del sistema.</span><span class="sxs-lookup"><span data-stu-id="f41a2-109">In addition, the code in the `Startup` and `Shutdown` events should return as quickly as possible, because the system waits only 90 seconds for Dllhost.exe to prepare to accept activations after the system starts the process.</span></span> <span data-ttu-id="f41a2-110">Se Dllhost.exe non segnala che è pronto entro 90 secondi, il sistema termina il processo. di conseguenza, tutti l'inizializzazione deve essere completato entro questo periodo di tempo di elaborazione.</span><span class="sxs-lookup"><span data-stu-id="f41a2-110">If Dllhost.exe does not signal that it is ready within 90 seconds, the system ends the process; thus, all initialization processing needs to be completed within this time frame.</span></span> <span data-ttu-id="f41a2-111">Ogni componente che fa parte di inizializzazione deve supportare il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="f41a2-111">Each server component that participates in initialization must support the <xref:System.EnterpriseServices.IProcessInitializer> interface.</span></span> <span data-ttu-id="f41a2-112">All'avvio di DllHost.exe, COM+ crea tutti i componenti server che ha richiesto il servizio, le chiamate `QueryInterface` per il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia e chiama il <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> (funzione).</span><span class="sxs-lookup"><span data-stu-id="f41a2-112">On DllHost.exe startup, COM+ creates all server components that requested this service, calls `QueryInterface` for the <xref:System.EnterpriseServices.IProcessInitializer> interface, and calls the <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> function.</span></span> <span data-ttu-id="f41a2-113">Analogamente, quando viene arrestato il processo DllHost.exe, chiama il <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funzione su quelli archiviati in precedenza i puntatori di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="f41a2-113">Similarly, when the DllHost.exe process is shut down, it calls the <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> function on those previously stored interface pointers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f41a2-114">Esegue azioni di arresto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-114">Performs shutdown actions.</span>
          </span>
          <span data-ttu-id="f41a2-115">Chiamato quando Dllhost.exe viene arrestato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-115">Called when Dllhost.exe is shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f41a2-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> non viene chiamato durante un failfast o altri eventi di arresto irreversibile.</span><span class="sxs-lookup"><span data-stu-id="f41a2-116"><xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> is not called during a failfast or other catastrophic shutdown events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">
          <span data-ttu-id="f41a2-117">In Microsoft Windows XP, puntatore all'interfaccia <see langword="IUnknown" /> del componente COM in fase di avvio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-117">In Microsoft Windows XP, a pointer to the <see langword="IUnknown" /> interface of the COM component starting up.</span>
          </span>
          <span data-ttu-id="f41a2-118">In Microsoft Windows 2000 questo argomento è sempre <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-118">In Microsoft Windows 2000, this argument is always <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f41a2-119">Esegue l'inizializzazione all'avvio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-119">Performs initialization at startup.</span>
          </span>
          <span data-ttu-id="f41a2-120">Chiamato quando Dllhost.exe viene avviato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f41a2-120">Called when Dllhost.exe is started.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f41a2-121">L'oggetto a cui fa riferimento `punkProcessControl` implementa un <xref:System.EnterpriseServices.IProcessInitControl> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="f41a2-121">The object referenced by `punkProcessControl` implements an <xref:System.EnterpriseServices.IProcessInitControl> interface.</span></span> <span data-ttu-id="f41a2-122"><xref:System.EnterpriseServices.IProcessInitControl> supporta il metodo singolo <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span><span class="sxs-lookup"><span data-stu-id="f41a2-122"><xref:System.EnterpriseServices.IProcessInitControl> supports the single method <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.</span></span>  
  
 <span data-ttu-id="f41a2-123">Il codice di inizializzazione in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> può chiamare il <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, con il valore di timeout uguale al numero di secondi rimanenti prima dell'avvio del componente timeout.</span><span class="sxs-lookup"><span data-stu-id="f41a2-123">The initialization code in <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> can call the <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, with the time-out set equal to the number of seconds remaining before the startup of the component times out.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>