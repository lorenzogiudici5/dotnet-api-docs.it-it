<Type Name="IProcessInitializer" FullName="System.EnterpriseServices.IProcessInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c277cfba8173ae8e73d3da5f6b249715ffb4a0a4" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48633535" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IProcessInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProcessInitializer" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.IProcessInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProcessInitializer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProcessInitializer" />
  <TypeSignature Language="F#" Value="type IProcessInitializer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("1113f52d-dc7f-4943-aed6-88d04027e32a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Supporta i metodi che è possibile chiamare quando un componente COM viene avviato o arrestato.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementare il <xref:System.EnterpriseServices.IProcessInitializer> metodi di interfaccia sui componenti serviti se si desidera eseguire l'inizializzazione o arrestare il codice quando un processo server (Dllhost.exe) viene avviato o arrestato, rispettivamente.  
  
 Fornita da COM+ `Startup` e `Shutdown` eventi quando Dllhost.exe inizia e termina. Questa funzionalità consente a tutti i componenti COM+ che vengono installati in un'applicazione server COM+ (definita per i componenti del server da ora in poi) per eseguire l'inizializzazione personalizzata e codice di pulitura. Un'istanza di ogni componente che implementa il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia verrà creata e archiviata per la durata del processo e sui metodi dell'interfaccia chiamata durante l'avvio e arresto. Quando viene implementato in una <xref:System.EnterpriseServices.ServicedComponent>, durante la registrazione del componente, il `InitializesServerApplication` parametro nel `COMAdminCatalogObject` all'interno dei componenti insieme `true`.  
  
 Usando il `Startup` e `Shutdown` eventi, è possibile inizializzare le risorse, creare le connessioni, inizializzare i dati condivisi ed esegue il codice di pulitura. Tuttavia, è necessario accedere non stati che sono specifici di COM+ perché non sono ancora state create le istanze dei componenti server. Inoltre, il codice nel `Startup` e `Shutdown` eventi devono restituire il più rapidamente possibile, perché il sistema attende solo per 90 secondi per Dllhost.exe preparare accettare le attivazioni dopo che il processo di avvio del sistema. Se Dllhost.exe non segnala che è pronto entro 90 secondi, il sistema termina il processo. di conseguenza, tutte le inizializzazione deve essere completata entro questo intervallo di tempo di elaborazione. Ogni componente del server che fa parte di inizializzazione deve supportare il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia. All'avvio DllHost.exe, COM+ crea tutti i componenti server che ha richiesto di questo servizio, le chiamate `QueryInterface` per il <xref:System.EnterpriseServices.IProcessInitializer> interfaccia e le chiamate di <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> (funzione). Analogamente, quando il processo DllHost.exe viene arrestato, chiama il <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> funzione su tali puntatori a interfaccia memorizzati in precedenza.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shutdown();" />
      <MemberSignature Language="F#" Value="abstract member Shutdown : unit -&gt; unit" Usage="iProcessInitializer.Shutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Esegue azioni di arresto. Chiamato quando Dllhost.exe viene arrestato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.IProcessInitializer.Shutdown%2A> non viene chiamato durante un failfast o altri eventi di arresto irreversibili.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public void Startup (object punkProcessControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Startup([in]object punkProcessControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Startup (punkProcessControl As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Startup(System::Object ^ punkProcessControl);" />
      <MemberSignature Language="F#" Value="abstract member Startup : obj -&gt; unit" Usage="iProcessInitializer.Startup punkProcessControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="punkProcessControl" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="punkProcessControl">In Microsoft Windows XP, puntatore all'interfaccia <see langword="IUnknown" /> del componente COM in fase di avvio. In Microsoft Windows 2000 questo argomento è sempre <see langword="null" />.</param>
        <summary>Esegue l'inizializzazione all'avvio. Chiamato quando Dllhost.exe viene avviato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'oggetto fa riferimento `punkProcessControl` implementa un <xref:System.EnterpriseServices.IProcessInitControl> interfaccia. <xref:System.EnterpriseServices.IProcessInitControl> supporta il metodo single <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>.  
  
 Il codice di inizializzazione nel <xref:System.EnterpriseServices.IProcessInitializer.Startup%2A> può chiamare il <xref:System.EnterpriseServices.IProcessInitControl.ResetInitializerTimeout%2A>, con il valore di timeout pari al numero di secondi rimanenti prima dell'avvio del timeout del componente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>