<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dcac3f06155284f05d1a9975094ead1ced45fd01" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39983463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta un'autorizzazione che utilizza un'implementazione <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> per determinare se l'accesso a una risorsa deve essere concesso all'entità di sicurezza attiva. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe offre la possibilità di eseguire controlli di accesso imperativi utilizzando il <xref:System.Security.Claims.ClaimsAuthorizationManager> configurato per un'applicazione. Quando si richiama il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metodo o il metodo statico <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metodo, è possibile fornire protezione alle risorse da all'interno del percorso di esecuzione del codice in base ai criteri di autorizzazione definiti per il gestore di autenticazione delle attestazioni. Può essere eseguita usando i controlli di accesso dichiarativo di <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> classe.  
  
> [!IMPORTANT]
>  Il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe utilizza il gestore di autorizzazione delle attestazioni configurato per il <xref:System.IdentityModel.Configuration.IdentityConfiguration> che è impostato nel <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> proprietà. Questo vale in tutti i casi, anche negli scenari in cui non viene utilizzato WS-Federation; ad esempio, applicazioni Web (WCF) attive e le applicazioni Console. È possibile specificare il gestore di autorizzazione delle attestazioni nella configurazione o a livello di codice. Per specificare il gestore di autorizzazione delle attestazioni in un file di configurazione, impostare il [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento sotto un' [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento e assicurarsi che fa riferimento a questa configurazione di identità di [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento che viene caricato dal runtime (ad esempio, mediante l'impostazione di `identityConfigurationName` attributo). Per impostare il gestore di autorizzazione delle attestazioni a livello di programmazione, fornire un gestore per il <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> evento.  
  
 Su un solo livello, le funzionalità fornite da <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> è simile a controlli di accesso basato sui ruoli (RBAC) forniti tramite il <xref:System.Security.Permissions.PrincipalPermission> classe; tuttavia, il <xref:System.Security.Claims.ClaimsAuthorizationManager> classe esegue controlli basati sulle attestazioni presentate dal server principale attivo. In questo modo di gran lunga maggiore granularità rispetto a quella disponibile tramite RBAC puri, in cui un numero di autorizzazioni è in genere raccolti in un singolo ruolo. Ad esempio, cosa più importante, autorizzazione basata sulle attestazioni consente una migliore separazione dei criteri di business per la logica e l'autorizzazione perché può essere richiesta l'autorizzazione per un'azione specifica su una risorsa nel codice e dei criteri back-end possono essere usato per configurare le attestazioni che il presentazione di entità deve disporre del privilegio per soddisfare la domanda. Ad esempio, RBAC <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> esegue un controllo di accesso basato su utente, vale a dire, a differenza di sicurezza dall'accesso di codice implementato dalle classi che derivano dal <xref:System.Security.CodeAccessPermission> classe e usare un percorso stack per assicurarsi che tutti i chiamanti del codice hanno ottenuti un'autorizzazione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>esegue il controllo solo sul database principale corrente.  
  
 Il metodo statico <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metodo controlla l'accesso per un'azione specificata su una risorsa specificata. La risorsa e l'azione sono entrambe le stringhe e sono in genere gli URI. È anche possibile inizializzare un'istanza di <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> con un'azione e una risorsa e chiamare il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> (metodo). Anche se il costruttore accetta solo una singola risorsa e un'azione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> gli oggetti possono essere combinati tramite il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metodi. Un'autorizzazione creata usando questi metodi può contenere più coppie risorsa-azione.  
  
 Entrambi i metodi determinano l'accesso tramite la chiamata di <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metodo del gestore di autorizzazione delle attestazioni configurati con un' <xref:System.Security.Claims.AuthorizationContext> composto dell'entità attiva (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), la risorsa e l'azione. Generano un <xref:System.Security.SecurityException> se l'oggetto principal corrente non è autorizzato a eseguire l'operazione sulla risorsa; in caso contrario, l'esecuzione continua.  
  
 Nel caso di un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> che contiene più coppie risorsa-azione, il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metodo viene richiamato per ognuna delle coppie risorsa-azione contenute nell'autorizzazione.  Per la chiamata a <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> per la corretta, l'entità attiva deve essere autorizzato per tutte le coppie risorsa-azione contenute nell'autorizzazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come proteggere una risorsa usando il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metodo, il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> metodo, o un <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> dichiarazione. In ogni caso, l'applicazione configurata <xref:System.Security.Claims.ClaimsAuthorizationManager> viene richiamato per valutare l'entità corrente per la risorsa specificata e l'azione. Se l'oggetto principal corrente non è autorizzato per l'azione specificata nella risorsa specificata, un <xref:System.Security.SecurityException> generata; in caso contrario, l'esecuzione prosegue.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 Il codice XML seguente viene illustrata la configurazione minima necessaria per utilizzare un'autorizzazione di attestazioni personalizzate manager con il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> classe. È necessario, come minimo, dichiarare entrambi il `system.identityModel` e il `system.identityModel.services` sezioni nel `<configSection>` elemento e quindi specificare la gestione di autorizzazioni in un [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento in base alla configurazione di identità predefinito. Ciò garantisce che la gestione di autorizzazioni viene fatto riferimento dalla configurazione predefinita della federazione. In alternativa, è possibile specificare il nome della configurazione dell'identità in base alle quali la gestione di autorizzazioni specificato nella `identityConfigurationName` attributo del [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Risorsa per cui l'entità deve essere autorizzata.</param>
        <param name="action">L'azione per la quale il principale deve essere autorizzato.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> oggetto viene inizializzato con la coppia di risorsa-azione specificata. È possibile chiamare il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metodo per eseguire un controllo di accesso.  
  
 Anche se il costruttore accetta solo una singola risorsa e un'azione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> gli oggetti possono essere combinati tramite il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metodi. L'autorizzazione creata tramite questi metodi può contenere più coppie risorsa-azione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> è <see langword="null" /> o una stringa vuota.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">Risorsa per cui l'entità deve essere autorizzata.</param>
        <param name="action">L'azione per la quale il principale deve essere autorizzato.</param>
        <summary>Verifica se l'entità è autorizzata a eseguire l'azione specificata nella risorsa specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'entità deve essere autorizzato per l'azione specificata nella risorsa specificata o <xref:System.Security.SecurityException> viene generata un'eccezione.  
  
 Il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> viene chiamato metodo del gestore di autorizzazione delle attestazioni configurati con un' <xref:System.Security.Claims.AuthorizationContext> composto dell'entità attiva (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la risorsa e l'azione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come proteggere una risorsa con il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> (metodo). Per valutare l'entità corrente per la risorsa specificata e l'azione viene richiamato il gestore di autorizzazione delle attestazioni configurati. Se l'oggetto principal corrente non è autorizzato per l'azione specificata nella risorsa specificata, un <xref:System.Security.SecurityException> generata; in caso contrario, l'esecuzione prosegue.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'entità corrente non può essere assegnata da <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
oppure 
Non è configurato alcun <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il controllo dell'autorizzazione non è riuscito.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una copia dell'istanza di <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> copiato dall’istanza corrente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Controlla se l'entità corrente è autorizzata per le coppie risorsa-azione abbinate all'istanza corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'entità corrente deve essere autorizzato per tutte le coppie risorsa-azione associate a questa istanza o il <xref:System.Security.SecurityException> viene generata un'eccezione.  
  
 Anche se il costruttore accetta solo una singola risorsa e un'azione, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> gli oggetti possono essere combinati tramite il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> e <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> metodi. L'autorizzazione creata tramite questi metodi può contenere più coppie risorsa-azione.  
  
 Il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> metodo richiama il <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> metodo del gestore di autorizzazione delle attestazioni configurati con un <xref:System.Security.Claims.AuthorizationContext> composto dell'entità attiva (<xref:System.Threading.Thread.CurrentPrincipal%2A>), la risorsa e l'azione per ognuna delle coppie risorsa-azione contenute Nell'ambito dell'autorizzazione. Per il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> abbia esito positivo attivo entità deve essere autorizzato per tutte le coppie risorsa-azione contenute nell'autorizzazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come proteggere una risorsa con il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> (metodo). Per valutare l'entità corrente per la risorsa specificata e l'azione viene richiamato il gestore di autorizzazione delle attestazioni configurati. Se l'oggetto principal corrente non è autorizzato per l'azione specificata nella risorsa specificata, un <xref:System.Security.SecurityException> generata; in caso contrario, l'esecuzione prosegue.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'entità corrente non può essere assegnata da <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
oppure 
Non è configurato alcun <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il controllo dell'autorizzazione non è riuscito.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">Codifica XML da usare per ricostruire l'autorizzazione.</param>
        <summary>Ricostruisce l'autorizzazione corrente e il relativo stato dalla codifica XML specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ricostruisce un'autorizzazione alla codifica XML creato da una chiamata di <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La codifica contiene elementi o attributi non riconosciuti o XML in formato non valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione da intersecare con l'autorizzazione corrente. Deve essere un'istanza di <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Restituisce un'autorizzazione che rappresenta l'intersezione dell'autorizzazione corrente con quella specificata.</summary>
        <returns>Nuovo <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> che rappresenta l'intersezione tra l'autorizzazione corrente e quella specificata oppure <see langword="null" /> se <paramref name="target" /> è <paramref name="null" /> o non è un'istanza di <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autorizzazione che viene restituita contiene solo le coppie risorsa-azione che erano presenti nell'ambito dell'autorizzazione corrente e nell'autorizzazione specificato. Le coppie risorsa-azione esistenti in uno solo o in altro delle autorizzazioni non sono incluse. Per un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> per la corretta sulla nuova autorizzazione, l'entità corrente deve solo essere autorizzati per le coppie risorsa-azione comunemente per l'autorizzazione corrente e l'autorizzazione specificata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione in cui verificare la relazione del subset. Deve essere un'istanza di <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Restituisce un valore che indica se l'autorizzazione corrente è un subset dell'autorizzazione specificata.</summary>
        <returns>
          <see langword="true" /> se l'autorizzazione corrente è un sottoinsieme dell'autorizzazione specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autorizzazione corrente è un subset dell'autorizzazione specificata se tutte le coppie risorsa-azione contenute in autorizzazione corrente sono presenti anche in all'autorizzazione specificata. Se `target` viene `null` o non è un'istanza di <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, il <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> restituisce `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se l'autorizzazione è senza restrizioni.</summary>
        <returns>
          <see langword="true" /> se l'autorizzazione è senza restrizioni; in caso contrario, <see langword="false" />. Restituisce sempre <see langword="true" /> a indicare che l'autorizzazione è senza restrizioni.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il form con codifica XML dell'autorizzazione corrente e del relativo stato.</summary>
        <returns>Form con codifica XML dell'autorizzazione corrente e del relativo stato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'entità possa essere ricostruito dal formato con codificata XML chiamando la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Autorizzazione da combinare con l'autorizzazione corrente. Deve essere di tipo <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Restituisce una nuova autorizzazione che è l'unione dell'autorizzazione corrente e dell'autorizzazione specificata. Oggetto <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> con tutte le coppie risorsa-azione incluse nell'istanza corrente e nell'istanza di destinazione.</summary>
        <returns>Nuovo <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> che rappresenta l'unione tra l'autorizzazione corrente e quella specificata oppure <see langword="null" /> se <paramref name="target" /> è <paramref name="null" /> o non è un'istanza di <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'autorizzazione che viene restituito include tutte le coppie risorsa-azione incluse nell'ambito dell'autorizzazione corrente e tutte le coppie risorsa-azione presentano l'autorizzazione specificata. Per un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> per la corretta sulla nuova autorizzazione, l'entità corrente deve essere autorizzato per tutte le coppie risorsa-azione presenti nell'ambito dell'autorizzazione corrente e tutte le coppie risorsa-azione esistenti all'autorizzazione specificata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>