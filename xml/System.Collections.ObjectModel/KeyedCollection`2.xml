<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ce2597c1f3d8e4d98d5761be237988390ae5ae8" />
    <Meta Name="ms.sourcegitcommit" Value="6ee2e6b2c5d7c5bd66feeb362d29e65fdf858836" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/15/2018" />
    <Meta Name="ms.locfileid" Value="51691534" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">Tipo di chiavi nella raccolta.</typeparam>
    <typeparam name="TItem">Tipo di elementi nella raccolta.</typeparam>
    <summary>Fornisce la classe base astratta per una raccolta le cui chiavi sono incorporate nei valori.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Collections.ObjectModel.KeyedCollection%602> classe fornisce entrambi o (1) il recupero indicizzato e chiave che si avvicina o (1). È un tipo astratto o più precisamente un gruppo infinito di tipi astratti, perché ognuno dei relativi tipi generici costruiti è una classe base astratta. Usare <xref:System.Collections.ObjectModel.KeyedCollection%602>, derivare un tipo raccolta dal tipo costruito appropriato.  
  
 Il <xref:System.Collections.ObjectModel.KeyedCollection%602> classe è un ibrido tra una raccolta sulla base di <xref:System.Collections.Generic.IList%601> interfaccia generica e una raccolta in base il <xref:System.Collections.Generic.IDictionary%602> interfaccia generica. Come le raccolte in base il <xref:System.Collections.Generic.IList%601> generico interfaccia, <xref:System.Collections.ObjectModel.KeyedCollection%602> è un elenco di elementi indicizzato. Come le raccolte in base il <xref:System.Collections.Generic.IDictionary%602> generico interfaccia, <xref:System.Collections.ObjectModel.KeyedCollection%602> dispone di una chiave associata a ciascun elemento.  
  
 A differenza dei dizionari, un elemento di <xref:System.Collections.ObjectModel.KeyedCollection%602> non è una coppia chiave/valore; in alternativa, l'intero elemento è il valore e la chiave viene incorporata all'interno del valore.  Ad esempio, un elemento di una raccolta derivata da `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) potrebbe essere "Jr John Doe". dove il valore è "John Doe Jr." e la chiave è "Doe". o una raccolta di record dei dipendenti che contiene le chiavi integer può essere derivata da `KeyedCollection\<int,Employee>`. La classe astratta <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> metodo estrae la chiave dall'elemento.  
  
 Per impostazione predefinita, il <xref:System.Collections.ObjectModel.KeyedCollection%602> include un dizionario di ricerca che è possibile ottenere con il <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> proprietà.  Quando viene aggiunto un elemento per il <xref:System.Collections.ObjectModel.KeyedCollection%602>, la chiave dell'elemento viene estratto una sola volta e salvata nel dizionario di ricerca per consentire ricerche più veloci. Viene eseguito l'override di questo comportamento specificando una soglia per la creazione di dizionario, quando si crea il <xref:System.Collections.ObjectModel.KeyedCollection%602>. Il dizionario di ricerca viene creato la prima volta che il numero di elementi supera tale soglia.  Se si specifica -1 come la soglia, il dizionario di ricerca non viene mai creato.  
  
> [!NOTE]
>  Quando viene usato il dizionario di ricerca interno, contiene riferimenti a tutti gli elementi nella raccolta se `TItem` è un tipo riferimento, o copie di tutti gli elementi nella raccolta se `TItem` è un tipo valore. In questo modo, tramite il dizionario di ricerca potrebbe non essere appropriato se `TItem` è un tipo valore.  
  
 È possibile accedere a un elemento mediante il relativo indice o chiave usando il <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> proprietà. È possibile aggiungere elementi senza una chiave, ma questi elementi successivamente sono accessibili solo in base all'indice.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice. Il primo esempio viene illustrato il codice necessario derivare da <xref:System.Collections.ObjectModel.KeyedCollection%602>e vengono illustrati molti dei metodi ereditati. Nel secondo esempio viene illustrato come eseguire l'override dei metodi protetti di <xref:System.Collections.ObjectModel.KeyedCollection%602> per fornire un comportamento personalizzato.  
  
 **Esempio 1**  
  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **Esempio 2**  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza predefinito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.Collections.ObjectModel.KeyedCollection%602> create con questo costruttore Usa l'operatore di confronto di uguaglianza predefinito per il tipo della chiave, ottenuto da <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>. Per specificare un operatore di confronto di uguaglianza generico diverso, usare il <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> costruttore o <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> costruttore.  
  
 Per impostazione predefinita, il <xref:System.Collections.ObjectModel.KeyedCollection%602> include un dizionario di ricerca che viene creato quando viene aggiunto il primo elemento. Quando viene aggiunto un elemento per il <xref:System.Collections.ObjectModel.KeyedCollection%602>, la chiave dell'elemento viene estratto una sola volta e salvata nel dizionario di ricerca per consentire ricerche più veloci. Questo comportamento può essere sottoposto a override utilizzando il <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> costruttore e specificando una soglia di creazione del dizionario.  
  
> [!NOTE]
>  Poiché il <xref:System.Collections.ObjectModel.KeyedCollection%602> classe è astratta (`MustInherit` in Visual Basic), è necessario derivare da quest'ultimo per poterlo usare. Nel costruttore del tipo derivato, chiamare appropriato <xref:System.Collections.ObjectModel.KeyedCollection%602> costruttore. Non è necessario per esporre le funzionalità, ad esempio l'operatore di confronto di uguaglianza o la soglia per la creazione di dizionario nei costruttori.  
  
 Questo costruttore è un'operazione o (1).  
  
   
  
## Examples  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare durante il confronto delle chiavi o <see langword="null" /> per utilizzare l'operatore di confronto di uguaglianza predefinito per il tipo di chiave, ottenuto dalla proprietà <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Collections.ObjectModel.KeyedCollection%602> include un dizionario di ricerca che viene creato quando viene aggiunto il primo elemento. Quando viene aggiunto un elemento per il <xref:System.Collections.ObjectModel.KeyedCollection%602>, la chiave dell'elemento viene estratto una sola volta e salvata nel dizionario di ricerca per consentire ricerche più veloci. Questo comportamento può essere sottoposto a override utilizzando il <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> costruttore e specificando una soglia di creazione del dizionario.  
  
> [!NOTE]
>  Poiché il <xref:System.Collections.ObjectModel.KeyedCollection%602> classe è astratta (`MustInherit` in Visual Basic), è necessario derivare da quest'ultimo per poterlo usare. Nel costruttore del tipo derivato, chiamare appropriato <xref:System.Collections.ObjectModel.KeyedCollection%602> costruttore. Non è necessario per esporre le funzionalità, ad esempio l'operatore di confronto di uguaglianza o la soglia per la creazione di dizionario nei costruttori.  
  
 Questo costruttore è un'operazione o (1).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare durante il confronto delle chiavi o <see langword="null" /> per utilizzare l'operatore di confronto di uguaglianza predefinito per il tipo di chiave, ottenuto dalla proprietà <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
        <param name="dictionaryCreationThreshold">Numero di elementi che la raccolta può contenere prima che venga creato un dizionario di ricerca (0 crea il dizionario di ricerca quando viene aggiunto il primo elemento) oppure –1 per specificare che non deve mai venire creato un dizionario di ricerca.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza specificato e crea un dizionario di ricerca quando viene superata la soglia specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Collections.ObjectModel.KeyedCollection%602> include un dizionario di ricerca che viene creato quando viene aggiunto il primo elemento. Quando viene aggiunto un elemento per il <xref:System.Collections.ObjectModel.KeyedCollection%602>, la chiave dell'elemento viene estratto una sola volta e salvata nel dizionario di ricerca per consentire ricerche più veloci. Questo costruttore consente di eseguire l'override di tale comportamento. Specificare 0 per creare il dizionario quando viene aggiunto al primo elemento, 1 per creare il dizionario quando viene aggiunto il secondo elemento e così via. Se si specifica -1 come la soglia, il dizionario di ricerca non viene mai creato.  
  
 Per le raccolte di dimensioni molto ridotte il miglioramento nella velocità di recupero dal dizionario di ricerca potrebbe non essere la pena di memoria aggiuntiva necessaria per il dizionario. Impostare una soglia consente di decidere quando effettuare tale compromesso.  
  
> [!NOTE]
>  Poiché il <xref:System.Collections.ObjectModel.KeyedCollection%602> classe è astratta (`MustInherit` in Visual Basic), è necessario derivare da quest'ultimo per poterlo usare. Nel costruttore del tipo derivato, chiamare appropriato <xref:System.Collections.ObjectModel.KeyedCollection%602> costruttore. Non è necessario per esporre le funzionalità, ad esempio l'operatore di confronto di uguaglianza o la soglia per la creazione di dizionario nei costruttori.  
  
 Questo costruttore è un'operazione o (1).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 Nell'esempio di codice viene usato il <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> costruttore con un limite pari a 0, in modo che il dizionario interno viene creato la prima volta che un oggetto viene aggiunto alla raccolta.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dictionaryCreationThreshold" /> è minore di -1.</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">Elemento di cui modificare la chiave.</param>
        <param name="newKey">Nuova chiave per il parametro <paramref name="item" />.</param>
        <summary>Modifica la chiave associata all'elemento specificato nel dizionario di ricerca.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica la chiave incorporata in `item`; sostituisce semplicemente la chiave salvata nel dizionario di ricerca.  Pertanto, se `newKey` è diversa dalla chiave incorporato nel `item`, non è possibile accedere `item` usando la chiave restituita dalla <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.  
  
 Questo metodo non esegue alcuna operazione se il <xref:System.Collections.ObjectModel.KeyedCollection%602> non ha un dizionario di ricerca.  
  
 Ogni chiave in un <xref:System.Collections.ObjectModel.KeyedCollection%602> devono essere univoci. Non può essere una chiave `null`.  
  
 Questo metodo è un'operazione o (1).  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 Prima di modificare la chiave in un elemento incorporato, è necessario chiamare questo metodo per aggiornare la chiave nel dizionario di ricerca. Se la soglia per la creazione di dizionario è -1, chiamare questo metodo non è necessario.  
  
 Non esporre il <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo come metodo pubblico di una classe derivata. Un uso improprio di questo metodo inserisce il dizionario di ricerca non sincronizzato con le chiavi degli elementi. Ad esempio, impostando la chiave `null` e quindi impostarlo su un altro valore consente di aggiungere più chiavi per un elemento al dizionario di ricerca. Esporre il metodo interno per consentire le chiavi degli elementi modificabili: quando viene modificata la chiave per un elemento, questo metodo viene utilizzato per modificare la chiave nel dizionario di ricerca.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> è <see langword="null" />.  
  
oppure 
 <paramref name="key" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> non trovata.  
  
oppure 
 <paramref name="key" /> esiste già nella classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rimuove tutti gli elementi da <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se è presente un dizionario di ricerca, questo metodo cancella, ma non viene eliminata.  
  
 Se il numero di elementi ha superato la soglia di dizionario per la creazione e la <xref:System.Collections.ObjectModel.KeyedCollection%602> è usando un dizionario di ricerca, continuerà a utilizzare un dizionario di ricerca, anche se il numero di elementi anche in questo caso è sotto la soglia.  
  
 Questo metodo è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 Eseguire l'override di questo metodo per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodo ereditato dal <xref:System.Collections.ObjectModel.Collection%601> classe generica.  
  
 Chiamare l'implementazione della classe base di questo metodo per cancellare la raccolta sottostante e per cancellare il dizionario di ricerca.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice che illustrano l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> metodo per fornire un comportamento personalizzato per la cancellazione di tutti gli oggetti dalla raccolta. Il primo esempio aggiunge un evento di notifica personalizzato e il secondo fornisce il supporto per una raccolta di oggetti con chiavi modificabile.  
  
 Esempio 1  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 Esempio 2  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'operatore di confronto di uguaglianza generico usato per determinare l'uguaglianza delle chiavi nella raccolta.</summary>
        <value>Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> utilizzata per determinare l'uguaglianza delle chiavi nella raccolta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il recupero del valore di questa proprietà è un'operazione O(1).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Chiave da individuare in <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
        <summary>Determina se la raccolta contiene un elemento con la chiave specificata.</summary>
        <returns>
          <see langword="true" /> se <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.Collections.ObjectModel.KeyedCollection%602> ha un dizionario di ricerca, `key` viene utilizzato per la ricerca nel dizionario. Se è presente alcun dizionario di ricerca, viene estratta la chiave di ciascun elemento usando la <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e confrontato con la chiave specificata.  
  
 Questo metodo è un'operazione o (1) se il <xref:System.Collections.ObjectModel.KeyedCollection%602> ha un dizionario di ricerca; in caso contrario, è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
   
  
## Examples  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il dizionario di ricerca della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
        <value>Dizionario di ricerca della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, se esistente; in caso contrario, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Collections.ObjectModel.KeyedCollection%602> include un dizionario di ricerca che viene creato quando viene aggiunto il primo elemento. Quando viene aggiunto un elemento per il <xref:System.Collections.ObjectModel.KeyedCollection%602>, la chiave dell'elemento viene estratto una sola volta e salvata nel dizionario di ricerca per consentire ricerche più veloci. Questo comportamento può essere sottoposto a override utilizzando il <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> costruttore e specificando una soglia di creazione del dizionario.  
  
 Il recupero del valore di questa proprietà è un'operazione O(1).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">Elemento da cui estrarre la chiave.</param>
        <summary>Se implementato in una classe derivata, estrae la chiave dall'elemento specificato.</summary>
        <returns>Chiave dell'elemento specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la chiave nel dizionario di ricerca è diversa dalla chiave incorporata nel `item`, non è possibile accedere `item` usando la chiave restituita dalla <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.  
  
 È possibile implementare questo metodo restituisca `null` per una raccolta che contiene gli elementi senza chiavi, nel qual caso gli elementi sono accessibili solo tramite il relativo indice. Questo metodo è un'operazione o (1).  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 È necessario eseguire l'override di questo metodo per fornire il dizionario in grado di estrarre le chiavi dagli elementi nel dizionario.  
  
 Questo metodo viene chiamato internamente. Non è necessario per poter essere pubblici.  
  
   
  
## Examples  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
        <param name="item">Oggetto da inserire.</param>
        <summary>Inserisce un elemento in <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> in corrispondenza dell'indice specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `index` è uguale a <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` viene aggiunto alla fine del <xref:System.Collections.ObjectModel.KeyedCollection%602>.  
  
 Questo metodo è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> viene chiamato dal <xref:System.Collections.ObjectModel.Collection%601.Add%2A> e <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> metodi.  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 Eseguire l'override di questo metodo per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A> e <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> ereditati dal <xref:System.Collections.ObjectModel.Collection%601> classe generica.  
  
 Chiamare l'implementazione della classe base di questo metodo per inserire l'elemento nella raccolta sottostante e per aggiornare il dizionario di ricerca.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice che illustrano l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> metodo per fornire un comportamento personalizzato per l'aggiunta o inserimento di oggetti nella raccolta. Il primo esempio aggiunge un evento di notifica personalizzato e il secondo fornisce il supporto per una raccolta di oggetti con chiavi modificabile.  
  
 Esempio 1  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 Esempio 2  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> è minore di 0.  
  
oppure 
 <paramref name="index" /> è maggiore di <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dell'elemento da ottenere.</param>
        <summary>Ottiene l'elemento con la chiave specificata.</summary>
        <value>Elemento con la chiave specificata. Se un elemento con la chiave specificata non viene trovato, viene generata un'eccezione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà consente di accedere a un elemento specifico nella raccolta usando la sintassi seguente: `myCollection[key]` (`myCollection(key)` in Visual Basic).  
  
> [!NOTE]
>  Questa proprietà è diverso da ereditato <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> proprietà, che ottiene e imposta gli elementi in base all'indice numerico. Tuttavia, se `TKey` JE typu <xref:System.Int32>, questa proprietà maschera della proprietà ereditata. In tal caso, è possibile accedere alla proprietà ereditata eseguendo il cast di <xref:System.Collections.ObjectModel.KeyedCollection%602> al tipo di base. Ad esempio, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic `KeyedCollection<int, MyType^>` in C++) può essere eseguito il cast `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic `Collection<MyType^>` in C++).  
  
 Se il <xref:System.Collections.ObjectModel.KeyedCollection%602> ha un dizionario di ricerca, `key` viene usato per recuperare l'elemento dal dizionario.  Se è presente alcun dizionario di ricerca, viene estratta la chiave di ciascun elemento usando la <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e confrontato con la chiave specificata.  
  
 Il linguaggio c# usa la parola chiave per definire gli indicizzatori anziché implementare il <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> proprietà. In Visual Basic la proprietà <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> viene implementata come predefinita per fornire la stessa funzionalità di indicizzazione.  
  
 Il recupero del valore di questa proprietà è un'operazione o (1) se il <xref:System.Collections.ObjectModel.KeyedCollection%602> ha un dizionario di ricerca; in caso contrario, è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
   
  
## Examples  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 L'esempio di codice vengono chiamati i il <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> proprietà, che è di sola lettura e recupera dalla chiave, e il <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> proprietà, che è possibile impostare e recuperare in base all'indice. Viene illustrato come accedere alla proprietà di quest'ultima quando gli oggetti nella raccolta derivata dispongono di chiavi di interi, confusi con i numeri interi utilizzati per il recupero indicizzato.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">Un elemento con la chiave specificata non esiste nella raccolta.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Chiave dell'elemento da rimuovere.</param>
        <summary>Rimuove l'elemento con la chiave specificata da <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
        <returns>
          <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.  Questo metodo restituisce anche <see langword="false" /> se il parametro <paramref name="key" /> non viene trovato nella classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiave dell'elemento viene rimosso anche dal dizionario di ricerca.  
  
 Se il numero di elementi ha superato la soglia di dizionario per la creazione e la <xref:System.Collections.ObjectModel.KeyedCollection%602> è usando un dizionario di ricerca, continuerà a utilizzare un dizionario di ricerca, anche se il numero di elementi anche in questo caso è sotto la soglia.  
  
> [!NOTE]
>  Per personalizzare il comportamento di questo metodo, eseguire l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> (metodo).  
  
 Questo metodo è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
   
  
## Examples  
 Questo esempio di codice viene illustrato il codice necessario derivare una classe di raccolta da <xref:System.Collections.ObjectModel.KeyedCollection%602>: si esegue l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> (metodo) e fornendo un costruttore pubblico che delega a un costruttore di classe di base. L'esempio di codice viene illustrato inoltre molte delle proprietà e metodi ereditati dalla <xref:System.Collections.ObjectModel.KeyedCollection%602> e <xref:System.Collections.ObjectModel.Collection%601> classi.  
  
 Nell'esempio viene illustrato <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> metodo ereditato dal <xref:System.Collections.ObjectModel.KeyedCollection%602>, che rimuove l'elemento con una chiave specificata, nonché il <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> e <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> metodi ereditati da <xref:System.Collections.ObjectModel.Collection%601>, quale rimuovere rispettivamente per oggetto e per indice.  
  
 Il `SimpleOrder` classe è un elenco molto semplice che contiene `OrderItem` oggetti, ognuno dei quali rappresenta una voce nell'ordine. La chiave del `OrderItem` non è modificabile, una considerazione importante per le classi che derivano da <xref:System.Collections.ObjectModel.KeyedCollection%602>. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice dell'elemento da rimuovere.</param>
        <summary>Rimuove l'elemento in corrispondenza dell'indice specificato di <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiave dell'elemento viene rimosso anche dal dizionario di ricerca.  
  
 Se il numero di elementi ha superato la soglia di dizionario per la creazione e la <xref:System.Collections.ObjectModel.KeyedCollection%602> è usando un dizionario di ricerca, continuerà a utilizzare un dizionario di ricerca, anche se il numero di elementi anche in questo caso è sotto la soglia.  
  
 Questo metodo è un'operazione O (`n`) operazione, in cui `n` è <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 Eseguire l'override di questo metodo per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> e <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> ereditati dalle <xref:System.Collections.ObjectModel.Collection%601> classe generica e il <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> (metodo).  
  
 Chiamare l'implementazione della classe base di questo metodo per rimuovere l'elemento dalla raccolta sottostante e per aggiornare il dizionario di ricerca.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice che illustrano l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> metodo per fornire un comportamento personalizzato per la rimozione di oggetti dalla raccolta. Il primo esempio aggiunge un evento di notifica personalizzato e il secondo fornisce il supporto per una raccolta di oggetti con chiavi modificabile.  
  
 Esempio 1  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 Esempio 2  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">Indice in base zero dell'elemento da sostituire.</param>
        <param name="item">Nuovo elemento.</param>
        <summary>Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il dizionario di ricerca viene aggiornato di conseguenza. Vale a dire, la chiave dell'elemento che viene sostituito viene rimossa dal dizionario di ricerca e la chiave del nuovo elemento viene aggiunto.  
  
 Questo metodo è un'operazione o (1).  
  
## <a name="notes-for-implementers"></a>Note per gli implementatori  
 Eseguire l'override di questo metodo per fornire un comportamento personalizzato per l'impostazione di <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà ereditata dal <xref:System.Collections.ObjectModel.Collection%601> classe generica.  
  
> [!NOTE]
>  Questo metodo non influiscono sul comportamento del <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> proprietà, che è di sola lettura.  
  
 Chiamare l'implementazione della classe base di questo metodo per impostare l'elemento nella raccolta sottostante e per aggiornare il dizionario di ricerca.  
  
   
  
## Examples  
 In questa sezione sono riportati due esempi di codice che illustrano l'override di <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodo per fornire un comportamento personalizzato per l'impostazione di <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> proprietà. Il primo esempio aggiunge un evento di notifica personalizzato e il secondo fornisce il supporto per una raccolta di oggetti con chiavi modificabile.  
  
 Esempio 1  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> nei metodi per fornire un comportamento personalizzato per il <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, e <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> metodi e per impostare il valore predefinito <xref:System.Collections.ObjectModel.Collection%601.Item%2A> proprietà (l'indicizzatore in c#). Il comportamento personalizzato fornito in questo esempio è un evento di notifica denominato `Changed`, che viene generato alla fine della ognuno dei metodi sottoposti a override.  
  
 L'esempio di codice crea il `SimpleOrder` classe che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602> e rappresenta un modulo d'ordine semplice. Il form contiene `OrderItem` gli oggetti che rappresentano elementi ordinati. L'esempio di codice crea inoltre un `SimpleOrderChangedEventArgs` classe destinata a contenere le informazioni sull'evento e un'enumerazione per identificare il tipo di modifica.  
  
 L'esempio di codice viene illustrato il comportamento personalizzato mediante la chiamata in proprietà e metodi della classe derivata, il `Main` metodo del `Demo` classe.  
  
 Questo esempio di codice Usa oggetti con chiavi non modificabile. Per un esempio di codice che usa chiavi modificabili, vedere <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 Esempio 2  
  
 Esempio di codice seguente viene illustrato come sostituire il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> metodo per supportare chiavi modificabili e su come eseguire l'override il metodo protetto <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, e <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> metodi per mantenere l'integrità delle chiavi e la raccolta.  
  
 L'esempio di codice crea il `MutableKeys` insieme, che deriva da <xref:System.Collections.ObjectModel.KeyedCollection%602>e il `MutableKey` classe. Il `MutableKey` classe ha un impostabili `Key` proprietà. Quando una nuova chiave viene assegnata alla proprietà, il setter di proprietà chiama il `internal` (`Friend` in Visual Basic) `ChangeKey` metodo della raccolta per verificare se la nuova chiave genererebbe un conflitto con una chiave esistente. In questo caso, viene generata un'eccezione e il valore della proprietà non viene modificato.  
  
 Per mantenere la connessione tra un `MutableKey` oggetto e il `MutableKeys` raccolta e per impedire che un oggetto da inserire in due raccolte, la `MutableKey` classe dispone di un `internal` (`Friend` in Visual Basic) `Collection`campo. Questo campo viene gestito dai metodi protetti che forniscono un comportamento personalizzato per l'aggiunta e rimozione di elementi dalla raccolta, ad esempio il <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> (metodo). Il campo è impostato quando l'elemento viene aggiunto a una raccolta ed eliminato quando l'elemento viene rimosso.  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key *  -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>