<Type Name="LogExtentCollection" FullName="System.IO.Log.LogExtentCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a6312f62a7271a3ae638fe385dad862891597930" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51304373" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class LogExtentCollection : System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LogExtentCollection extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.IO.Log.LogExtent&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Log.LogExtentCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LogExtentCollection&#xA;Implements IEnumerable(Of LogExtent)" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogExtentCollection sealed : System::Collections::Generic::IEnumerable&lt;System::IO::Log::LogExtent ^&gt;" />
  <TypeSignature Language="F#" Value="type LogExtentCollection = class&#xA;    interface seq&lt;LogExtent&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Log</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.IO.Log.LogExtent&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta la raccolta di oggetti <see cref="T:System.IO.Log.LogExtent" /> associati a un oggetto <see cref="T:System.IO.Log.LogStore" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe contiene una raccolta di oggetti <xref:System.IO.Log.LogExtent> associati a <xref:System.IO.Log.LogStore>. Un'istanza di <xref:System.IO.Log.LogStore> memorizza i relativi dati in una raccolta di extent del disco, rappresentati da istanze <xref:System.IO.Log.LogExtent>. Una determinata istanza di <xref:System.IO.Log.LogExtent> è associata a un'istanza di <xref:System.IO.Log.LogStore> e gli oggetti <xref:System.IO.Log.LogExtent> inclusi nella stessa istanza di <xref:System.IO.Log.LogStore> sono di dimensione identica. Lo spazio viene aggiunto e rimosso da un'istanza <xref:System.IO.Log.LogStore> per incrementi di extent.  
  
 Sebbene gli oggetti <xref:System.IO.Log.LogExtent> siano rappresentati su disco come file, non devono essere spostati né eliminati come file normali. Per aggiungere ed eliminare direttamente le istanze di <xref:System.IO.Log.LogExtent>, al contrario, è opportuno utilizzare i metodi forniti da questa classe. Gli extent vengono solitamente rimossi quando non contengono più dati attivi. Se tuttavia il parametro `force` contenuto nel metodo <xref:System.IO.Log.LogExtentCollection.Remove%2A> è `true`, viene generata un'eccezione se non è possibile rimuoverli immediatamente.  
  
 Poiché non è possibile rimuovere l'ultimo extent contenuto in <xref:System.IO.Log.LogExtentCollection>, la proprietà <xref:System.IO.Log.LogExtentCollection.Count%2A> non può essere zero dopo l'aggiunta di un extent.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare le classi <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> per aggiungere ed emulare extent in una sequenza del log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Log.LogExtent" />
    <altmember cref="T:System.IO.Log.LogStore" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nuova classe <see cref="T:System.IO.Log.LogExtent" /> e la aggiunge alla raccolta.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Add : string -&gt; unit" Usage="logExtentCollection.Add path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Percorso dell'extent del log da aggiungere.</param>
        <summary>Aggiunge un'istanza di <see cref="T:System.IO.Log.LogExtent" /> alla raccolta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La dimensione dell'istanza di <xref:System.IO.Log.LogExtent> appena aggiunta è la stessa della dimensione delle istanze di <xref:System.IO.Log.LogExtent> esistenti nella raccolta.  
  
> [!NOTE]
>  Non utilizzare questo metodo per aggiungere la prima istanza di <xref:System.IO.Log.LogExtent> alla raccolta.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare le classi <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> per aggiungere ed emulare extent in una sequenza del log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il nome del file dell'archivio dei log specificato da <paramref name="path" />non è valido.</exception>
        <exception cref="T:System.InvalidOperationException">È necessario specificare una dimensione per il primo extent.</exception>
        <exception cref="T:System.IO.IOException">Impossibile eseguire la richiesta a causa di un'eccezione I/O imprevista.  
  
oppure 
Non è possibile creare il file specificato da <paramref name="path" /> perché il file o la directory esiste già.</exception>
        <exception cref="T:System.ObjectDisposedException">Il metodo è stato chiamato dopo l'eliminazione sequenza.</exception>
        <exception cref="T:System.OutOfMemoryException">Memoria insufficiente per continuare l'esecuzione del programma.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sequenza di record piena.  
  
oppure 
Il disco o il supporto di archiviazione è completo.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accesso per l'archivio dei registri specificato viene negato dal sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string path, long size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string path, int64 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Add(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (path As String, size As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::String ^ path, long size);" />
      <MemberSignature Language="F#" Value="member this.Add : string * int64 -&gt; unit" Usage="logExtentCollection.Add (path, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="path">Percorso dell'extent del log.</param>
        <param name="size">Dimensione dell'extent del log.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.IO.Log.LogExtent" /> con la dimensione specificata e lo aggiunge alla raccolta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se la raccolta non è vuoto, la dimensione specificata deve essere grande almeno come la dimensione degli altri extent contenuti nella raccolta. In questo caso, il parametro `size` viene ignorato e l'extent viene creato con la stessa dimensione degli altri extent nella raccolta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> o <paramref name="size" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="archiveTail" /> non rientra in un intervallo valido.</exception>
        <exception cref="T:System.ArgumentException">Il nome del file dell'archivio dei log specificato da <paramref name="path" />non è valido.  
  
 <paramref name="size" /> è inferiore alla dimensione di altri extent contenuti nell'archivio.</exception>
        <exception cref="T:System.InvalidOperationException">È necessario specificare una dimensione per il primo extent.  
  
oppure 
È impossibile utilizzare un nome di extent duplicato.</exception>
        <exception cref="T:System.IO.IOException">Impossibile eseguire la richiesta a causa di un'eccezione I/O imprevista.  
  
oppure 
Non è possibile creare il file specificato da <paramref name="path" /> perché il file o la directory esiste già.</exception>
        <exception cref="T:System.ObjectDisposedException">Il metodo è stato chiamato dopo l'eliminazione sequenza.</exception>
        <exception cref="T:System.OutOfMemoryException">Memoria insufficiente per continuare l'esecuzione del programma.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sequenza di record piena.  
  
oppure 
Il disco o il supporto di archiviazione è completo.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accesso per l'archivio dei registri specificato viene negato dal sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.IO.Log.LogExtentCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di extent del log contenuti nella raccolta.</summary>
        <value>Numero di extent del log contenuti nella raccolta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In questo esempio viene illustrato come utilizzare le classi <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> per aggiungere ed emulare extent in una sequenza del log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'archivio dei log è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeCount">
      <MemberSignature Language="C#" Value="public int FreeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FreeCount" />
      <MemberSignature Language="DocId" Value="P:System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FreeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FreeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.FreeCount : int" Usage="System.IO.Log.LogExtentCollection.FreeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di istanze <see cref="T:System.IO.Log.LogExtent" /> libere contenute nella raccolta, ovvero il numero delle istanze <see cref="T:System.IO.Log.LogExtent" /> che non contengono dati.</summary>
        <value>Numero di istanze <see cref="T:System.IO.Log.LogExtent" /> libere contenute nella raccolta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 In questo esempio viene illustrato come utilizzare le classi <xref:System.IO.Log.LogExtent> e <xref:System.IO.Log.LogExtentCollection> per aggiungere ed emulare extent in una sequenza del log.  
  
 [!code-csharp[S_UELogRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_uelogrecordsequence/cs/mylogrecordsequence.cs#0)]
 [!code-vb[S_UELogRecordSequence#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_uelogrecordsequence/vb/mylogrecordsequence.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">L'archivio dei log è stato eliminato.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.IO.Log.LogExtent&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of LogExtent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;System::IO::Log::LogExtent ^&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;" Usage="logExtentCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.IO.Log.LogExtent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore per le istanze di <see cref="T:System.IO.Log.LogExtent" /> contenute nella raccolta. Questo metodo non può essere ereditato.</summary>
        <returns>Enumeratore per le istanze di <see cref="T:System.IO.Log.LogExtent" /> contenute nella raccolta.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">Impossibile eseguire la richiesta a causa di un'eccezione I/O imprevista.</exception>
        <exception cref="T:System.InvalidOperationException">L'operazione non è valida per uno dei motivi seguenti: 
-   L'enumerazione è stata terminata.  
  
-   La raccolta è stata modificata.  
  
-   L'enumerazione non è stata avviata. È necessario chiamare <see cref="M:System.Collections.IEnumerator.MoveNext" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Il metodo è stato chiamato dopo l'eliminazione sequenza.</exception>
        <exception cref="T:System.OutOfMemoryException">Memoria insufficiente per continuare l'esecuzione del programma.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sequenza di record piena.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accesso per l'archivio dei registri specificato viene negato dal sistema operativo.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rimuove un'istanza di <see cref="T:System.IO.Log.LogExtent" /> dalla raccolta.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.IO.Log.LogExtent extent, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.IO.Log.LogExtent extent, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.IO.Log.LogExtent,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (extent As LogExtent, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::IO::Log::LogExtent ^ extent, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.IO.Log.LogExtent * bool -&gt; unit" Usage="logExtentCollection.Remove (extent, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="System.IO.Log.LogExtent" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extent">Istanza di <see cref="T:System.IO.Log.LogExtent" /> da rimuovere.</param>
        <param name="force">
          <see langword="true" /> se l'extent deve essere rimosso immediatamente, in caso contrario <see langword="false" />.</param>
        <summary>Consente di rimuovere dalla raccolta l'istanza di <see cref="T:System.IO.Log.LogExtent" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di <xref:System.IO.Log.LogExtent> può essere rimossa dalla raccolta solo se non fa parte della regione attiva di <xref:System.IO.Log.LogStore>. Se il parametro `force` è `true` e l'extent non può essere rimosso immediatamente, viene generata un'eccezione. Se il parametro `force` è `false` e l'extent non può essere rimosso immediatamente, la rimozione viene rinviata al momento in cui l'extent non farà più parte dell'area attiva.  
  
 Poiché non è possibile rimuovere l'ultimo extent contenuto in <xref:System.IO.Log.LogExtentCollection>, la proprietà <xref:System.IO.Log.LogExtentCollection.Count%2A> non può essere zero dopo l'aggiunta di un extent.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extent" /> o <paramref name="force" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Impossibile trovare <paramref name="extent" /> nella raccolta.</exception>
        <exception cref="T:System.InvalidOperationException">Il parametro <paramref name="extent" /> non può essere rimosso. Fa ancora parte della regione attiva oppure l'accesso è negato.</exception>
        <exception cref="T:System.IO.IOException">Impossibile eseguire la richiesta a causa di un'eccezione I/O imprevista.  
  
oppure 
 Impossibile eliminare <paramref name="extent" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Il metodo è stato chiamato dopo l'eliminazione sequenza.</exception>
        <exception cref="T:System.OutOfMemoryException">Memoria insufficiente per continuare l'esecuzione del programma.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sequenza di record piena.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accesso per l'archivio dei registri specificato viene negato dal sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string path, bool force);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string path, bool force) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.Remove(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (path As String, force As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ path, bool force);" />
      <MemberSignature Language="F#" Value="member this.Remove : string * bool -&gt; unit" Usage="logExtentCollection.Remove (path, force)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="force" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Percorso dell'istanza di <see cref="T:System.IO.Log.LogExtent" /> da rimuovere.</param>
        <param name="force">
          <see langword="true" /> se l'extent deve essere rimosso immediatamente, in caso contrario <see langword="false" />.</param>
        <summary>Rimuove dalla raccolta l'istanza di <see cref="T:System.IO.Log.LogExtent" /> con il percorso specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'istanza di <xref:System.IO.Log.LogExtent> può essere rimossa dalla raccolta solo se non fa parte della regione attiva di <xref:System.IO.Log.LogStore>. Se il parametro `force` è `true` e l'extent non può essere rimosso immediatamente, viene generata un'eccezione. Se il parametro `force` è `false` e l'extent non può essere rimosso immediatamente, la rimozione viene rinviata al momento in cui l'extent non farà più parte dell'area attiva.  
  
 Poiché non è possibile rimuovere l'ultimo extent contenuto in <xref:System.IO.Log.LogExtentCollection>, la proprietà <xref:System.IO.Log.LogExtentCollection.Count%2A> non può essere zero dopo l'aggiunta di un extent.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> o <paramref name="force" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Impossibile trovare nella raccolta l'extent specificato da <paramref name="path" />.</exception>
        <exception cref="T:System.InvalidOperationException">Impossibile rimuovere l'extent specificato da <paramref name="path" />. Fa ancora parte della regione attiva oppure l'accesso è negato.</exception>
        <exception cref="T:System.IO.IOException">Impossibile eseguire la richiesta a causa di un'eccezione I/O imprevista.  
  
oppure 
Impossibile eliminare l'extent specificato da <paramref name="path" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Il metodo è stato chiamato dopo l'eliminazione sequenza.</exception>
        <exception cref="T:System.OutOfMemoryException">Memoria insufficiente per continuare l'esecuzione del programma.</exception>
        <exception cref="T:System.IO.Log.SequenceFullException">Sequenza di record piena.</exception>
        <exception cref="T:System.UnauthorizedAccessException">L'accesso per l'archivio dei registri specificato viene negato dal sistema operativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Log.LogExtentCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Log</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un enumeratore per le istanze di <see cref="T:System.IO.Log.LogExtent" /> contenute nella raccolta. Questo metodo non può essere ereditato.</summary>
        <returns>Enumeratore per le istanze di <see cref="T:System.IO.Log.LogExtent" /> contenute nella raccolta.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>