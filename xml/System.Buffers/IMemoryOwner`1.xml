<Type Name="IMemoryOwner&lt;T&gt;" FullName="System.Buffers.IMemoryOwner&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7756681e648caf2d7f9be035d571a989959b7bee" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52195966" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IMemoryOwner&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMemoryOwner`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Buffers.IMemoryOwner`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMemoryOwner(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IMemoryOwner : IDisposable" />
  <TypeSignature Language="F#" Value="type IMemoryOwner&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="a02d2-101">Il tipo di elementi da archiviare nella memoria.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a02d2-101">The type of elements to store in memory.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a02d2-102">Identifica il proprietario di un blocco di memoria che è responsabile della corretta eliminazione delle memoria sottostante.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a02d2-102">Identifies the owner of a block of memory who is responsible for disposing of the underlying memory appropriately.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a02d2-103">Il `IMemoryOwner<T>` interfaccia viene utilizzata per definire il proprietario del responsabile per la gestione della durata di un <xref:System.Memory%601> buffer.</span><span class="sxs-lookup"><span data-stu-id="a02d2-103">The `IMemoryOwner<T>` interface is used to define the owner responsible for the lifetime management of a <xref:System.Memory%601> buffer.</span></span> <span data-ttu-id="a02d2-104">Un'istanza di `IMemoryOwner<T>` interfaccia viene restituita dal metodo < xef:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType >.</span><span class="sxs-lookup"><span data-stu-id="a02d2-104">An instance of the `IMemoryOwner<T>` interface is returned by the <xef:System.Buffers.MemoryPool%601.Rent%2A?displayProperty=nameWithType> method.</span></span> 

<span data-ttu-id="a02d2-105">Mentre un buffer può avere più consumer, il proprietario di un singolo può avere solo un determinato momento.</span><span class="sxs-lookup"><span data-stu-id="a02d2-105">While a buffer can have multiple consumers, it can only have a single owner at any given time.</span></span> <span data-ttu-id="a02d2-106">Il proprietario può:</span><span class="sxs-lookup"><span data-stu-id="a02d2-106">The owner can:</span></span>

- <span data-ttu-id="a02d2-107">Creare il buffer direttamente o tramite una chiamata di un metodo factory.</span><span class="sxs-lookup"><span data-stu-id="a02d2-107">Create the buffer either directly or by calling a factory method.</span></span>

- <span data-ttu-id="a02d2-108">Trasferire la proprietà a un altro consumer.</span><span class="sxs-lookup"><span data-stu-id="a02d2-108">Transfer ownership to another consumer.</span></span> <span data-ttu-id="a02d2-109">In questo caso, il proprietario precedente non deve più utilizzare il buffer.</span><span class="sxs-lookup"><span data-stu-id="a02d2-109">In this case, the previous owner should no longer use the buffer.</span></span>

- <span data-ttu-id="a02d2-110">Eliminare definitivamente il buffer quando non è più in uso.</span><span class="sxs-lookup"><span data-stu-id="a02d2-110">Destroy the buffer when it is no longer in use.</span></span>

<span data-ttu-id="a02d2-111">Poiché il `IMemoryOwner<T>` oggetto implementa il <xref:System.IDisposable> interfaccia, è necessario chiamare relativo <xref:System.IDisposable.Dispose%2A> metodo solo dopo che il buffer di memoria non è più necessario e si è eliminati definitivamente lo.</span><span class="sxs-lookup"><span data-stu-id="a02d2-111">Because the `IMemoryOwner<T>` object implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> method only after the memory buffer is no longer needed and you have destroyed it.</span></span> <span data-ttu-id="a02d2-112">È consigliabile *non* smaltire il `IMemoryOnwer<T>` oggetto mentre è disponibile un riferimento per la memoria.</span><span class="sxs-lookup"><span data-stu-id="a02d2-112">You should *not* dispose of the `IMemoryOnwer<T>` object while a reference to its memory is available.</span></span> <span data-ttu-id="a02d2-113">Ciò significa che il tipo in cui `IMemoryOwner<T>` viene dichiarato non devono avere un <xref:System.Object.Finalize%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="a02d2-113">This means that the type in which `IMemoryOwner<T>` is declared should not have a <xref:System.Object.Finalize%2A> method.</span></span>

   ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Memory">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Memory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Memory`1&lt;!T&gt; Memory" />
      <MemberSignature Language="DocId" Value="P:System.Buffers.IMemoryOwner`1.Memory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Memory As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Memory&lt;T&gt; Memory { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Memory : Memory&lt;'T&gt;" Usage="System.Buffers.IMemoryOwner&lt;'T&gt;.Memory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a02d2-114">Ottiene la memoria che appartiene al proprietario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a02d2-114">Gets the memory belonging to this owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a02d2-115">Quantità di memoria che appartengono al proprietario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a02d2-115">The memory belonging to this owner.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>