<Type Name="InstanceStore" FullName="System.Runtime.DurableInstancing.InstanceStore">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8972e8c961043629bb8c0c72a45e02d752733a77" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39993463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class InstanceStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit InstanceStore extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstanceStore" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class InstanceStore" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstanceStore abstract" />
  <TypeSignature Language="F#" Value="type InstanceStore = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9329b-101">Rappresenta un archivio di istanze.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9329b-101">Represents an instance store.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-102">Un provider di persistenza consente l'accesso a un archivio di istanze tramite un'implementazione concreta della classe <xref:System.Runtime.DurableInstancing.InstanceStore>.</span><span class="sxs-lookup"><span data-stu-id="9329b-102">A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class.</span></span>  
  
 <span data-ttu-id="9329b-103">È possibile che i provider di persistenza effettuino la chiamata a InstanceHandle.Free sugli handle passati a TryCommand anche dopo il completamento dell'esecuzione del comando.</span><span class="sxs-lookup"><span data-stu-id="9329b-103">Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing.</span></span> <span data-ttu-id="9329b-104">I provider di persistenza non devono tuttavia contenere riferimenti complessi all'oggetto InstanceHandle o InstanceOwner, poiché ciò potrebbe impedire la raccolta di InstanceStore nel Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="9329b-104">But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="9329b-105">Impossibile modificare le definizioni del flusso di lavoro per i flussi di lavoro persistente.</span><span class="sxs-lookup"><span data-stu-id="9329b-105">Workflow definitions for persisted workflows cannot be changed.</span></span> <span data-ttu-id="9329b-106">Se una definizione del flusso di lavoro viene modificata dopo che viene resa persistente, il runtime del flusso di lavoro viene interrotta quando il flusso di lavoro viene ricaricato.</span><span class="sxs-lookup"><span data-stu-id="9329b-106">If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InstanceStore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InstanceStore();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9329b-107">Inizializza un'istanza della classe <see cref="T:System.Runtime.DurableInstancing.InstanceStore" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-107">Initializes an instance of the <see cref="T:System.Runtime.DurableInstancing.InstanceStore" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecute">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecute(class System.Runtime.DurableInstancing.InstanceHandle handle, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecute (handle As InstanceHandle, command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecute(System::Runtime::DurableInstancing::InstanceHandle ^ handle, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginExecute : System.Runtime.DurableInstancing.InstanceHandle * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginExecute (handle, command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="9329b-108">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-108">An instance handle.</span>
          </span>
        </param>
        <param name="command">
          <span data-ttu-id="9329b-109">Comando da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-109">The command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-110">Valore di timeout per l'esecuzione del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-110">The timeout value for the command execution.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="9329b-111">Delegato di callback asincrono che riceve notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-111">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9329b-112">Informazioni sullo stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-112">The state information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-113">Esegue in modo asincrono i comandi di persistenza quali <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> e <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-113">Asynchronously executes persistence commands such as <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-114">Stato dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-114">The state of the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-115">Un host chiama il metodo <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> per eseguire in modo asincrono un comando di persistenza su un handle di istanza.</span><span class="sxs-lookup"><span data-stu-id="9329b-115">A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously.</span></span> <span data-ttu-id="9329b-116">L'host ottiene l'handle di istanza richiamando il metodo <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="9329b-116">The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method.</span></span> <span data-ttu-id="9329b-117">L'handle di istanza può essere associato a entità che rappresentano il contesto e l'oggetto del comando, ad esempio un'istanza, un proprietario di istanza o un blocco di istanza.</span><span class="sxs-lookup"><span data-stu-id="9329b-117">The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</span></span>  <span data-ttu-id="9329b-118">Su un handle di istanza è possibile eseguire solo un comando alla volta.</span><span class="sxs-lookup"><span data-stu-id="9329b-118">Only one command may be issued against an instance handle at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual IAsyncResult BeginTryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.IAsyncResult BeginTryCommand(class System.Runtime.DurableInstancing.InstancePersistenceContext context, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function BeginTryCommand (context As InstancePersistenceContext, command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual IAsyncResult ^ BeginTryCommand(System::Runtime::DurableInstancing::InstancePersistenceContext ^ context, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginTryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginTryCommand (context, command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.DurableInstancing.InstancePersistenceContext" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="9329b-119">Contesto dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-119">The instance context.</span>
          </span>
        </param>
        <param name="command">
          <span data-ttu-id="9329b-120">Comando di persistenza da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-120">The persistence command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-121">Valore di timeout per l'esecuzione del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-121">The timeout value for the command execution.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="9329b-122">Delegato di callback asincrono che riceve notifica del completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-122">The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9329b-123">Informazioni sullo stato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-123">The state information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-124">Un provider di persistenza implementa questo metodo, che determina se un particolare comando di persistenza può essere eseguito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-124">A persistence provider implements this method, which determines whether a particular persistence command can be executed.</span>
          </span>
          <span data-ttu-id="9329b-125">In caso affermativo, esegue il comando in modo asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-125">If the command can be executed, executes the command asynchronously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-126">Stato dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-126">The state of the asynchronous operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-127">Se il comando può essere eseguito, il provider di persistenza chiamerà i metodi pertinenti su InstancePersistenceContext per fornire i risultati del comando.</span><span class="sxs-lookup"><span data-stu-id="9329b-127">If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="9329b-128">Anche se questo metodo viene dichiarato come `virtual` anziché `abstract`, non vi è alcuna implementazione.</span><span class="sxs-lookup"><span data-stu-id="9329b-128">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="9329b-129">Questo metodo deve essere sostituito per fornire funzionalità.</span><span class="sxs-lookup"><span data-stu-id="9329b-129">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForEvents">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginWaitForEvents(class System.Runtime.DurableInstancing.InstanceHandle handle, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForEvents (handle As InstanceHandle, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForEvents(System::Runtime::DurableInstancing::InstanceHandle ^ handle, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginWaitForEvents : System.Runtime.DurableInstancing.InstanceHandle * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instanceStore.BeginWaitForEvents (handle, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="9329b-130">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-130">An instance handle.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-131">Periodo trascorso il quale si verifica il timeout dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-131">The period after which the operation times out.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="9329b-132">Metodo da chiamare dopo il completamento dell'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-132">The method to be called after the asynchronous operation is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="9329b-133">Oggetto contenente le informazioni sullo stato associate all'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-133">An object containing the state information associated with the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-134">Inizia un'operazione asincrona per l'ascolto degli eventuali eventi generati dall'archivio di istanze per un handle di istanza specifico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-134">Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-135">Restituisce un oggetto <see cref="T:System.IAsyncResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-135">Returns an <see cref="T:System.IAsyncResult" /> object..</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceHandle">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9329b-136">Crea un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-136">Creates an instance handle.</span>
          </span>
          <span data-ttu-id="9329b-137">Se DefaultInstanceOwner è stato impostato, il valore verrà associato automaticamente come proprietario di istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-137">If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle () As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle();" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : unit -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9329b-138">Crea un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-138">Creates an instance handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-139">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-139">The instance handle.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (instanceId As Guid) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : Guid -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <span data-ttu-id="9329b-140">Identificatore dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-140">An instance identifier.</span>
          </span>
          <span data-ttu-id="9329b-141">Non deve corrispondere a Guid.Empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-141">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-142">Crea un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-142">Creates an instance handle.</span>
          </span>
          <span data-ttu-id="9329b-143">Se DefaultInstanceOwner è stato impostato, il valore verrà associato automaticamente come proprietario di istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-143">If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.</span>
          </span>
          <span data-ttu-id="9329b-144">L'identificatore dell'istanza passato come parametro viene associato automaticamente come istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-144">The instance identifier passed as a parameter is automatically bound as the new handle’s instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-145">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-145">The instance handle.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (owner As InstanceOwner) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : System.Runtime.DurableInstancing.InstanceOwner -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="9329b-146">Proprietario di un'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-146">The owner of an instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-147">Crea un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-147">Creates an instance handle.</span>
          </span>
          <span data-ttu-id="9329b-148">Se il proprietario dell'istanza passato come parametro non è null, il valore verrà associato automaticamente come proprietario di istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-148">If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.</span>
          </span>
          <span data-ttu-id="9329b-149">In caso contrario, non verrà associato alcun proprietario di istanza, anche se DefaultInstanceOwner è stato impostato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-149">(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-150">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-150">The instance handle.</span>
          </span>
          <span data-ttu-id="9329b-151">Un valore null indica che il nuovo handle non deve essere associato automaticamente a un proprietario di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-151">A null value indicates that the new handle should not be automatically bound to an instance owner.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle(class System.Runtime.DurableInstancing.InstanceOwner owner, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceHandle (owner As InstanceOwner, instanceId As Guid) As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceHandle ^ CreateInstanceHandle(System::Runtime::DurableInstancing::InstanceOwner ^ owner, Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceHandle : System.Runtime.DurableInstancing.InstanceOwner * Guid -&gt; System.Runtime.DurableInstancing.InstanceHandle" Usage="instanceStore.CreateInstanceHandle (owner, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="9329b-152">Oggetto InstanceOwner che rappresenta il proprietario di un'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-152">An InstanceOwner object  that represents the owner of an instance.</span>
          </span>
          <span data-ttu-id="9329b-153">Passare null come valore per questo parametro per indicare che il nuovo handle non deve essere associato automaticamente a un proprietario di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-153">Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.</span>
          </span>
        </param>
        <param name="instanceId">
          <span data-ttu-id="9329b-154">Identificatore dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-154">An instance identifier.</span>
          </span>
          <span data-ttu-id="9329b-155">Non deve corrispondere a Guid.Empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-155">Must not be Guid.Empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-156">Crea un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-156">Creates an instance handle.</span>
          </span>
          <span data-ttu-id="9329b-157">Se il proprietario dell'istanza passato come parametro non è null, il valore verrà associato automaticamente come proprietario di istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-157">If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.</span>
          </span>
          <span data-ttu-id="9329b-158">In caso contrario, non verrà associato alcun proprietario di istanza, anche se DefaultInstanceOwner è stato impostato. L'identificatore dell'istanza passato come parametro viene associato automaticamente come istanza del nuovo handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-158">(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-159">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-159">The instance handle.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultInstanceOwner As InstanceOwner" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceOwner ^ DefaultInstanceOwner { System::Runtime::DurableInstancing::InstanceOwner ^ get(); void set(System::Runtime::DurableInstancing::InstanceOwner ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultInstanceOwner : System.Runtime.DurableInstancing.InstanceOwner with get, set" Usage="System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceOwner</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9329b-160">Ottiene o imposta il proprietario dell'istanza predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-160">Gets or sets the default instance owner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9329b-161">Proprietario dell'istanza predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-161">The default instance owner.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-162">Alcuni host deducono il proprietario dell'istanza da utilizzare mediante la lettura di questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="9329b-162">Some hosts infer the instance owner to use by reading this property.</span></span> <span data-ttu-id="9329b-163">WorkflowApplication può utilizzare questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="9329b-163">WorkflowApplication can use this property.</span></span> <span data-ttu-id="9329b-164">WorkflowServiceHost non utilizza questa proprietà.</span><span class="sxs-lookup"><span data-stu-id="9329b-164">WorkflowServiceHost does not use this property.</span></span>  
  
 <span data-ttu-id="9329b-165">Quando non è più necessaria, la proprietà DefaultInstanceOwner deve essere impostata su null.</span><span class="sxs-lookup"><span data-stu-id="9329b-165">The DefaultInstanceOwner propery must be set to null when it is no longer necessary.</span></span> <span data-ttu-id="9329b-166">Se DefaultInstanceOwner non è null, gli oggetti InstanceStore potrebbero non venire raccolti nel Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="9329b-166">InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="9329b-167">Anche se questo metodo viene dichiarato come `virtual` anziché `abstract`, non vi è alcuna implementazione.</span><span class="sxs-lookup"><span data-stu-id="9329b-167">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="9329b-168">Questo metodo deve essere sostituito per fornire funzionalità.</span><span class="sxs-lookup"><span data-stu-id="9329b-168">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecute">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView EndExecute (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceView EndExecute(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndExecute (result As IAsyncResult) As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceView ^ EndExecute(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndExecute : IAsyncResult -&gt; System.Runtime.DurableInstancing.InstanceView" Usage="instanceStore.EndExecute result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="9329b-169">Risultato dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-169">The result of the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-170">Termina l'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-170">Ends the asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-171">Oggetto InstanceView che rappresenta lo stato noto dell'istanza dopo il completamento del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-171">An InstanceView object  representing the known state of the instance after the successful completion of the command.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-172">Se è stato chiamato BeginExecute in una transazione, è possibile che questo stato includa dati di cui non è stato eseguito il commit.</span><span class="sxs-lookup"><span data-stu-id="9329b-172">If BeginExecute was called under a transaction, this state may include uncommitted data.</span></span> <span data-ttu-id="9329b-173">Al termine del commit della transazione, sarà possibile considerare i dati nell'oggetto InstanceView come dati di cui è stato eseguito il commit.</span><span class="sxs-lookup"><span data-stu-id="9329b-173">Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual bool EndTryCommand (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool EndTryCommand(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function EndTryCommand (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool EndTryCommand(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndTryCommand : IAsyncResult -&gt; bool&#xA;override this.EndTryCommand : IAsyncResult -&gt; bool" Usage="instanceStore.EndTryCommand result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="9329b-174">Risultato dell'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-174">The result of the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-175">Termina un'operazione asincrona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-175">Ends an asynchronous operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-176">Un'implementazione del provider di persistenza deve restituire False quando non supporta il comando passato al metodo BeginTryCommand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-176">A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method.</span>
          </span>
          <span data-ttu-id="9329b-177">In caso contrario deve restituire True o generare un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-177">Otherwise it should return true or throw an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  <span data-ttu-id="9329b-178">Anche se questo metodo viene dichiarato come `virtual` anziché `abstract`, non vi è alcuna implementazione.</span><span class="sxs-lookup"><span data-stu-id="9329b-178">Even though this method is declared as `virtual` rather than `abstract`, there is no implementation.</span></span> <span data-ttu-id="9329b-179">Questo metodo deve essere sostituito per fornire funzionalità.</span><span class="sxs-lookup"><span data-stu-id="9329b-179">This method must be overridden in order to provide functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; EndWaitForEvents (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; EndWaitForEvents(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForEvents (result As IAsyncResult) As List(Of InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ EndWaitForEvents(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndWaitForEvents : IAsyncResult -&gt; System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;" Usage="instanceStore.EndWaitForEvents result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="9329b-180">Oggetto IAsyncResult consegnato al client dal metodo Begin.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-180">An IAsyncResult object that was handed over to the client by the Begin method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-181">Termina l'operazione asincrona iniziata dal metodo <see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-181">Ends the asynchronous operation initiated by the <see cref="M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-182">Restituisce un elenco di oggetti <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-182">Returns a list of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects..</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView Execute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.DurableInstancing.InstanceView Execute(class System.Runtime.DurableInstancing.InstanceHandle handle, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute (handle As InstanceHandle, command As InstancePersistenceCommand, timeout As TimeSpan) As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::DurableInstancing::InstanceView ^ Execute(System::Runtime::DurableInstancing::InstanceHandle ^ handle, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Runtime.DurableInstancing.InstanceHandle * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; System.Runtime.DurableInstancing.InstanceView" Usage="instanceStore.Execute (handle, command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="9329b-183">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-183">An instance handle.</span>
          </span>
        </param>
        <param name="command">
          <span data-ttu-id="9329b-184">Comando da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-184">The command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-185">Valore di timeout per l'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-185">The timeout value for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-186">Esegue in modo sincrono un comando di persistenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-186">Executes a persistence command synchronously.</span>
          </span>
          <span data-ttu-id="9329b-187">Alcuni esempi di comandi di persistenza sono rappresentati da <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> e <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-187">Examples of persistence commands are: <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> and <see cref="T:System.Activities.DurableInstancing.SaveWorkflowCommand" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-188">Oggetto InstanceView che rappresenta lo stato noto dell'istanza dopo il completamento del comando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-188">An InstanceView object representing the known state of the instance after the successful completion of the command.</span>
          </span>
          <span data-ttu-id="9329b-189">Se è stato chiamato Execute in una transazione, è possibile che questo stato includa dati di cui non è stato eseguito il commit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-189">If Execute was called under a transaction, this state may include uncommitted data.</span>
          </span>
          <span data-ttu-id="9329b-190">Al termine del commit della transazione, sarà possibile considerare i dati nell'oggetto InstanceView come dati di cui è stato eseguito il commit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-190">Once the transaction is committed successfully, the data in the InstanceView object can be considered committed</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-191">Un host chiama il metodo <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> per eseguire un comando di persistenza su un handle di istanza, che l'host ottiene richiamando il metodo <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="9329b-191">A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method.</span></span> <span data-ttu-id="9329b-192">L'handle di istanza può essere associato a entità che rappresentano il contesto e l'oggetto del comando, ad esempio un'istanza, un proprietario di istanza o un blocco di istanza.</span><span class="sxs-lookup"><span data-stu-id="9329b-192">The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.</span></span>  <span data-ttu-id="9329b-193">Su un handle di istanza è possibile eseguire solo un comando alla volta.</span><span class="sxs-lookup"><span data-stu-id="9329b-193">Only one command may be issued against an instance handle at a time.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="9329b-194">Se questo metodo viene eseguito con un <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, verrà creato un <xref:System.Runtime.DurableInstancing.InstanceOwner> e associarlo all'istanza.</span><span class="sxs-lookup"><span data-stu-id="9329b-194">If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance.</span></span> <span data-ttu-id="9329b-195">Ciò significa che nessun altro processo sarà in grado di accedere a tale flusso di lavoro. Se il processo termina, il flusso di lavoro non può essere recuperato o eseguito.</span><span class="sxs-lookup"><span data-stu-id="9329b-195">This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed.</span></span> <span data-ttu-id="9329b-196">Se un flusso di lavoro viene eseguita anche in questo caso un <xref:System.Runtime.DurableInstancing.InstanceLockedException> verrà generata.</span><span class="sxs-lookup"><span data-stu-id="9329b-196">If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.</span></span>  
>   
>  <span data-ttu-id="9329b-197">Se <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> non è usato, l'archivio di istanze verrà creata una variabile temporanea <xref:System.Runtime.DurableInstancing.InstanceOwner> che verranno eliminati al termine del processo.</span><span class="sxs-lookup"><span data-stu-id="9329b-197">If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process.</span></span> <span data-ttu-id="9329b-198">Tuttavia, se il processo termina prima punto finale della persistenza del flusso di lavoro, questa eccezione verrà generata, a meno che il periodo di tempo specificato nella **HostLockRenewalPeriod** parametro è scaduto.</span><span class="sxs-lookup"><span data-stu-id="9329b-198">However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="protected System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents (System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents(class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetEvents (owner As InstanceOwner) As InstancePersistenceEvent()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ GetEvents(System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.GetEvents : System.Runtime.DurableInstancing.InstanceOwner -&gt; System.Runtime.DurableInstancing.InstancePersistenceEvent[]" Usage="instanceStore.GetEvents owner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstancePersistenceEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="owner">
          <span data-ttu-id="9329b-199">Oggetto <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> che rappresenta il proprietario di un'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-199">An <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> object representing the owner of an instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-200">Ottiene tutti gli eventi segnalati associati a un oggetto <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-200">Gets all the signaled events bound to an <see cref="T:System.Runtime.DurableInstancing.InstanceOwner" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-201">Restituisce una matrice di oggetti <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-201">Returns an array of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects..</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstanceOwners">
      <MemberSignature Language="C#" Value="protected System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetInstanceOwners () As InstanceOwner()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; cli::array &lt;System::Runtime::DurableInstancing::InstanceOwner ^&gt; ^ GetInstanceOwners();" />
      <MemberSignature Language="F#" Value="member this.GetInstanceOwners : unit -&gt; System.Runtime.DurableInstancing.InstanceOwner[]" Usage="instanceStore.GetInstanceOwners " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceOwner[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9329b-202">Ottiene ogni oggetto InstanceOwner associato a un handle di istanza valido o non raccolto nel Garbage Collector.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-202">Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-203">Proprietario dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-203">The owner of the instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-204">Restituisce una matrice di oggetti InstanceOwner.</span><span class="sxs-lookup"><span data-stu-id="9329b-204">Returns an array of InstanceOwner objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFreeInstanceHandle">
      <MemberSignature Language="C#" Value="protected virtual void OnFreeInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFreeInstanceHandle(class System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFreeInstanceHandle(System::Runtime::DurableInstancing::InstanceHandle ^ instanceHandle, System::Object ^ userContext);" />
      <MemberSignature Language="F#" Value="abstract member OnFreeInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle * obj -&gt; unit&#xA;override this.OnFreeInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle * obj -&gt; unit" Usage="instanceStore.OnFreeInstanceHandle (instanceHandle, userContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceHandle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="userContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceHandle">
          <span data-ttu-id="9329b-205">Handle di istanza liberato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-205">The instance handle that was freed.</span>
          </span>
        </param>
        <param name="userContext">
          <span data-ttu-id="9329b-206">Informazioni sul contesto utente del provider di persistenza restituite da OnNewInstanceHandle oppure null se l'override di OnNewInstanceHandle non è stato eseguito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-206">The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-207">Richiamato quando viene liberato un handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-207">Invoked when an instance handle is freed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNewInstanceHandle">
      <MemberSignature Language="C#" Value="protected virtual object OnNewInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object OnNewInstanceHandle(class System.Runtime.DurableInstancing.InstanceHandle instanceHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ OnNewInstanceHandle(System::Runtime::DurableInstancing::InstanceHandle ^ instanceHandle);" />
      <MemberSignature Language="F#" Value="abstract member OnNewInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle -&gt; obj&#xA;override this.OnNewInstanceHandle : System.Runtime.DurableInstancing.InstanceHandle -&gt; obj" Usage="instanceStore.OnNewInstanceHandle instanceHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceHandle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
      </Parameters>
      <Docs>
        <param name="instanceHandle">
          <span data-ttu-id="9329b-208">Handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-208">An instance handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-209">Richiamato quando viene creato un nuovo handle di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-209">Invoked when a new instance handle is created.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-210">Oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-210">An object.</span>
          </span>
          <span data-ttu-id="9329b-211">Questo oggetto del contesto utente sarà disponibile per il provider di persistenza al momento dell'esecuzione dei comandi tramite l'handle e della liberazione dell'handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-211">This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetEvent">
      <MemberSignature Language="C#" Value="protected void ResetEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetEvent (persistenceEvent As InstancePersistenceEvent, owner As InstanceOwner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent, System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.ResetEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent * System.Runtime.DurableInstancing.InstanceOwner -&gt; unit" Usage="instanceStore.ResetEvent (persistenceEvent, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent">
          <span data-ttu-id="9329b-212">Evento di persistenza segnalato in precedenza da reimpostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-212">The persistence event that was signaled earlier and to be reset.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="9329b-213">Proprietario dell'istanza associato all'evento di persistenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-213">The instance owner associated with the persistence event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-214">Reimposta l'evento segnalato e rimuove l'evento dall'elenco degli eventi segnalati gestito dal proprietario dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-214">Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEvent">
      <MemberSignature Language="C#" Value="protected void SignalEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SignalEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, class System.Runtime.DurableInstancing.InstanceOwner owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SignalEvent (persistenceEvent As InstancePersistenceEvent, owner As InstanceOwner)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SignalEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent, System::Runtime::DurableInstancing::InstanceOwner ^ owner);" />
      <MemberSignature Language="F#" Value="member this.SignalEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent * System.Runtime.DurableInstancing.InstanceOwner -&gt; unit" Usage="instanceStore.SignalEvent (persistenceEvent, owner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
        <Parameter Name="owner" Type="System.Runtime.DurableInstancing.InstanceOwner" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent">
          <span data-ttu-id="9329b-215">Evento di persistenza da segnalare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-215">The persistence event to be signaled.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="9329b-216">Proprietario dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-216">The instance owner.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-217">Questo metodo viene richiamato da un archivio di istanze per segnalare un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-217">An instance store invokes this method to signal an event.</span>
          </span>
          <span data-ttu-id="9329b-218">Un host del flusso di lavoro che sottoscrive questo evento di persistenza lo riceve e intraprende un'azione appropriata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-218">A workflow host that subscribes for this persistence event receives it and takes an appropriate action.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCommand">
      <MemberSignature Language="C#" Value="protected internal virtual bool TryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool TryCommand(class System.Runtime.DurableInstancing.InstancePersistenceContext context, class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function TryCommand (context As InstancePersistenceContext, command As InstancePersistenceCommand, timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool TryCommand(System::Runtime::DurableInstancing::InstancePersistenceContext ^ context, System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member TryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; bool&#xA;override this.TryCommand : System.Runtime.DurableInstancing.InstancePersistenceContext * System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; bool" Usage="instanceStore.TryCommand (context, command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Runtime.DurableInstancing.InstancePersistenceContext" />
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="9329b-219">Contesto dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-219">The instance context.</span>
          </span>
        </param>
        <param name="command">
          <span data-ttu-id="9329b-220">Comando da eseguire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-220">The command to be executed.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-221">Valore di timeout per l'operazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-221">Timeout value for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-222">Un provider di persistenza implementa questo metodo, che determina se un particolare comando di persistenza può essere eseguito e se il comando che può essere eseguito lo esegue in modo asincrono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-222">A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-223">Un'implementazione del provider di persistenza deve restituire <see langword="false" /> quando non supporta il comando passato come parametro. In caso contrario deve restituire <see langword="true" /> o generare un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-223">A persistence provider implementation should return <see langword="false" /> if it doesn’t support the command passed as a parameter; otherwise it should return <see langword="true" /> or throw an exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9329b-224">Se il comando può essere eseguito, il provider di persistenza chiamerà i metodi pertinenti su <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> per fornire i risultati del comando.</span><span class="sxs-lookup"><span data-stu-id="9329b-224">If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEvents">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; WaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceEvent&gt; WaitForEvents(class System.Runtime.DurableInstancing.InstanceHandle handle, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEvents (handle As InstanceHandle, timeout As TimeSpan) As List(Of InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;System::Runtime::DurableInstancing::InstancePersistenceEvent ^&gt; ^ WaitForEvents(System::Runtime::DurableInstancing::InstanceHandle ^ handle, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.WaitForEvents : System.Runtime.DurableInstancing.InstanceHandle * TimeSpan -&gt; System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;" Usage="instanceStore.WaitForEvents (handle, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.Runtime.DurableInstancing.InstancePersistenceEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.DurableInstancing.InstanceHandle" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="9329b-225">Handle di istanza associato all'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-225">The instance handle that is bound to the event.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="9329b-226">Periodo di tempo trascorso il quale si verifica il timeout dell'operazione di attesa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-226">The time span after which the waiting operation times out.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9329b-227">Un host del flusso di lavoro richiama in genere questo metodo per attendere la segnalazione di un evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-227">A workflow host typically invokes this method to wait for an event to be signaled.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9329b-228">Elenco di oggetti <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9329b-228">A list of <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> objects.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>