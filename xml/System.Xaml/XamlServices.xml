<Type Name="XamlServices" FullName="System.Xaml.XamlServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b34e14110aa65e54e7ebad88c3081a75a17bdd15" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39796874" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class XamlServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XamlServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlServices" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlServices abstract sealed" />
  <TypeSignature Language="F#" Value="type XamlServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce servizi di livello superiore (metodi statici) per le attività XAML comuni di lettura di XAML e di scrittura di un oggetto grafico o di lettura di un oggetto grafico e di scrittura dell'output del file XAML ai fini della serializzazione.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le modalità del <xref:System.Xaml.XamlServices> classe utilizzati nel XAML più comuni di lettura e scrittura di scenari di fare affidamento sulla creazione di istanze di lettori XAML e writer XAML. Questi lettori e writer sono specializzate ma in implementazioni interne delle classi pubbliche, ad esempio <xref:System.Xml.XmlReader>, <xref:System.Xaml.XamlXmlReader>, e <xref:System.Xaml.XamlObjectWriter>. Usare <xref:System.Xaml.XamlServices> per la maggior parte degli scenari, è possibile basarsi su implementazioni interne predefinita per ottenere i risultati desiderati. Per gli scenari più specializzati, si potrebbe definire reader e writer e quindi passarle come argomenti per gli overload del <xref:System.Xaml.XamlServices> metodi.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> non consigliata XAML la lettura o XAML sta scrivendo API impostare se si stanno elaborando i tipi definiti dal WPF o tipi basati su WPF. Per la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sull'utilizzo, usare <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> per la lettura o il caricamento di XAML (o BAML); e <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> writeback XAML. Queste classi usano le API di servizi XAML di .NET Framework e i lettori XAML e writer XAML internamente nell'implementazione; Tuttavia, forniscono anche supporto e il contesto dello schema XAML specializzato per concetti specifici di WPF, ad esempio le ottimizzazioni per le proprietà di dipendenza e WPF tipi noti.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carica l'origine per un reader XAML e scrive l'output come oggetto grafico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Xaml.XamlServices.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso da caricare come input.</param>
        <summary>Carica un'origine <see cref="T:System.IO.Stream" /> per un reader XAML e scrive l'output come oggetto grafico.</summary>
        <returns>Oggetto grafico scritto come output.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Firme diverse per il <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> metodo specificano diversi tipi di input per l'origine XAML. Il <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> implementazione interna crea innanzitutto un' <xref:System.Xml.XmlReader> chiamando <xref:System.Xml.XmlReader.Create%28System.IO.Stream%29> e quindi crea una nuova istanza della specializzata <xref:System.Xaml.XamlReader> che elabora l'input.  
  
 Affinché il <xref:System.Xaml.XamlServices.Load%28System.IO.Stream%29> chiamare per creare un oggetto grafico, deve essere true quanto segue:  
  
-   L'origine è ben formato e un XML valido.  
  
-   L'origine è XAML valido a livello di linguaggio.  
  
-   I tipi XAML vengono specificati nell'origine XAML deve risolversi in tipi di supporto negli spazi dei nomi XAML pertinente. Ad esempio, tipi XAML per gli spazi dei nomi WPF possono risolvere uno spazio dei nomi XAML WPF come specificato in XAML; gli assembly per WPF devono essere inclusi nel progetto o disponibili in fase di esecuzione; E così via.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> non le letture consigliate XAML o scrivere API XAML impostata se si stanno elaborando [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] tipi o i tipi basati su [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Per la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sull'utilizzo, usare <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> per la lettura o il caricamento di XAML; e <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> writeback XAML. Usano queste classi <xref:System.Xaml> le API internamente nell'implementazione; tuttavia, forniscono il supporto per i concetti specifici di WPF che influenzano la natura del XAML lettura e scrittura, ad esempio le ottimizzazioni per le proprietà di dipendenza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.TextReader textReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.TextReader textReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.IO.TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::TextReader ^ textReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.TextReader -&gt; obj" Usage="System.Xaml.XamlServices.Load textReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textReader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="textReader">Oggetto <see cref="T:System.IO.TextReader" /> da utilizzare come base per l'oggetto <see cref="T:System.Xml.XmlReader" /> creato.</param>
        <summary>Crea un reader XAML da un oggetto <see cref="T:System.IO.TextReader" /> e restituisce un oggetto grafico.</summary>
        <returns>Oggetto grafico restituito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per restituire l'oggetto grafico, il `textReader` input deve essere costruito con input pertinente. Ad esempio, è necessario passare un <xref:System.IO.StringReader> che viene costruita usando un input del tipo XAML come stringa valido per il <xref:System.IO.StringReader.%23ctor%28System.String%29> costruttore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textReader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (fileName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; obj" Usage="System.Xaml.XamlServices.Load fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nome file da caricare e utilizzare come origine.</param>
        <summary>Carica un'origine <see cref="T:System.IO.Stream" /> per un reader XAML e restituisce un oggetto grafico.</summary>
        <returns>Oggetto grafico restituito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Firme diverse per il <xref:System.Xaml.XamlServices.Load%2A> metodo specificano diversi tipi di input per l'origine XAML. Il <xref:System.Xaml.XamlServices.Load%2A> implementazione interna crea innanzitutto un' <xref:System.Xml.XmlReader> chiamando <xref:System.Xml.XmlReader.Create%28System.String%29> e quindi crea una nuova istanza della specializzata <xref:System.Xaml.XamlReader> che elabora l'input.  
  
 Affinché il <xref:System.Xaml.XamlServices.Load%28System.String%29> chiamare per creare un oggetto grafico, deve essere true quanto segue:  
  
-   L'origine è ben formato e un XML valido.  
  
-   L'origine è XAML valido a livello di linguaggio.  
  
-   I tipi XAML vengono specificati nell'origine XAML deve risolversi in tipi di supporto negli spazi dei nomi XAML pertinente. Ad esempio, tipi XAML per gli spazi dei nomi WPF possono risolvere uno spazio dei nomi XAML WPF come specificato in XAML; gli assembly per WPF devono essere incluso nel progetto o essere disponibili in fase di esecuzione; E così via.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="fileName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader xamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader xamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ xamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xamlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implementazione del reader XAML da utilizzare come reader per l'operazione <see langword="Load" />.</param>
        <summary>Carica un'implementazione specifica del reader XAML e restituisce un oggetto grafico.</summary>
        <returns>Oggetto grafico restituito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È in genere consigliabile usare questa firma solo nei casi seguenti:  
  
-   È definita la propria implementazione di un <xref:System.Xaml.XamlReader>.  
  
-   Sono state specificate impostazioni per un <xref:System.Xaml.XamlReader> che differiscono da quelle predefinite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="xamlReader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader xmlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader xmlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ xmlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Xaml.XamlServices.Load xmlReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="xmlReader">Implementazione <see cref="T:System.Xml.XmlReader" /> da utilizzare come reader per l'operazione <see langword="Load" />.</param>
        <summary>Carica un'implementazione specifica del reader XML e restituisce un oggetto grafico.</summary>
        <returns>Oggetto grafico di output.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È in genere necessario usare questa firma solo se è definita la propria implementazione di un <xref:System.Xml.XmlReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="xamlReader" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xaml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xaml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xaml As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xaml);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Xaml.XamlServices.Parse xaml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xaml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xaml">Input della stringa XAML da analizzare.</param>
        <summary>Legge XAML come output della stringa e restituisce un oggetto grafico.</summary>
        <returns>Oggetto grafico restituito.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Affinché il <xref:System.Xaml.XamlServices.Parse%2A> chiamare per creare un albero di oggetti, le condizioni seguenti devono essere true:  
  
-   Il `xaml` input sia corretto e un XML valido.  
  
-   Il `xaml` è l'input XAML valido a livello di linguaggio.  
  
-   I tipi di XAML vengono specificati nel `xaml` input deve essere risolto in supporta i tipi negli spazi dei nomi XAML pertinente. Ad esempio, i tipi XAML per uno spazio dei nomi WPF possono risolvere uno spazio dei nomi XAML WPF come specificato in XAML; gli assembly per WPF devono essere incluso nel progetto o essere disponibili in fase di esecuzione; E così via.  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> non le letture consigliate XAML o scrivere API XAML impostata se si stanno elaborando [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] tipi o i tipi basati su [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Per la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sull'utilizzo, usare <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> per la lettura o il caricamento di XAML, e <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> writeback XAML. Usano queste classi <xref:System.Xaml> le API internamente nell'implementazione; tuttavia, forniscono il supporto per i concetti specifici di WPF che influenzano la natura del XAML lettura e scrittura, ad esempio le ottimizzazioni per le proprietà di dipendenza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="xaml" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Save">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi un formato di output per la serializzazione.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static string Save (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Save(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Save (instance As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Save(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : obj -&gt; string" Usage="System.Xaml.XamlServices.Save instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora una struttura ad albero di oggetti fornita in una rappresentazione del nodo XAML e restituisce una rappresentazione di stringa XAML come output.</summary>
        <returns>Output del markup XAML in formato stringa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'output da questo metodo è il `ToString` risultato di un <xref:System.Xml.XmlWriter> creato dalla chiamata al metodo. Che <xref:System.Xml.XmlWriter> viene creato usando le impostazioni seguenti: <xref:System.Xml.XmlWriterSettings.Indent%2A?displayProperty=nameWithType> viene `true`; e <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A?displayProperty=nameWithType> è `true`.  
  
 La stringa restituita può essere caricata come file XML valido tramite la <xref:System.Xml.XmlReader.Create%2A> metodo se è stata elaborata la stringa in un flusso o in un reader dedicato in particolare per XAML.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.Stream stream, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.Stream stream, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::Stream ^ stream, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.Stream * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (stream, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="stream">Flusso di destinazione.</param>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi un flusso di output per la serializzazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xaml.XamlServices> non le letture consigliate XAML o scrivere API XAML impostata se si stanno elaborando [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] tipi o i tipi basati su [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. Per la [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sull'utilizzo, usare <xref:System.Windows.Markup.XamlReader?displayProperty=nameWithType> per la lettura o il caricamento di XAML; e <xref:System.Windows.Markup.XamlWriter?displayProperty=nameWithType> writeback XAML. Usano queste classi <xref:System.Xaml> le API internamente nell'implementazione; tuttavia, forniscono il supporto per i concetti specifici di WPF che influenzano la natura del XAML lettura e scrittura, ad esempio le ottimizzazioni per le proprietà di dipendenza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="stream" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.IO.TextWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.IO.TextWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As TextWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::IO::TextWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.IO.TextWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Oggetto <see cref="T:System.IO.TextWriter" /> che scrive l'output.</param>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi un output diretto all'oggetto <see cref="T:System.IO.TextWriter" /> fornito.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="writer" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (string fileName, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(string fileName, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (fileName As String, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::String ^ fileName, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : string * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (fileName, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="fileName">Nome e percorso del file in cui scrivere l'output.</param>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi scrive in un file di output in corrispondenza di una posizione fornita.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `fileName` valore del parametro viene usato come i `outputFileName` di input per una chiamata a <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>, che consente di creare un <xref:System.Xml.XmlWriter> come parte della chiamata al metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="fileName" /> è una stringa vuota.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xaml.XamlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xaml.XamlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XamlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xaml::XamlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xaml.XamlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xaml.XamlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Implementazione <see cref="T:System.Xaml.XamlWriter" /> da utilizzare.</param>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi scrive nel writer XAML fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È in genere consigliabile usare questa firma solo nei casi seguenti:  
  
-   È definita la propria implementazione di un <xref:System.Xaml.XamlWriter>.  
  
-   Sono state specificate impostazioni per il <xref:System.Xaml.XamlWriter> che differiscono da quelle predefinite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="writer" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public static void Save (System.Xml.XmlWriter writer, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Save(class System.Xml.XmlWriter writer, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Save (writer As XmlWriter, instance As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Save(System::Xml::XmlWriter ^ writer, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member Save : System.Xml.XmlWriter * obj -&gt; unit" Usage="System.Xaml.XamlServices.Save (writer, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="writer">Implementazione <see cref="T:System.Xml.XmlWriter" /> da utilizzare.</param>
        <param name="instance">Radice dell'oggetto grafico da elaborare.</param>
        <summary>Elabora un oggetto grafico fornito in una rappresentazione del nodo XAML e quindi scrive nell'oggetto <see cref="T:System.Xml.XmlWriter" /> fornito.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'input del <paramref name="writer" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Connette un oggetto <see cref="T:System.Xaml.XamlReader" /> e un oggetto <see cref="T:System.Xaml.XamlWriter" /> per utilizzare un intermediario del set di nodi XAML comune. Trasforma potenzialmente il contenuto a seconda dei tipi di reader e writer forniti.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implementazione <see cref="T:System.Xaml.XamlReader" /> da utilizzare.</param>
        <param name="xamlWriter">Oggetto <see cref="T:System.Xaml.XamlWriter" /> da usare.</param>
        <summary>Connette un oggetto <see cref="T:System.Xaml.XamlReader" /> e un oggetto <see cref="T:System.Xaml.XamlWriter" /> per utilizzare un intermediario del set di nodi XAML comune. Trasforma potenzialmente il contenuto a seconda dei tipi di reader e writer forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è un wrapper intorno <xref:System.Xaml.XamlServices.Transform%28System.Xaml.XamlReader%2CSystem.Xaml.XamlWriter%2CSystem.Boolean%29>, dove `closeWriter` è specificato come `true`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">L'input di <paramref name="xamlReader" /> o <paramref name="xamlWriter" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Il contesto dello schema XAML non corrisponde fra <paramref name="xamlReader" /> e <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static void Transform (System.Xaml.XamlReader xamlReader, System.Xaml.XamlWriter xamlWriter, bool closeWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Transform(class System.Xaml.XamlReader xamlReader, class System.Xaml.XamlWriter xamlWriter, bool closeWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Transform(System::Xaml::XamlReader ^ xamlReader, System::Xaml::XamlWriter ^ xamlWriter, bool closeWriter);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Xaml.XamlReader * System.Xaml.XamlWriter * bool -&gt; unit" Usage="System.Xaml.XamlServices.Transform (xamlReader, xamlWriter, closeWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlReader" Type="System.Xaml.XamlReader" />
        <Parameter Name="xamlWriter" Type="System.Xaml.XamlWriter" />
        <Parameter Name="closeWriter" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xamlReader">Implementazione <see cref="T:System.Xaml.XamlReader" /> da utilizzare.</param>
        <param name="xamlWriter">Oggetto <see cref="T:System.Xaml.XamlWriter" /> da usare.</param>
        <param name="closeWriter">
          <see langword="true" /> per chiudere il writer dopo il completamento della chiamata; <see langword="false" /> per lasciare il writer attivo in corrispondenza dell'ultima posizione scritta.</param>
        <summary>Connette un oggetto <see cref="T:System.Xaml.XamlReader" /> e un oggetto <see cref="T:System.Xaml.XamlWriter" /> per utilizzare un intermediario del set di nodi XAML comune. Trasforma potenzialmente il contenuto a seconda dei tipi di reader e writer forniti. Fornisce un parametro per specificare se chiudere il writer al completamento della chiamata.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">L'input di <paramref name="xamlReader" /> o <paramref name="xamlWriter" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlException">Il contesto dello schema XAML non corrisponde fra <paramref name="xamlReader" /> e <paramref name="xamlWriter" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>