<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0be5055c35b573696dd32a4c5d1694fbf9bfeb9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37484927" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Transforms XML data using an XSLT style sheet.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe è un processore XSLT che supporta la sintassi XSLT 1.0. È una nuova implementazione e include miglioramenti delle prestazioni rispetto a obsoleta <xref:System.Xml.Xsl.XslTransform> classe. La struttura del <xref:System.Xml.Xsl.XslCompiledTransform> classe è molto simile al <xref:System.Xml.Xsl.XslTransform> classe. Il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo carica e Compila stile foglio, mentre il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo esegue la trasformazione XSLT.  
  
 Supporto per XSLT `document()` (funzione) e blocchi di script incorporati sono disabilitati per impostazione predefinita. Queste funzionalità possono essere abilitate mediante la creazione di un' <xref:System.Xml.Xsl.XsltSettings> oggetto e passandolo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (metodo).  
  
 Per altre informazioni, vedere [usando la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [migrazione dalla classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Quando si crea un'applicazione in cui viene utilizzata la classe <xref:System.Xml.Xsl.XslCompiledTransform>, è necessario conoscere i seguenti elementi e le relative implicazioni:  
  
-   Gli script XSLT sono disattivati per impostazione predefinita. Lo script con XSLT deve essere abilitato solo se è necessario il supporto per gli script e solo all'interno di un ambiente completamente attendibile.  
  
-   La funzionalità XSLT `document()` è disattivata per impostazione predefinita. Se si abilita la funzione `document()`, limitare le risorse a cui è possibile accedere passando un oggetto <xref:System.Xml.XmlSecureResolver> al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Gli oggetti di estensione sono abilitati per impostazione predefinita. Vengono utilizzati se un oggetto <xref:System.Xml.Xsl.XsltArgumentList> contenente oggetti di estensione viene passato al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Nei fogli di stile XSLT possono essere inclusi riferimenti ad altri file e a blocchi di script incorporati. Un utente malintenzionato può sfruttare questa situazione fornendo dati o fogli di stile che, quando eseguiti, possono determinare l'elaborazione continua da parte del sistema finché le risorse del computer diventeranno insufficienti.  
  
-   Le applicazioni XSLT che vengono eseguite in un ambiente con attendibilità mista potrebbero consentire lo spoofing del foglio di stile. Ad esempio, un utente malintenzionato può caricare un oggetto con un foglio di stile dannoso e trasferirlo a un altro utente che in un secondo momento chiama il metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> ed esegue la trasformazione.  
  
 I problemi relativi alla sicurezza possono essere limitati non attivando gli script o la funzionalità `document()`, a meno che il foglio di stile non provenga da un'origine attendibile, e non accettando gli oggetti <xref:System.Xml.Xsl.XslCompiledTransform>, i fogli di stile XSLT o i dati di origine XML da un'origine non attendibile.  
  
   
  
## Examples  
 Nell'esempio seguente esegue una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L'esempio Usa i due file di input seguenti:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Il <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> oggetto è thread-safe dopo che è stato caricato. In altre parole, dopo il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo viene completato correttamente, il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metodo può essere chiamato simultaneamente da più thread.  Se il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo viene chiamato nuovamente in un thread mentre il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metodo viene chiamato in un altro thread, il <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> oggetto termina l'esecuzione il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> chiamare continuando a utilizzare lo stato precedente. Il nuovo stato viene usato quando il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo viene completato correttamente.  
  
 <block subset="none" type="note"><para> Il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo non è thread-safe quando chiamato simultaneamente da più thread.  </para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" /> to generate debug information; otherwise <see langword="false" />. Setting this to <see langword="true" /> enables you to debug the style sheet with the Microsoft Visual Studio Debugger.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> class with the specified debug setting.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le condizioni seguenti devono essere soddisfatti per eseguire il codice ed eseguirne il debug del foglio di stile:  
  
-   Il parametro `enableDebug` viene impostato su `true`.  
  
-   Il foglio di stile viene passato per il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo come un URI o un'implementazione del <xref:System.Xml.XmlReader> classe che implementa il <xref:System.Xml.IXmlLineInfo> interfaccia. Il <xref:System.Xml.IXmlLineInfo> interfaccia è implementata in tutte le analisi del testo <xref:System.Xml.XmlReader> oggetti.  
  
     In altre parole, se il foglio di stile viene caricato usando un <xref:System.Xml.XPath.IXPathNavigable> dell'oggetto, ad esempio un <xref:System.Xml.XmlDocument> o <xref:System.Xml.XPath.XPathDocument>, o un' <xref:System.Xml.XmlReader> implementazione che non implementa il <xref:System.Xml.IXmlLineInfo> interfaccia, è possibile eseguire il debug del foglio di stile.  
  
-   Il <xref:System.Xml.XmlResolver> usato per caricare lo stile foglio è basato su file <xref:System.Xml.XmlResolver>, ad esempio le <xref:System.Xml.XmlUrlResolver> (questo è il valore predefinito <xref:System.Xml.XmlResolver> usato dal <xref:System.Xml.Xsl.XslCompiledTransform> classe).  
  
-   Il foglio di stile si trova nel computer locale o su intranet.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come abilitare il debug di XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> positioned at the beginning of the style sheet to be compiled.</param>
        <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to be applied to the style sheet. If this is <see langword="null" />, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> will be applied.</param>
        <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> use to resolve style sheet modules referenced in <see langword="xsl:import" /> and <see langword="xsl:include" /> elements. If this is <see langword="null" />, external resources will not be resolved.</param>
        <param name="debug">Setting this to <see langword="true" /> enables debugging the style sheet with a debugger.</param>
        <param name="typeBuilder">The <see cref="T:System.Reflection.Emit.TypeBuilder" /> used for the style sheet compilation. The provided TypeBuilder is used to generate the resulting type.</param>
        <param name="scriptAssemblyPath">The base path for the assemblies generated for <see langword="msxsl:script" /> elements. If only one script assembly is generated, this parameter specifies the path for that assembly. In case of multiple script assemblies, a distinctive suffix will be appended to the file name to ensure uniqueness of assembly names.</param>
        <summary>Compiles an XSLT style sheet to a specified type.</summary>
        <returns>A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> object containing compiler errors and warnings that indicate the results of the compilation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `xsltc.exe` lo strumento è un wrapper di <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> (metodo). La compilazione di fogli di stile con il `xsltc.exe` soddisfa le esigenze della maggior parte delle applicazioni che sfruttano l'utilizzo dei fogli di stile compilato. Il <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> metodo deve essere usato durante la compilazione di strumenti di compilazione personalizzati.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compiles the style sheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene le prestazioni complessive della classe <xref:System.Xml.Xsl.XslCompiledTransform> siano migliori rispetto alla classe <xref:System.Xml.Xsl.XslTransform>, l'esecuzione del metodo <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> della classe <xref:System.Xml.Xsl.XslCompiledTransform> potrebbe risultare più lenta di quella del metodo <xref:System.Xml.Xsl.XslTransform.Load%2A> della classe <xref:System.Xml.Xsl.XslTransform> la prima volta che tale metodo viene chiamato su una trasformazione. Questa situazione si verifica perché il file XSLT deve essere compilato prima del caricamento. Per altre informazioni, vedere il post di blog seguente: [XslCompiledTransform Slower than XslTransform?](http://go.microsoft.com/fwlink/?LinkId=130590) (XslCompiledTransform è più lento di XslTransform?)  
  
> [!NOTE]
>  Esistono alcune differenze tra il foglio di stile XSLT compilato in modalità debug e il foglio di stile XSLT compilato in modalità di rilascio. In alcune situazioni i fogli di stile compilati in modalità debug non generano errori durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ma riporteranno errori successivamente durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Lo stesso foglio di stile compilato in modalità di rilascio avrà esito negativo durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un esempio di tale comportamento si ottiene quando una variabile che non è del tipo set di nodi viene assegnata a un'espressione in cui è richiesto un set di nodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">The URI of the style sheet.</param>
        <summary>Loads and compiles the style sheet located at the specified URI.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Questo metodo presenta il comportamento seguente:  
  
-   Un' <xref:System.Xml.XmlUrlResolver> senza utente le credenziali viene usata per risolvere l'URI del foglio di stile ed elaborare qualsiasi `xsl:import` o `xsl:include` elementi.  
  
-   Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il foglio di stile. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (metodo).  
  
-   Il `document()` è disattivata.  
  
-   Gli script incorporati non sono supportati.  
  
 È possibile usare la <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessari o per specificare diverse impostazioni di XSLT.  
  
   
  
## Examples  
 Nell'esempio seguente esegue una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.  -or-  An error occurred while processing the request.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">The name of the class that contains the compiled style sheet.  This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.</param>
        <summary>Loads the compiled style sheet that was created using the [XSLT Compiler (xsltc.exe)](~/docs/standard/data/xml/xslt-compiler-xsltc-exe.md).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo strumento xsltc.exe consente di compilare fogli di stile e generare assembly dai fogli di stile. Il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo carica il foglio di stile compilato dall'assembly.  
  
> [!NOTE]
>  È anche necessario includere l'assembly XSLT come riferimento nell'applicazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come caricare un foglio di stile compilato da un assembly XSLT. L'esempio presuppone che lo strumento xsltc.exe è stato utilizzato per creare un assembly denominato DLL con una classe denominata bookOrders.  
  
> [!NOTE]
>  È necessario fare riferimento all'assembly XSLT durante la compilazione del codice. Ad esempio `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">An <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
        <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Il foglio di stile viene caricato dal nodo corrente del <xref:System.Xml.XmlReader> attraverso tutti i relativi elementi figlio. In questo modo è possibile usare una parte di un documento come il foglio di stile. Dopo che il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo viene completato, il <xref:System.Xml.XmlReader> è posizionato sul nodo successivo dopo la fine del foglio di stile. Se viene raggiunta la fine del documento, l'oggetto <xref:System.Xml.XmlReader> viene posizionato alla fine del file (EOF).  
  
 Questo metodo presenta il comportamento seguente:  
  
-   Un' <xref:System.Xml.XmlUrlResolver> senza utente delle credenziali viene utilizzato per elaborare eventuali `xsl:import` o `xsl:include` elementi.  
  
-   Il `document()` è disattivata.  
  
-   Gli script incorporati non sono supportati.  
  
 È possibile usare la <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessari o per specificare diverse impostazioni di XSLT.  
  
   
  
## Examples  
 L'esempio seguente carica un foglio di stile contenuto un <xref:System.Xml.XmlReader> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
        <summary>Compiles the style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Questo metodo presenta il comportamento seguente:  
  
-   Un' <xref:System.Xml.XmlUrlResolver> senza utente delle credenziali viene utilizzato per elaborare eventuali `xsl:import` o `xsl:include` elementi.  
  
-   Il `document()` è disattivata.  
  
-   Gli script incorporati non sono supportati.  
  
 È possibile usare la <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessari o per specificare diverse impostazioni di XSLT.  
  
   
  
## Examples  
 L'esempio seguente carica un foglio di stile contenuto un <xref:System.Xml.XPath.XPathDocument> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">A <see cref="T:System.Reflection.MethodInfo" /> object representing the compiler-generated <c>execute</c> method of the compiled style sheet.</param>
        <param name="queryData">A byte array of serialized data structures in the <c>staticData</c> field of the compiled style sheet as generated by the <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> method.</param>
        <param name="earlyBoundTypes">An array of types stored in the compiler-generated <c>ebTypes</c> field of the compiled style sheet.</param>
        <summary>Loads a method from a style sheet compiled using the <see langword="XSLTC.exe" /> utility.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta un foglio di stile compilato sotto forma di un <xref:System.Reflection.MethodInfo> oggetto, una matrice di byte e una matrice di tipo. <xref:System.Reflection.Emit.DynamicMethod> gli oggetti possono essere utilizzati per consentire metodi del foglio di stile compilato eliminate quando il <xref:System.Xml.Xsl.XslCompiledTransform> oggetto venga recuperato.  
  
   
  
## Examples  
 L'esempio di codice seguente usa il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> per caricare un foglio di stile compilato. La trasformazione consente di ridurre il valore della `Price` elemento dieci percento.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  L'assembly "Trasformazione" usato in questo esempio è stato creato tramite l'utilità xsltc.exe. Per informazioni dettagliate sull'uso di questo strumento da riga di comando, vedere [procedura: eseguire una trasformazione XSLT utilizzando un Assembly](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 Esempio di codice precedente Usa la trasformazione seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">The URI of the style sheet.</param>
        <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is <see langword="null" />, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
        <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the style sheet URI and any style sheets referenced in XSLT <c>import</c> and <c>include</c> elements.</param>
        <summary>Loads and compiles the XSLT style sheet specified by the URI. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT <c>import</c> or <c>include</c> elements and the XSLT settings determine the permissions for the style sheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il foglio di stile. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (metodo).  
  
   
  
## Examples  
 L'esempio seguente carica un foglio di stile che viene archiviato in una risorsa di rete. Un oggetto <xref:System.Xml.XmlSecureResolver> specificherà le credenziali necessarie per accedere al foglio di stile.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheetUri" /> or <paramref name="stylesheetResolver" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The style sheet cannot be found.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="stylesheetUri" /> value includes a filename or directory that cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="stylesheetUri" /> value cannot be resolved.  -or-  An error occurred while processing the request.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the style sheet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">The <see cref="T:System.Xml.XmlReader" /> containing the style sheet.</param>
        <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is <see langword="null" />, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
        <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is <see langword="null" />, external resources are not resolved.</param>
        <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XmlReader" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT <c>import</c> or <c>include</c> elements and the XSLT settings determine the permissions for the style sheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Il foglio di stile viene caricato dal nodo corrente del <xref:System.Xml.XmlReader> attraverso tutti i relativi elementi figlio. In questo modo è possibile usare una parte di un documento come il foglio di stile. Dopo che il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo viene completato, il <xref:System.Xml.XmlReader> è posizionato sul nodo successivo dopo la fine del foglio di stile. Se viene raggiunta la fine del documento, l'oggetto <xref:System.Xml.XmlReader> viene posizionato alla fine del file (EOF).  
  
   
  
## Examples  
 Nell'esempio seguente carica un foglio di stile e abilita il supporto per gli script XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the style sheet.</param>
        <param name="settings">The <see cref="T:System.Xml.Xsl.XsltSettings" /> to apply to the style sheet. If this is <see langword="null" />, the <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> setting is applied.</param>
        <param name="stylesheetResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve any style sheets referenced in XSLT <c>import</c> and <c>include</c> elements. If this is <see langword="null" />, external resources are not resolved.</param>
        <summary>Compiles the XSLT style sheet contained in the <see cref="T:System.Xml.XPath.IXPathNavigable" />. The <see cref="T:System.Xml.XmlResolver" /> resolves any XSLT <c>import</c> or <c>include</c> elements and the XSLT settings determine the permissions for the style sheet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve usare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
   
  
## Examples  
 L'esempio seguente carica un foglio di stile. Il <xref:System.Xml.XmlSecureResolver> oggetto contiene le credenziali necessarie per accedere a uno `import` o `include` gli elementi trovati nel foglio di stile.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="stylesheet" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">The style sheet contains an error.</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Xml.XmlWriterSettings" /> object that contains the output information derived from the <c>xsl:output</c> element of the style sheet.</summary>
        <value>Sola lettura <see cref="T:System.Xml.XmlWriterSettings" /> oggetto che contiene le informazioni di output derivate dal <c>xsl: output</c> elemento del foglio di stile. Il valore può essere <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà viene popolata dopo una chiamata al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> (metodo). Contiene le informazioni derivate dalla `xsl:output` elemento di un foglio di stile compilato. Ciò <xref:System.Xml.XmlWriterSettings> oggetto può essere passato per il <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> metodo per creare il <xref:System.Xml.XmlWriter> oggetto a cui si desidera restituire.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> proprietà per creare un <xref:System.Xml.XmlWriter> oggetto scrive il testo nella console.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 L'esempio Usa la `books.xml` e `outputConsole.xsl` come input i file.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> that contains the temporary files generated on disk after a successful call to the <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> method.</summary>
        <value>Il <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> che contiene i file temporanei generati sul disco. Questo valore è <see langword="null" /> se il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo non è stato chiamato, o se il debug non è stato abilitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà identifica i file che sono stati generati durante il XSLT di elaborazione. I file vengono inseriti nella directory Temp (specificata dalla variabile di ambiente % TEMP %) è possibile eliminare questi file dopo l'elaborazione di XSLT è stata completata.  
  
   
  
## Examples  
 Nell'esempio seguente scrive i nomi dei file temporanei nella console.  
  
> [!NOTE]
>  I file temporanei vengono creati solo quando il caricamento di stile di fogli di stile con \<msxsl: script > blocchi.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Executes the XSLT transformation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esistono alcune differenze tra il foglio di stile XSLT compilato in modalità debug e il foglio di stile XSLT compilato in modalità di rilascio. In alcune situazioni i fogli di stile compilati in modalità debug non generano errori durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ma riporteranno errori successivamente durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Lo stesso foglio di stile compilato in modalità di rilascio avrà esito negativo durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un esempio di tale comportamento si ottiene quando una variabile che non è del tipo set di nodi viene assegnata a un'espressione in cui è richiesto un set di nodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">The URI of the input document.</param>
        <param name="resultsFile">The URI of the output file.</param>
        <summary>Executes the transform using the input document specified by the URI and outputs the results to a file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere i documenti di input e outpui. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente esegue una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L'esempio Usa i due file di input seguenti:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
        <exception cref="T:System.IO.FileNotFoundException">The input document cannot be found.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value includes a filename or directory cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> or <paramref name="resultsFile" /> value cannot be resolved.  -or-  An error occurred while processing the request</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> or <paramref name="resultsFile" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">The URI of the input document.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (metodo).  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato incluso il `xsl:strip-space` elemento, è necessario usare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> eseguire l'overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e gli output a un <xref:System.Xml.XmlWriter> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.  -or-  An error occurred while processing the request.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">The <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione viene abilitata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
   
  
## Examples  
 Nell'esempio seguente consente di trasformare il primo libro nel file books. Xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione viene abilitata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato incluso il `xsl:strip-space` elemento, è necessario usare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> eseguire l'overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e gli output a un <xref:System.Xml.XmlWriter> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">The URI of the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The stream to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the URI and outputs the results to stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (metodo).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.  -or-  An error occurred while processing the request</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">The URI of the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the URI and outputs the results to a <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e restituisce una stringa.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputUri" /> value includes a filename or directory cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.  -or-  An error occurred while processing the request</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">The URI of the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the URI and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa un valore predefinito <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni consente di caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> (metodo).  
  
   
  
## Examples  
 L'esempio seguente usa un <xref:System.Xml.Xsl.XsltArgumentList> oggetto per creare un parametro che rappresenta la data e ora correnti.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 L'esempio Usa i seguenti due file di dati come input.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="inputUri" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">The <paramref name="inputtUri" /> value includes a filename or directory cannot be found.</exception>
        <exception cref="T:System.Net.WebException">The <paramref name="inputUri" /> value cannot be resolved.  -or-  An error occurred while processing the request.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> is not a valid URI.</exception>
        <exception cref="T:System.Xml.XmlException">There was a parsing error loading the input document.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The stream to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to a <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The stream to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to a stream. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional runtime arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione viene abilitata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato incluso il `xsl:strip-space` elemento, è necessario usare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> eseguire l'overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e gli output a un <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.IO.TextWriter" /> to which you want to output.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.IO.TextWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione viene abilitata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato incluso il `xsl:strip-space` elemento, è necessario usare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> eseguire l'overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">An object implementing the <see cref="T:System.Xml.XPath.IXPathNavigable" /> interface. In the Microsoft .NET Framework, this can be either an <see cref="T:System.Xml.XmlNode" /> (typically an <see cref="T:System.Xml.XmlDocument" />), or an <see cref="T:System.Xml.XPath.XPathDocument" /> containing the data to be transformed.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione viene abilitata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, usare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno dei relativi argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato incluso il `xsl:strip-space` elemento, è necessario usare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> eseguire l'overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">An <see cref="T:System.Xml.XmlReader" /> containing the input document.</param>
        <param name="arguments">An <see cref="T:System.Xml.Xsl.XsltArgumentList" /> containing the namespace-qualified arguments used as input to the transform. This value can be <see langword="null" />.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <c>xsl:output</c> element, you should create the <see cref="T:System.Xml.XmlWriter" /> using the <see cref="T:System.Xml.XmlWriterSettings" /> object returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT <c>document()</c> function. If this is <see langword="null" />, the <c>document()</c> function is not resolved.</param>
        <summary>Executes the transform using the input document specified by the <see cref="T:System.Xml.XmlReader" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the XmlResolver resolves the XSLT <c>document()</c> function.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente usa un' <xref:System.Xml.XmlSecureResolver> per risolvere il file XSLT `document()` (funzione).  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="input" /> or <paramref name="results" /> value is <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">There was an error executing the XSLT transform.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">The document to transform that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object.</param>
        <param name="arguments">Argument list as <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">The <see cref="T:System.Xml.XmlWriter" /> to which you want to output.  If the style sheet contains an <see langword="xsl:output" /> element, you should create the <see cref="T:System.Xml.XmlWriter" /> by using the <see cref="T:System.Xml.XmlWriterSettings" /> object that is returned from the <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> property. This ensures that the <see cref="T:System.Xml.XmlWriter" /> has the correct output settings.</param>
        <param name="documentResolver">The <see cref="T:System.Xml.XmlResolver" /> used to resolve the XSLT <see langword="document()" /> function. If this is <see langword="null" />, the <see langword="document()" /> function is not resolved.</param>
        <summary>Executes the transform by using the input document that is specified by the <see cref="T:System.Xml.XPath.IXPathNavigable" /> object and outputs the results to an <see cref="T:System.Xml.XmlWriter" />. The <see cref="T:System.Xml.Xsl.XsltArgumentList" /> provides additional run-time arguments and the <see cref="T:System.Xml.XmlResolver" /> resolves the XSLT <see langword="document()" /> function.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>