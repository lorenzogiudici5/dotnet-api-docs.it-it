<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df35b09bb7bf6d29d6d71264fa0b9ba7fbd134ad" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721085" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Trasforma i dati XML usando un foglio di stile XSLT.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Xml.Xsl.XslCompiledTransform> è un processore XSLT che supporta la sintassi XSLT 1.0. È una nuova implementazione e include i miglioramenti delle prestazioni rispetto a obsoleta <xref:System.Xml.Xsl.XslTransform> classe. La struttura del <xref:System.Xml.Xsl.XslCompiledTransform> è molto simile alla classe il <xref:System.Xml.Xsl.XslTransform> classe. Il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo carica e compila lo stile del foglio, mentre il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo esegue la trasformazione XSLT.  
  
 Supporto per XSLT `document()` funzione e i blocchi di script incorporati sono disattivati per impostazione predefinita. Queste funzionalità possono essere abilitate creando un <xref:System.Xml.Xsl.XsltSettings> oggetto e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo.  
  
 Per ulteriori informazioni, vedere [utilizzando la classe XslCompiledTransform](~/docs/standard/data/xml/using-the-xslcompiledtransform-class.md) e [la migrazione dalla classe XslTransform](~/docs/standard/data/xml/migrating-from-the-xsltransform-class.md).  
  
## <a name="security-considerations"></a>Considerazioni sulla sicurezza  
 Quando si crea un'applicazione in cui viene utilizzata la classe <xref:System.Xml.Xsl.XslCompiledTransform>, è necessario conoscere i seguenti elementi e le relative implicazioni:  
  
-   Gli script XSLT sono disattivati per impostazione predefinita. Lo script con XSLT deve essere abilitato solo se è necessario il supporto per gli script e solo all'interno di un ambiente completamente attendibile.  
  
-   La funzionalità XSLT `document()` è disattivata per impostazione predefinita. Se si abilita la funzione `document()`, limitare le risorse a cui è possibile accedere passando un oggetto <xref:System.Xml.XmlSecureResolver> al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Gli oggetti di estensione sono abilitati per impostazione predefinita. Vengono utilizzati se un oggetto <xref:System.Xml.Xsl.XsltArgumentList> contenente oggetti di estensione viene passato al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>.  
  
-   Nei fogli di stile XSLT possono essere inclusi riferimenti ad altri file e a blocchi di script incorporati. Un utente malintenzionato può sfruttare questa situazione fornendo dati o fogli di stile che, quando eseguiti, possono determinare l'elaborazione continua da parte del sistema finché le risorse del computer diventeranno insufficienti.  
  
-   Le applicazioni XSLT che vengono eseguite in un ambiente con attendibilità mista potrebbero consentire lo spoofing del foglio di stile. Ad esempio, un utente malintenzionato può caricare un oggetto con un foglio di stile dannoso e trasferirlo a un altro utente che in un secondo momento chiama il metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> ed esegue la trasformazione.  
  
 I problemi relativi alla sicurezza possono essere limitati non attivando gli script o la funzionalità `document()`, a meno che il foglio di stile non provenga da un'origine attendibile, e non accettando gli oggetti <xref:System.Xml.Xsl.XslCompiledTransform>, i fogli di stile XSLT o i dati di origine XML da un'origine non attendibile.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L'esempio utilizza i due file di input seguenti:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Il <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> oggetto è thread-safe, una volta che è stato caricato. In altre parole, dopo il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo completata, il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metodo può essere chiamato simultaneamente da più thread.  
  
 Se il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo viene chiamato nuovamente in un thread mentre il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> metodo viene chiamato in un altro thread, il <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> oggetto termina l'esecuzione di <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> chiamare continuando a utilizzare lo stato precedente. Il nuovo stato viene utilizzato quando il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> completamento del metodo.  
  
 <block subset="none" type="note"><para>  
 Il <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> metodo non è thread-safe, quando viene chiamato da più thread contemporaneamente.  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">
          <see langword="true" /> per generare informazioni di debug. In caso contrario, <see langword="false" />. Se questa impostazione è <see langword="true" />, è possibile eseguire il debug del foglio di stile con Microsoft Visual Studio Debugger.</param>
        <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> con l'impostazione di debug specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per eseguire il codice e il debug del foglio di stile devono essere soddisfatte le condizioni seguenti:  
  
-   Il parametro `enableDebug` viene impostato su `true`.  
  
-   Il foglio di stile viene passato per il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo come un URI o un'implementazione del <xref:System.Xml.XmlReader> classe che implementa il <xref:System.Xml.IXmlLineInfo> interfaccia. Il <xref:System.Xml.IXmlLineInfo> interfaccia è implementata in analisi del testo tutti <xref:System.Xml.XmlReader> oggetti.  
  
     In altre parole, se il foglio di stile viene caricato usando un <xref:System.Xml.XPath.IXPathNavigable> dell'oggetto, ad esempio un <xref:System.Xml.XmlDocument> o <xref:System.Xml.XPath.XPathDocument>, o un <xref:System.Xml.XmlReader> implementazione che non implementa il <xref:System.Xml.IXmlLineInfo> interfaccia, è possibile eseguire il debug del foglio di stile.  
  
-   Il <xref:System.Xml.XmlResolver> utilizzato per caricare lo stile del foglio è basato su file <xref:System.Xml.XmlResolver>, ad esempio il <xref:System.Xml.XmlUrlResolver> (questa è l'impostazione predefinita <xref:System.Xml.XmlResolver> utilizzato dal <xref:System.Xml.Xsl.XslCompiledTransform> classe).  
  
-   Il foglio di stile si trovi nel computer locale o in intranet.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come abilitare il debug di XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="debug" Type="System.Boolean" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheet">
          <see cref="T:System.Xml.XmlReader" /> posizionato all'inizio del foglio di stile da compilare.</param>
        <param name="settings">
          <see cref="T:System.Xml.Xsl.XsltSettings" /> da applicare al foglio di stile. Se è <see langword="null" /> verrà applicato <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> utilizzato per risolvere i moduli dei fogli di stile a cui si fa riferimento in <see langword="xsl:import" /> e negli elementi <see langword="xsl:include" />. Se è <see langword="null" /> , le risorse esterne non verranno risolte.</param>
        <param name="debug">Impostandolo su <see langword="true" /> è possibile eseguire il debug del foglio di stile con un debugger.</param>
        <param name="typeBuilder">
          <see cref="T:System.Reflection.Emit.TypeBuilder" /> utilizzato per la compilazione del foglio di stile. L'oggetto TypeBuilder fornito viene usato per generare il tipo risultante.</param>
        <param name="scriptAssemblyPath">Percorso di base per gli assembly generati per elementi <see langword="msxsl:script" />. Se viene generato un solo assembly di script, questo parametro specifica il percorso dell'assembly. Se sono presenti vari assembly di script, verrà aggiunto un suffisso distintivo al nome del file per assicurare l'univocità dei nomi di assembly.</param>
        <summary>Compila un foglio di stile XSLT in un tipo specificato.</summary>
        <returns>Oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contenente errori e avvisi del compilatore che indicano i risultati della compilazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `xsltc.exe` strumento è un wrapper di <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> metodo. La compilazione di fogli di stile con il `xsltc.exe` soddisfa le esigenze della maggior parte delle applicazioni che sfruttano l'utilizzo dei fogli di stile compilato. Il <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> metodo deve essere utilizzato durante la compilazione di strumenti di compilazione personalizzata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compila il foglio di stile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene le prestazioni complessive della classe <xref:System.Xml.Xsl.XslCompiledTransform> siano migliori rispetto alla classe <xref:System.Xml.Xsl.XslTransform>, l'esecuzione del metodo <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> della classe <xref:System.Xml.Xsl.XslCompiledTransform> potrebbe risultare più lenta di quella del metodo <xref:System.Xml.Xsl.XslTransform.Load%2A> della classe <xref:System.Xml.Xsl.XslTransform> la prima volta che tale metodo viene chiamato su una trasformazione. Questa situazione si verifica perché il file XSLT deve essere compilato prima del caricamento. Per altre informazioni, vedere il post di blog seguente: [XslCompiledTransform Slower than XslTransform?](http://go.microsoft.com/fwlink/?LinkId=130590) (XslCompiledTransform è più lento di XslTransform?)  
  
> [!NOTE]
>  Esistono alcune differenze tra il foglio di stile XSLT compilato in modalità debug e il foglio di stile XSLT compilato in modalità di rilascio. In alcune situazioni i fogli di stile compilati in modalità debug non generano errori durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ma riporteranno errori successivamente durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Lo stesso foglio di stile compilato in modalità di rilascio avrà esito negativo durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un esempio di tale comportamento si ottiene quando una variabile che non è del tipo set di nodi viene assegnata a un'espressione in cui è richiesto un set di nodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI del foglio di stile.</param>
        <summary>Carica e compila il foglio di stile che si trova all'URI specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Questo metodo presenta il seguente comportamento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con nessun utente credenziali viene utilizzato per risolvere l'URI del foglio di stile, quindi elaborare eventuali `xsl:import` o `xsl:include` elementi.  
  
-   Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il foglio di stile. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo.  
  
-   Il `document()` è disattivata.  
  
-   Script incorporati non sono supportati.  
  
 È possibile utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessarie o per specificare diverse impostazioni XSLT.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheetUri" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
        <exception cref="T:System.IO.FileNotFoundException">È impossibile trovare il foglio di stile.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore <paramref name="stylesheetUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="stylesheetUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del foglio di stile.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">Nome della classe che contiene il foglio di stile compilato.  
  
 Di solito si tratta del nome del foglio di stile. Se non viene specificato diversamente, lo strumento xsltc.exe usa il nome del foglio di stile per i nomi della classe e dell'assembly.</param>
        <summary>Carica il foglio di stile compilato che è stato creato tramite il [compilatore XSLT (xsltc.exe)](~/docs/standard/data/xml/xslt-compiler-xsltc-exe.md).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo strumento xsltc.exe è consente di compilare fogli di stile e generare assembly dai fogli di stile. Il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo carica il foglio di stile compilato dall'assembly.  
  
> [!NOTE]
>  È inoltre necessario includere l'assembly XSLT come riferimento nell'applicazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come caricare un foglio di stile compilato da un assembly XSLT. Nell'esempio si presuppone che lo strumento xsltc.exe è stato utilizzato per creare un assembly denominato DLL con una classe denominata bookOrders.  
  
> [!NOTE]
>  È necessario fare riferimento all'assembly XSLT quando la compilazione del codice. Ad esempio `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  
  
```  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il foglio di stile.</param>
        <summary>Compila il foglio di stile contenuto nell'oggetto <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Il foglio di stile viene caricato dal nodo corrente del <xref:System.Xml.XmlReader> tramite i relativi elementi figlio. In questo modo è possibile utilizzare una parte di un documento come foglio di stile. Dopo il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo viene completato, il <xref:System.Xml.XmlReader> è posizionato sul nodo successivo dopo la fine del foglio di stile. Se viene raggiunta la fine del documento, l'oggetto <xref:System.Xml.XmlReader> viene posizionato alla fine del file (EOF).  
  
 Questo metodo presenta il seguente comportamento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con nessun utente credenziali viene utilizzato per elaborare eventuali `xsl:import` o `xsl:include` elementi.  
  
-   Il `document()` è disattivata.  
  
-   Script incorporati non sono supportati.  
  
 È possibile utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessarie o per specificare diverse impostazioni XSLT.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un foglio di stile contenuto un <xref:System.Xml.XmlReader> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheet" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un <see cref="T:System.Xml.XmlDocument" />) oppure un <see cref="T:System.Xml.XPath.XPathDocument" /> contenente il foglio di stile.</param>
        <summary>Compila il foglio di stile contenuto nell'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Questo metodo presenta il seguente comportamento:  
  
-   Un <xref:System.Xml.XmlUrlResolver> con nessun utente credenziali viene utilizzato per elaborare eventuali `xsl:import` o `xsl:include` elementi.  
  
-   Il `document()` è disattivata.  
  
-   Script incorporati non sono supportati.  
  
 È possibile utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> overload per specificare un <xref:System.Xml.XmlResolver> con le credenziali di autenticazione necessarie o per specificare diverse impostazioni XSLT.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un foglio di stile contenuto un <xref:System.Xml.XPath.XPathDocument> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheet" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo <c>execute</c> generato dal compilatore del foglio di stile compilato.</param>
        <param name="queryData">Matrice di byte delle strutture di dati serializzati nel campo <c>staticData</c> del foglio di stile compilato, generata dal metodo <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />.</param>
        <param name="earlyBoundTypes">Matrice di tipi memorizzata nel campo <c>ebTypes</c> generato dal compilatore del foglio di stile compilato.</param>
        <summary>Carica un metodo da un foglio di stile compilato utilizzando l'utilità <see langword="XSLTC.exe" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo accetta un foglio di stile compilato sotto forma di un <xref:System.Reflection.MethodInfo> oggetto, una matrice di byte e una matrice di tipo. <xref:System.Reflection.Emit.DynamicMethod> gli oggetti possono essere utilizzati per consentire di metodi del foglio di stile compilato eliminate quando il <xref:System.Xml.Xsl.XslCompiledTransform> oggetto venga recuperato.  
  
   
  
## Examples  
 L'esempio di codice seguente viene utilizzato il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> per caricare un foglio di stile compilato. La trasformazione riduce il valore di `Price` elemento del dieci percento.  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  L'assembly "Trasformazione" utilizzato in questo esempio è stato compilato utilizzando l'utilità xsltc.exe. Per informazioni dettagliate sull'utilizzo di questo strumento da riga di comando, vedere [procedura: eseguire una trasformazione XSLT utilizzando un Assembly](~/docs/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly.md).  
  
 Nell'esempio di codice viene utilizzata la trasformazione seguente:  
  
```  
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"  
  xmlns:msxsl="urn:schemas-microsoft-com:xslt"  
  xmlns:user="urn:my-scripts">  
  <msxsl:script language="C#" implements-prefix="user">  
    <![CDATA[  
  public double modifyPrice(double price){  
    price*=0.9;  
    return price;  
  }  
  ]]]><![CDATA[]>  
  </msxsl:script>  
  <xsl:template match="Root">  
    <Root xmlns="">  
      <Price><xsl:value-of select="user:modifyPrice(Price)"/></Price>  
    </Root>  
  </xsl:template>  
</xsl:stylesheet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">URI del foglio di stile.</param>
        <param name="settings">L'oggetto <see cref="T:System.Xml.Xsl.XsltSettings" /> da applicare al foglio di stile. Se il valore è <see langword="null" />, viene applicata l'impostazione <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> usato per risolvere l'URI del foglio di stile e i fogli di stile a cui si fa riferimento negli elementi XSLT <c>import</c> e <c>include</c>.</param>
        <summary>Carica e compila il foglio di stile XSLT specificato dall'URI. <see cref="T:System.Xml.XmlResolver" /> risolve eventuali elementi XSLT <c>import</c> o <c>include</c>, mentre le impostazioni XSLT determinano le autorizzazioni per il foglio di stile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il foglio di stile. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un foglio di stile che è archiviato in una risorsa di rete. Un oggetto <xref:System.Xml.XmlSecureResolver> specificherà le credenziali necessarie per accedere al foglio di stile.  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheetUri" /> o <paramref name="stylesheetResolver" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
        <exception cref="T:System.IO.FileNotFoundException">È impossibile trovare il foglio di stile.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore <paramref name="stylesheetUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="stylesheetUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="stylesheetUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del foglio di stile.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">L'oggetto <see cref="T:System.Xml.XmlReader" /> contenente il foglio di stile.</param>
        <param name="settings">L'oggetto <see cref="T:System.Xml.Xsl.XsltSettings" /> da applicare al foglio di stile. Se il valore è <see langword="null" />, viene applicata l'impostazione <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> usato per risolvere i fogli di stile a cui si fa riferimento negli elementi XSLT <c>import</c> e <c>include</c>. Se è <see langword="null" /> , le risorse esterne non verranno risolte.</param>
        <summary>Compila il foglio di stile XSLT contenuto nell'oggetto <see cref="T:System.Xml.XmlReader" />. <see cref="T:System.Xml.XmlResolver" /> risolve eventuali elementi XSLT <c>import</c> o <c>include</c>, mentre le impostazioni XSLT determinano le autorizzazioni per il foglio di stile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
 Il foglio di stile viene caricato dal nodo corrente del <xref:System.Xml.XmlReader> tramite i relativi elementi figlio. In questo modo è possibile utilizzare una parte di un documento come foglio di stile. Dopo il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo viene completato, il <xref:System.Xml.XmlReader> è posizionato sul nodo successivo dopo la fine del foglio di stile. Se viene raggiunta la fine del documento, l'oggetto <xref:System.Xml.XmlReader> viene posizionato alla fine del file (EOF).  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un foglio di stile e abilita il supporto per lo script con XSLT.  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheet" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un <see cref="T:System.Xml.XmlDocument" />) oppure un <see cref="T:System.Xml.XPath.XPathDocument" /> contenente il foglio di stile.</param>
        <param name="settings">L'oggetto <see cref="T:System.Xml.Xsl.XsltSettings" /> da applicare al foglio di stile. Se il valore è <see langword="null" />, viene applicata l'impostazione <see cref="P:System.Xml.Xsl.XsltSettings.Default" />.</param>
        <param name="stylesheetResolver">
          <see cref="T:System.Xml.XmlResolver" /> usato per risolvere i fogli di stile a cui si fa riferimento negli elementi XSLT <c>import</c> e <c>include</c>. Se è <see langword="null" /> , le risorse esterne non verranno risolte.</param>
        <summary>Compila il foglio di stile XSLT contenuto nell'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" />. <see cref="T:System.Xml.XmlResolver" /> risolve eventuali elementi XSLT <c>import</c> o <c>include</c>, mentre le impostazioni XSLT determinano le autorizzazioni per il foglio di stile.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Xml.Xsl.XslCompiledTransform> classe supporta la sintassi XSLT 1.0. Il foglio di stile XSLT deve utilizzare il `http://www.w3.org/1999/XSL/Transform` dello spazio dei nomi.  
  
   
  
## Examples  
 Nell'esempio seguente viene caricato un foglio di stile. Il <xref:System.Xml.XmlSecureResolver> oggetto contiene le credenziali necessarie per accedere a qualsiasi `import` o `include` elementi trovati nel foglio di stile.  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="stylesheet" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Il foglio di stile contiene un errore.</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.Xml.XmlWriterSettings" /> contenente le informazioni di output derivate dall'elemento <c>xsl:output</c> del foglio di stile.</summary>
        <value>Sola lettura <see cref="T:System.Xml.XmlWriterSettings" /> oggetto che contiene le informazioni di output è derivato dal <c>xsl: output</c> elemento del foglio di stile. Il valore può essere <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà viene popolata dopo una chiamata per il <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> metodo. Contiene informazioni derivate dal `xsl:output` elemento di un foglio di stile compilato. Questo <xref:System.Xml.XmlWriterSettings> oggetto può essere passato al <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> metodo per creare il <xref:System.Xml.XmlWriter> oggetto a cui si desidera restituire.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> proprietà per creare un <xref:System.Xml.XmlWriter> che scrive il testo sulla console.  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 Nell'esempio viene utilizzato il `books.xml` e `outputConsole.xsl` come input i file.  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> contenente i file temporanei generati sul disco dopo una chiamata al metodo <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />.</summary>
        <value>Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> contenente i file temporanei generati sul disco. Questo valore è <see langword="null" /> se la chiamata al metodo <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> ha dato esito negativo o se la funzione di debug non è attivata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà identifica i file che sono stati generati durante il XSLT l'elaborazione. I file vengono inseriti nella directory Temp (specificata dalla variabile di ambiente % TEMP %) è possibile eliminare questi file dopo l'elaborazione di XSLT è stata completata.  
  
   
  
## Examples  
 Nell'esempio seguente vengono scritti i nomi dei file temporanei nella console.  
  
> [!NOTE]
>  I file temporanei vengono creati solo quando il caricamento di stile fogli con \<msxsl: script > blocchi.  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esegue la trasformazione XSLT.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Esistono alcune differenze tra il foglio di stile XSLT compilato in modalità debug e il foglio di stile XSLT compilato in modalità di rilascio. In alcune situazioni i fogli di stile compilati in modalità debug non generano errori durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>, ma riporteranno errori successivamente durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Lo stesso foglio di stile compilato in modalità di rilascio avrà esito negativo durante l'operazione <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>. Un esempio di tale comportamento si ottiene quando una variabile che non è del tipo set di nodi viene assegnata a un'espressione in cui è richiesto un set di nodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento di input.</param>
        <param name="resultsFile">URI del file di output.</param>
        <summary>Esegue la trasformazione usando il documento di input specificato dall'URI e visualizza i risultati in un file.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa valore predefinito è <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere i documenti di input e outpui. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione e output in un file.  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 L'esempio utilizza i due file di input seguenti:  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> o <paramref name="resultsFile" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Impossibile trovare il documento di input.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore di <paramref name="inputUri" /> o <paramref name="resultsFile" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="inputUri" /> o <paramref name="resultsFile" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> o <paramref name="resultsFile" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del documento di input.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento di input.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'URI e visualizza i risultati in un oggetto <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa valore predefinito è <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato era incluso il `xsl:strip-space` elemento, è necessario utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e degli output in un <xref:System.Xml.XmlWriter> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore di <paramref name="inputUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="inputUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del documento di input.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il documento di input.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XmlReader" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione è attivata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
   
  
## Examples  
 Nell'esempio seguente consente di trasformare il primo libro nel file books.xml.  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un oggetto <see cref="T:System.Xml.XmlDocument" />) oppure un oggetto <see cref="T:System.Xml.XPath.XPathDocument" /> contenente i dati da trasformare.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione è attivata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato era incluso il `xsl:strip-space` elemento, è necessario utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e degli output in un <xref:System.Xml.XmlWriter> oggetto.  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Flusso in cui visualizzare il risultato.</param>
        <summary>Esegue la trasformazione usando il documento di input specificato dall'URI e visualizza i risultati in un flusso. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa valore predefinito è <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore di <paramref name="inputUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="inputUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del documento di input.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.IO.TextWriter" /> a cui si desidera restituire l'output.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'URI e visualizza i risultati in un oggetto <see cref="T:System.IO.TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa valore predefinito è <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e restituisce una stringa.  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore di <paramref name="inputUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="inputUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del documento di input.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">URI del documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'URI e visualizza i risultati in un oggetto <see cref="T:System.Xml.XmlWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa valore predefinito è <xref:System.Xml.XmlUrlResolver> senza credenziali utente per risolvere il documento di input e di tutte le istanze di XSLT `document()` funzione trovata nel foglio di stile. Se una di queste risorse si trovano su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Un <xref:System.Xml.XmlReader> predefinito delle impostazioni viene utilizzato per caricare il documento di input. L'elaborazione della DTD è disabilitata nel <xref:System.Xml.XmlReader>. Se è necessaria l'elaborazione della DTD, creare un <xref:System.Xml.XmlReader> questa funzionalità è abilitata e passarlo al <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzato un <xref:System.Xml.Xsl.XsltArgumentList> oggetto per creare un parametro che rappresenta la data e ora correnti.  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 L'esempio Usa i seguenti due file di dati come input.  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order.xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="inputUri" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">Il valore di <paramref name="inputtUri" /> include un nome file o una directory che non è possibile trovare.</exception>
        <exception cref="T:System.Net.WebException">Il valore di <paramref name="inputUri" /> non può essere risolto.  
  
 oppure  
  
 Si è verificato un errore durante l'elaborazione della richiesta.</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="inputUri" /> non è un URI valido.</exception>
        <exception cref="T:System.Xml.XmlException">Si è verificato un errore di analisi durante il caricamento del documento di input.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Flusso in cui visualizzare il risultato.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XmlReader" /> e visualizza i risultati in un flusso. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.IO.TextWriter" /> a cui si desidera restituire l'output.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XmlReader" /> e visualizza i risultati in un oggetto <see cref="T:System.IO.TextWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XmlReader" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il foglio di stile include una trasformazione XSLT `document()` funzione, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un oggetto <see cref="T:System.Xml.XmlDocument" />) oppure un oggetto <see cref="T:System.Xml.XPath.XPathDocument" /> contenente i dati da trasformare.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Flusso in cui visualizzare il risultato.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" /> e visualizza i risultati in un flusso. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione è attivata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato era incluso il `xsl:strip-space` elemento, è necessario utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene eseguita una trasformazione XSLT e degli output in un <xref:System.IO.FileStream>.  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un oggetto <see cref="T:System.Xml.XmlDocument" />) oppure un oggetto <see cref="T:System.Xml.XPath.XPathDocument" /> contenente i dati da trasformare.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.IO.TextWriter" /> a cui si desidera restituire l'output.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" /> e invia i risultati a un oggetto <see cref="T:System.IO.TextWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione è attivata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato era incluso il `xsl:strip-space` elemento, è necessario utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto che implementa l'interfaccia <see cref="T:System.Xml.XPath.IXPathNavigable" />. In Microsoft .NET Framework può essere un oggetto <see cref="T:System.Xml.XmlNode" /> (in genere un oggetto <see cref="T:System.Xml.XmlDocument" />) oppure un oggetto <see cref="T:System.Xml.XPath.XPathDocument" /> contenente i dati da trasformare.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti aggiuntivi in fase di esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il file XSLT `document()` funzione è attivata, viene risolto utilizzando un <xref:System.Xml.XmlUrlResolver> senza credenziali utente. Se la risorsa esterna si trova su una risorsa di rete che richiede l'autenticazione, utilizzare l'overload che accetta un <xref:System.Xml.XmlResolver> come uno degli argomenti e specificare un <xref:System.Xml.XmlResolver> con le credenziali necessarie.  
  
 Questo metodo non supporta il `xsl:strip-space` elemento. Se nel foglio di stile compilato era incluso il `xsl:strip-space` elemento, è necessario utilizzare il <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> overload che accetta un <xref:System.Xml.XmlReader> come argomento di input.  
  
 L'interfaccia <xref:System.Xml.XPath.IXPathNavigable> è implementata nelle classi <xref:System.Xml.XmlNode> e <xref:System.Xml.XPath.XPathDocument>. Queste classi rappresentano una cache di dati XML in memoria.  
  
-   La classe <xref:System.Xml.XmlNode> è basata sul modello DOM (Document Object Model) W3C e include funzionalità di modifica.  
  
-   La classe <xref:System.Xml.XPath.XPathDocument> è un archivio dati di sola lettura basato sul modello dati XPath. Si consiglia di usare la classe <xref:System.Xml.XPath.XPathDocument> per l'elaborazione di XSLT, in quanto fornisce prestazioni più veloci rispetto alla classe <xref:System.Xml.XmlNode>.  
  
 Le trasformazioni si applicano all'intero documento. In altre parole, se viene passato un nodo diverso dal nodo radice del documento, il processo di trasformazione accederà comunque a tutti i nodi nel documento caricato. Per trasformare un frammento di nodo, è necessario creare un oggetto contenente solo il frammento di nodo e passare tale oggetto al metodo <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>. Per altre informazioni, vedere [Procedura: trasformare un frammento di nodo](~/docs/standard/data/xml/how-to-transform-a-node-fragment.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Oggetto <see cref="T:System.Xml.XmlReader" /> contenente il documento di input.</param>
        <param name="arguments">
          <see cref="T:System.Xml.Xsl.XsltArgumentList" /> contenente gli argomenti qualificati come spazi dei nomi utilizzati come input della trasformazione. Il valore può essere <see langword="null" />.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <c>xsl:output</c> è consigliabile creare <see cref="T:System.Xml.XmlWriter" /> usando l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <param name="documentResolver">
          <see cref="T:System.Xml.XmlResolver" /> usato per risolvere la funzione XSLT <c>document()</c>. Se il valore è <see langword="null" />, la funzione <c>document()</c> non viene risolta.</param>
        <summary>Esegue la trasformazione utilizzando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XmlReader" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />. <see cref="T:System.Xml.Xsl.XsltArgumentList" /> offre argomenti di runtime aggiuntivi, mentre XmlResolver risolve la funzione XSLT <c>document()</c>.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene utilizzato un <xref:System.Xml.XmlSecureResolver> per risolvere il XSLT `document()` (funzione).  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore di <paramref name="input" /> o <paramref name="results" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">Si è verificato un errore durante l'esecuzione della trasformazione XSLT.</exception>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">Documento da trasformare specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" />.</param>
        <param name="arguments">Elenco di argomenti come <see cref="T:System.Xml.Xsl.XsltArgumentList" />.</param>
        <param name="results">Oggetto <see cref="T:System.Xml.XmlWriter" /> a cui si desidera restituire l'output.  
  
 Se il foglio di stile contiene un elemento <see langword="xsl:output" />, è consigliabile creare l'oggetto <see cref="T:System.Xml.XmlWriter" /> tramite l'oggetto <see cref="T:System.Xml.XmlWriterSettings" /> restituito dalla proprietà <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />. In questo modo viene assicurato che le impostazioni di output dell'oggetto <see cref="T:System.Xml.XmlWriter" /> siano corrette.</param>
        <param name="documentResolver">Oggetto <see cref="T:System.Xml.XmlResolver" /> usato per la risoluzione della funzione XSLT <see langword="document()" />. Se il valore è <see langword="null" />, la funzione <see langword="document()" /> non viene risolta.</param>
        <summary>Esegue la trasformazione usando il documento di input specificato dall'oggetto <see cref="T:System.Xml.XPath.IXPathNavigable" /> e invia i risultati a un oggetto <see cref="T:System.Xml.XmlWriter" />. L'oggetto <see cref="T:System.Xml.Xsl.XsltArgumentList" /> fornisce argomenti di runtime aggiuntivi, mentre l'oggetto <see cref="T:System.Xml.XmlResolver" /> risolve la funzione XSLT <see langword="document()" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>