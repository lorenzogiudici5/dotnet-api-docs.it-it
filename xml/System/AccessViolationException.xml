<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f2c5b22f8890147e2de69b0e46b825c97c1ecbf4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434085" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <TypeSignature Language="F#" Value="type AccessViolationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eccezione generata quando viene eseguito un tentativo di leggere o scrivere nella memoria protetta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando il codice tenta di leggere o scrivere nella memoria che non è stata allocata, a cui si dispone o meno l'accesso, si verifica una violazione di accesso nel codice non gestito o unsafe. Ciò si verifica in genere perché il valore non valido è un puntatore. Poiché non tutte le operazioni di lettura o scrittura tramite puntatori non validi generano violazioni di accesso, quando si verifica una violazione di accesso in genere significa che sono state eseguite numerose operazioni di lettura o scrittura tramite puntatori non validi e che la memoria potrebbe essere danneggiata. Di conseguenza, le violazioni di accesso quasi sempre indicano errori gravi di programmazione. Un <xref:System.AccessViolationException> identifica chiaramente tali errori gravi.  
  
 In programmi costituite interamente da codice gestito verificabile, tutti i riferimenti sono è valido o è null e le violazioni di accesso sono impossibili. Qualsiasi operazione che tenta di utilizzare un riferimento null in codice verificabile genera un'eccezione un <xref:System.NullReferenceException> (eccezione). Un <xref:System.AccessViolationException> si verifica solo quando verificabile codice gestito interagisce con codice non gestito o con codice gestito unsafe.  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a>Risoluzione dei problemi relativi a eccezioni AccessViolationException  
 Un <xref:System.AccessViolationException> eccezione può verificarsi solo in codice gestito unsafe o quando gestito verificabile codice interagisce con codice non gestito:  
  
-   Una violazione di accesso che si verifica in codice gestito unsafe può essere espressa come un <xref:System.NullReferenceException> eccezione o un <xref:System.AccessViolationException> eccezione, a seconda della piattaforma.  
  
-   Viene sempre eseguito il wrapping di una violazione di accesso nel codice non gestito che viene propagato fino a codice gestito un <xref:System.AccessViolationException> (eccezione).  
  
 In entrambi i casi, è possibile identificare e correggere la causa dei <xref:System.AccessViolationException> eccezione come indicato di seguito:  
  
 Assicurarsi che la memoria a cui si sta tentando di accedere sia stata allocata.  
 Un <xref:System.AccessViolationException> viene sempre generata dal tentativo di accedere alla memoria protetta, vale a dire, per accedere alla memoria non allocata o che non appartiene a un processo.  
  
 La gestione automatica della memoria è uno dei servizi forniti da Common Language Runtime. Se il codice gestito fornisce la stessa funzionalità come il codice unmanagede, si consiglia di spostare il codice gestito per poter sfruttare questa funzionalità. Per altre informazioni, vedere [la gestione automatica della memoria](~/docs/standard/automatic-memory-management.md).  
  
 Assicurarsi che la memoria a cui si sta tentando di accedere non sia danneggiata.  
 Se sono state eseguite numerose operazioni di lettura o scrittura tramite puntatori non validi, è possibile che la memoria sia danneggiata. Ciò si verifica in genere durante la lettura o scrittura agli indirizzi di fuori di un buffer predefinito.  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a>Blocchi try/catch e AccessViolationException  
 A partire da [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], le eccezioni <xref:System.AccessViolationException> generate da Common Language Runtime non vengono gestite dall'istruzione `catch` in un gestore di eccezioni strutturato se l'eccezione si verifica all'esterno della memoria riservata da Common Language Runtime. Per gestire tale eccezione <xref:System.AccessViolationException>, è necessario applicare l'attributo <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> al metodo in cui viene generata l'eccezione. Questa modifica non influisce sulle eccezioni <xref:System.AccessViolationException> generate dal codice utente, che possono continuare a essere rilevate da un'istruzione `catch`. Per il codice scritto per le versioni precedenti di .NET Framework che si desidera ricompilare ed eseguite senza modifiche sul [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], è possibile aggiungere il [ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) elemento per il file di configurazione dell'app. Si noti che è possibile ricevere la notifica delle eccezioni se è stato definito un gestore per l'evento <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> o <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>.  
  
## <a name="version-information"></a>Informazioni sulla versione  
 Questa eccezione viene generata in .NET Framework 2.0 e nelle versioni successive. Nelle versioni precedenti di .NET Framework, una violazione di accesso in codice non gestito o codice gestito unsafe è rappresentata da un <xref:System.NullReferenceException> nel codice gestito. Oggetto <xref:System.NullReferenceException> viene inoltre generata quando viene dereferenziato un riferimento null nel codice gestito verificabile, un'occorrenza che non implica un danneggiamento dei dati, e non è possibile distinguere tra le due situazioni nelle versioni 1.0 o 1.1.  
  
 Gli amministratori possono consentire applicazioni selezionate ripristinare il comportamento di .NET Framework versione 1.1. Inserire la riga seguente nel [ &lt;runtime&gt; elemento](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sezione del file di configurazione per l'applicazione:  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.AccessViolationException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.AccessViolationException" /> con un messaggio fornito dal sistema in cui viene descritto l'errore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Exception.Message%2A> proprietà della nuova istanza di un messaggio fornito dal sistema che descrive l'errore, ad esempio "tentativo di lettura o scrittura memoria protetta. Ciò è spesso un'indicazione che altri memoria sia danneggiata." Questo messaggio prende in considerazione le impostazioni cultura correnti del sistema.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.AccessViolationException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore localizzato.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string -&gt; AccessViolationException" Usage="new System.AccessViolationException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio in cui viene descritta l'eccezione. Il chiamante del costruttore deve garantire che la stringa sia stata localizzata in base alle impostazioni cultura correnti del sistema.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.AccessViolationException" /> con un messaggio specificato in cui viene descritto l'errore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.AccessViolationException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore specificata in `message`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; AccessViolationException" Usage="new System.AccessViolationException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> contenente i dati serializzati dell'oggetto.</param>
        <param name="context">Oggetto <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenente le informazioni contestuali sull'origine o sulla destinazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.AccessViolationException" /> con dati serializzati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene chiamato durante la deserializzazione per ricostituire l'oggetto eccezione trasmesso su un flusso. Per altre informazioni, vedere [serializzazione XML e SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new AccessViolationException : string * Exception -&gt; AccessViolationException" Usage="new System.AccessViolationException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio in cui viene descritta l'eccezione. Il chiamante del costruttore deve garantire che la stringa sia stata localizzata in base alle impostazioni cultura correnti del sistema.</param>
        <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <c>innerException</c> non è <see langword="null" />, l'eccezione corrente viene generata in un blocco <see langword="catch" /> in cui viene gestita l'eccezione interna.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.AccessViolationException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'eccezione generata come risultato diretto di un'eccezione precedente deve includere un riferimento all'eccezione precedente nella proprietà <xref:System.Exception.InnerException%2A>. La proprietà <xref:System.Exception.InnerException%2A> restituisce lo stesso valore passato al costruttore oppure `null` nel caso in cui la proprietà <xref:System.Exception.InnerException%2A> non fornisca il valore di eccezione interna al costruttore.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.AccessViolationException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore specificata in `message`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>