<Type Name="IntPtr" FullName="System.IntPtr">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="df5d0ae13ac80015fa71c5942b512ea837149e9a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430928" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct IntPtr : System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit native int extends System.ValueType implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.IntPtr" />
  <TypeSignature Language="VB.NET" Value="Public Structure IntPtr&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class IntPtr : System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type nativeint = struct&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="fa309-101">Tipo specifico per la piattaforma usato per rappresentare un puntatore o un handle.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa309-101">A platform-specific type that is used to represent a pointer or a handle.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-102">Il <xref:System.IntPtr> tipo è progettato per essere un numero intero la cui dimensione è specifica della piattaforma.</span><span class="sxs-lookup"><span data-stu-id="fa309-102">The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific.</span></span> <span data-ttu-id="fa309-103">Vale a dire, un'istanza di questo tipo che dovrà essere 32-bit nei sistemi operativi e hardware a 32 bit e 64 bit nei sistemi operativi e hardware a 64 bit.</span><span class="sxs-lookup"><span data-stu-id="fa309-103">That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.</span></span>  
  
 <span data-ttu-id="fa309-104">Il <xref:System.IntPtr> tipo può essere utilizzato dai linguaggi che supportano i puntatori e come un modo comune di fare riferimento ai dati tra i linguaggi che supporta i puntatori.</span><span class="sxs-lookup"><span data-stu-id="fa309-104">The <xref:System.IntPtr> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.</span></span>  
  
 <span data-ttu-id="fa309-105"><xref:System.IntPtr> gli oggetti anche utilizzabile per contenere gli handle.</span><span class="sxs-lookup"><span data-stu-id="fa309-105"><xref:System.IntPtr> objects can also be used to hold handles.</span></span> <span data-ttu-id="fa309-106">Ad esempio, le istanze di <xref:System.IntPtr> vengono spesso utilizzate nella <xref:System.IO.FileStream?displayProperty=nameWithType> classe per contenere gli handle di file.</span><span class="sxs-lookup"><span data-stu-id="fa309-106">For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=nameWithType> class to hold file handles.</span></span>  
  
 <span data-ttu-id="fa309-107">Il <xref:System.IntPtr> il tipo è conforme a CLS, mentre il <xref:System.UIntPtr> non di tipo.</span><span class="sxs-lookup"><span data-stu-id="fa309-107">The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not.</span></span> <span data-ttu-id="fa309-108">Solo il <xref:System.IntPtr> tipo viene usato in common language runtime.</span><span class="sxs-lookup"><span data-stu-id="fa309-108">Only the <xref:System.IntPtr> type is used in the common language runtime.</span></span> <span data-ttu-id="fa309-109">Il <xref:System.UIntPtr> tipo di viene fornito principalmente per mantenere la simmetria di architettura con il <xref:System.IntPtr> tipo.</span><span class="sxs-lookup"><span data-stu-id="fa309-109">The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type.</span></span>  
  
 <span data-ttu-id="fa309-110">Questo tipo implementa la <xref:System.Runtime.Serialization.ISerializable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="fa309-110">This type implements the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa309-111">L'esempio seguente usa i puntatori gestiti per invertire i caratteri in una matrice.</span><span class="sxs-lookup"><span data-stu-id="fa309-111">The following example uses managed pointers to reverse the characters in an array.</span></span> <span data-ttu-id="fa309-112">Dopo che inizializzato un <xref:System.String> dell'oggetto e ottiene la lunghezza, esegue le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="fa309-112">After it initializes a <xref:System.String> object and gets its length, it does the following:</span></span>  
  
1.  <span data-ttu-id="fa309-113">Chiamate di <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> metodo per copiare la stringa Unicode in memoria non gestita come carattere ANSI (un byte).</span><span class="sxs-lookup"><span data-stu-id="fa309-113">Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> method to copy the Unicode string to unmanaged memory as an ANSI (one-byte) character.</span></span> <span data-ttu-id="fa309-114">Il metodo restituisce un <xref:System.IntPtr> oggetto che punta all'inizio della stringa non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-114">The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged string.</span></span> <span data-ttu-id="fa309-115">Nell'esempio di Visual Basic utilizza l'indicatore di misura direttamente. Negli esempi in c# e C++, ne viene eseguito il cast a un puntatore a un byte.</span><span class="sxs-lookup"><span data-stu-id="fa309-115">The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</span></span>  
  
2.  <span data-ttu-id="fa309-116">Chiamate di <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType> metodo per allocare lo stesso numero di byte come occupa la stringa non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-116">Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType> method to allocate the same number of bytes as the unmanaged string occupies.</span></span> <span data-ttu-id="fa309-117">Il metodo restituisce un <xref:System.IntPtr> oggetto che punta all'inizio del blocco di memoria non gestito.</span><span class="sxs-lookup"><span data-stu-id="fa309-117">The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged block of memory.</span></span> <span data-ttu-id="fa309-118">Nell'esempio di Visual Basic utilizza l'indicatore di misura direttamente. Negli esempi in c# e C++, ne viene eseguito il cast a un puntatore a un byte.</span><span class="sxs-lookup"><span data-stu-id="fa309-118">The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</span></span>  
  
3.  <span data-ttu-id="fa309-119">Nell'esempio di Visual Basic definisce una variabile denominata `offset` che è uguale alla lunghezza della stringa ANSI.</span><span class="sxs-lookup"><span data-stu-id="fa309-119">The Visual Basic example defines a variable named `offset` that is equal to the length of the ANSI string.</span></span> <span data-ttu-id="fa309-120">E viene utilizzato per determinare l'offset nella memoria non gestita a cui viene copiata la carta successiva nella stringa ANSI.</span><span class="sxs-lookup"><span data-stu-id="fa309-120">It is used to determine the offset into unmanaged memory to which the next charter in the ANSI string is copied.</span></span> <span data-ttu-id="fa309-121">Poiché il valore iniziale è la lunghezza della stringa, l'operazione di copia copierà un carattere dall'inizio della stringa alla fine del blocco di memoria.</span><span class="sxs-lookup"><span data-stu-id="fa309-121">Because its starting value is the length of the string, the copy operation will copy a character from the start of the string to the end of the memory block.</span></span>  
  
     <span data-ttu-id="fa309-122">La chiamata di esempi in c# e C++ il <xref:System.IntPtr.ToPointer%2A> metodo per ottenere un puntatore non gestito per l'indirizzo iniziale della stringa e il blocco di memoria, non gestito e aggiungere uno minore della lunghezza della stringa all'indirizzo iniziale della stringa ANSI.</span><span class="sxs-lookup"><span data-stu-id="fa309-122">The C# and C++ examples call the <xref:System.IntPtr.ToPointer%2A> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and they add one less than the length of the string to the starting address of the ANSI string.</span></span> <span data-ttu-id="fa309-123">Poiché il puntatore di stringa non gestita ora punta alla fine della stringa, l'operazione di copia copierà un carattere dalla fine della stringa all'inizio del blocco di memoria.</span><span class="sxs-lookup"><span data-stu-id="fa309-123">Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</span></span>  
  
4.  <span data-ttu-id="fa309-124">Utilizza un ciclo per copiare ogni carattere della stringa per il blocco di memoria non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-124">Uses a loop to copy each character from the string to the unmanaged block of memory.</span></span>  
  
     <span data-ttu-id="fa309-125">Nell'esempio Visual Basic viene chiamato il <xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType> metodo per leggere il byte (o un carattere a un byte) da un offset specificato dal puntatore gestito per la stringa ANSI.</span><span class="sxs-lookup"><span data-stu-id="fa309-125">The Visual Basic example calls the <xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType> method to read the byte (or one-byte character) at a specified offset from the managed pointer to the ANSI string.</span></span> <span data-ttu-id="fa309-126">L'offset viene incrementato a ogni iterazione del ciclo.</span><span class="sxs-lookup"><span data-stu-id="fa309-126">The offset is incremented with each iteration of the loop.</span></span> <span data-ttu-id="fa309-127">Chiama quindi il <xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType> metodo per scrivere i byte all'indirizzo di memoria definito dall'indirizzo iniziale del blocco di memoria più gestito `offset`.</span><span class="sxs-lookup"><span data-stu-id="fa309-127">It then calls the <xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType> method to write the byte to the memory address defined by the starting address of the unmanaged block of memory plus `offset`.</span></span> <span data-ttu-id="fa309-128">Viene quindi decrementa `offset`.</span><span class="sxs-lookup"><span data-stu-id="fa309-128">It then decrements `offset`.</span></span>  
  
     <span data-ttu-id="fa309-129">Esempi di C++ e c# eseguono l'operazione di copia, quindi decrementano il puntatore all'indirizzo di posizione successiva nella stringa ANSI non gestita e incrementano il puntatore al successivo indirizzo nel blocco non gestito.</span><span class="sxs-lookup"><span data-stu-id="fa309-129">The C# and C++ examples perform the copy operation, then decrement the pointer to the address of the next location in the unmanaged ANSI string and increment the pointer to the next address in the unmanaged block.</span></span>  
  
5.  <span data-ttu-id="fa309-130">Tutti gli esempi di chiamare il <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType> per convertire il blocco di memoria non gestita che contiene la stringa copiata ANSI a Unicode gestito <xref:System.String> oggetto.</span><span class="sxs-lookup"><span data-stu-id="fa309-130">All examples call the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.</span></span>  
  
6.  <span data-ttu-id="fa309-131">Dopo aver visualizzato le stringhe originali e invertite, chiamare tutti gli esempi di <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> metodo per liberare la memoria allocata per la stringa ANSI non gestita e il blocco di memoria non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-131">After displaying the original and reversed strings, all examples call the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</span></span>  
  
 [!code-cpp[System.IntPtr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.intptr/cpp/topointer.cpp#1)]
 [!code-csharp[System.IntPtr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr/cs/topointer.cs#1)]
 [!code-vb[System.IntPtr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr/vb/topointer.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="fa309-132">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="fa309-132">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.UIntPtr" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa309-133">Inizializza una nuova istanza di <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-133">Initializes a new instance of <see cref="T:System.IntPtr" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntPtr (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr(int value);" />
      <MemberSignature Language="F#" Value="new nativeint : int -&gt; nativeint" Usage="new System.nativeint value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-134">Puntatore o handle contenuto in un intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-134">A pointer or handle contained in a 32-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-135">Inizializza una nuova istanza di <see cref="T:System.IntPtr" /> usando il puntatore o handle a 32 bit specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-135">Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 32-bit pointer or handle.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntPtr (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr(long value);" />
      <MemberSignature Language="F#" Value="new nativeint : int64 -&gt; nativeint" Usage="new System.nativeint value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-136">Puntatore o handle contenuto in un intero con segno a 64 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-136">A pointer or handle contained in a 64-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-137">Inizializza una nuova istanza di <see cref="T:System.IntPtr" /> usando il puntatore a 64 bit specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-137">Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified 64-bit pointer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-138">Un'eccezione viene generata solo se il valore di `value` richiede più bit di quanti sono supportati sulla piattaforma corrente.</span><span class="sxs-lookup"><span data-stu-id="fa309-138">An exception is only thrown if the value of `value` requires more bits than the current platform supports.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa309-139">Su una piattaforma a 32 bit <paramref name="value" /> è troppo grande o troppo piccolo per essere rappresentato come <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-139">On a 32-bit platform, <paramref name="value" /> is too large or too small to represent as an <see cref="T:System.IntPtr" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntPtr (void* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.#ctor(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr(void* value);" />
      <MemberSignature Language="F#" Value="new nativeint : nativeptr&lt;unit&gt; -&gt; nativeint" Usage="new System.nativeint value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Void*" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-140">Puntatore a un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-140">A pointer to an unspecified type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-141">Inizializza una nuova istanza di <see cref="T:System.IntPtr" /> usando il puntatore specificato a un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-141">Initializes a new instance of <see cref="T:System.IntPtr" /> using the specified pointer to an unspecified type.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fa309-142">richiede attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-142">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fa309-143">L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-143">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Void" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static IntPtr Add (IntPtr pointer, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Add(native int pointer, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.Add(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (pointer As IntPtr, offset As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Add(IntPtr pointer, int offset);" />
      <MemberSignature Language="F#" Value="static member Add : nativeint * int -&gt; nativeint" Usage="System.nativeint.Add (pointer, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="fa309-144">Puntatore a cui aggiungere l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-144">The pointer to add the offset to.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="fa309-145">Offset da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-145">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-146">Aggiunge un offset al valore di un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-146">Adds an offset to the value of a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-147">Nuovo puntatore che riflette l'aggiunta di <paramref name="offset" /> a <paramref name="pointer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-147">A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-148">Il <xref:System.IntPtr.Add%2A> metodo non genera un'eccezione se il risultato è troppo grande per essere rappresentato come un puntatore nella piattaforma specificata.</span><span class="sxs-lookup"><span data-stu-id="fa309-148">The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform.</span></span> <span data-ttu-id="fa309-149">Al contrario, l'operazione di addizione viene eseguita in un contesto non verificato.</span><span class="sxs-lookup"><span data-stu-id="fa309-149">Instead, the addition operation is performed in an unchecked context.</span></span>  
  
 <span data-ttu-id="fa309-150">Linguaggi che non supportano l'overload degli operatori o gli operatori personalizzati possono utilizzare questo metodo per aggiungere un offset al valore di un puntatore.</span><span class="sxs-lookup"><span data-stu-id="fa309-150">Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa309-151">Nell'esempio seguente crea un <xref:System.IntPtr> oggetto che punta all'inizio di una matrice di 10 elementi e quindi chiama il <xref:System.IntPtr.Add%2A> metodo per scorrere gli elementi nella matrice.</span><span class="sxs-lookup"><span data-stu-id="fa309-151">The following example instantiates an <xref:System.IntPtr> object that points to the beginning of a ten-element array, and then calls the <xref:System.IntPtr.Add%2A> method to iterate the elements in the array.</span></span>  
  
 [!code-csharp[System.IntPtr.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.add/cs/add1.cs#1)]
 [!code-vb[System.IntPtr.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="nativeint.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="fa309-152">Oggetto da confrontare con questa istanza o <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-152">An object to compare with this instance or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-153">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-153">Returns a value indicating whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-154">
            <see langword="true" /> se <paramref name="obj" /> è un'istanza di <see cref="T:System.IntPtr" /> ed è uguale al valore dell'istanza; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-154">
              <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.IntPtr" /> and equals the value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="nativeint.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa309-155">Restituisce il codice hash per l'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-155">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-156">Codice hash di un intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-156">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static IntPtr operator + (IntPtr pointer, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Addition(native int pointer, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (pointer As IntPtr, offset As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr operator +(IntPtr pointer, int offset);" />
      <MemberSignature Language="F#" Value="static member ( + ) : nativeint * int -&gt; nativeint" Usage="pointer + offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="fa309-157">Puntatore a cui aggiungere l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-157">The pointer to add the offset to.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="fa309-158">Offset da aggiungere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-158">The offset to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-159">Aggiunge un offset al valore di un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-159">Adds an offset to the value of a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-160">Nuovo puntatore che riflette l'aggiunta di <paramref name="offset" /> a <paramref name="pointer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-160">A new pointer that reflects the addition of <paramref name="offset" /> to <paramref name="pointer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-161">Il <xref:System.IntPtr.op_Addition%2A> metodo consente di definire l'operazione di addizione per <xref:System.IntPtr> oggetti.</span><span class="sxs-lookup"><span data-stu-id="fa309-161">The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects.</span></span> <span data-ttu-id="fa309-162">Permette inoltre il codice seguente.</span><span class="sxs-lookup"><span data-stu-id="fa309-162">It enables code such as the following.</span></span>  
  
 [!code-csharp[System.IntPtr.op_Addition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/addition1.cs#1)]
 [!code-vb[System.IntPtr.op_Addition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/addition1.vb#1)]  
  
 <span data-ttu-id="fa309-163">Linguaggi che non supportano gli operatori personalizzati possono chiamare il <xref:System.IntPtr.Add%2A> metodo invece.</span><span class="sxs-lookup"><span data-stu-id="fa309-163">Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead.</span></span>  
  
 <span data-ttu-id="fa309-164">L'operazione di addizione non genera un'eccezione se il risultato è troppo grande per essere rappresentato come un puntatore nella piattaforma specificata.</span><span class="sxs-lookup"><span data-stu-id="fa309-164">The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform.</span></span> <span data-ttu-id="fa309-165">Al contrario, viene eseguito in un contesto non verificato.</span><span class="sxs-lookup"><span data-stu-id="fa309-165">Instead, it is performed in an unchecked context.</span></span>  
  
 <span data-ttu-id="fa309-166">Il metodo equivalente per l'operatore è <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fa309-166">The equivalent method for this operator is <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.IntPtr.Add(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (IntPtr value1, IntPtr value2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(native int value1, native int value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (value1 As IntPtr, value2 As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(IntPtr value1, IntPtr value2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : nativeint * nativeint -&gt; bool" Usage="value1 = value2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.IntPtr" />
        <Parameter Name="value2" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value1">
          <span data-ttu-id="fa309-167">Primo puntatore o handle da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-167">The first pointer or handle to compare.</span>
          </span>
        </param>
        <param name="value2">
          <span data-ttu-id="fa309-168">Secondo puntatore o handle da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-168">The second pointer or handle to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-169">Determina se due istanze specificate dell'oggetto <see cref="T:System.IntPtr" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-169">Determines whether two specified instances of <see cref="T:System.IntPtr" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-170">
            <see langword="true" /> se <paramref name="value1" /> è uguale a <paramref name="value2" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-170">
              <see langword="true" /> if <paramref name="value1" /> equals <paramref name="value2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="fa309-171">Il metodo equivalente per l'operatore è <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fa309-171">The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa309-172">Converte un tipo di dati specificato in un valore <see cref="T:System.IntPtr" /> o un valore <see cref="T:System.IntPtr" /> in un tipo di dati specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-172">Converts a specified data type to an <see cref="T:System.IntPtr" /> value, or an <see cref="T:System.IntPtr" /> value to a specified data type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator IntPtr (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Explicit(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator IntPtr(int value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : int -&gt; nativeint" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-173">Intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-173">A 32-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-174">Converte il valore di un intero con segno a 32 bit in un tipo <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-174">Converts the value of a 32-bit signed integer to an <see cref="T:System.IntPtr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-175">Nuova istanza di <see cref="T:System.IntPtr" /> inizializzata per <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-175">A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks></remarks>
        <altmember cref="Overload:System.IntPtr.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator IntPtr (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Explicit(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As Long) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator IntPtr(long value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : int64 -&gt; nativeint" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-176">Intero con segno a 64 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-176">A 64-bit signed integer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-177">Converte il valore di un intero con segno a 64 bit in un tipo <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-177">Converts the value of a 64-bit signed integer to an <see cref="T:System.IntPtr" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-178">Nuova istanza di <see cref="T:System.IntPtr" /> inizializzata per <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-178">A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks></remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa309-179">Su una piattaforma a 32 bit, <paramref name="value" /> è troppo grande per rappresentare un tipo <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-179">On a 32-bit platform, <paramref name="value" /> is too large to represent as an <see cref="T:System.IntPtr" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.IntPtr.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator int (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int32 op_Explicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As IntPtr) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator int(IntPtr value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : nativeint -&gt; int" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-180">Puntatore o handle da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-180">The pointer or handle to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-181">Converte il valore dell'oggetto <see cref="T:System.IntPtr" /> specificato in un intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-181">Converts the value of the specified <see cref="T:System.IntPtr" /> to a 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-182">Contenuto di <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-182">The contents of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-183">Un'eccezione viene generata solo se il valore di `value` richiede più bit di quanti sono supportati sulla piattaforma corrente.</span><span class="sxs-lookup"><span data-stu-id="fa309-183">An exception is only thrown if the value of `value` requires more bits than the current platform supports.</span></span>
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa309-184">Su una piattaforma a 64 bit il valore di <paramref name="value" /> è troppo grande per essere rappresentato come intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-184">On a 64-bit platform, the value of <paramref name="value" /> is too large to represent as a 32-bit signed integer.</span>
          </span>
        </exception>
        <altmember cref="M:System.IntPtr.ToInt32" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator long (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname int64 op_Explicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (value As IntPtr) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator long(IntPtr value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : nativeint -&gt; int64" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-185">Puntatore o handle da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-185">The pointer or handle to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-186">Converte il valore dell'oggetto <see cref="T:System.IntPtr" /> specificato in un intero con segno a 64 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-186">Converts the value of the specified <see cref="T:System.IntPtr" /> to a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-187">Contenuto di <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-187">The contents of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks></remarks>
        <altmember cref="M:System.IntPtr.ToInt64" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator void* (IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname void* op_Explicit(native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator void*(IntPtr value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : nativeint -&gt; nativeptr&lt;unit&gt;" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-188">Puntatore o handle da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-188">The pointer or handle to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-189">Converte il valore dell'oggetto <see cref="T:System.IntPtr" /> specificato in un puntatore a un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-189">Converts the value of the specified <see cref="T:System.IntPtr" /> to a pointer to an unspecified type.</span>
          </span>
          <span data-ttu-id="fa309-190">Questa API non è conforme a CLS.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-190">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-191">Contenuto di <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-191">The contents of <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks></remarks>
        <altmember cref="M:System.IntPtr.ToPointer" />
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator IntPtr (void* value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Explicit(void* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator IntPtr(void* value);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : nativeptr&lt;unit&gt; -&gt; nativeint" Usage="System.nativeint.op_Explicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Void*" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="fa309-192">Puntatore a un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-192">A pointer to an unspecified type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-193">Converte il puntatore specificato per un tipo non specificato in un oggetto <see cref="T:System.IntPtr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-193">Converts the specified pointer to an unspecified type to an <see cref="T:System.IntPtr" />.</span>
          </span>
          <span data-ttu-id="fa309-194">Questa API non è conforme a CLS.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-194">This API is not CLS-compliant.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-195">Nuova istanza di <see cref="T:System.IntPtr" /> inizializzata per <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-195">A new instance of <see cref="T:System.IntPtr" /> initialized to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks></remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fa309-196">richiede attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-196">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fa309-197">L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-197">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="Overload:System.IntPtr.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (IntPtr value1, IntPtr value2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(native int value1, native int value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (value1 As IntPtr, value2 As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(IntPtr value1, IntPtr value2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : nativeint * nativeint -&gt; bool" Usage="System.nativeint.op_Inequality (value1, value2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.IntPtr" />
        <Parameter Name="value2" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="value1">
          <span data-ttu-id="fa309-198">Primo puntatore o handle da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-198">The first pointer or handle to compare.</span>
          </span>
        </param>
        <param name="value2">
          <span data-ttu-id="fa309-199">Secondo puntatore o handle da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-199">The second pointer or handle to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-200">Determina se due istanze specificate dell'oggetto <see cref="T:System.IntPtr" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-200">Determines whether two specified instances of <see cref="T:System.IntPtr" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-201">
            <see langword="true" /> se <paramref name="value1" /> non è uguale a <paramref name="value2" />, in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-201">
              <see langword="true" /> if <paramref name="value1" /> does not equal <paramref name="value2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="fa309-202">Il metodo equivalente per l'operatore è <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fa309-202">The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static IntPtr operator - (IntPtr pointer, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname native int op_Subtraction(native int pointer, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (pointer As IntPtr, offset As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr operator -(IntPtr pointer, int offset);" />
      <MemberSignature Language="F#" Value="static member ( - ) : nativeint * int -&gt; nativeint" Usage="pointer - offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="fa309-203">Puntatore da cui sottrarre l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-203">The pointer to subtract the offset from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="fa309-204">Offset da sottrarre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-204">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-205">Sottrae un offset dal valore di un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-205">Subtracts an offset from the value of a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-206">Nuovo puntatore che riflette la sottrazione di <paramref name="offset" /> da <paramref name="pointer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-206">A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-207">Il <xref:System.IntPtr.op_Subtraction%2A> metodo consente di definire l'operazione di sottrazione per <xref:System.IntPtr> oggetti.</span><span class="sxs-lookup"><span data-stu-id="fa309-207">The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects.</span></span> <span data-ttu-id="fa309-208">Permette inoltre il codice seguente.</span><span class="sxs-lookup"><span data-stu-id="fa309-208">It enables code such as the following.</span></span>  
  
 [!code-csharp[System.IntPtr.op_Addition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/op_subtraction1.cs#2)]
 [!code-vb[System.IntPtr.op_Addition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/op_subtraction1.vb#2)]  
  
 <span data-ttu-id="fa309-209">Linguaggi che non supportano gli operatori personalizzati possono chiamare il <xref:System.IntPtr.Subtract%2A> metodo invece.</span><span class="sxs-lookup"><span data-stu-id="fa309-209">Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead.</span></span>  
  
 <span data-ttu-id="fa309-210">L'operazione di sottrazione non genera un'eccezione se il risultato è troppo piccolo per essere rappresentato come un puntatore nella piattaforma specificata.</span><span class="sxs-lookup"><span data-stu-id="fa309-210">The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform.</span></span> <span data-ttu-id="fa309-211">Al contrario, viene eseguito in un contesto non verificato.</span><span class="sxs-lookup"><span data-stu-id="fa309-211">Instead, it is performed in an unchecked context.</span></span>  
  
 <span data-ttu-id="fa309-212">Il metodo equivalente per l'operatore è <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fa309-212">The equivalent method for this operator is <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <altmember cref="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public static int Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.IntPtr.Size" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Size As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int Size { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Size : int" Usage="System.nativeint.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa309-213">Ottiene le dimensioni dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-213">Gets the size of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="fa309-214">Dimensioni in byte di un puntatore o handle nel processo in uso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-214">The size of a pointer or handle in this process, measured in bytes.</span>
          </span>
          <span data-ttu-id="fa309-215">Il valore della proprietà è 4 in un processo a 32 bit e 8 in un processo a 64 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-215">The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.</span>
          </span>
          <span data-ttu-id="fa309-216">È possibile definire il tipo di processo impostando l'opzione <see langword="/platform" /> quando si compila il codice con i compilatori C# e Visual Basic.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-216">You can define the process type by setting the <see langword="/platform" /> switch when you compile your code with the C# and Visual Basic compilers.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static IntPtr Subtract (IntPtr pointer, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Subtract(native int pointer, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (pointer As IntPtr, offset As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Subtract(IntPtr pointer, int offset);" />
      <MemberSignature Language="F#" Value="static member Subtract : nativeint * int -&gt; nativeint" Usage="System.nativeint.Subtract (pointer, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="fa309-217">Puntatore da cui sottrarre l'offset.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-217">The pointer to subtract the offset from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="fa309-218">Offset da sottrarre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-218">The offset to subtract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-219">Sottrae un offset dal valore di un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-219">Subtracts an offset from the value of a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-220">Nuovo puntatore che riflette la sottrazione di <paramref name="offset" /> da <paramref name="pointer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-220">A new pointer that reflects the subtraction of <paramref name="offset" /> from <paramref name="pointer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-221">Il <xref:System.IntPtr.Subtract%2A> metodo non genera un'eccezione se il risultato è troppo piccolo per essere rappresentato come un puntatore nella piattaforma specificata.</span><span class="sxs-lookup"><span data-stu-id="fa309-221">The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform.</span></span> <span data-ttu-id="fa309-222">Al contrario, l'operazione di sottrazione viene eseguita in un contesto non verificato.</span><span class="sxs-lookup"><span data-stu-id="fa309-222">Instead, the subtraction operation is performed in an unchecked context.</span></span>  
  
 <span data-ttu-id="fa309-223">Linguaggi che non supportano l'overload degli operatori o gli operatori personalizzati possono utilizzare questo metodo per sottrarre un offset dal valore del puntatore.</span><span class="sxs-lookup"><span data-stu-id="fa309-223">Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa309-224">Nell'esempio seguente crea un' <xref:System.IntPtr> oggetto che punta alla fine di una matrice di 10 elementi e quindi chiama il <xref:System.IntPtr.Subtract%2A> metodo per scorrere gli elementi nella matrice in ordine inverso.</span><span class="sxs-lookup"><span data-stu-id="fa309-224">The following example instantiates an <xref:System.IntPtr> object that points to the end of a ten-element array, and then calls the <xref:System.IntPtr.Subtract%2A> method to iterate the elements in the array in reverse order.</span></span>  
  
 [!code-csharp[System.IntPtr.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.subtract/cs/subtract1.cs#1)]
 [!code-vb[System.IntPtr.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.subtract/vb/subtract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.IntPtr&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;IntPtr&gt;.Equals (IntPtr other);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.IntPtr&gt;.Equals(native int other) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.System#IEquatable&lt;System#IntPtr&gt;#Equals(System.IntPtr)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As IntPtr) As Boolean Implements IEquatable(Of IntPtr).Equals" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.IntPtr&gt;.Equals(IntPtr other) = IEquatable&lt;IntPtr&gt;::Equals;" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.IntPtr" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="fa309-225">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da popolare con i dati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-225">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="fa309-226">Destinazione per questa serializzazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-226">The destination for this serialization.</span>
          </span>
          <span data-ttu-id="fa309-227">Questo parametro non viene usato; specificare <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-227">(This parameter is not used; specify <see langword="null" />.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-228">Compila un oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con i dati necessari per serializzare l'oggetto <see cref="T:System.IntPtr" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-228">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.IntPtr" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-229">Questo metodo popola i `info` parametro con il valore dell'oggetto corrente <xref:System.IntPtr> oggetto.</span><span class="sxs-lookup"><span data-stu-id="fa309-229">This method populates the `info` parameter with the value of the current <xref:System.IntPtr> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="fa309-230">
            <paramref name="info" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-230">
              <paramref name="info" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="fa309-231">richiede attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-231">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="fa309-232">L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-232">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public int ToInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ToInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.ToInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function ToInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ToInt32();" />
      <MemberSignature Language="F#" Value="member this.ToInt32 : unit -&gt; int" Usage="nativeint.ToInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa309-233">Converte il valore dell'istanza in un intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-233">Converts the value of this instance to a 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-234">Intero con segno a 32 bit uguale al valore dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-234">A 32-bit signed integer equal to the value of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa309-235">Su una piattaforma a 64 bit il valore dell'istanza è troppo grande o troppo piccolo per essere rappresentato come intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-235">On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public long ToInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.ToInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function ToInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToInt64();" />
      <MemberSignature Language="F#" Value="member this.ToInt64 : unit -&gt; int64" Usage="nativeint.ToInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa309-236">Converte il valore dell'istanza in un intero con segno a 64 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-236">Converts the value of this instance to a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-237">Intero con segno a 64 bit uguale al valore dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-237">A 64-bit signed integer equal to the value of this instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPointer">
      <MemberSignature Language="C#" Value="public void* ToPointer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void* ToPointer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.ToPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void* ToPointer();" />
      <MemberSignature Language="F#" Value="member this.ToPointer : unit -&gt; nativeptr&lt;unit&gt;" Usage="nativeint.ToPointer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa309-238">Converte il valore dell'istanza in un puntatore a un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-238">Converts the value of this instance to a pointer to an unspecified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-239">Puntatore all'oggetto <see cref="T:System.Void" />, ovvero puntatore a una memoria contenente dati di un tipo non specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-239">A pointer to <see cref="T:System.Void" />; that is, a pointer to memory containing data of an unspecified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa309-240">L'esempio seguente usa i puntatori gestiti per invertire i caratteri in una matrice.</span><span class="sxs-lookup"><span data-stu-id="fa309-240">The following example uses managed pointers to reverse the characters in an array.</span></span> <span data-ttu-id="fa309-241">Dopo che inizializzato un <xref:System.String> dell'oggetto e ottiene la lunghezza, esegue le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="fa309-241">After it initializes a <xref:System.String> object and gets its length, it does the following:</span></span>  
  
-   <span data-ttu-id="fa309-242">Chiamate di <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> metodo per copiare la stringa Unicode in memoria non gestita come caratteri ANSI (un byte).</span><span class="sxs-lookup"><span data-stu-id="fa309-242">Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters.</span></span> <span data-ttu-id="fa309-243">Il metodo restituisce un <xref:System.IntPtr> oggetto che punta all'inizio della stringa non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-243">The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged string.</span></span>  
  
-   <span data-ttu-id="fa309-244">Chiamate di <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType> metodo per allocare lo stesso numero di byte come occupa la stringa non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-244">Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType> method to allocate the same number of bytes as the unmanaged string occupies.</span></span> <span data-ttu-id="fa309-245">Il metodo restituisce un <xref:System.IntPtr> oggetto che punta all'inizio del blocco di memoria non gestito.</span><span class="sxs-lookup"><span data-stu-id="fa309-245">The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged block of memory.</span></span>  
  
-   <span data-ttu-id="fa309-246">Chiamate di <xref:System.IntPtr.ToPointer%2A> metodo per ottenere un puntatore non gestito per l'indirizzo iniziale della stringa e il blocco di memoria, non gestito e aggiunge uno minore della lunghezza della stringa all'indirizzo iniziale della stringa ANSI.</span><span class="sxs-lookup"><span data-stu-id="fa309-246">Calls the <xref:System.IntPtr.ToPointer%2A> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string.</span></span> <span data-ttu-id="fa309-247">Poiché il puntatore di stringa non gestita ora punta alla fine della stringa, l'operazione di copia copierà un carattere dalla fine della stringa all'inizio del blocco di memoria.</span><span class="sxs-lookup"><span data-stu-id="fa309-247">Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</span></span>  
  
-   <span data-ttu-id="fa309-248">Utilizza un ciclo per copiare ogni carattere della stringa per il blocco di memoria non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-248">Uses a loop to copy each character from the string to the unmanaged block of memory.</span></span> <span data-ttu-id="fa309-249">Dopo ogni operazione di copia, lo decrementa il puntatore all'indirizzo di posizione successiva nella stringa ANSI non gestita e incrementa il puntatore al successivo indirizzo nel blocco non gestito.</span><span class="sxs-lookup"><span data-stu-id="fa309-249">After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.</span></span>  
  
-   <span data-ttu-id="fa309-250">Chiama il <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType> per convertire il blocco di memoria non gestita che contiene la stringa copiata ANSI a Unicode gestito <xref:System.String> oggetto.</span><span class="sxs-lookup"><span data-stu-id="fa309-250">Calls the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.</span></span>  
  
-   <span data-ttu-id="fa309-251">Dopo aver visualizzato le stringhe originali e invertite, chiama il <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType> metodo per liberare la memoria allocata per la stringa ANSI non gestita e il blocco di memoria non gestita.</span><span class="sxs-lookup"><span data-stu-id="fa309-251">After displaying the original and reversed strings, calls the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</span></span>  
  
 [!code-cpp[System.IntPtr.ToPointer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.IntPtr.ToPointer/cpp/topointer.cpp#1)]
 [!code-csharp[System.IntPtr.ToPointer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.IntPtr.ToPointer/cs/topointer.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="fa309-252">Converte il valore numerico dell'oggetto <see cref="T:System.IntPtr" /> corrente nella rappresentazione di stringa equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-252">Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="nativeint.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="fa309-253">Converte il valore numerico dell'oggetto <see cref="T:System.IntPtr" /> corrente nella rappresentazione di stringa equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-253">Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-254">Rappresentazione di stringa del valore dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-254">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-255">Se il valore della <xref:System.IntPtr.Size%2A> proprietà per questa istanza è 4, quindi questo metodo equivale a <xref:System.Int32.ToString%2A?displayProperty=nameWithType>; in caso contrario, questo metodo equivale a <xref:System.Int64.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa309-255">If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=nameWithType>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IntPtr.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="nativeint.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="fa309-256">Specifica di formato che determina la modalità di conversione dell'oggetto <see cref="T:System.IntPtr" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-256">A format specification that governs how the current <see cref="T:System.IntPtr" /> object is converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="fa309-257">Converte il valore numerico dell'oggetto <see cref="T:System.IntPtr" /> corrente nella rappresentazione di stringa equivalente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-257">Converts the numeric value of the current <see cref="T:System.IntPtr" /> object to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="fa309-258">Rappresentazione in forma di stringa del valore dell'oggetto <see cref="T:System.IntPtr" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-258">The string representation of the value of the current <see cref="T:System.IntPtr" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-259">Se il `format` parametro `null` o una stringa vuota (""), il valore restituito viene formattato con l'identificatore di formato generale ("G").</span><span class="sxs-lookup"><span data-stu-id="fa309-259">If the `format` parameter is `null` or an empty string (""), the return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="fa309-260">Per ulteriori informazioni sugli identificatori di formato numerico, vedere la [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) argomento.</span><span class="sxs-lookup"><span data-stu-id="fa309-260">For more information about numeric format specifiers, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) topic.</span></span>  
  
 <span data-ttu-id="fa309-261">Il valore restituito viene formattato utilizzando le impostazioni cultura invarianti.</span><span class="sxs-lookup"><span data-stu-id="fa309-261">The return value is formatted using the invariant culture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly IntPtr Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly native int Zero" />
      <MemberSignature Language="DocId" Value="F:System.IntPtr.Zero" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Zero As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly IntPtr Zero;" />
      <MemberSignature Language="F#" Value=" staticval mutable Zero : nativeint" Usage="System.nativeint.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="fa309-262">Campo di sola lettura che rappresenta un puntatore o un handle inizializzato su zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="fa309-262">A read-only field that represents a pointer or handle that has been initialized to zero.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa309-263">Il valore di questo campo non è equivalente a `null`.</span><span class="sxs-lookup"><span data-stu-id="fa309-263">The value of this field is not equivalent to `null`.</span></span> <span data-ttu-id="fa309-264">Usare questo campo per determinare in modo efficiente la presenza di un'istanza di <xref:System.IntPtr> è stata impostata su un valore diverso da zero.</span><span class="sxs-lookup"><span data-stu-id="fa309-264">Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero.</span></span>  
  
 <span data-ttu-id="fa309-265">Ad esempio, si supponga che la variabile ip, è un'istanza di <xref:System.IntPtr>.</span><span class="sxs-lookup"><span data-stu-id="fa309-265">For example, assume the variable, ip, is an instance of <xref:System.IntPtr>.</span></span> <span data-ttu-id="fa309-266">È possibile determinare se è stata impostata, confrontando il valore restituito da un costruttore, ad esempio: " `if ip != new IntPtr(0)...` ".</span><span class="sxs-lookup"><span data-stu-id="fa309-266">You can determine if it has been set by comparing it to the value returned by a constructor, for example: " `if ip != new IntPtr(0)...` ".</span></span> <span data-ttu-id="fa309-267">Tuttavia, il richiamo di un costruttore per ottenere un puntatore di generarle è inefficiente.</span><span class="sxs-lookup"><span data-stu-id="fa309-267">However, invoking a constructor to get an unintialized pointer is inefficient.</span></span> <span data-ttu-id="fa309-268">È preferibile inserire " `if ip != IntPtr.Zero...` ", o " `if !IntPtr.Zero.Equals(ip)...` ".</span><span class="sxs-lookup"><span data-stu-id="fa309-268">It is better to code either " `if ip != IntPtr.Zero...` ", or " `if !IntPtr.Zero.Equals(ip)...` ".</span></span>  
  
 <span data-ttu-id="fa309-269">Quando si chiama l'API di Windows dal codice gestito, è possibile passare <xref:System.IntPtr.Zero?displayProperty=nameWithType> anziché `null` se si prevede che un argomento sia un puntatore o `null`.</span><span class="sxs-lookup"><span data-stu-id="fa309-269">When calling the Windows API from managed code, you can pass <xref:System.IntPtr.Zero?displayProperty=nameWithType> instead of `null` if an argument is expected to be either a pointer or a `null`.</span></span> <span data-ttu-id="fa309-270">Ad esempio, la seguente chiamata alla funzione `CreateFile` di Windows fornisce <xref:System.IntPtr.Zero?displayProperty=nameWithType> per i valori degli argomenti `pSecurityAttributes` e `hTemplateFile`.</span><span class="sxs-lookup"><span data-stu-id="fa309-270">For example, the following call to the Windows `CreateFile` function supplies <xref:System.IntPtr.Zero?displayProperty=nameWithType> for the `pSecurityAttributes` and `hTemplateFile` argument values.</span></span>  
  
 [!code-csharp[System.IntPtr.Zero#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero4.cs#2)]
 [!code-vb[System.IntPtr.Zero#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero4.vb#2)]  
  
> [!NOTE]
>  <span data-ttu-id="fa309-271">Anche se <xref:System.IntPtr.Zero> è equivalente a `null` per le funzioni API Windows con parametri o valori restituiti che possono essere puntatori o `null`, <xref:System.IntPtr.Zero> non è equivalente a `null`.</span><span class="sxs-lookup"><span data-stu-id="fa309-271">Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`.</span></span> <span data-ttu-id="fa309-272">Il passaggio di `null` al metodo `IntPtr.Zero.Equals` restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="fa309-272">Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.</span></span>  
  
 <span data-ttu-id="fa309-273">È inoltre possibile verificare se viene restituito un valore `null` dalle chiamate alle funzioni API di Windows che restituiscono un puntatore o `null` confrontando il valore restituito con <xref:System.IntPtr.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa309-273">You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with <xref:System.IntPtr.Zero?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa309-274">Ad esempio, nell'esempio seguente la chiamata alla funzione `GetWindow` tenta di recuperare il riferimento di una finestra inesistente.</span><span class="sxs-lookup"><span data-stu-id="fa309-274">For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window.</span></span> <span data-ttu-id="fa309-275">Se la funzione è stata chiamata dal codice non gestito, restituisce `null`, ma quando viene chiamata dal codice gestito, restituisce <xref:System.IntPtr.Zero?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="fa309-275">If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns <xref:System.IntPtr.Zero?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.IntPtr.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero2.cs#1)]
 [!code-vb[System.IntPtr.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>