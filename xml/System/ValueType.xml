<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b756fc1621dab1597966503a0af93b3c8478663" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728755" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce la classe base per i tipi di valore.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> esegue l'override dei metodi virtuali da <xref:System.Object> con implementazioni più appropriate per i tipi di valore. Vedere anche <xref:System.Enum>, che eredita da <xref:System.ValueType>.  
  
 Tipi di dati vengono suddivisi in tipi di valore e tipi di riferimento. Tipi di valore vengono allocate nello stack o allocati inline in una struttura. Tipi di riferimento sono con allocazione heap. Tipi di riferimento e di valore derivano dalla classe base finale <xref:System.Object>. In casi in cui è necessario che un tipo di valore si comporta come un oggetto, un wrapper che rende il tipo di valore come oggetto di riferimento viene allocato nell'heap e il valore del tipo di valore viene copiato. Il wrapper è contrassegnato affinché il sistema sappia che contiene un tipo di valore. Questo processo è noto come conversione boxing, e il processo è noto come conversione unboxing. Conversione boxing e unboxing consente qualsiasi tipo per essere considerato come un oggetto.  
  
 Sebbene <xref:System.ValueType> è la classe base implicita per i tipi di valore, è possibile creare una classe che eredita da <xref:System.ValueType> direttamente. Al contrario, fornire una parola chiave del linguaggio o a creare singoli compilatori (ad esempio `struct` in c# e `Structure`...`End Structure` in Visual Basic) per supportare la creazione di tipi di valore.  
  
 A parte che funge da classe base per tipi di valore in .NET Framework, il <xref:System.ValueType> struttura in genere non viene utilizzata direttamente nel codice. Tuttavia, può essere utilizzato come parametro nelle chiamate al metodo per limitare i possibili argomenti di tipi di valore anziché tutti gli oggetti o per consentire a un metodo per gestire un numero di tipi di valore diverso. Nell'esempio seguente viene illustrato come <xref:System.ValueType> impedisce che i tipi di riferimento passati a metodi. Definisce una classe denominata `Utility` che contiene quattro metodi: `IsNumeric`, che indica se il relativo argomento è un numero. `IsInteger`, che indica se il relativo argomento è un numero intero. `IsFloat`, che indica se il relativo argomento è un numero a virgola mobile; e `Compare`, che indica la relazione tra due valori numerici. In ogni caso, i parametri del metodo sono di tipo <xref:System.ValueType>, e i tipi di riferimento vengono impediti passati ai metodi.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 Nell'esempio seguente sono illustrate le chiamate ai metodi del `Utility` classe.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.ValueType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
        <summary>Indica se questa istanza e un oggetto specificato sono uguali.</summary>
        <returns>
          <see langword="true" /> se <paramref name="obj" /> e questa istanza presentano lo stesso tipo e rappresentano lo stesso valore. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> override dei metodi <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> e fornisce l'implementazione predefinita di uguaglianza per tutti i tipi di valore in .NET Framework.  
  
 Se nessuno dei campi dell'istanza corrente e `obj` sono tipi di riferimento, il <xref:System.ValueType.Equals%2A> metodo esegue un confronto byte per byte tra i due oggetti in memoria. In caso contrario, utilizza la reflection per confrontare i campi corrispondenti di `obj` e questa istanza.  
  
> [!TIP]
>  In particolare se il tipo di valore contiene campi che sono tipi di riferimento, è necessario eseguire l'override di <xref:System.ValueType.Equals%28System.Object%29> metodo. Ciò può migliorare le prestazioni e consentono di rappresentare meglio il significato di uguaglianza per il tipo.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Note per il [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Quando si chiama il <xref:System.ValueType.Equals%2A> metodo su un [!INCLUDE[wrt](~/includes/wrt-md.md)] struttura, fornisce il comportamento predefinito per i tipi di valore che non esegue l'override <xref:System.ValueType.Equals%2A>. Questo aspetto è parte del supporto fornito da .NET Framework per la [!INCLUDE[wrt](~/includes/wrt-md.md)] (vedere [.NET Framework supportano per applicazioni Windows Store e Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Impossibile eseguire l'override di strutture <xref:System.ValueType.Equals%2A>, anche se alla scrittura con c# o Visual Basic, perché non hanno metodi. (Inoltre strutture nel [!INCLUDE[wrt](~/includes/wrt-md.md)] stesso non ereditano <xref:System.ValueType>.) Tuttavia, sembrano disporre <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> metodi quando utilizzarle nel codice c# o Visual Basic e .NET Framework fornisce il comportamento predefinito per questi metodi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.ValueType.Equals%2A> metodo può essere sovrascritto da un tipo di valore derivato.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il codice hash per l'istanza.</summary>
        <returns>Intero con segno a 32 bit che rappresenta il codice hash per questa istanza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ValueType.GetHashCode%2A> metodo si applica ai tipi derivati da <xref:System.ValueType>. Uno o più campi del tipo derivato viene usato per calcolare il valore restituito. Se si chiama il tipo derivato `GetHashCode` metodo, il valore restituito non è probabile che essere utilizzabile come chiave in una tabella hash. Inoltre, se si modifica il valore di uno o più campi, il valore restituito potrebbe diventare non appropriato per l'utilizzo come una chiave in una tabella hash. In entrambi i casi, si consiglia di scrivere la propria implementazione del <xref:System.ValueType.GetHashCode%2A> metodo che meglio rappresenta il concetto di un codice hash per il tipo.  
  
 Per altre informazioni, vedere <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> e <xref:System.Collections.Hashtable?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>Note per il [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 Quando si chiama il <xref:System.ValueType.GetHashCode%2A> metodo su un [!INCLUDE[wrt](~/includes/wrt-md.md)] struttura, fornisce il comportamento predefinito per i tipi di valore che non esegue l'override <xref:System.ValueType.GetHashCode%2A>. Questo aspetto è parte del supporto fornito da .NET Framework per la [!INCLUDE[wrt](~/includes/wrt-md.md)] (vedere [.NET Framework supportano per applicazioni Windows Store e Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Impossibile eseguire l'override di strutture <xref:System.ValueType.GetHashCode%2A>, anche se alla scrittura con c# o Visual Basic, perché non hanno metodi. (Inoltre strutture nel [!INCLUDE[wrt](~/includes/wrt-md.md)] stesso non ereditano <xref:System.ValueType>.) Tuttavia, sembrano disporre <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> metodi quando utilizzarle nel codice c# o Visual Basic e .NET Framework fornisce il comportamento predefinito per questi metodi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.ValueType.GetHashCode%2A> metodo può essere sovrascritto da un tipo di valore derivato.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il nome completo del tipo di questa istanza.</summary>
        <returns>Nome di tipo completo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> override dei metodi di <xref:System.Object.ToString%2A?displayProperty=nameWithType> (metodo) e fornisce l'implementazione predefinita del `ToString` metodo per i tipi di valore. (Tipi di valore sono tipi definiti dal `struct` (parola chiave) in c# e il `Structure`... `End Structure` costruire in Visual Basic.) A livello funzionale, tuttavia, l'implementazione è lo stesso di quello di <xref:System.Object.ToString%2A?displayProperty=nameWithType>: il metodo restituisce il nome completo del tipo.  
  
 Definito da tipi di valore di `struct` (parola chiave) in c# e `Structure`... `End Structure` costrutto in Visual Basic in genere eseguire l'override di <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metodo per fornire una rappresentazione di stringa più significativa del tipo di valore. Nell'esempio che segue viene illustrata la differenza. Definisce due tipi di valore, `EmployeeA` e `EmployeeB`, crea un'istanza di ognuna e chiama il relativo `ToString` metodo. Poiché il `EmployeeA` struttura non esegue l'override di <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> metodo, viene visualizzato solo il nome completo del tipo. Il `EmployeeB.ToString` (metodo), invece, fornisce informazioni significative sull'oggetto.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 Si noti che, anche se i tipi di enumerazione sono anche tipi di valore, da cui derivano i <xref:System.Enum> classe, che esegue l'override <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.  
  
## <a name="notes-for-the-windows-runtime"></a>Note per Windows Runtime  
 Quando si chiama il <xref:System.ValueType.ToString%2A> metodo su un [!INCLUDE[wrt](~/includes/wrt-md.md)] struttura, fornisce il comportamento predefinito per i tipi di valore che non esegue l'override <xref:System.ValueType.ToString%2A>. Questo aspetto è parte del supporto fornito da .NET Framework per la [!INCLUDE[wrt](~/includes/wrt-md.md)] (vedere [.NET Framework supportano per applicazioni Windows Store e Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] Impossibile eseguire l'override di strutture <xref:System.ValueType.ToString%2A>, anche se alla scrittura con c# o Visual Basic, perché non hanno metodi. (Inoltre strutture nel [!INCLUDE[wrt](~/includes/wrt-md.md)] stesso non ereditano <xref:System.ValueType>.) Tuttavia, sembrano disporre <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, e <xref:System.ValueType.GetHashCode%2A> metodi quando utilizzarle nel codice c# o Visual Basic e .NET Framework fornisce il comportamento predefinito per questi metodi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>