<Type Name="Memory&lt;T&gt;" FullName="System.Memory&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="acdfc981d37b8a9354e73ed0e9c1c4fc8e87d12e" />
    <Meta Name="ms.sourcegitcommit" Value="d71cc71109ed3cbcf3406a10a3cd7ac7e30f5e0c" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/10/2018" />
    <Meta Name="ms.locfileid" Value="51525743" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Memory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Memory`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Memory`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Memory(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Memory" />
  <TypeSignature Language="F#" Value="type Memory&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="a6d7f-101">Il tipo di elementi nel <see cref="T:System.Memory`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6d7f-101">The type of items in the <see cref="T:System.Memory`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="a6d7f-102">Rappresenta una regione contigua di memoria.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a6d7f-102">Represents a contiguous region of memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="a6d7f-103">Ad esempio <xref:System.Span%601>, `Memory<T>` rappresenta una regione contigua di memoria.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-103">Like <xref:System.Span%601>, `Memory<T>` represents a contiguous region of memory.</span></span> <span data-ttu-id="a6d7f-104">A differenza <xref:System.Span%601>, tuttavia `Memory<T>` non è un [ref struct](~/docs/csharp/reference-semantics-with-value-types.md?view=netcore-2.1.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="a6d7f-104">Unlike <xref:System.Span%601>, however, `Memory<T>` is not a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md?view=netcore-2.1.md#ref-struct-type).</span></span> <span data-ttu-id="a6d7f-105">Ciò significa che `Memory<T>` può essere inserito nell'heap gestito, mentre <xref:System.Span%601> non è possibile.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-105">This means that `Memory<T>` can be placed on the managed heap, whereas <xref:System.Span%601> cannot.</span></span> <span data-ttu-id="a6d7f-106">Di conseguenza, il `Memory<T>` struttura non ha le stesse restrizioni come un <xref:System.Span%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-106">As a result, the `Memory<T>` structure does not have the same restrictions as a <xref:System.Span%601> instance.</span></span> <span data-ttu-id="a6d7f-107">In particolare:</span><span class="sxs-lookup"><span data-stu-id="a6d7f-107">In particular:</span></span>

- <span data-ttu-id="a6d7f-108">Può essere utilizzato come un campo in una classe.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-108">It can be used as a field in a class.</span></span>

- <span data-ttu-id="a6d7f-109">Può essere usata in `await` e `yield` limiti.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-109">It can be used across `await` and `yield` boundaries.</span></span>

<span data-ttu-id="a6d7f-110">Oltre a `Memory<T>`, è possibile usare <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> rappresentano non modificabile o di memoria di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-110">In addition to `Memory<T>`, you can use <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> to represent immutable or read-only memory.</span></span>

    ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a6d7f-111">La matrice da cui creare l'oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-111">The array from which to create the <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-112">Crea un nuovo oggetto <see cref="T:System.Memory`1" /> sull'intera matrice specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-112">Creates a new <see cref="T:System.Memory`1" /> object over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-113">Se `array` viene `null`, questo costruttore restituisce un <xref:System.Memory%601> dell'oggetto con un `default<T>` valore.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-113">If `array` is `null`, this constructor returns a <xref:System.Memory%601> object with a `default<T>` value.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="a6d7f-114">
            <paramref name="T" /> è un tipo riferimento e <paramref name="array" /> non è una matrice di tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-114">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
          <span data-ttu-id="a6d7f-115">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-115">-or-</span>
          </span>
          <span data-ttu-id="a6d7f-116">La matrice è <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariante</see>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-116">The array is <see href="~/docs/csharp/programming-guide/concepts/covariance-contravariance/index.md">covariant.</see></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Memory (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Memory&lt;'T&gt; : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="new System.Memory&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a6d7f-117">Matrice di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-117">The source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="a6d7f-118">Indice del primo elemento da includere nel nuovo oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-118">The index of the first element to include in the new <see cref="T:System.Memory`1" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="a6d7f-119">Numero di elementi da includere nel nuovo oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-119">The number of elements to include in the new <see cref="T:System.Memory`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-120">Crea un nuovo oggetto <see cref="T:System.Memory`1" /> che include un numero specificato di elementi di una matrice che iniziano in corrispondenza di un indice specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-120">Creates a new <see cref="T:System.Memory`1" /> object that includes a specified number of elements of an array beginning at a specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-121">Se `array` viene `null`, questo costruttore restituisce un <xref:System.Memory%601> dell'oggetto con un `default<T>` valore.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-121">If `array` is `null`, this constructor returns a  <xref:System.Memory%601> object with a `default<T>` value.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a6d7f-122">
            <paramref name="array" /> è <see langword="null" />, ma <paramref name="start" /> o <paramref name="length" /> è diverso da zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-122">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="a6d7f-123">--oppure--</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-123">--or--</span>
          </span>
          <p />
          <span data-ttu-id="a6d7f-124">
            <paramref name="start" /> non rientra nei limiti della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-124">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="a6d7f-125">--oppure--</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-125">--or--</span>
          </span>
          <p />
          <span data-ttu-id="a6d7f-126">
            <paramref name="start" /> e <paramref name="length" /> superano il numero di elementi nella matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-126">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="a6d7f-127">
            <paramref name="T" /> è un tipo riferimento e <paramref name="array" /> non è una matrice di tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-127">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.CopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Memory(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Memory&lt;'T&gt; -&gt; unit" Usage="memory.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="a6d7f-128">La destinazione .</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-128">The destination .</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-129">Copia il contenuto di un oggetto <see cref="T:System.Memory`1" /> in un oggetto <see cref="T:System.Memory`1" /> di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-129">Copies the contents of a <see cref="T:System.Memory`1" /> object into a destination <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-130">Questo metodo copia tutto il contenuto dell'oggetto corrente <xref:System.Memory%601> istanza `destination` anche se il contenuto dell'istanza corrente e `destination` si sovrappongono.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-130">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a6d7f-131">La lunghezza di <paramref name="destination" /> è inferiore alla lunghezza dell'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-131">The length of <paramref name="destination" /> is less than the length of the current instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Memory`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Memory&lt;T&gt; Empty { Memory&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-132">Restituisce un oggetto <see cref="T:System.Memory`1" /> vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-132">Returns an empty <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a6d7f-133">Un oggetto vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-133">An empty object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Memory&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Memory`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Memory&lt;T&gt; other);" />
      <MemberSignature Language="F#" Value="override this.Equals : Memory&lt;'T&gt; -&gt; bool" Usage="memory.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="a6d7f-134">Oggetto da confrontare con l'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-134">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-135">Determina se l'oggetto <see cref="T:System.Memory`1" /> specificato è uguale all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-135">Determines whether the specified <see cref="T:System.Memory`1" /> object is equal to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-136">
            <see langword="true" /> se l'istanza corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-136">
              <see langword="true" /> if the current instance and <paramref name="other" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-137">I due oggetti sono uguali se:</span><span class="sxs-lookup"><span data-stu-id="a6d7f-137">The two objects are equal if:</span></span>

   - <span data-ttu-id="a6d7f-138">`other` è un <xref:System.Memory%601> o <xref:System.ReadOnlyMemory%601> oggetto.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-138">`other` is a <xref:System.Memory%601> or <xref:System.ReadOnlyMemory%601> object.</span></span>
   
   - <span data-ttu-id="a6d7f-139">Entrambi gli oggetti puntare allo stesso array e abbiano la stessa lunghezza.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-139">Both objects point to the same array and have the same length.</span></span>

<span data-ttu-id="a6d7f-140">Il `Equals(Memory<T>)` metodo esegue un test di uguaglianza dei riferimenti; non è possibile confrontare gli elementi di <xref:System.Memory%601> per verificarne l'uguaglianza.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-140">The `Equals(Memory<T>)` method performs a test for reference equality; it does not compare the elements of <xref:System.Memory%601> for equality.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memory.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="a6d7f-141">Oggetto da confrontare con l'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-141">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-142">Determina se l'oggetto specificato è uguale all'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-142">Determines whether the specified object is equal to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-143">
            <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-143">
              <see langword="true" /> if the current instance and <paramref name="obj" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-144">Due <xref:System.Memory%601> gli oggetti sono uguali se entrambi gli oggetti puntare allo stesso array e abbiano la stessa lunghezza.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-144">Two <xref:System.Memory%601> objects are equal if both objects point to the same array and have the same length.</span></span> <span data-ttu-id="a6d7f-145">Si noti che il test di uguaglianza non verifica se il contenuto è uguale.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-145">Note that the test for equality does not check whether the contents are equal.</span></span>
   
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memory.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-146">Restituisce il codice hash per l'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-146">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-147">Codice hash di un intero con segno a 32 bit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-147">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Memory&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-148">Indica se l'istanza corrente è vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-148">Indicates whether the current instance is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a6d7f-149">
            <see langword="true" /> Se l'istanza corrente è vuota. in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-149">
              <see langword="true" /> if the current instance is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="a6d7f-150">Oggetto <see cref="T:System.Memory`1" /> oggetto è vuoto se la sua lunghezza è 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-150">A <see cref="T:System.Memory`1" /> object is empty if its length is 0.</span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Memory&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-151">Ottiene il numero di elementi nell'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-151">Gets the number of items in the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a6d7f-152">Il numero di elementi nell'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-152">The number of items in the current instance.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="segment">
          <span data-ttu-id="a6d7f-153">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-153">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-154">Definisce una conversione implicita di un oggetto <see cref="T:System.ArraySegment`1" /> in un oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-154">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> object to a <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-155">Oggetto <see cref="T:System.ArraySegment`1" /> convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-155">The converted <see cref="T:System.ArraySegment`1" /> object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlyMemory&lt;T&gt; (Memory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlyMemory`1&lt;!T&gt; op_Implicit(valuetype System.Memory`1&lt;!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (memory As Memory(Of T)) As ReadOnlyMemory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlyMemory&lt;T&gt;(Memory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Memory&lt;'T&gt; -&gt; ReadOnlyMemory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlyMemory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="memory">
          <span data-ttu-id="a6d7f-156">Oggetto da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-156">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-157">Definisce una conversione implicita di un oggetto <see cref="T:System.Memory`1" /> in un oggetto <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-157">Defines an implicit conversion of a <see cref="T:System.Memory`1" /> object to a <see cref="T:System.ReadOnlyMemory`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-158">Oggetto convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-158">The converted object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Memory&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Memory`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.op_Implicit(`0[])~System.Memory{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Memory&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Memory&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a6d7f-159">Matrice da convertire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-159">The array to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-160">Definisce una conversione implicita di una matrice in un oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-160">Defines an implicit conversion of an array to a <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-161">Oggetto convertito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-161">The converted object.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pin">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryHandle Pin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Buffers.MemoryHandle Pin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Pin" />
      <MemberSignature Language="VB.NET" Value="Public Function Pin () As MemoryHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Buffers::MemoryHandle Pin();" />
      <MemberSignature Language="F#" Value="member this.Pin : unit -&gt; System.Buffers.MemoryHandle" Usage="memory.Pin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-162">Crea un handle per l'oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-162">Creates a handle for the <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-163">Handle per l'oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-163">A handle for the <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

## <a name="see-also"></a><span data-ttu-id="a6d7f-164">Vedere anche</span><span class="sxs-lookup"><span data-stu-id="a6d7f-164">See also</span></span>

<span data-ttu-id="a6d7f-165">Il garbage collector non può essere spostata la memoria finché l'oggetto restituito <xref:System.Buffers.MemoryHandle> oggetto è stato eliminato.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-165">The garbage collector will not move the memory until the returned <xref:System.Buffers.MemoryHandle> object is disposed.</span></span> <span data-ttu-id="a6d7f-166">In questo modo sarà possibile recuperare e usare l'indirizzo della memoria.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-166">This enables you to retrieve and use the memory's address.</span></span>

<xref:System.Type.IsPrimitive> 

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a6d7f-167">Non è possibile bloccare un'istanza con membri non primitivi (non copiabili).</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-167">An instance with non-primitive (non-blittable) members cannot be pinned.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a6d7f-168">Indice in corrispondenza del quale iniziare la sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-168">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-169">Crea una sezione dalla memoria corrente che inizia in corrispondenza di un indice specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-169">Forms a slice out of the current memory that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-170">Oggetto che contiene tutti gli elementi dell'istanza corrente da <paramref name="start" /> alla fine dell'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-170">An object that contains all elements of the current instance from <paramref name="start" /> to the end of the instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeExceptionException">
          <span data-ttu-id="a6d7f-171">
            <paramref name="start" /> è minore di zero oppure è maggiore o uguale a <see cref="P:System.Memory`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-171">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="P:System.Memory`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Memory&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Memory`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Memory&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Memory&lt;'T&gt;" Usage="memory.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="a6d7f-172">Indice in corrispondenza del quale iniziare la sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-172">The index at which to begin the slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="a6d7f-173">Numero di elementi da includere nella sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-173">The number of elements to include in the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a6d7f-174">Crea una sezione dalla memoria corrente che inizia in corrispondenza di un indice specificato per una lunghezza specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-174">Forms a slice out of the current memory starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-175">Oggetto che contiene elementi <paramref name="length" /> dall'istanza corrente che iniziano in corrispondenza di <paramref name="start" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-175">An object that contains <paramref name="length" /> elements from the current instance starting at <paramref name="start" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeExceptionException">
          <span data-ttu-id="a6d7f-176">
            <paramref name="start" /> è minore di zero oppure è maggiore o uguale a <see cref="P:System.Memory`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-176">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="P:System.Memory`1.Length" />.</span>
          </span>
          <span data-ttu-id="a6d7f-177">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-177">-or-</span>
          </span>
          <span data-ttu-id="a6d7f-178">
            <paramref name="length" /> è maggiore di <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-178">
              <paramref name="length" /> is greater than <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Span { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Span`1&lt;!T&gt; Span" />
      <MemberSignature Language="DocId" Value="P:System.Memory`1.Span" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Span As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Span&lt;T&gt; Span { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Span : Span&lt;'T&gt;" Usage="System.Memory&lt;'T&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-179">Restituisce un intervallo dall'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-179">Returns a span from the current instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a6d7f-180">Un intervallo di creato dall'oggetto corrente <see cref="T:System.Memory`1" /> oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-180">A span created from the current <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="memory.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-181">Copia il contenuto dalla memoria in una nuova matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-181">Copies the contents from the memory into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-182">Matrice che contiene gli elementi nella memoria corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-182">An array containing the elements in the current memory.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-183">Poiché una chiamata al metodo < xref=System.Memory%601.ToArray%2A > esegue un'allocazione heap, in genere sconsigliato.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-183">Because a call to the <xref=System.Memory%601.ToArray%2A> method performs a heap allocation, it should generally be avoided.</span></span> <span data-ttu-id="a6d7f-184">In alcuni casi è tuttavia necessario sfruttare i vantaggi delle funzionalità è disponibile solo per le matrici.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-184">However, it is sometimes necessary to take advantage of functionality that is only available for arrays.</span></span>

<span data-ttu-id="a6d7f-185">Ogni chiamata al `ToArray` metodo restituisce una nuova matrice.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-185">Each call to the `ToArray` method returns a new array.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="memory.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a6d7f-186">Restituisce la rappresentazione di stringa dell'oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-186">Returns the string representation of this <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-187">la rappresentazione di stringa dell'oggetto <see cref="T:System.Memory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-187">the string representation of this <see cref="T:System.Memory`1" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-188">Per un `Memory<Char>`, il `ToString` metodo restituisce un <xref:System.String> che contiene i caratteri a cui punta il <xref:System.Memory%601>.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-188">For a `Memory<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Memory%601>.</span></span> <span data-ttu-id="a6d7f-189">In caso contrario, restituisce un <xref:System.String> con il nome del tipo e il numero di elementi che il <xref:System.Memory%601> contiene.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-189">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Memory%601> contains.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Memory&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Memory`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Memory`1.TryCopyTo(System.Memory{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Memory(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Memory&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Memory&lt;'T&gt; -&gt; bool" Usage="memory.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Memory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>
          <span data-ttu-id="a6d7f-190">Copia il contenuto della memoria in un'istanza <see cref="T:System.Memory`1" /> di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-190">Copies the contents of the memory into a destination <see cref="T:System.Memory`1" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a6d7f-191">
            <see langword="true" /> se l'operazione di copia ha esito positivo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a6d7f-191">
              <see langword="true" /> if the copy operation succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a6d7f-192">Questo metodo copia tutto il contenuto dell'oggetto corrente <xref:System.Memory%601> istanza `destination` anche se il contenuto dell'istanza corrente e `destination` si sovrappongono.</span><span class="sxs-lookup"><span data-stu-id="a6d7f-192">This method copies all of the contents of the current <xref:System.Memory%601> instance to `destination` even if the contents of the current instance and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>