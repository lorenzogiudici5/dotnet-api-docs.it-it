<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="910934c01288ec01071b99b363ba0c0e473ede08" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728555" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eccezione generata quando non vi è memoria sufficiente per continuare l'esecuzione di un programma.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.OutOfMemoryException> eccezione ha due cause principali:  
  
-   Si sta tentando di espandere un <xref:System.Text.StringBuilder> oggetto oltre la lunghezza definita dal relativo <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> proprietà.  
  
-   Common language runtime non è possibile allocare memoria contigua sufficiente per eseguire correttamente un'operazione. Questa eccezione può essere generata da qualsiasi chiamata al metodo o di assegnazione di proprietà che richiede un'allocazione di memoria. Per ulteriori informazioni sulle cause del <xref:System.OutOfMemoryException> eccezione, vedere ["memoria esaurita" non fa riferimento alla memoria fisica](http://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx).  
  
     Questo tipo di <xref:System.OutOfMemoryException> eccezione rappresenta un errore irreversibile. Se si sceglie di gestire l'eccezione, è necessario includere un `catch` blocco che chiama il <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> per terminare un'app e aggiungere una voce al registro eventi di sistema, come nell'esempio seguente.  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 Alcune delle condizioni in cui viene generata l'eccezione e le azioni da intraprendere per eliminarlo includono quanto segue:  
  
 Si sta chiamando il <xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType> metodo.  
 Si sta tentando di aumento della lunghezza di un <xref:System.Text.StringBuilder> oggetto oltre le dimensioni specificate dal relativo <xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType> proprietà. Nell'esempio seguente viene illustrato il <xref:System.OutOfMemoryException> eccezione generata da una chiamata al <xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType> metodo quando l'esempio tenta di inserire una stringa che fa sì che l'oggetto <xref:System.Text.StringBuilder.Length%2A> proprietà supera la capacità massima.  
  
 [!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
 [!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
 È possibile eseguire una delle operazioni seguenti per risolvere l'errore:  
  
-   Sostituire la chiamata al <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> costruttore con una chiamata di qualsiasi altro <xref:System.Text.StringBuilder> overload del costruttore. La capacità massima del <xref:System.Text.StringBuilder> oggetto verrà impostato sul valore predefinito, ovvero <xref:System.Int32.MaxValue?displayProperty=nameWithType>.  
  
-   Chiamare il <xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> costruttore con un `maxCapacity` valore che è grande abbastanza da contenere qualsiasi espansioni per il <xref:System.Text.StringBuilder> oggetto.  
  
 L'app viene eseguita come processo a 32 bit.  
 processi a 32 bit è possono allocare un massimo di 2GB di memoria in modalità utente virtuale nei sistemi a 32 bit e 4GB di memoria in modalità utente virtuale nei sistemi a 64 bit. Ciò può rendere più difficile per common language runtime allocare sufficiente memoria contigua quando è necessaria un'allocazione di grandi dimensioni. Al contrario, i processi a 64 bit possono allocare fino a 8TB di memoria virtuale. Per risolvere questa eccezione, ricompilare l'app per piattaforme a 64 bit. Per informazioni sul supporto di piattaforme specifiche in Visual Studio, vedere [procedura: configurare progetti per piattaforme di destinazione](http://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76).  
  
 L'app sta perdendo le risorse non gestite  
 Anche se il garbage collector è in grado di liberare la memoria allocata per i tipi gestiti, non gestisce la memoria allocata per le risorse non gestite, ad esempio gestione del sistema operativo (inclusi gli handle di file, file mappati alla memoria, pipe, le chiavi del Registro di sistema e gli handle di attesa) e blocchi di memoria allocati direttamente da chiamate API di Windows o dalle chiamate alle funzioni di allocazione della memoria, ad esempio `malloc`. I tipi che utilizzano risorse non gestite implementano la <xref:System.IDisposable> interfaccia.  
  
 Se si utilizza un tipo che utilizza le risorse non gestite, è necessario verificare di chiamare il relativo <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metodo al termine dell'utilizzo. (Alcuni tipi implementano anche un `Close` metodo identica in funzione da un `Dispose` (metodo).) Per ulteriori informazioni, vedere il [utilizzando gli oggetti che implementano IDisposable](~/docs/standard/garbage-collection/using-objects.md) argomento.  
  
 Se è stato creato un tipo che utilizza le risorse non gestite, verificare di aver implementato il modello Dispose e, se necessario, fornire un finalizzatore. Per ulteriori informazioni, vedere il [modello Dispose](~/docs/standard/design-guidelines/dispose-pattern.md), [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md), e <xref:System.Object.Finalize%2A?displayProperty=nameWithType> argomenti.  
  
 Si sta tentando di creare una matrice di grandi dimensioni in un processo a 64 bit.  
 Per impostazione predefinita, common language runtime non consente i singoli oggetti le cui dimensioni superano 2GB. Per eseguire l'override di questa impostazione predefinita, è possibile utilizzare l'impostazione del file di configurazione per abilitare le matrici con dimensione totale supera i 2 GB.  
  
 Si lavora con grandi set di dati (ad esempio, matrici, raccolte o set di dati di database) in memoria.  
 Quando diventano talmente grande che common language runtime non riesce ad allocare sufficiente memoria contigua, strutture di dati o set di dati che risiedono in memoria un <xref:System.OutOfMemoryException> risultati dell'eccezione.  
  
 Per evitare il <xref:System.OutOfMemoryException> eccezioni, è necessario modificare l'applicazione in modo che minore quantità di dati residente in memoria o i dati vengono suddivisi in segmenti che richiedono le allocazioni di memoria inferiore. Ad esempio:  
  
-   Se si sono tutti i dati recuperati da un database e quindi filtrarli nell'app per ridurre al minimo trip al server, è necessario modificare la query per restituire solo il subset di dati necessari all'app. Quando si utilizzano tabelle di grandi dimensioni, più query sono quasi sempre più efficiente il recupero di tutti i dati in una singola tabella e la manipolazione.  
  
-   Se si sta eseguendo una query che gli utenti creano in modo dinamico, è necessario assicurarsi che il numero di record restituiti dalla query è limitato.  
  
-   Se si utilizzano matrici di grandi dimensioni o altra raccolta di oggetti i cui risultati di dimensioni in un <xref:System.OutOfMemoryException> eccezione, è necessario modificare l'applicazione per utilizzare i dati in subset piuttosto che sul relativo utilizzo in una sola volta.  
  
 Nell'esempio seguente ottiene una matrice è costituito da 200 milioni di valori a virgola mobile e quindi calcola la Media. L'output dell'esempio mostra che, poiché l'esempio memorizza l'intera matrice nella memoria prima di calcolare la media, un <xref:System.OutOfMemoryException> è viene generata un'eccezione.  
  
 [!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
 [!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
 Nell'esempio seguente elimina la <xref:System.OutOfMemoryException> eccezione dall'elaborazione di dati in arrivo senza archiviare l'intero set di dati in memoria, la serializzazione di dati in un file se necessario, per consentire l'ulteriore elaborazione (queste righe vengono impostati come commenti nell'esempio, Poiché in questo caso, producono un file la cui dimensione è maggiore di 1 GB) e restituendo la media calcolata e il numero di case alla routine chiamante.  
  
 [!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
 [!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
 Stringhe di grandi dimensioni si concatenano più volte.  
 Poiché le stringhe sono immutabili, ogni operazione di concatenazione di stringhe crea una nuova stringa. L'impatto per stringhe di piccole dimensioni o per un numero ridotto di operazioni di concatenazione è irrilevante. Ma per stringhe di grandi dimensioni o un numero molto elevato di operazioni di concatenazione, la concatenazione di stringhe può causare un numero elevato di allocazioni di memoria e la frammentazione della memoria, prestazioni ridotte ed eventualmente <xref:System.OutOfMemoryException> eccezioni.  
  
 Quando la concatenazione di stringhe di grandi dimensioni o l'esecuzione di un numero elevato di operazioni di concatenazione, si dovrebbe utilizzare il <xref:System.Text.StringBuilder> classe anziché la <xref:System.String> classe. Dopo la modifica della stringa, convertire il <xref:System.Text.StringBuilder> istanza a una stringa chiamando il <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Aggiungere un numero elevato di oggetti in memoria.  
 Aggiunta di un numero elevato di oggetti in memoria per lunghi periodi di tempo può rendere difficile per il garbage collector allocare blocchi contigui di memoria. Se sono stati aggiunti, ad esempio un numero elevato di oggetti in memoria, tramite il `fixed` istruzione in c# o chiamando il <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> metodo con un tipo di handle di <xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>, è possibile eseguire il comando seguente per l'indirizzo di <xref:System.OutOfMemoryException> eccezione.  
  
-   Valutare se ogni oggetto deve necessariamente essere aggiunto,  
  
-   Verificare che ogni oggetto è sbloccato appena possibile.  
  
-   Assicurarsi che ogni chiamata al <xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType> metodo pin memoria dispone di una chiamata corrispondente al <xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType> metodo per sbloccare la memoria.  
  
 Microsoft seguenti istruzioni (MSIL) intermedie generano un <xref:System.OutOfMemoryException> eccezione:  
  
-   [box](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
  
-   [newarr](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  
  
-   [newobj](http://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  
  
 <xref:System.OutOfMemoryException> Usa il valore HRESULT `COR_E_OUTOFMEMORY`, che ha il valore 0x8007000E.  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.OutOfMemoryException>, vedere il <xref:System.OutOfMemoryException.%23ctor%2A> costruttori.  
  
> [!NOTE]
>  Il valore ereditato <xref:System.Exception.Data%2A> proprietà è sempre `null`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.OutOfMemoryException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.OutOfMemoryException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Exception.Message%2A> proprietà della nuova istanza di un messaggio fornito dal sistema che descrive l'errore, ad esempio"memoria insufficiente per continuare l'esecuzione del programma". Questo messaggio prende in considerazione le impostazioni cultura correnti del sistema.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.OutOfMemoryException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore localizzato.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio in cui viene descritto l'errore.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.OutOfMemoryException" /> con un messaggio di errore specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il contenuto del parametro `message` deve essere facilmente comprensibile. Il chiamante del costruttore deve garantire che la stringa sia stata localizzata in base alle impostazioni cultura correnti del sistema.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.OutOfMemoryException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento null (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto che contiene i dati oggetto serializzati.</param>
        <param name="context">Informazioni contestuali sull'origine o sulla destinazione.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.OutOfMemoryException" /> con dati serializzati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore viene chiamato durante la deserializzazione per ricostituire l'oggetto eccezione trasmesso su un flusso. Per ulteriori informazioni, vedere [serializzazione XML e SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
        <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <c>innerException</c> non è un riferimento Null (<see langword="Nothing" /> in Visual Basic), l'eccezione corrente viene generata in un blocco <see langword="catch" /> che gestisce l'eccezione interna.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.OutOfMemoryException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'eccezione generata come risultato diretto di un'eccezione precedente può includere un riferimento all'eccezione precedente nella proprietà <xref:System.Exception.InnerException%2A>. La proprietà <xref:System.Exception.InnerException%2A> restituisce lo stesso valore che viene passato al costruttore o un riferimento null (`Nothing` in Visual Basic), se la proprietà <xref:System.Exception.InnerException%2A> non fornisce al costruttore il valore dell'eccezione interna.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.OutOfMemoryException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento all'eccezione interna.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>