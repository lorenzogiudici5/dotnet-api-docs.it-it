<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34c9e1f470bbf319f8b231e4cc6e738c41ed568b" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39900692" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eccezione generata come wrapper per l'eccezione generata dall'inizializzatore di classi. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un inizializzatore di classi non inizializza un tipo, viene creata un'eccezione <xref:System.TypeInitializationException> che viene passata come riferimento all'eccezione generata dall'inizializzatore di classi del tipo. Il <xref:System.Exception.InnerException%2A> proprietà di <xref:System.TypeInitializationException> contiene l'eccezione sottostante.  
  
 In genere, il <xref:System.TypeInitializationException> eccezione riflette una condizione irreversibile (il runtime è riuscito a creare un'istanza di un tipo) che impedisce a un'applicazione non potrà continuare.  In genere, il <xref:System.TypeInitializationException> viene generata in risposta a alcune modifiche nell'ambiente di esecuzione dell'applicazione. Di conseguenza, diverso da possibilmente per la risoluzione dei problemi di codice di debug, l'eccezione non deve essere gestito un `try` / `catch` blocco. Al contrario, la causa dell'eccezione esaminarlo ed eliminata.  
  
 <xref:System.TypeInitializationException> utilizza COR_E_TYPEINITIALIZATION HRESULT, che ha il valore 0x80131534.  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.TypeInitializationException>, vedere il <xref:System.TypeInitializationException.%23ctor%2A> costruttori.  
  
 Le sezioni seguenti descrivono alcune delle situazioni in cui un <xref:System.TypeInitializationException> viene generata un'eccezione.  
  
- [I costruttori statici e TypeInitializationException (eccezione)](#Static)   
- [Valori di timeout di corrispondenza di espressione regolare](#Timeout)   
- [I calendari e i dati relative alla lingua](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>I costruttori statici e TypeInitializationException

 Un costruttore statico, se presente, viene chiamato automaticamente dal runtime prima di creare una nuova istanza di un tipo. I costruttori statici possono essere definiti in modo esplicito dallo sviluppatore. Se un costruttore statico non è definito in modo esplicito, i compilatori creano automaticamente uno per inizializzare gli eventuali `static` (in c#) o `Shared` (in Visual Basic) membri del tipo.  Per altre informazioni su costruttori statici, vedere [costruttori statici](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 In genere, un <xref:System.TypeInitializationException> eccezione viene generata quando un costruttore statico non è in grado di creare un'istanza di un tipo.  Il <xref:System.Exception.InnerException%2A> proprietà indica il motivo per cui il costruttore statico non è riuscito a creare un'istanza di tipo. Alcune delle cause più comuni di un <xref:System.TypeInitializationException> eccezione sono:  
  
- Un'eccezione non gestita in un costruttore statico  
 
   Se viene generata un'eccezione in un costruttore statico, tale eccezione viene eseguito il wrapping un <xref:System.TypeInitializationException> eccezione e il tipo non è possibile creare un'istanza.  
  
   Ciò che spesso rende questa eccezione difficili da risolvere i problemi è che i costruttori statici non sono sempre in modo esplicito definiti nel codice sorgente. Un costruttore statico esiste in un tipo se:  
  
   -   Si è stato definito in modo esplicito come membro di un tipo.  
  
   -   Il tipo ha `static` (in c#) o `Shared` (in Visual Basic) le variabili che vengono dichiarate e inizializzate in un'unica istruzione. In questo caso, il compilatore genera un costruttore statico per il tipo. È possibile esaminarlo utilizzando un'utilità, ad esempio [Disassembler IL](~/docs/framework/tools/ildasm-exe-il-disassembler.md). Ad esempio, quando i compilatori c# e VB compilano l'esempio seguente, si genera il linguaggio IL per un costruttore statico che sarà simile al seguente:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   L'esempio seguente mostra un <xref:System.TypeInitializationException> eccezione generata da un costruttore statico generato dal compilatore. Il `Example` classe include una `static` (in c#) o `Shared` (in Visual Basic) campo di tipo `TestClass` che viene creata un'istanza passando un valore pari a 3 al costruttore della classe.  Tale valore, tuttavia, non è valido; sono consentiti solo valori pari a 0 o 1. Di conseguenza, il `TestClass` classe costruttore genera un <xref:System.ArgumentOutOfRangeException>. Poiché non viene gestita l'eccezione, ne viene eseguito il wrapping un <xref:System.TypeInitializationException> eccezione.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Si noti che il messaggio dell'eccezione vengono visualizzate informazioni sul <xref:System.Exception.InnerException%2A> proprietà.  
  
- Un file di dati o assembly mancano  
 
   Una causa comune di un <xref:System.TypeInitializationException> eccezione è che un file di assembly o i dati che era presente negli ambienti di sviluppo e test di un'applicazione è presente all'ambiente di runtime. Ad esempio, è possibile compilare l'esempio seguente in un assembly denominato Missing1a.dll usando la sintassi della riga di comando:  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   È quindi possibile compilare l'esempio seguente in un eseguibile denominato Missing1.exe includendo un riferimento a Missing1a.dll:  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Tuttavia, se si rinomina, spostare o eliminare Missing1a.dll ed eseguire l'esempio, genera un <xref:System.TypeInitializationException> eccezione e viene visualizzato l'output illustrato nell'esempio.  Si noti che il messaggio di eccezione include informazioni sul <xref:System.Exception.InnerException%2A> proprietà. In questo caso, l'eccezione interna è un <xref:System.IO.FileNotFoundException> che viene generata perché il runtime non è possibile trovare l'assembly dipendente.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  In questo esempio, un <xref:System.TypeInitializationException> è stata generata l'eccezione perché non è stato possibile caricare un assembly. L'eccezione può essere generata anche se un costruttore statico tenta di aprire un file di dati, ad esempio un file di configurazione, un file XML o un file contenente i dati, che non è possibile trovare serializzati.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Valori di timeout di corrispondenza di espressione regolare  
 È possibile impostare il valore di timeout predefinito per un criterio di espressione regolare corrispondenza operazione in base al dominio per ogni applicazione. Il timeout è definito da un valore che specifica un <xref:System.TimeSpan> valore per la proprietà "REGEX_DEFAULT_MATCH_TIMEOUT" per il <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> (metodo). L'intervallo di tempo deve essere un valore valido <xref:System.TimeSpan> oggetto che è maggiore di zero e minore di circa 24 giorni. Se non vengono soddisfatti questi requisiti, il tentativo di impostare il valore di timeout predefinito genera un <xref:System.ArgumentOutOfRangeException>, che a sua volta viene eseguito il wrapping un <xref:System.TypeInitializationException> eccezione.  
  
 L'esempio seguente illustra il <xref:System.TypeInitializationException> che viene generata quando il valore assegnato alla proprietà "REGEX_DEFAULT_MATCH_TIMEOUT" non è valido. Per eliminare l'eccezione, impostare la proprietà "REGEX_DEFAULT_MATCH_TIMEOUT" su un <xref:System.TimeSpan> valore maggiore di zero e minore di circa 24 giorni.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>I calendari e i dati relative alla lingua  
 Se si tenta di creare un'istanza di un calendario, ma il runtime è in grado di creare un'istanza di <xref:System.Globalization.CultureInfo> oggetto che corrisponde al calendario, genera un <xref:System.TypeInitializationException> eccezione. Questa eccezione può essere generata dai costruttori di classe calendario seguenti:  
  
-   Il costruttore predefinito del <xref:System.Globalization.JapaneseCalendar> classe.  
  
-   Il costruttore predefinito del <xref:System.Globalization.KoreanCalendar> classe.  
  
-   Il costruttore predefinito del <xref:System.Globalization.TaiwanCalendar> classe.  
  
 Poiché i dati relative alla lingua per queste impostazioni cultura devono essere disponibili in tutti i sistemi, si dovrebbe raramente, se mai, verificano questa eccezione.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">Nome completo del tipo che non riesce a eseguire l'inizializzazione.</param>
        <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <c>innerException</c> non è un riferimento Null (<see langword="Nothing" /> in Visual Basic), l'eccezione corrente viene generata in un blocco <see langword="catch" /> che gestisce l'eccezione interna.</param>
        <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.TypeInitializationException" /> con il messaggio di errore predefinito, il nome del tipo specificato e un riferimento all'eccezione interna che è la causa radice dell'eccezione corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'eccezione generata come risultato diretto di un'eccezione precedente può includere un riferimento all'eccezione precedente nella proprietà <xref:System.Exception.InnerException%2A>. La proprietà <xref:System.Exception.InnerException%2A> restituisce lo stesso valore che viene passato al costruttore o un riferimento null (`Nothing` in Visual Basic), se la proprietà <xref:System.Exception.InnerException%2A> non fornisce al costruttore il valore dell'eccezione interna.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.TypeInitializationException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento all'eccezione interna.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore localizzato.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Nome del tipo.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> che contiene i dati oggetto serializzati relativi all'eccezione generata.</param>
        <param name="context">Oggetto <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenente le informazioni contestuali sull'origine o sulla destinazione.</param>
        <summary>Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con il nome del tipo e informazioni aggiuntive sull'eccezione.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome completo del tipo che non riesce ad eseguire l'inizializzazione.</summary>
        <value>Nome completo del tipo che non riesce a eseguire l'inizializzazione.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>