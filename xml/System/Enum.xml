<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Enum.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b72035968e68df0e7ddb34a41fa7d0b2ad1858c6289.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">035968e68df0e7ddb34a41fa7d0b2ad1858c6289</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Provides the base class for enumerations.</source>
          <target state="translated">Si tratta della classe base per le enumerazioni.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An enumeration is a set of named constants whose underlying type is any integral type.</source>
          <target state="translated">Un'enumerazione è un set di costanti denominate il cui tipo sottostante è qualsiasi tipo integrale.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If no underlying type is explicitly declared, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> is used.</source>
          <target state="translated">Se nessun tipo sottostante è dichiarato in modo esplicito, <ph id="ph1">&lt;xref:System.Int32&gt;</ph> viene utilizzato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> is the base class for all enumerations in the .NET Framework.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> è la classe base per tutte le enumerazioni di .NET Framework.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration types are defined by the <ph id="ph1">`enum`</ph> keyword in C# and the <ph id="ph2">`Enum`</ph>...<ph id="ph3">`End Enum`</ph> construct in Visual Basic.</source>
          <target state="translated">Tipi di enumerazione sono definiti mediante il <ph id="ph1">`enum`</ph> (parola chiave) in c# e <ph id="ph2">`Enum`</ph>... <ph id="ph3">`End Enum`</ph> costruire in Visual Basic.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><ph id="ph1">&lt;xref:System.Enum&gt;</ph> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum&gt;</ph> fornisce metodi per il confronto delle istanze di questa classe, convertire il valore di un'istanza nella relativa rappresentazione di stringa, convertire la rappresentazione di stringa di un numero a un'istanza di questa classe e la creazione di un'istanza di un'enumerazione specificata e un valore.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also treat an enumeration as a bit field.</source>
          <target state="translated">È anche possibile considerare un'enumerazione come un campo di bit.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section and the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> topic.</source>
          <target state="translated">Per ulteriori informazioni, vedere il <bpt id="p1">[</bpt>membri Non esclusivi e l'attributo Flags<ept id="p1">](#Flags)</ept> sezione e <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> argomento.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In this topic:</source>
          <target state="translated">In questo argomento</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Creating an enumeration type<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Creazione di un tipo di enumerazione<ept id="p1">](#Creating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Instantiating an enumeration type<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Creazione di un tipo di enumerazione<ept id="p1">](#Instantiating)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Enumeration best practices<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Procedure consigliate di enumerazione<ept id="p1">](#BestPractices)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing operations with enumerations<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>Esecuzione di operazioni con le enumerazioni<ept id="p1">](#Operations)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Performing conversions<ept id="p1">](#conversions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Esecuzione di conversioni<ept id="p1">](#conversions)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Parsing enumeration values<ept id="p1">](#parsing)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Analisi dei valori di enumerazione<ept id="p1">](#parsing)</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Formatting enumeration values<ept id="p1">](#formatting)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Formattazione di valori di enumerazione<ept id="p1">](#formatting)</ept></target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Iterating enumeration members<ept id="p1">](#iterating)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>L'iterazione di membri di enumerazione<ept id="p1">](#iterating)</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Non-exclusive members and the Flags attribute<ept id="p1">](#Flags)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>I membri non esclusivo e l'attributo Flags<ept id="p1">](#Flags)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source><bpt id="p1">[</bpt>Adding enumeration methods<ept id="p1">](#methods)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Aggiunta di metodi di enumerazione<ept id="p1">](#methods)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Creating an enumeration type</source>
          <target state="translated">Creazione di un tipo di enumerazione</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</source>
          <target state="translated">Linguaggi di programmazione in genere forniscono la sintassi per dichiarare un'enumerazione che è costituito da un set di costanti denominate e i relativi valori.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</source>
          <target state="translated">Nell'esempio seguente viene illustrata la sintassi utilizzata da c# e Visual Basic per definire un'enumerazione.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It creates an enumeration named <ph id="ph1">`ArrivalStatus`</ph> that has three members: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, and <ph id="ph4">`ArrivalStatus.Late`</ph>.</source>
          <target state="translated">Crea un'enumerazione denominata <ph id="ph1">`ArrivalStatus`</ph> che dispone di tre membri: <ph id="ph2">`ArrivalStatus.Early`</ph>, <ph id="ph3">`ArrivalStatus.OnTime`</ph>, e <ph id="ph4">`ArrivalStatus.Late`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that in both cases, the enumeration does not explicitly inherit from <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; the inheritance relationship is handled implicitly by the compiler.</source>
          <target state="translated">Si noti che in entrambi i casi, l'enumerazione non ereditare da <ph id="ph1">&lt;xref:System.Enum&gt;</ph>; la relazione di ereditarietà viene gestita in modo implicito dal compilatore.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You should never create an enumeration type whose underlying type is non-integral or <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</source>
          <target state="translated">È consigliabile non creare mai un tipo di enumerazione il cui tipo sottostante è non integrale o <ph id="ph1">&lt;xref:System.Char&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</source>
          <target state="translated">Sebbene sia possibile creare un tipo di enumerazione tramite reflection, le chiamate di metodo che utilizzano il tipo risultante non sono affidabili e possono generare eccezioni aggiuntive.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Instantiating an enumeration type</source>
          <target state="translated">Creazione di un tipo di enumerazione</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</source>
          <target state="translated">È possibile creare un'istanza di un tipo di enumerazione esattamente come si crea un'istanza di qualsiasi altro tipo di valore: dichiarando una variabile e assegnarle una delle costanti dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example instantiates an <ph id="ph1">`ArrivalStatus`</ph> whose value is <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</source>
          <target state="translated">Nell'esempio seguente viene creata un'istanza di un <ph id="ph1">`ArrivalStatus`</ph> il cui valore è <ph id="ph2">`ArrivalStatus.OnTime`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can also instantiate an enumeration value in the following ways:</source>
          <target state="translated">È anche possibile creare un'istanza di un valore di enumerazione nei modi seguenti:</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</source>
          <target state="translated">Utilizzando le funzionalità di un particolare linguaggio di programmazione per eseguire il cast (come in c#) o convertire (come in Visual Basic) un valore intero in un valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example creates an <ph id="ph1">`ArrivalStatus`</ph> object whose value is <ph id="ph2">`ArrivalStatus.Early`</ph> in this way.</source>
          <target state="translated">Nell'esempio seguente viene creato un <ph id="ph1">`ArrivalStatus`</ph> oggetto il cui valore è <ph id="ph2">`ArrivalStatus.Early`</ph> in questo modo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling its implicit default constructor.</source>
          <target state="translated">Chiamando il costruttore predefinito implicito.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>As the following example shows, in this case the underlying value of the enumeration instance is 0.</source>
          <target state="translated">Come illustrato nell'esempio seguente, in questo caso il valore sottostante dell'istanza di enumerazione è 0.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, this is not necessarily the value of a valid constant in the enumeration.</source>
          <target state="translated">Tuttavia, ciò non è necessariamente il valore di costante valido nell'enumerazione.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> method to parse a string that contains the name of a constant in the enumeration.</source>
          <target state="translated">Chiamando il <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> metodo analizzare una stringa che contiene il nome di una costante nell'enumerazione.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Parsing Enumeration Values<ept id="p1">](#parsing)</ept> section.</source>
          <target state="translated">Per ulteriori informazioni, vedere il <bpt id="p1">[</bpt>l'analisi dei valori di enumerazione<ept id="p1">](#parsing)</ept> sezione.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By calling the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert an integral value to an enumeration type.</source>
          <target state="translated">Chiamando il <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> per convertire un valore integrale a un tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see the <bpt id="p1">[</bpt>Performing Conversions<ept id="p1">](#conversions)</ept> section.</source>
          <target state="translated">Per ulteriori informazioni, vedere il <bpt id="p1">[</bpt>esecuzione di conversioni<ept id="p1">](#conversions)</ept> sezione.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Enumeration best practices</source>
          <target state="translated">Procedure consigliate di enumerazione</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>We recommend that you use the following best practices when you define enumeration types:</source>
          <target state="translated">È consigliabile utilizzare le procedure consigliate seguenti quando si definiscono i tipi di enumerazione:</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you have not defined an enumeration member whose value is 0, consider creating a <ph id="ph1">`None`</ph> enumerated constant.</source>
          <target state="translated">Se non è stato definito un membro di enumerazione il cui valore è 0, è consigliabile creare un <ph id="ph1">`None`</ph> costante enumerata.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>By default, the memory used for the enumeration is initialized to zero by the common language runtime.</source>
          <target state="translated">Per impostazione predefinita, la memoria utilizzata per l'enumerazione è inizializzata su zero da common language runtime.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</source>
          <target state="translated">Di conseguenza, se non si definisce una costante il cui valore è zero, l'enumerazione conterrà un valore non valido al momento della creazione.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</source>
          <target state="translated">Se un caso predefinito che l'applicazione deve rappresentare, è possibile utilizzare un tipo enumerato costante il cui valore è zero per rappresentarlo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</source>
          <target state="translated">Se nessun caso predefinito, è consigliabile utilizzare una costante enumerata il cui valore è zero per specificare che non è rappresentata da una delle altre costanti enumerate.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not specify enumerated constants that are reserved for future use.</source>
          <target state="translated">Non si specifica costanti enumerate che sono riservate per utilizzi futuri.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When you define a method or property that takes an enumerated constant as a value, consider validating the value.</source>
          <target state="translated">Quando si definisce un metodo o proprietà che accetta una costante enumerata come valore, è consigliabile convalidare il valore.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</source>
          <target state="translated">Infatti, è possibile eseguire il cast di un valore numerico per il tipo di enumerazione anche se tale valore numerico non è definito nell'enumerazione.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Additional best practices for enumeration types whose constants are bit fields are listed in the <bpt id="p1">[</bpt>Non-Exclusive Members and the Flags Attribute<ept id="p1">](#Flags)</ept> section.</source>
          <target state="translated">Procedure consigliate aggiuntive per i tipi di enumerazione il cui costanti sono campi di bit sono elencati nel <bpt id="p1">[</bpt>membri Non esclusivi e l'attributo Flags<ept id="p1">](#Flags)</ept> sezione.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing operations with enumerations</source>
          <target state="translated">Esecuzione di operazioni con le enumerazioni</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot define new methods when you are creating an enumeration.</source>
          <target state="translated">Quando si crea un'enumerazione, è possibile definire nuovi metodi.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, an enumeration type inherits a complete set of static and instance methods from the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">Tuttavia, un tipo di enumerazione eredita un set completo di statici e i metodi di istanza dalla <ph id="ph1">&lt;xref:System.Enum&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</source>
          <target state="translated">La maggior parte di questi metodi, oltre a diversi altri metodi di uso comune quando si lavora con valori di enumerazione il sondaggio nelle sezioni seguenti.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Performing conversions</source>
          <target state="translated">Esecuzione di conversioni</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</source>
          <target state="translated">È possibile convertire tra un membro di enumerazione e il relativo tipo sottostante tramite un cast (in c#) o un operatore di conversione (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</source>
          <target state="translated">L'esempio seguente usa gli operatori di cast o conversione di eseguire le conversioni da un numero intero e un valore di enumerazione e da un valore di enumerazione in un intero.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class also includes a <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method that converts a value of any integral type to an enumeration value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum&gt;</ph> include anche un <ph id="ph2">&lt;xref:System.Enum.ToObject%2A&gt;</ph> metodo che converte un valore di qualsiasi tipo integrale in un valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method to convert an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> to an <ph id="ph3">`ArrivalStatus`</ph> value.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> metodo per convertire un <ph id="ph2">&lt;xref:System.Int32&gt;</ph> per un <ph id="ph3">`ArrivalStatus`</ph> valore.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that, because the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> returns a value of type <ph id="ph2">&lt;xref:System.Object&gt;</ph>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</source>
          <target state="translated">Si noti che, in quanto il <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> restituisce un valore di tipo <ph id="ph2">&lt;xref:System.Object&gt;</ph>, l'utilizzo di un operatore di cast o conversione potrebbe essere ancora necessario per il cast dell'oggetto nel tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</source>
          <target state="translated">Quando si converte un valore integer a un valore di enumerazione, è possibile assegnare un valore che non è effettivamente un membro dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, you can pass the integer to the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method before performing the conversion.</source>
          <target state="translated">Per evitare questo problema, è possibile passare il valore integer per il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo prima di eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses this method to determine whether the elements in an array of integer values can be converted to <ph id="ph1">`ArrivalStatus`</ph> values.</source>
          <target state="translated">L'esempio seguente usa questo metodo per determinare se gli elementi in una matrice di valori integer possono essere convertiti in <ph id="ph1">`ArrivalStatus`</ph> valori.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Although the <ph id="ph1">&lt;xref:System.Enum&gt;</ph> class provides explicit interface implementations of the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface for converting from an enumeration value to an integral type, you should use the methods of the <ph id="ph3">&lt;xref:System.Convert&gt;</ph> class, such as <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, to perform these conversions.</source>
          <target state="translated">Sebbene il <ph id="ph1">&lt;xref:System.Enum&gt;</ph> classe fornisce le implementazioni esplicite dell'interfaccia del <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interfaccia per la conversione da un valore di enumerazione a un tipo integrale, è necessario utilizzare i metodi del <ph id="ph3">&lt;xref:System.Convert&gt;</ph> classe, ad esempio <ph id="ph4">&lt;xref:System.Convert.ToInt32%2A&gt;</ph>, a eseguire queste conversioni.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates how you can use the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method along with the <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> method to convert an enumeration value to its underlying type.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare il <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> metodo lungo con il <ph id="ph2">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> metodo per convertire un valore di enumerazione al tipo sottostante.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that this example does not require the underlying type of the enumeration to be known at compile time.</source>
          <target state="translated">Si noti che in questo esempio non richiede il tipo sottostante dell'enumerazione sia noto in fase di compilazione.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Parsing enumeration values</source>
          <target state="translated">Analisi dei valori di enumerazione</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> methods allow you to convert the string representation of an enumeration value to that value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Enum.TryParse%2A&gt;</ph> metodi consentono di convertire la rappresentazione di stringa del valore di enumerazione con tale valore.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The string representation can be either the name or the underlying value of an enumeration constant.</source>
          <target state="translated">La rappresentazione di stringa può essere il nome o il valore sottostante di una costante di enumerazione.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</source>
          <target state="translated">Si noti che i metodi di analisi convertirà correttamente le rappresentazioni di stringa di numeri che non sono membri di una particolare enumerazione se le stringhe possono essere convertite in un valore di tipo sottostante dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>To prevent this, the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method can be called to ensure that the result of the parsing method is a valid enumeration value.</source>
          <target state="translated">Per evitare questo problema, il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo può essere chiamato per assicurarsi che il risultato del metodo di analisi è un valore di enumerazione valido.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The example illustrates this approach and demonstrates calls to both the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> and <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Nell'esempio viene illustrato questo approccio e illustra le chiamate a entrambi il <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> e <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType&gt;</ph> metodi.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</source>
          <target state="translated">Si noti che il metodo di analisi non generica restituisce un oggetto che potrebbe essere necessario eseguire il cast (in c#) o convertire (in Visual Basic) per il tipo di enumerazione appropriata.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Formatting enumeration values</source>
          <target state="translated">Formattazione di valori di enumerazione</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can convert enumeration values to their string representations by calling the static <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> method, as well as the overloads of the instance <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> method.</source>
          <target state="translated">È possibile convertire i valori di enumerazione per le rappresentazioni di stringa chiamando il metodo statico <ph id="ph1">&lt;xref:System.Enum.Format%2A&gt;</ph> (metodo), nonché gli overload dell'istanza <ph id="ph2">&lt;xref:System.Enum.ToString%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can use a format string to control the precise way in which an enumeration value is represented as a string.</source>
          <target state="translated">È possibile utilizzare una stringa di formato per controllare esattamente il modo in cui un valore di enumerazione è rappresentato come stringa.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For more information, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>stringhe di formato di enumerazione<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the <ph id="ph1">`ArrivalStatus`</ph> enumeration to its string representations.</source>
          <target state="translated">L'esempio seguente usa ognuna delle stringhe di formato di enumerazione supportata ("G" o "g", "D" o "d", "X" o "x" e "F" o "f") per convertire un membro del <ph id="ph1">`ArrivalStatus`</ph> enumerazione nelle relative rappresentazioni di stringa.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Iterating enumeration members</source>
          <target state="translated">L'iterazione di membri di enumerazione</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> type does not implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, which would enable you to iterate members of a collection by using a <ph id="ph4">`foreach`</ph> (in C#) or <ph id="ph5">`For Each`</ph> (in Visual Basic) construct.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum&gt;</ph> tipo non implementa il <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> o <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interfaccia, che consente di scorrere i membri di una raccolta utilizzando un <ph id="ph4">`foreach`</ph> (in c#) o <ph id="ph5">`For Each`</ph> costruire (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can enumerate members in either of two ways.</source>
          <target state="translated">Tuttavia, è possibile enumerare i membri di uno dei due modi.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method to retrieve a string array containing the names of the enumeration members.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metodo per recuperare una matrice di stringhe contenente i nomi dei membri dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the string array, you can call the <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> method to convert the string to its equivalent enumeration value.</source>
          <target state="translated">Successivamente, per ogni elemento della matrice di stringhe, è possibile chiamare il <ph id="ph1">&lt;xref:System.Enum.Parse%2A&gt;</ph> per convertire la stringa a valore di enumerazione equivalente.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">Questo approccio viene illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You can call the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method to retrieve an array that contains the underlying values in the enumeration.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> metodo per recuperare una matrice che contiene l'oggetto sottostante per i valori nell'enumerazione.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Next, for each element of the array, you can call the <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> method to convert the integer to its equivalent enumeration value.</source>
          <target state="translated">Successivamente, per ogni elemento della matrice, è possibile chiamare il <ph id="ph1">&lt;xref:System.Enum.ToObject%2A&gt;</ph> per convertire il valore integer a equivalente valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example illustrates this approach.</source>
          <target state="translated">Questo approccio viene illustrato nell'esempio seguente:</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Non-exclusive members and the Flags attribute</source>
          <target state="translated">I membri non esclusivo e l'attributo Flags</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>One common use of an enumeration is to represent a set of mutually exclusive values.</source>
          <target state="translated">Un utilizzo comune di un'enumerazione è per rappresentare un set di valori si escludono a vicenda.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an <ph id="ph1">`ArrivalStatus`</ph> instance can have a value of <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, or <ph id="ph4">`Late`</ph>.</source>
          <target state="translated">Ad esempio, un <ph id="ph1">`ArrivalStatus`</ph> istanza può avere un valore di <ph id="ph2">`Early`</ph>, <ph id="ph3">`OnTime`</ph>, o <ph id="ph4">`Late`</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It makes no sense for the value of an <ph id="ph1">`ArrivalStatus`</ph> instance to reflect more than one enumeration constant.</source>
          <target state="translated">Non ha senso per il valore di un <ph id="ph1">`ArrivalStatus`</ph> istanza in modo da riflettere più di una costante di enumerazione.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</source>
          <target state="translated">In altri casi, tuttavia, il valore di un oggetto di enumerazione può includere più membri di enumerazione e ogni membro rappresenta un campo di bit nel valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute can be used to indicate that the enumeration consists of bit fields.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attributo può essere utilizzato per indicare che l'enumerazione è costituita da campi di bit.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, an enumeration named <ph id="ph1">`Pets`</ph> might be used to indicate the kinds of pets in a household.</source>
          <target state="translated">Ad esempio, un'enumerazione denominata <ph id="ph1">`Pets`</ph> potrebbe essere utilizzato per indicare i tipi di animali domestici in una famiglia.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It can be defined as follows.</source>
          <target state="translated">Può essere definito come indicato di seguito.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Pets`</ph> enumeration can then be used as shown in the following example.</source>
          <target state="translated">Il <ph id="ph1">`Pets`</ph> enumerazione può quindi essere utilizzata come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following best practices should be used when defining a bitwise enumeration and applying the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute.</source>
          <target state="translated">Le seguenti procedure consigliate da utilizzare durante la definizione di un bit per bit dell'enumerazione e l'applicazione di <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attributo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attributo personalizzato per un'enumerazione solo se un'operazione bit per bit (AND, OR esclusivo o) deve essere eseguita su un valore numerico.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</source>
          <target state="translated">Definire le costanti di enumerazione in potenze di due, ovvero 1, 2, 4, 8 e così via.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This means the individual flags in combined enumeration constants do not overlap.</source>
          <target state="translated">Ciò significa che i singoli flag nelle costanti di enumerazione combinate non si sovrappongano.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Consider creating an enumerated constant for commonly used flag combinations.</source>
          <target state="translated">È consigliabile creare una costante enumerata per le combinazioni di flag di uso comune.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, if you have an enumeration used for file I/O operations that contains the enumerated constants <ph id="ph1">`Read = 1`</ph> and <ph id="ph2">`Write = 2`</ph>, consider creating the enumerated constant <ph id="ph3">`ReadWrite = Read OR Write`</ph>, which combines the <ph id="ph4">`Read`</ph> and <ph id="ph5">`Write`</ph> flags.</source>
          <target state="translated">Ad esempio, se si dispone di un'enumerazione utilizzata per le operazioni dei / o file che contiene le costanti enumerate <ph id="ph1">`Read = 1`</ph> e <ph id="ph2">`Write = 2`</ph>, prendere in considerazione la creazione della costante enumerata <ph id="ph3">`ReadWrite = Read OR Write`</ph>, che combina il <ph id="ph4">`Read`</ph> e <ph id="ph5">`Write`</ph> flag.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</source>
          <target state="translated">Inoltre, l'operazione OR bit per bit usato per combinare i flag può essere considerato un concetto avanzato in alcuni casi che non devono essere necessari per eseguire semplici operazioni.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</source>
          <target state="translated">Prestare attenzione se si definisce un numero negativo come costante enumerata di flag poiché molte posizioni di flag potrebbero essere impostate su 1, che potrebbe rendere il codice poco chiaro e incoraggiare gli errori di codice.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>A convenient way to test whether a flag is set in a numeric value is to call the instance <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method, as shown in the following example.</source>
          <target state="translated">Un modo pratico per verificare se un flag è impostato in un valore numerico consiste nel chiamare l'istanza <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> (metodo), come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</source>
          <target state="translated">Equivale all'esecuzione di un'operazione AND bit per bit tra il valore numerico e costante enumerata di flag, che imposta il valore numerico da zero che corrisponde al flag di tutti i componenti, e quindi verificare se il risultato di tale operazione è uguale al Costante enumerata di flag.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">Questa procedura è illustrata nell'esempio riportato di seguito.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Use <ph id="ph1">`None`</ph> as the name of the flag enumerated constant whose value is zero.</source>
          <target state="translated">Utilizzare <ph id="ph1">`None`</ph> come il nome del flag costante enumerata il cui valore è zero.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>You cannot use the <ph id="ph1">`None`</ph> enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</source>
          <target state="translated">Non è possibile utilizzare il <ph id="ph1">`None`</ph> costante enumerata in un'operazione con AND bit per bit per verificare un flag perché il risultato è sempre zero.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can perform a logical, not a bitwise, comparison between the numeric value and the <ph id="ph1">`None`</ph> enumerated constant to determine whether any bits in the numeric value are set.</source>
          <target state="translated">Tuttavia, è possibile eseguire una logica, non un confronto bit per bit tra il valore numerico e <ph id="ph1">`None`</ph> costante enumerata per determinare se alcuni bit del valore numerico sono impostati.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This is illustrated in the following example.</source>
          <target state="translated">Questa procedura è illustrata nell'esempio riportato di seguito.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Do not define an enumeration value solely to mirror the state of the enumeration itself.</source>
          <target state="translated">Non definire un valore di enumerazione esclusivamente per rispecchiare lo stato dell'enumerazione stessa.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>For example, do not define an enumerated constant that merely marks the end of the enumeration.</source>
          <target state="translated">Ad esempio, si definisce una costante enumerata che semplicemente contrassegna la fine dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>If you need to determine the last value of the enumeration, check for that value explicitly.</source>
          <target state="translated">Se è necessario determinare l'ultimo valore dell'enumerazione, verificare la presenza di tale valore in modo esplicito.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</source>
          <target state="translated">Inoltre, è possibile eseguire un controllo di intervallo per la prima e ultima costante enumerata se tutti i valori all'interno dell'intervallo sono validi.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Adding enumeration methods</source>
          <target state="translated">Aggiunta di metodi di enumerazione</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>Because enumeration types are defined by language structures, such as <ph id="ph1">`enum`</ph> (C#) and <ph id="ph2">`Enum`</ph> (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <ph id="ph3">&lt;xref:System.Enum&gt;</ph> class.</source>
          <target state="translated">Poiché i tipi di enumerazione sono definiti dalle strutture di linguaggio, ad esempio <ph id="ph1">`enum`</ph> (c#) e <ph id="ph2">`Enum`</ph> (Visual Basic), non è possibile definire metodi personalizzati per un tipo di enumerazione diverso da tali metodi ereditati dalla <ph id="ph3">&lt;xref:System.Enum&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>However, you can use extension methods to add functionality to a particular enumeration type.</source>
          <target state="translated">Tuttavia, è possibile utilizzare i metodi di estensione per aggiungere funzionalità di un particolare tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>In the following example, the <ph id="ph1">`Grades`</ph> enumeration represents the possible letter grades that a student may receive in a class.</source>
          <target state="translated">Nell'esempio seguente, l'enumerazione <ph id="ph1">`Grades`</ph> rappresenta il voto che uno studente potrebbe ricevere in un corso.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>An extension method named <ph id="ph1">`Passing`</ph> is added to the <ph id="ph2">`Grades`</ph> type so that each instance of that type now "knows" whether it represents a passing grade or not.</source>
          <target state="translated">Il metodo di estensione denominato <ph id="ph1">`Passing`</ph> viene aggiunto al tipo <ph id="ph2">`Grades`</ph> in modo che ogni istanza di tale tipo ora "sa" se rappresenta un voto sufficiente oppure no.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The <ph id="ph1">`Extensions`</ph> class also contains a static read-write variable that defines the minimum passing grade.</source>
          <target state="translated">La <ph id="ph1">`Extensions`</ph> classe contiene inoltre una variabile statica di sola lettura che definisce il livello minimo di passaggio.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The return value of the <ph id="ph1">`Passing`</ph> extension method reflects the current value of that variable.</source>
          <target state="translated">Il valore restituito di <ph id="ph1">`Passing`</ph> metodo di estensione riflette il valore corrente della variabile.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di un'enumerazione per rappresentare valori denominati e un'altra enumerazione per rappresentare i campi di bit denominati.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Enum">
          <source>This type is thread safe.</source>
          <target state="translated">Questo tipo è thread-safe.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Enum.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>An object to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto da confrontare o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>Compares this instance to a specified object and returns an indication of their relative values.</source>
          <target state="translated">Confronta questa istanza con un oggetto specificato e restituisce un'indicazione dei valori relativi.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>A signed number that indicates the relative values of this instance and <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated">Numero con segno che indica i valori relativi di questa istanza e <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valore</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Significato</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Minore di zero</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is less than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Il valore dell'istanza è minore del valore di <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is equal to the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Il valore dell'istanza è uguale al valore di <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Maggiore di zero</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The value of this instance is greater than the value of <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Il valore dell'istanza è maggiore del valore di <ph id="ph3">&lt;paramref name="target" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.CompareTo(System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`CompareTo`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di <ph id="ph1">`CompareTo`</ph> nel contesto di <ph id="ph2">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> and this instance are not the same type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> e questa istanza non sono dello stesso tipo.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Enum.CompareTo(System.Object)">
          <source>This instance is not type <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">Questa istanza non è di tipo <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt32" /&gt;</ph> o <ph id="ph8">&lt;see cref="T:System.UInt64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>An object to compare with this instance, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Oggetto da confrontare con questa istanza o <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Enum.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> è un valore di enumerazione dello stesso tipo e con lo stesso valore sottostante dell'istanza; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method overrides <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> to define how enumeration members are evaluated for equality.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> override dei metodi <ph id="ph2">&lt;xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> per definire la modalità di valutazione dei membri di enumerazione per verificarne l'uguaglianza.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The following example defines two enumeration types, <ph id="ph1">`SledDog`</ph> and <ph id="ph2">`WorkDog`</ph>.</source>
          <target state="translated">L'esempio seguente definisce due tipi di enumerazione, <ph id="ph1">`SledDog`</ph> e <ph id="ph2">`WorkDog`</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog`</ph> enumeration has two members, <ph id="ph2">`SledDog.AlaskanMalamute`</ph> and <ph id="ph3">`SledDog.Malamute`</ph>, that have the same underlying value.</source>
          <target state="translated">Il <ph id="ph1">`SledDog`</ph> enumerazione dispone di due membri, <ph id="ph2">`SledDog.AlaskanMalamute`</ph> e <ph id="ph3">`SledDog.Malamute`</ph>, che hanno lo stesso valore sottostante.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are equal because their underlying values are the same.</source>
          <target state="translated">La chiamata al <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> metodo indica che questi valori sono uguali perché i relativi valori sottostanti sono gli stessi.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>The <ph id="ph1">`SledDog.Malamute`</ph> and <ph id="ph2">`WorkDog.Newfoundland`</ph> members have the same underlying value, although they represent different enumeration types.</source>
          <target state="translated">Il <ph id="ph1">`SledDog.Malamute`</ph> e <ph id="ph2">`WorkDog.Newfoundland`</ph> i membri hanno lo stesso valore sottostante, anche se rappresentano i tipi di enumerazione diverso.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Equals(System.Object)">
          <source>A call to the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method indicates that these values are not equal.</source>
          <target state="translated">Una chiamata al <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> metodo indica che questi valori non sono uguali.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The enumeration type of the value to convert.</source>
          <target state="translated">Tipo di enumerazione del valore da convertire.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value to convert.</source>
          <target state="translated">Valore da convertire.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The output format to use.</source>
          <target state="translated">Formato di output da usare.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</source>
          <target state="translated">Converte il valore specificato di un determinato tipo enumerato nella rappresentazione di stringa equivalente, secondo il formato specificato.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>A string representation of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Rappresentazione in forma di stringa di <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following table shows the valid values for the <ph id="ph1">`format`</ph> parameter.</source>
          <target state="translated">Nella tabella seguente illustra i valori validi per il <ph id="ph1">`format`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Format</source>
          <target state="translated">Formato</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Description</source>
          <target state="translated">Descrizione</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"G" or "g"</source>
          <target state="translated">"G" o "g"</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è uguale a una costante enumerata denominata, il nome della costante è restituita; in caso contrario, l'equivalente decimale <ph id="ph2">`value`</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For example, suppose the only enumerated constant is named Red, and its value is 1.</source>
          <target state="translated">Si supponga, ad esempio, la sola costante enumerata sia denominata Red e il relativo valore è 1.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is specified as 1, this format returns "Red".</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è specificata come 1, questo formato restituirà "Red".</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>However, if <ph id="ph1">`value`</ph> is specified as 2, this format returns "2".</source>
          <target state="translated">Tuttavia, se <ph id="ph1">`value`</ph> è specificato come 2, questo formato restituirà "2".</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> custom attribute is applied to the enumeration, <ph id="ph2">`value`</ph> is treated as a bit field that contains one or more flags that consist of one or more bits.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> viene applicato l'attributo personalizzato per l'enumerazione, <ph id="ph2">`value`</ph> viene considerato come un campo di bit che contiene uno o più flag costituiti da uno o più bit.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è uguale a una combinazione di costanti enumerate denominate, viene restituito un elenco separato da delimitatore dei nomi delle costanti.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">`value`</ph> is searched for flags, going from the flag with the largest value to the smallest value.</source>
          <target state="translated"><ph id="ph1">`value`</ph> viene eseguita la ricerca i flag, da quello con il valore più grande al più piccolo valore.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>For each flag that corresponds to a bit field in <ph id="ph1">`value`</ph>, the name of the constant is concatenated to the delimiter-separated list.</source>
          <target state="translated">Per ogni flag corrispondente a un campo di bit in <ph id="ph1">`value`</ph>, il nome della costante viene concatenato all'elenco separato da delimitatore.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The value of that flag is then excluded from further consideration, and the search continues for the next flag.</source>
          <target state="translated">Il valore del flag è quindi considerato ulteriormente e continua la ricerca del flag successivo.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>If <ph id="ph1">`value`</ph> is not equal to a combination of named enumerated constants, the decimal equivalent of <ph id="ph2">`value`</ph> is returned.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> non è uguale a una combinazione di costanti enumerate denominate, l'equivalente decimale <ph id="ph2">`value`</ph> viene restituito.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"X" or "x"</source>
          <target state="translated">"X" o "x"</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in hexadecimal format without a leading "0x".</source>
          <target state="translated">Rappresenta <ph id="ph1">`value`</ph> in formato esadecimale senza un "0x" iniziale.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"D" or "d"</source>
          <target state="translated">"D" o "d"</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Represents <ph id="ph1">`value`</ph> in decimal form.</source>
          <target state="translated">Rappresenta <ph id="ph1">`value`</ph> in formato decimale.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>"F" or "f"</source>
          <target state="translated">"F" o "f"</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>Behaves identically to "G" or "g", except that the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not required to be present on the <ph id="ph2">&lt;xref:System.Enum&gt;</ph> declaration.</source>
          <target state="translated">Si comporta come "G" o "g", ad eccezione del fatto che il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> non deve essere presente nel <ph id="ph2">&lt;xref:System.Enum&gt;</ph> dichiarazione.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The following example illustrates the use of <ph id="ph1">`Format`</ph> in the context of <ph id="ph2">`Enum`</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di <ph id="ph1">`Format`</ph> nel contesto di <ph id="ph2">`Enum`</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, <ph id="ph2">&lt;paramref name="value" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="format" /&gt;</ph> parameter is <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, <ph id="ph2">&lt;paramref name="value" /&gt;</ph> o <ph id="ph3">&lt;paramref name="format" /&gt;</ph> è <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph> type.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è di tipo <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is from an enumeration that differs in type from <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;paramref name="value" /&gt;</ph> è derivante da un'enumerazione di tipo diverso rispetto a <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Il tipo di <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è un tipo sottostante di <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source>The <ph id="ph1">&lt;paramref name="format" /&gt;</ph> parameter contains an invalid value.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="format" /&gt;</ph> contiene un valore non valido.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Enum.Format(System.Type,System.Object,System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> è uguale a "X", ma il tipo di enumerazione è sconosciuto.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>Returns the hash code for the value of this instance.</source>
          <target state="translated">Viene restituito il codice hash per il valore dell'istanza.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Enum.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Codice hash di un intero con segno a 32 bit.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The value of a particular enumerated constant in terms of its underlying type.</source>
          <target state="translated">Valore di una determinata costante enumerata in base al relativo tipo sottostante.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>Retrieves the name of the constant in the specified enumeration that has the specified value.</source>
          <target state="translated">Restituisce il nome della costante nell'enumerazione del valore specificato.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>A string containing the name of the enumerated constant in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is <ph id="ph2">&lt;paramref name="value" /&gt;</ph>; or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if no such constant is found.</source>
          <target state="translated">Stringa contenente il nome della costante enumerata in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>, il cui valore è <ph id="ph2">&lt;paramref name="value" /&gt;</ph> oppure <ph id="ph3">&lt;see langword="null" /&gt;</ph> se tale costante non viene rilevata.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>If multiple enumeration members have the same underlying value, the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method guarantees that it will return the name of one of those enumeration members.</source>
          <target state="translated">Se più membri di enumerazione hanno lo stesso valore sottostante, la <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> metodo garantisce che verrà restituito il nome di uno di tali membri di enumerazione.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>However, it does not guarantee that it will always return the name of the same enumeration member.</source>
          <target state="translated">Tuttavia, non garantisce che restituirà sempre il nome del membro dell'enumerazione stessa.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</source>
          <target state="translated">Di conseguenza, quando più membri di enumerazione hanno lo stesso valore, il codice dell'applicazione non deve mai dipendono dal metodo che restituisce il nome di un particolare membro.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>The following example illustrates the use of <ph id="ph1">`GetName`</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di <ph id="ph1">`GetName`</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Enum.GetName(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is neither of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> nor does it have the same underlying type as <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è di tipo <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> e non ha lo stesso tipo sottostante di <ph id="ph3">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>Retrieves an array of the names of the constants in a specified enumeration.</source>
          <target state="translated">Restituisce una matrice dei nomi delle costanti in una enumerazione specificata.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source>A string array of the names of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Matrice di stringhe dei nomi delle costanti in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</source>
          <target state="translated">Gli elementi della matrice di valori restituiti vengono ordinati in base ai valori binari di costanti enumerate (vale a dire dalla grandezza senza segno).</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example provides displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method for an enumeration that includes a negative, zero, and a positive value.</source>
          <target state="translated">Nell'esempio seguente viene visualizza informazioni sulla matrice restituita dal <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metodo per un'enumerazione che include un valore negativo, zero e un valore positivo.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>If there are enumerated constants with same value, the order of their corresponding names is unspecified.</source>
          <target state="translated">Se sono presenti costanti enumerate con stesso valore, non è specificato l'ordine dei nomi corrispondenti.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetNames(System.Type)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Enum.GetNames(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> parameter is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un oggetto <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>Returns the type code of the underlying type of this enumeration member.</source>
          <target state="translated">Restituisce il codice del tipo sottostante di questo membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The type code of the underlying type of this instance.</source>
          <target state="translated">Codice del tipo sottostante di questa istanza.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Enum.GetTypeCode">
          <source>The enumeration type is unknown.</source>
          <target state="translated">Il tipo di enumerazione è sconosciuto.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The enumeration whose underlying type will be retrieved.</source>
          <target state="translated">Enumerazione il cui tipo sottostante verrà recuperato.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>Returns the underlying type of the specified enumeration.</source>
          <target state="translated">Restituisce il tipo sottostante dell'enumerazione specificata.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The underlying type of <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Tipo sottostante di <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum&gt;</ph> structure enables values to be represented as named constants.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum&gt;</ph> struttura consente di valori essere rappresentato come costanti denominate.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The data type of the enumeration's values is known as its underlying type.</source>
          <target state="translated">Il tipo di dati dei valori dell'enumerazione è noto come tipo sottostante.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>For example, the underlying type of the <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumeration, which consists of constants that represent each day of the week (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>, and so on), is <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">Ad esempio, il tipo sottostante del <ph id="ph1">&lt;xref:System.DayOfWeek&gt;</ph> enumerazione, che include le costanti che rappresentano ogni giorno della settimana (<ph id="ph2">&lt;xref:System.DayOfWeek.Monday?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType&gt;</ph>e così via), è <ph id="ph4">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> method to display the underlying type of some enumeration members.</source>
          <target state="translated">L'esempio seguente chiama il <ph id="ph1">&lt;xref:System.Enum.GetUnderlyingType%2A&gt;</ph> metodo per visualizzare il tipo sottostante di alcuni membri dell'enumerazione.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Enum.GetUnderlyingType(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>Retrieves an array of the values of the constants in a specified enumeration.</source>
          <target state="translated">Restituisce una matrice dei valori delle costanti in una enumerazione specificata.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>An array that contains the values of the constants in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Matrice contenente i valori delle costanti in <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</source>
          <target state="translated">Gli elementi della matrice sono ordinati in base ai valori binari delle costanti di enumerazione (vale a dire dalla grandezza senza segno).</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example displays information about the array returned by the <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method for an enumeration that includes a negative value, zero, and a positive value.</source>
          <target state="translated">Nell'esempio seguente visualizza le informazioni della matrice restituita dal <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> metodo per un'enumerazione che include un valore negativo, zero e un valore positivo.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method returns an array that contains a value for each member of the <ph id="ph2">`enumType`</ph> enumeration.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> metodo restituisce una matrice che contiene un valore per ogni membro del <ph id="ph2">`enumType`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>If multiple members have the same value, the returned array includes duplicate values.</source>
          <target state="translated">Se più membri hanno lo stesso valore, la matrice restituita include valori duplicati.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>In this case, calling the <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</source>
          <target state="translated">In questo caso, la chiamata di <ph id="ph1">&lt;xref:System.Enum.GetName%2A&gt;</ph> (metodo) con ogni valore nella matrice restituita non ripristina i nomi univoci assegnati a membri che hanno valori duplicati.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>To retrieve all the names of enumeration members successfully, call the <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">Per recuperare tutti i nomi dei membri dell'enumerazione correttamente, chiamare il <ph id="ph1">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> method cannot be invoked by using reflection in a reflection-only context.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph> metodo non può essere richiamato tramite reflection in un contesto reflection-only.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>Instead, you can retrieve the value of all enumeration members by using the <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> method to get an array of <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects that represent enumeration members and then call the <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph> method on each element of the array.</source>
          <target state="translated">In alternativa, è possibile recuperare il valore di tutti i membri di enumerazione utilizzando il <ph id="ph1">&lt;xref:System.Type.GetFields%2A?displayProperty=nameWithType&gt;</ph> metodo per ottenere una matrice di <ph id="ph2">&lt;xref:System.Reflection.FieldInfo&gt;</ph> gli oggetti che rappresentano i membri di enumerazione e chiamano quindi il <ph id="ph3">&lt;xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType&gt;</ph> metodo su ogni elemento della matrice.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates this technique.</source>
          <target state="translated">L'esempio seguente illustra questa tecnica.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>It requires that you define the following enumeration in an assembly named Enumerations.dll:</source>
          <target state="translated">Richiede che un assembly denominato Enumerations.dll definito nell'enumerazione seguente:</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The assembly is loaded in a reflection-only context, a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">`Pets`</ph> enumeration is instantiated, an array of <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> objects is retrieved, and the field values are displayed to the console.</source>
          <target state="translated">L'assembly viene caricato in un contesto di sola reflection, un <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">`Pets`</ph> viene creata un'istanza di enumerazione, una matrice di <ph id="ph3">&lt;xref:System.Reflection.FieldInfo&gt;</ph> vengono recuperati oggetti e i valori dei campi vengono visualizzati nella console.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.GetValues(System.Type)">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>.</source>
          <target state="translated">Nell'esempio seguente viene illustrato l'utilizzo di <ph id="ph1">&lt;xref:System.Enum.GetValues%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>The method is invoked by reflection in a reflection-only context,</source>
          <target state="translated">Il metodo viene richiamato tramite reflection in un contesto di sola reflection,</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Enum.GetValues(System.Type)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is a type from an assembly loaded in a reflection-only context.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è un tipo appartenente a un assembly caricato in un contesto Reflection-Only.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>An enumeration value.</source>
          <target state="translated">Valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>Determines whether one or more bit fields are set in the current instance.</source>
          <target state="translated">Determina se uno o più campi di bit vengono impostati nell'istanza corrente.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the bit field or bit fields that are set in <ph id="ph2">&lt;paramref name="flag" /&gt;</ph> are also set in the current instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il campo di bit o i campi di bit impostati in <ph id="ph2">&lt;paramref name="flag" /&gt;</ph> vengono impostati anche nell'istanza corrente. In caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method returns the result of the following Boolean expression.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> restituisce il risultato dell'espressione booleana seguente.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If the underlying value of <ph id="ph1">`flag`</ph> is zero, the method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Se il valore sottostante del <ph id="ph1">`flag`</ph> è zero, il metodo restituisce <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>If this behavior is not desirable, you can use the <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> method to test for equality with zero and call <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> only if the underlying value of <ph id="ph3">`flag`</ph> is non-zero, as the following example illustrates.</source>
          <target state="translated">Se questo comportamento non è opportuno, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Enum.Equals%2A&gt;</ph> metodo per verificare l'uguaglianza con zero e chiamare <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> solo se il valore sottostante del <ph id="ph3">`flag`</ph> è diverso da zero, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method is designed to be used with enumeration types that are marked with the <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> attribute and can be used to determine whether multiple bit fields are set.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> metodo è progettato per essere utilizzato con tipi di enumerazione contrassegnati con il <ph id="ph2">&lt;xref:System.FlagsAttribute&gt;</ph> attributo e può essere utilizzato per determinare se sono impostati più campi di bit.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>For enumeration types that are not marked with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, call either the <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> method or the <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> method.</source>
          <target state="translated">Per i tipi di enumerazione che non siano contrassegnati con il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attributo, chiamare il <ph id="ph2">&lt;xref:System.Enum.Equals%2A&gt;</ph> metodo o <ph id="ph3">&lt;xref:System.Enum.CompareTo%2A&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The following example defines an <ph id="ph1">`ItemsOrdered`</ph> enumeration that reflects categories of items that a customer can order in a restaurant.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`ItemsOrdered`</ph> enumerazione che riflette le categorie di elementi che un cliente può ordinare in un ristorante.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.HasFlag(System.Enum)">
          <source>The example tests whether the customer has ordered both an entrée and a beverage.</source>
          <target state="translated">Nell'esempio viene verificato se il cliente ha già effettuato un primo piatto sia una bevanda.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Enum.HasFlag(System.Enum)">
          <source><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> is a different type than the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="flag" /&gt;</ph> è un tipo diverso rispetto all'istanza corrente.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The value or name of a constant in <bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Valore o nome di una costante in <bpt id="p1">&lt;c&gt;</bpt>enumType<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</source>
          <target state="translated">Restituisce un valore booleano se in un'enumerazione specificata esiste un determinato valore integrale o il relativo nome sotto forma di stringa.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a constant in <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> has a value equal to <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se una costante in <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph> ha un valore uguale a <ph id="ph3">&lt;paramref name="value" /&gt;</ph> ; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter can be any of the following:</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> parametro può essere uno dei seguenti:</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>Any member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Qualsiasi membro del tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A variable whose value is an enumeration member of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Una variabile il cui valore è un membro di enumerazione di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The string representation of the name of an enumeration member.</source>
          <target state="translated">Rappresentazione di stringa del nome di un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The characters in the string must have the same case as the enumeration member name.</source>
          <target state="translated">I caratteri nella stringa devono avere lo stesso caso come nome del membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>A value of the underlying type of <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">Un valore del tipo sottostante di <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If the constants in <ph id="ph1">`enumType`</ph> define a set of bit fields and <ph id="ph2">`value`</ph> contains the values, names, or underlying values of multiple bit fields, the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Se le costanti in <ph id="ph1">`enumType`</ph> definire un set di campi di bit e <ph id="ph2">`value`</ph> contiene i valori, i nomi o valori sottostanti più campi di bit, il <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> restituisce <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</source>
          <target state="translated">In altre parole, per le enumerazioni che definiscono un set di campi di bit, il metodo determina solo se un campo di bit appartiene all'enumerazione.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>To determine whether multiple bit fields are set in an enumeration type that is tagged with the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attribute, you can call the <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se più campi di bit vengono impostati in un tipo di enumerazione che è contrassegnato con il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> attributo, è possibile chiamare il <ph id="ph2">&lt;xref:System.Enum.HasFlag%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The following example defines an enumeration named <ph id="ph1">`PetType`</ph> that consists of individual bit fields.</source>
          <target state="translated">Nell'esempio seguente viene definita un'enumerazione denominata <ph id="ph1">`PetType`</ph> costituito da tre campi di bit.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</source>
          <target state="translated">Chiama quindi il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo con possibili sottostanti i valori di enumerazione, nomi di stringa e compositi valori risultanti dall'impostazione di più campi di bit.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see langword="Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see langword="Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is an enumeration, but it is not an enumeration of type <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Il tipo di <ph id="ph1">&lt;paramref name="value" /&gt;</ph> è un'enumerazione, ma non è un'enumerazione di tipo <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The type of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not an underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated">Il tipo di <ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è un tipo sottostante di <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>, or <ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è di tipo <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph> o <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph> oppure <ph id="ph10">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>If <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is an enumeration that is defined by using the <ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute, the method returns <ph id="ph3">&lt;see langword="false" /&gt;</ph> if multiple bit fields in <ph id="ph4">&lt;paramref name="value" /&gt;</ph> are set but <ph id="ph5">&lt;paramref name="value" /&gt;</ph> does not correspond to a composite enumeration value, or if <ph id="ph6">&lt;paramref name="value" /&gt;</ph> is a string concatenation of the names of multiple bit flags.</source>
          <target state="translated">Se <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è un'enumerazione che viene definita mediante il <ph id="ph2">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attributo, il metodo restituisce <ph id="ph3">&lt;see langword="false" /&gt;</ph> se i campi di bit più <ph id="ph4">&lt;paramref name="value" /&gt;</ph> vengono impostate ma <ph id="ph5">&lt;paramref name="value" /&gt;</ph> non corrisponde a un valore di enumerazione composta, o se <ph id="ph6">&lt;paramref name="value" /&gt;</ph> è una concatenazione di stringhe dei nomi di più flag di bit.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>In the following example, a <bpt id="p1">&lt;c&gt;</bpt>Pets<ept id="p1">&lt;/c&gt;</ept> enumeration is defined with the <ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attribute.</source>
          <target state="translated">Nell'esempio seguente, un <bpt id="p1">&lt;c&gt;</bpt>animali<ept id="p1">&lt;/c&gt;</ept> è definita l'enumerazione con la <ph id="ph1">&lt;see cref="T:System.FlagsAttribute" /&gt;</ph> attributo.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph> method returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> when you pass it an enumeration value that has two bit fields (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /&gt;</ph> restituisce <ph id="ph2">&lt;see langword="false" /&gt;</ph> quando si passa il valore di enumerazione che dispone di due campi di bit (<bpt id="p1">&lt;c&gt;</bpt>Pets.Dog<ept id="p1">&lt;/c&gt;</ept> e <bpt id="p2">&lt;c&gt;</bpt>Pets.Cat<ept id="p2">&lt;/c&gt;</ept>) impostato, e quando si passa la rappresentazione di stringa di valore di enumerazione ("Cat, Dog").</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.IsDefined(System.Type,System.Object)">
          <source>You can determine whether multiple bit fields are set by calling the <ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph> method.</source>
          <target state="translated">È possibile determinare se più campi di bit vengono impostati chiamando la <ph id="ph1">&lt;see cref="M:System.Enum.HasFlag(System.Enum)" /&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">Stringa che contiene il nome o il valore da convertire.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Oggetto di tipo <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> il cui valore è rappresentato da <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> parametro contiene la rappresentazione di stringa del valore sottostante o costante denominata di un membro di enumerazione o un elenco di costanti denominate delimitato da virgole (,).</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">Uno o più spazi vuoti possono precedere o seguire ogni valore, il nome o virgola <ph id="ph1">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un elenco, il valore restituito è il valore dei nomi specificati combinato con un bit per bit <ph id="ph2">`OR`</ph> operazione.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un nome che non corrisponde a una costante denominata del <ph id="ph2">`enumType`</ph>, il metodo genera un <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa di un intero che rappresenta un valore sottostante pari di <ph id="ph2">`enumType`</ph> enumerazione, il metodo restituisce un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph> convertito in un tipo integrale.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">Se questo comportamento è indesiderato, chiamare il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che in realtà un membro di una rappresentazione particolare di un intero <ph id="ph2">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Colors`</ph> enumerazione, chiama il <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metodo per convertire le stringhe ai relativi valori di enumerazione corrispondenti e le chiamate di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che determinati valori integrali sottostanti i valori in il <ph id="ph4">`Colors`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>This operation is case-sensitive.</source>
          <target state="translated">Questa operazione è tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metodo per analizzare una matrice di stringhe che vengono create chiamando il <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">Utilizza inoltre il <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metodo per analizzare un valore di enumerazione che è costituito da un campo di bit.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è una stringa vuota oppure contiene solo spazi.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è un nome, ma non una delle costanti denominate definite per l'enumerazione.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è compreso nell'intervallo del tipo sottostante di <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An enumeration type.</source>
          <target state="translated">Tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A string containing the name or value to convert.</source>
          <target state="translated">Stringa che contiene il nome o il valore da convertire.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to regard case.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per ignorare la distinzione tra maiuscole e minuscole; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>A parameter specifies whether the operation is case-insensitive.</source>
          <target state="translated">Un parametro specifica se l'operazione verrà eseguita senza distinzione tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>An object of type <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> whose value is represented by <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Oggetto di tipo <ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> il cui valore è rappresentato da <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> parametro contiene la rappresentazione di stringa del valore sottostante o costante denominata di un membro di enumerazione o un elenco di costanti denominate delimitato da virgole (,).</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>One or more blank spaces can precede or follow each value, name, or comma in <ph id="ph1">`value`</ph>.</source>
          <target state="translated">Uno o più spazi vuoti possono precedere o seguire ogni valore, il nome o virgola <ph id="ph1">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a list, the return value is the value of the specified names combined with a bitwise <ph id="ph2">`OR`</ph> operation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un elenco, il valore restituito è il valore dei nomi specificati combinato con un bit per bit <ph id="ph2">`OR`</ph> operazione.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`enumType`</ph>, the method throws an <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un nome che non corrisponde a una costante denominata del <ph id="ph2">`enumType`</ph>, il metodo genera un <ph id="ph3">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`enumType`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa di un intero che rappresenta un valore sottostante pari di <ph id="ph2">`enumType`</ph> enumerazione, il metodo restituisce un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph> convertito in un tipo integrale.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`enumType`</ph>.</source>
          <target state="translated">Se questo comportamento è indesiderato, chiamare il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che in realtà un membro di una rappresentazione particolare di un intero <ph id="ph2">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Colors`</ph> enumerazione, chiama il <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> metodo per convertire le stringhe ai relativi valori di enumerazione corrispondenti e le chiamate di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che determinati valori integrali sottostanti i valori in il <ph id="ph4">`Colors`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The <ph id="ph1">`ignoreCase`</ph> parameter specifies whether this operation is case-sensitive.</source>
          <target state="translated">Il <ph id="ph1">`ignoreCase`</ph> parametro specifica se questa operazione è tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method to parse an array of strings that are created by calling the <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> method.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> metodo per analizzare una matrice di stringhe che vengono create chiamando il <ph id="ph2">&lt;xref:System.Enum.GetNames%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method to parse an enumeration value that consists of a bit field.</source>
          <target state="translated">Utilizza inoltre il <ph id="ph1">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> metodo per analizzare un valore di enumerazione che è costituito da un campo di bit.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is either an empty string ("") or only contains white space.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è una stringa vuota ("") oppure contiene solo spazi.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is a name, but not one of the named constants defined for the enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è un nome, ma non una delle costanti denominate definite per l'enumerazione.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is outside the range of the underlying type of <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è compreso nell'intervallo del tipo sottostante di <ph id="ph2">&lt;paramref name="enumType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Converts the current value to a Boolean value based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un valore booleano basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero senza segno a 8 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Converts the current value to a Unicode character based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un carattere Unicode basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un oggetto <ph id="ph1">&lt;see cref="T:System.DateTime" /&gt;</ph> basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Converts the current value to a <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un oggetto <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Converts the current value to a double-precision floating point number based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un numero a virgola mobile e precisione doppia basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit signed integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero con segno a 16 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit signed integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero con segno a 32 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit signed integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero con segno a 64 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Converts the current value to an 8-bit signed integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero con segno a 8 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Converts the current value to a single-precision floating-point number based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un numero a virgola mobile e con precisione singola in base al tipo sottostante.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This member always throws an exception.</source>
          <target state="translated">Questo membro genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Currently not implemented.</source>
          <target state="translated">Attualmente non implementato.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>Always throws an exception.</source>
          <target state="translated">Genera sempre un'eccezione.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">In tutti i casi.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The type to convert to.</source>
          <target state="translated">Tipo in cui eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Converts the current value to a specified type based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un tipo specificato basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Converts the current value to a 16-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero senza segno a 16 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Converts the current value to a 32-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero senza segno a 32 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Converts the current value to a 64-bit unsigned integer based on the underlying type.</source>
          <target state="translated">Converte il valore corrente in un intero senza segno a 64 bit basato sul tipo sottostante.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The converted value.</source>
          <target state="translated">Valore convertito.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>Uses <ph id="ph1">&lt;xref:System.Convert&gt;</ph> to perform the conversion.</source>
          <target state="translated">Usa <ph id="ph1">&lt;xref:System.Convert&gt;</ph> per eseguire la conversione.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts a specified integer value to an enumeration member.</source>
          <target state="translated">Converte un valore intero specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Converts the specified 8-bit unsigned integer to an enumeration member.</source>
          <target state="translated">Converte l'intero senza segno a 8 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Converts the specified 16-bit signed integer to an enumeration member.</source>
          <target state="translated">Converte l'intero con segno a 16 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Converts the specified 32-bit signed integer to an enumeration member.</source>
          <target state="translated">Converte l'intero con segno a 32 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Converts the specified 64-bit signed integer to an enumeration member.</source>
          <target state="translated">Converte l'intero con segno a 64 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The value convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Converts the specified object with an integer value to an enumeration member.</source>
          <target state="translated">Converte l'oggetto specificato con un valore intero in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>An enumeration object whose value is <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Oggetto di enumerazione il cui valore è <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> method converts the integral value <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29&gt;</ph> metodo converte il valore integrale <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> o <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not type <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph>, or <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è di tipo <ph id="ph2">&lt;see cref="T:System.SByte" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.Int16" /&gt;</ph>, <ph id="ph4">&lt;see cref="T:System.Int32" /&gt;</ph>, <ph id="ph5">&lt;see cref="T:System.Int64" /&gt;</ph>, <ph id="ph6">&lt;see cref="T:System.Byte" /&gt;</ph>, <ph id="ph7">&lt;see cref="T:System.UInt16" /&gt;</ph>, <ph id="ph8">&lt;see cref="T:System.UInt32" /&gt;</ph> o <ph id="ph9">&lt;see cref="T:System.UInt64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Converts the specified 8-bit signed integer value to an enumeration member.</source>
          <target state="translated">Converte il valore dell'intero con segno a 8 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.SByte)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Converts the specified 16-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Converte il valore dell'intero senza segno a 16 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt16)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Converts the specified 32-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Converte il valore dell'intero senza segno a 32 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt32)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The enumeration type to return.</source>
          <target state="translated">Tipo di enumerazione da restituire.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The value to convert to an enumeration member.</source>
          <target state="translated">Valore da convertire in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Converts the specified 64-bit unsigned integer value to an enumeration member.</source>
          <target state="translated">Converte il valore dell'intero senza segno a 64 bit specificato in un membro di enumerazione.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>An instance of the enumeration set to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Istanza di enumerazione impostata su <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> method converts <ph id="ph2">`value`</ph> to an enumeration member whose underlying value is <ph id="ph3">`value`</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29&gt;</ph> metodo converte <ph id="ph2">`value`</ph> a un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>Note that the conversion succeeds even if value is outside the bounds of <ph id="ph1">`enumType`</ph> members.</source>
          <target state="translated">Si noti che la conversione ha esito positivo anche se è di fuori dei limiti del valore <ph id="ph1">`enumType`</ph> membri.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>To ensure that <ph id="ph1">`value`</ph> is a valid underlying value of the <ph id="ph2">`enumType`</ph> enumeration, pass it to the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method.</source>
          <target state="translated">Per garantire che <ph id="ph1">`value`</ph> è un valore sottostante valido del <ph id="ph2">`enumType`</ph> enumerazione, passa a di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>This conversion method returns a value of type <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">Questo metodo di conversione restituisce un valore di tipo <ph id="ph1">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source>You can then cast it or convert it to an object of type <ph id="ph1">`enumType`</ph>.</source>
          <target state="translated">È quindi possibile eseguirne il cast o convertirlo in un oggetto di tipo <ph id="ph1">`enumType`</ph>.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" uid="M:System.Enum.ToObject(System.Type,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> is not an <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="enumType" /&gt;</ph> non è un elemento <ph id="ph2">&lt;see cref="T:System.Enum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">Converte il valore dell'istanza corrente nell'equivalente rappresentazione di stringa.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>Converts the value of this instance to its equivalent string representation.</source>
          <target state="translated">Converte il valore dell'istanza corrente nell'equivalente rappresentazione di stringa.</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">Rappresentazione di stringa del valore dell'istanza.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The return value is formatted with the general format specifier ("G").</source>
          <target state="translated">Il valore restituito viene formattato con l'identificatore di formato generale ("G").</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>That is, if the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</source>
          <target state="translated">Ovvero, se il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> non viene applicato a questo tipo enumerato e vi è una costante denominata uguale al valore di questa istanza, quindi il valore restituito è una stringa contenente il nome della costante.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If the <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</source>
          <target state="translated">Se il <ph id="ph1">&lt;xref:System.FlagsAttribute&gt;</ph> viene applicata una combinazione di uno o più costanti denominate è uguale al valore di questa istanza, quindi il valore restituito è una stringa contenente un elenco separato da delimitatore dei nomi delle costanti.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>Otherwise, the return value is the string representation of the numeric value of this instance.</source>
          <target state="translated">In caso contrario, il valore restituito è la rappresentazione di stringa del valore numerico di questa istanza.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla formattazione di valori di enumerazione, vedere <bpt id="p1">[</bpt>stringhe di formato di enumerazione<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla formattazione in generale, vedere <bpt id="p1">[</bpt>formattazione dei tipi di<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following example demonstrates converting an enumerated value to a string.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come convertire un valore enumerato in una stringa.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">Se più membri di enumerazione hanno lo stesso valore sottostante e si tenta di recuperare la rappresentazione di stringa del nome di un membro di enumerazione in base al relativo valore sottostante, il codice non deve fare supposizioni relativamente al nome che verrà restituito dal metodo.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">Ad esempio, l'enumerazione seguente definisce due membri, <bpt id="p1">&lt;c&gt;</bpt>Shade. Gray<ept id="p1">&lt;/c&gt;</ept> e <bpt id="p2">&lt;c&gt;</bpt>Shade. Grey<ept id="p2">&lt;/c&gt;</ept>, che hanno lo stesso valore sottostante.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">La seguente chiamata al metodo tenta di recuperare il nome di un membro del <bpt id="p1">&lt;c&gt;</bpt>sfumatura<ept id="p1">&lt;/c&gt;</ept> enumerazione il cui valore sottostante è 1.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">Il metodo può restituire "Gray" o "Grey" e il codice non deve fare supposizioni su cui verrà restituita stringa.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>(obsolete)</source>
          <target state="translated">(obsoleto)</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph>.</source>
          <target state="translated">Questo overload del metodo è obsoleto; utilizzare <ph id="ph1">&lt;see cref="M:System.Enum.ToString" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.IFormatProvider)">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">Rappresentazione di stringa del valore dell'istanza.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>A format string.</source>
          <target state="translated">Stringa di formato.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>Converts the value of this instance to its equivalent string representation using the specified format.</source>
          <target state="translated">Converte il valore dell'istanza corrente nella rappresentazione di stringa equivalente, usando il formato specificato.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated">Rappresentazione di stringa del valore dell'istanza, in base a quanto specificato da <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated">Il <ph id="ph1">`format`</ph> parametro può contenere "G" o "g", "D" o "d", "X" o "x" e stringhe di formato "F" o "f" (la stringa di formato non è tra maiuscole e minuscole).</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">Se <ph id="ph1">`format`</ph> è <ph id="ph2">`null`</ph> o una stringa vuota (""), viene utilizzato l'identificatore di formato generale ("G").</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulle stringhe di formato di enumerazione e formattazione di valori di enumerazione, vedere <bpt id="p1">[</bpt>stringhe di formato di enumerazione<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla formattazione in generale, vedere <bpt id="p1">[</bpt>formattazione dei tipi di<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following example demonstrates how to convert an enumerated value to a string.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come convertire un valore enumerato in una stringa.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> contains an invalid specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> contiene una specifica non valida.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> è uguale a "X", ma il tipo di enumerazione è sconosciuto.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</source>
          <target state="translated">Se più membri di enumerazione hanno lo stesso valore sottostante e si tenta di recuperare la rappresentazione di stringa del nome di un membro di enumerazione in base al relativo valore sottostante, il codice non deve fare supposizioni relativamente al nome che verrà restituito dal metodo.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>For example, the following enumeration defines two members, <bpt id="p1">&lt;c&gt;</bpt>Shade.Gray<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>Shade.Grey<ept id="p2">&lt;/c&gt;</ept>, that have the same underlying value.</source>
          <target state="translated">Ad esempio, l'enumerazione seguente definisce due membri, <bpt id="p1">&lt;c&gt;</bpt>Shade. Gray<ept id="p1">&lt;/c&gt;</ept> e <bpt id="p2">&lt;c&gt;</bpt>Shade. Grey<ept id="p2">&lt;/c&gt;</ept>, che hanno lo stesso valore sottostante.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The following method call attempts to retrieve the name of a member of the <bpt id="p1">&lt;c&gt;</bpt>Shade<ept id="p1">&lt;/c&gt;</ept> enumeration whose underlying value is 1.</source>
          <target state="translated">La seguente chiamata al metodo tenta di recuperare il nome di un membro del <bpt id="p1">&lt;c&gt;</bpt>sfumatura<ept id="p1">&lt;/c&gt;</ept> enumerazione il cui valore sottostante è 1.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String)">
          <source>The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</source>
          <target state="translated">Il metodo può restituire "Gray" o "Grey" e il codice non deve fare supposizioni su cui verrà restituita stringa.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>A format specification.</source>
          <target state="translated">Specifica di formato.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>(Obsolete.)</source>
          <target state="translated">(Obsoleto).</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>This method overload is obsolete; use <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph>.</source>
          <target state="translated">Questo overload del metodo è obsoleto; utilizzare <ph id="ph1">&lt;see cref="M:System.Enum.ToString(System.String)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated">Rappresentazione di stringa del valore dell'istanza, in base a quanto specificato da <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</source>
          <target state="translated">Il <ph id="ph1">`format`</ph> parametro può contenere "G" o "g", "D" o "d", "X" o "x" e stringhe di formato "F" o "f" (la stringa di formato non è tra maiuscole e minuscole).</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string (""), the general format specifier ("G") is used.</source>
          <target state="translated">Se <ph id="ph1">`format`</ph> è <ph id="ph2">`null`</ph> o una stringa vuota (""), viene utilizzato l'identificatore di formato generale ("G").</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about the enumeration format strings and formatting enumeration values, see <bpt id="p1">[</bpt>Enumeration Format Strings<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulle stringhe di formato di enumerazione e formattazione di valori di enumerazione, vedere <bpt id="p1">[</bpt>stringhe di formato di enumerazione<ept id="p1">](~/docs/standard/base-types/enumeration-format-strings.md)</ept>.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>For more information about formatting in general, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni sulla formattazione in generale, vedere <bpt id="p1">[</bpt>formattazione dei tipi di<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source>Specify only <ph id="ph1">`format`</ph>; the <ph id="ph2">`provider`</ph> parameter is obsolete.</source>
          <target state="translated">Specificare solo <ph id="ph1">`format`</ph>; <ph id="ph2">`provider`</ph> parametro è obsoleto.</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> does not contain a valid format specification.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> non contiene una specifica di formato valida.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Enum.ToString(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> equals "X", but the enumeration type is unknown.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> è uguale a "X", ma il tipo di enumerazione è sconosciuto.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="T:System.Enum">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Il valore restituito indica se la conversione è riuscita.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di enumerazione nel quale convertire <bpt id="p1">&lt;c&gt;</bpt>valore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">Rappresentazione di stringa del nome di enumerazione o del valore sottostante da convertire.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">Quando il metodo termina, l'elemento <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contiene un oggetto di tipo <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> il cui valore è rappresentato dal parametro <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> se l'operazione di analisi è riuscita.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Se l'operazione di analisi non è riuscita, l'elemento <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contiene il valore predefinito del tipo sottostante di <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">Si noti che questo valore non deve necessariamente essere un membro dell'enumerazione di <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Questo parametro viene passato non inizializzato.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Il valore restituito indica se la conversione è riuscita.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il parametro <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è stato convertito correttamente; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> è identico al <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%29&gt;</ph> (metodo), con la differenza che anziché generare un'eccezione, viene restituito <ph id="ph3">`false`</ph> se la conversione non riesce.</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">Elimina la necessità di eccezioni durante l'analisi di rappresentazione di stringa del valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> parametro contiene la rappresentazione di stringa del valore sottostante o costante denominata di un membro di enumerazione o un elenco di costanti denominate o i valori sottostanti delimitati da virgole (,).</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> include più costanti o valori denominati, uno o più spazi vuoti possono precedere o seguire ogni valore, il nome o virgola <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un elenco, <ph id="ph2">`result`</ph> riflette il valore dei nomi specificati o combinati con un bit per bit di valori sottostanti <ph id="ph3">`OR`</ph> operazione.</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names is case-sensitive.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa del nome di un valore di enumerazione, il confronto di <ph id="ph2">`value`</ph> con enumerazione nomi è tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un nome che non corrisponde a una costante denominata del <ph id="ph2">`TEnum`</ph>, il metodo restituisce <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa di un intero che rappresenta un valore sottostante pari di <ph id="ph2">`TEnum`</ph> enumerazione, il metodo restituisce un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph> convertito in un tipo integrale.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">Se questo comportamento è indesiderato, chiamare il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che in realtà un membro di una rappresentazione particolare di un intero <ph id="ph2">`TEnum`</ph>.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Colors`</ph> enumerazione, chiama il <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29&gt;</ph> metodo per convertire le stringhe ai relativi valori di enumerazione corrispondenti e le chiamate di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che determinati valori integrali sottostanti i valori in il <ph id="ph4">`Colors`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> non è un tipo di enumerazione.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The enumeration type to which to convert <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Il tipo di enumerazione nel quale convertire <bpt id="p1">&lt;c&gt;</bpt>valore<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The string representation of the enumeration name or underlying value to convert.</source>
          <target state="translated">Rappresentazione di stringa del nome di enumerazione o del valore sottostante da convertire.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to ignore case; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to consider case.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> per ignorare la distinzione tra maiuscole e minuscole, <ph id="ph2">&lt;see langword="false" /&gt;</ph> per non ignorarla.</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>When this method returns, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains an object of type <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> whose value is represented by <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> if the parse operation succeeds.</source>
          <target state="translated">Quando il metodo termina, l'elemento <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contiene un oggetto di tipo <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept> il cui valore è rappresentato dal parametro <bpt id="p3">&lt;c&gt;</bpt>value<ept id="p3">&lt;/c&gt;</ept> se l'operazione di analisi è riuscita.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If the parse operation fails, <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contains the default value of the underlying type of <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</source>
          <target state="translated">Se l'operazione di analisi non è riuscita, l'elemento <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> contiene il valore predefinito del tipo sottostante di <bpt id="p2">&lt;c&gt;</bpt>TEnum<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Note that this value need not be a member of the <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept> enumeration.</source>
          <target state="translated">Si noti che questo valore non deve necessariamente essere un membro dell'enumerazione di <bpt id="p1">&lt;c&gt;</bpt>TEnum<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Questo parametro viene passato non inizializzato.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</source>
          <target state="translated">Converte la rappresentazione di stringa del nome o del valore numerico di una o più costanti enumerate in un oggetto enumerato equivalente.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>A parameter specifies whether the operation is case-sensitive.</source>
          <target state="translated">Un parametro specifica se l'operazione verrà eseguita con distinzione tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The return value indicates whether the conversion succeeded.</source>
          <target state="translated">Il valore restituito indica se la conversione è riuscita.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il parametro <ph id="ph2">&lt;paramref name="value" /&gt;</ph> è stato convertito correttamente; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> is identical to the <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> method, except that instead of throwing an exception, it returns <ph id="ph3">`false`</ph> if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> è identico al <ph id="ph2">&lt;xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29&gt;</ph> (metodo), con la differenza che anziché generare un'eccezione, viene restituito <ph id="ph3">`false`</ph> se la conversione non riesce.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>It eliminates the need for exception handling when parsing the string representation of an enumeration value.</source>
          <target state="translated">Elimina la necessità di eccezioni durante l'analisi di rappresentazione di stringa del valore di enumerazione.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">`value`</ph> parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> parametro contiene la rappresentazione di stringa del valore sottostante o costante denominata di un membro di enumerazione o un elenco di costanti denominate o i valori sottostanti delimitati da virgole (,).</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in <ph id="ph2">`value`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> include più costanti o valori denominati, uno o più spazi vuoti possono precedere o seguire ogni valore, il nome o virgola <ph id="ph2">`value`</ph>.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a list, <ph id="ph2">`result`</ph> reflects the value of the specified names or underlying values combined with a bitwise <ph id="ph3">`OR`</ph> operation.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un elenco, <ph id="ph2">`result`</ph> riflette il valore dei nomi specificati o combinati con un bit per bit di valori sottostanti <ph id="ph3">`OR`</ph> operazione.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of the name of an enumeration value, the comparison of <ph id="ph2">`value`</ph> with enumeration names depends on the <ph id="ph3">`ignoreCase`</ph> parameter.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa del nome di un valore di enumerazione, il confronto di <ph id="ph2">`value`</ph> con enumerazione nomi dipende il <ph id="ph3">`ignoreCase`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`true`</ph>, the comparison is case-insensitive; if <ph id="ph2">`false`</ph>, it is case-sensitive.</source>
          <target state="translated">Se <ph id="ph1">`true`</ph>, il confronto è tra maiuscole e minuscole; se <ph id="ph2">`false`</ph>, è tra maiuscole e minuscole.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is a name that does not correspond to a named constant of <ph id="ph2">`TEnum`</ph>, the method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è un nome che non corrisponde a una costante denominata del <ph id="ph2">`TEnum`</ph>, il metodo restituisce <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If <ph id="ph1">`value`</ph> is the string representation of an integer that does not represent an underlying value of the <ph id="ph2">`TEnum`</ph> enumeration, the method returns an enumeration member whose underlying value is <ph id="ph3">`value`</ph> converted to an integral type.</source>
          <target state="translated">Se <ph id="ph1">`value`</ph> è la rappresentazione di stringa di un intero che rappresenta un valore sottostante pari di <ph id="ph2">`TEnum`</ph> enumerazione, il metodo restituisce un membro di enumerazione il cui valore sottostante è <ph id="ph3">`value`</ph> convertito in un tipo integrale.</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>If this behavior is undesirable, call the <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that a particular string representation of an integer is actually a member of <ph id="ph2">`TEnum`</ph>.</source>
          <target state="translated">Se questo comportamento è indesiderato, chiamare il <ph id="ph1">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che in realtà un membro di una rappresentazione particolare di un intero <ph id="ph2">`TEnum`</ph>.</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The following example defines a <ph id="ph1">`Colors`</ph> enumeration, calls the <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method to convert strings to their corresponding enumeration values, and calls the <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> method to ensure that particular integral values are underlying values in the <ph id="ph4">`Colors`</ph> enumeration.</source>
          <target state="translated">L'esempio seguente definisce un <ph id="ph1">`Colors`</ph> enumerazione, chiama il <ph id="ph2">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> metodo per convertire le stringhe ai relativi valori di enumerazione corrispondenti e le chiamate di <ph id="ph3">&lt;xref:System.Enum.IsDefined%2A&gt;</ph> metodo per assicurarsi che determinati valori integrali sottostanti i valori in il <ph id="ph4">`Colors`</ph> enumerazione.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source>The <ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29&gt;</ph> utilizza un confronto tra maiuscole e minuscole durante il tentativo di convertire le rappresentazioni di stringa di denominata costanti per valori di enumerazione equivalente.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
          <source><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> is not an enumeration type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="TEnum" /&gt;</ph> non è un tipo di enumerazione.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>