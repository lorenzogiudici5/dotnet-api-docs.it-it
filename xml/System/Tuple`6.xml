<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1086b6148570cf7862fdada5a080c05c90a2ac0e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30730685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`6&lt;T1, T2, T3, T4, T5, T6&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`6" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">Tipo del primo componente della tupla.</typeparam>
    <typeparam name="T2">Tipo del secondo componente della tupla.</typeparam>
    <typeparam name="T3">Tipo del terzo componente della tupla.</typeparam>
    <typeparam name="T4">Tipo del quarto componente della tupla.</typeparam>
    <typeparam name="T5">Tipo del quinto componente della tupla.</typeparam>
    <typeparam name="T6">Tipo del sesto componente della tupla.</typeparam>
    <summary>Rappresenta una tupla con 6 elementi, ovvero una sestupla.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una tupla è una struttura di dati con un numero specifico e la sequenza di valori. La <xref:System.Tuple%606> classe rappresenta una tupla con 6 o sestupla, ovvero una tupla con sei componenti.  
  
 È possibile creare un'istanza di un <xref:System.Tuple%606> oggetto chiamando il <xref:System.Tuple%606.%23ctor%2A> o statico <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> (metodo). È possibile recuperare il valore di componenti della tupla utilizzando la proprietà di sola lettura <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>, <xref:System.Tuple%606.Item3%2A>, <xref:System.Tuple%606.Item4%2A>, <xref:System.Tuple%606.Item5%2A>, e <xref:System.Tuple%606.Item6%2A> delle proprietà dell'istanza.  
  
 Le tuple sono comunemente utilizzate in quattro modi diversi:  
  
-   Per rappresentare un singolo set di dati. Ad esempio, una tupla può rappresentare un record di database e i componenti possono rappresentare i singoli campi del record.  
  
-   Per fornire facile accesso e la manipolazione di un set di dati. L'esempio seguente definisce un <xref:System.Tuple%606> oggetto che contiene i dati della popolazione di New York City per ogni censimento dal 1960 fino a 2000. La sestupla viene passata per il `ComputePopulationChange` metodo, che calcola il tasso di modifica tra censimenti, il tasso di modifica per il periodo di 50 anni intera annuale annuale.  
  
     [!code-csharp[System.Tuple\`6.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.class/cs/example1.cs#1)]
     [!code-vb[System.Tuple\`6.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.class/vb/example1.vb#1)]  
  
-   Per restituire più valori da un metodo senza l'utilizzo di `out` parametri (c#) o `ByRef` parametri (in Visual Basic). Ad esempio, l'esempio precedente restituisce le statistiche calcolate, insieme al nome di città, in un <xref:System.Tuple%606> oggetto.  
  
-   Per passare più valori a un metodo tramite un singolo parametro. Ad esempio, il <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> dispone di un singolo parametro che consente di fornire un valore al metodo eseguito dal thread all'avvio. Se si fornisce un <xref:System.Tuple%606> dell'oggetto come argomento del metodo, è possibile fornire la routine di avvio del thread con sei elementi di dati.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`7" />
    <altmember cref="T:System.Tuple`8" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
      </Parameters>
      <Docs>
        <param name="item1">Valore del primo componente della tupla.</param>
        <param name="item2">Valore del secondo componente della tupla.</param>
        <param name="item3">Valore del terzo componente della tupla.</param>
        <param name="item4">Valore del quarto componente della tupla.</param>
        <param name="item5">Valore del quinto componente della tupla.</param>
        <param name="item6">Valore del sesto componente della tupla.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Tuple`6" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È inoltre possibile utilizzare il metodo statico <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> metodo per creare un'istanza di un oggetto tupla con 6 elementi senza dover specificare in modo esplicito i tipi dei relativi componenti. L'esempio seguente usa il <xref:System.Tuple.Create%60%606%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%29?displayProperty=nameWithType> metodo per creare un'istanza di una tupla con 6 cui il primo è di tipo <xref:System.String> e i cui componenti rimanenti sono di tipo <xref:System.Int32>.  
  
 [!code-csharp[System.Tuple.Create#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#11)]
 [!code-vb[System.Tuple.Create#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#11)]  
  
 Ciò equivale alla chiamata seguente al <xref:System.Tuple%606.%23ctor%2A> costruttore della classe.  
  
 [!code-csharp[System.Tuple.Create#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/create1.cs#12)]
 [!code-vb[System.Tuple.Create#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/create1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con questa istanza.</param>
        <summary>Restituisce un valore che indica se l'oggetto <see cref="T:System.Tuple`6" /> corrente è uguale a un oggetto specificato.</summary>
        <returns>
          <see langword="true" /> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `obj` parametro viene considerato uguale all'istanza corrente nelle condizioni seguenti:  
  
-   Si tratta di un <xref:System.Tuple%606> oggetto.  
  
-   I sei componenti sono dello stesso tipo dell'istanza corrente.  
  
-   I sei componenti sono uguali a quelli dell'istanza corrente. L'uguaglianza è determinata dall'operatore di uguaglianza predefinito dell'oggetto per ogni componente.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di sestuple che contengono i dati della popolazione di Los Angeles e New York dal 1960 a 2000. Il primo componente di ogni sestupla identifica la città. Il primo, terza e quarta sestupla contengono i dati per New York. La prima sestupla è un duplicato della quarta sestupla. La terza sestupla identifica la città come "New York City" anziché "New York". Come illustrato nell'esempio, solo la quarta sestupla è uguale alla prima sestupla.  
  
 [!code-csharp[System.Tuple\`6.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`6.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il codice hash per l'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del primo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Valore del primo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item1%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item1%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare il nome della città, recupera il valore di <xref:System.Tuple%606.Item1%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del secondo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Valore del secondo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item2%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item2%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare la popolazione nel 1960, recupera il valore di <xref:System.Tuple%606.Item2%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del terzo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Valore del terzo componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item3%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item3%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare la popolazione nel 1970, recupera il valore di <xref:System.Tuple%606.Item3%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del quarto componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Valore del quarto componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item4%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item4%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare la popolazione nel 1980, recupera il valore di <xref:System.Tuple%606.Item4%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del quinto componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Il valore dell'oggetto corrente <see cref="T:System.Tuple`6" /> quinto componente dell'oggetto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item5%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item5%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare la popolazione nel 1990, recupera il valore di <xref:System.Tuple%606.Item5%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del sesto componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</summary>
        <value>Valore del sesto componente dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo di <xref:System.Tuple%606.Item6%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` il valore restituito dal metodo di <xref:System.Tuple%606.Item6%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%606> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce una matrice di <xref:System.Tuple%606> oggetti i cui componenti contengono i dati della popolazione per tre città degli Stati Uniti (Los Angeles, New York e Chicago) dal 1960 al 2000. Viene quindi visualizzata una tabella che elenca i dati. Per visualizzare la popolazione nel 2000, recupera il valore di <xref:System.Tuple%606.Item6%2A> proprietà per ogni <xref:System.Tuple%606> oggetto.  
  
 [!code-csharp[System.Tuple\`6.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`6.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Oggetto da confrontare con l'istanza corrente.</param>
        <param name="comparer">Oggetto che fornisce regole personalizzate per il confronto.</param>
        <summary>Confronta l'oggetto <see cref="T:System.Tuple`6" /> corrente con un oggetto specificato mediante un operatore di confronto specificato e restituisce un Integer che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato all'interno dell'ordinamento.</summary>
        <returns>Intero con segno che indica la posizione relativa di questa istanza e di <paramref name="other" /> nell'ordinamento, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Descrizione  
  
 </description></listheader><item><term> Numero intero negativo  
  
 </term><description> Questa istanza precede <paramref name="other" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> Questa istanza si trova nella stessa posizione di <paramref name="other" /> nell'ordinamento.  
  
 </description></item><item><term> Intero positivo  
  
 </term><description> L'istanza segue <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%606> a un'interfaccia <xref:System.Collections.IStructuralComparable>.  
  
 Questo metodo consente di definire i confronti personalizzati di <xref:System.Tuple%606> oggetti. Ad esempio, è possibile utilizzare questo metodo per ordine <xref:System.Tuple%606> oggetti in base al valore di un componente specifico.  
  
 Anche se questo metodo può essere chiamato direttamente, viene chiamato più di frequente quando si ordinano raccolta metodi che includono <xref:System.Collections.IComparer> parametri per ordinare i membri di una raccolta. Ad esempio, viene chiamato <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> (metodo) e <xref:System.Collections.SortedList.Add%2A> metodo di un <xref:System.Collections.SortedList> oggetto che viene creata un'istanza utilizzando il <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> costruttore.  
  
> [!CAUTION]
>  Il <xref:System.Tuple%606.System%23Collections%23IStructuralComparable%23CompareTo%2A> metodo è destinato all'utilizzo nelle operazioni di ordinamento. E non deve essere utilizzato quando lo scopo principale di un confronto per determinare se due oggetti sono uguali. Per determinare se due oggetti sono uguali, chiamare il <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> metodo.  
  
   
  
## Examples  
 L'esempio seguente crea una matrice di <xref:System.Tuple%606> gli oggetti che contiene i dati della popolazione per tre città degli Stati Uniti dal 1960 a 2000. Primo componente della sestupla è il nome della città. I cinque componenti rimanenti rappresentano la popolazione a intervalli di 10 anni dal 1960 a 2000.  
  
 Il `PopulationComparer` classe fornisce un <xref:System.Collections.IComparer> implementazione che consente la matrice di sestuple in base a uno qualsiasi dei relativi componenti. Vengono forniti due valori per il `PopulationComparer` nel relativo costruttore di classe: la posizione del componente che definisce l'ordinamento, e un <xref:System.Boolean> valore che indica se gli oggetti tupla devono essere ordinati in ordine crescente o decrescente.  
  
 Nell'esempio viene quindi Visualizza gli elementi nella matrice in ordine casuale, li ordina in base al terzo componente (la popolazione nel 1970), verranno visualizzati e quindi li ordina in base al sesto componente (la popolazione nel 2000) e li visualizza.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`6.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> non è un oggetto <see cref="T:System.Tuple`6" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Oggetto da confrontare con questa istanza.</param>
        <param name="comparer">Oggetto che definisce il metodo da usare per valutare se i due oggetti sono uguali.</param>
        <summary>Restituisce un valore che indica se l'oggetto <see cref="T:System.Tuple`6" /> corrente è uguale a un oggetto specificato in base a un metodo di confronto specificato.</summary>
        <returns>
          <see langword="true" /> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%606> a un'interfaccia <xref:System.Collections.IStructuralEquatable>.  
  
 Il <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementazione viene chiamata solo se `other` non `null`, e se può essere correttamente il cast (in c#) o convertire (in Visual Basic) per un <xref:System.Tuple%606> oggetto i cui componenti sono dello stesso tipo dell'istanza corrente. Il <xref:System.Tuple%606.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> passa primo metodo di <xref:System.Tuple%606.Item1%2A> valori del <xref:System.Tuple%606> oggetti da confrontare con il <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementazione. Se questo metodo restituisce `true`, il metodo viene chiamato nuovamente e passato il <xref:System.Tuple%606.Item2%2A> i valori dei due <xref:System.Tuple%606> oggetti. Il processo continua fino a quando la chiamata al metodo restituisce `false` quando viene confrontata una coppia specifica di `Item` valori o i due <xref:System.Tuple%606.Item6%2A> i valori vengono passati al metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce un `RateComparer` classe che esegue un test personalizzato per verificarne l'uguaglianza. Se i valori che vengono passati al relativo <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> metodo sono di tipo <xref:System.Single> o <xref:System.Double>, il metodo verifica l'uguaglianza con un massimo di tre cifre frazionarie. In caso contrario, chiama semplicemente il `x` del parametro `Equals` metodo. Nell'esempio viene utilizzato questo <xref:System.Collections.IEqualityComparer> implementazione per determinare se quattro <xref:System.Tuple%606> oggetti che contengono dati sulla velocità di variazione della popolazione tra 1960 e 2000 sono uguali.  
  
 [!code-csharp[System.Tuple\`6.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.equals/cs/equals2.cs#2)]
 [!code-vb[System.Tuple\`6.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.equals/vb/equals2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Oggetto il cui metodo <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcola il codice hash dell'oggetto <see cref="T:System.Tuple`6" /> corrente.</param>
        <summary>Calcola il codice hash per l'oggetto <see cref="T:System.Tuple`6" /> corrente tramite un metodo di calcolo specificato.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%606> a un'interfaccia <xref:System.Collections.IStructuralEquatable>.  
  
 Il metodo esegue semplicemente il wrapping di una chiamata al `comparer` dell'oggetto <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementazione.  
  
 L'algoritmo utilizzato per calcolare il codice hash deve restituire lo stesso codice hash per due <xref:System.Tuple%606> gli oggetti che sono considerati uguali.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
        <summary>Confronta l'oggetto <see cref="T:System.Tuple`6" /> corrente con un oggetto specificato e restituisce un intero che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato nell'ordinamento.</summary>
        <returns>Intero con segno che indica la posizione relativa di questa istanza e di <paramref name="obj" /> nell'ordinamento, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Descrizione  
  
 </description></listheader><item><term> Numero intero negativo  
  
 </term><description> Questa istanza precede <paramref name="obj" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> Questa istanza si trova nella stessa posizione di <paramref name="obj" /> nell'ordinamento.  
  
 </description></item><item><term> Intero positivo  
  
 </term><description> L'istanza segue <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%606> a un'interfaccia <xref:System.IComparable>.  
  
 Questo metodo fornisce il <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementazione per il <xref:System.Tuple%606> classe. Anche se il metodo può essere chiamato direttamente, viene chiamato più di frequente dagli overload predefiniti di ordinamento alla raccolta di metodi, ad esempio <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> e <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, per ordinare i membri di una raccolta.  
  
> [!CAUTION]
>  Il <xref:System.Tuple%606.System%23IComparable%23CompareTo%2A> metodo è destinato all'utilizzo nelle operazioni di ordinamento. E non deve essere utilizzato quando lo scopo principale di un confronto per determinare se due oggetti sono uguali. Per determinare se due oggetti sono uguali, chiamare il <xref:System.Tuple%606.Equals%28System.Object%29?displayProperty=nameWithType> metodo.  
  
 Il <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> metodo Usa l'operatore predefinito dell'oggetto per confrontare ogni componente.  
  
   
  
## Examples  
 L'esempio seguente crea una matrice di <xref:System.Tuple%606> oggetti che contengono dati della popolazione per tre città degli Stati Uniti dal 1960 al 2000. I sei componenti consistono nel nome della città seguito da una popolazione della città in intervalli di 10 anni 1960 2000. Nell'esempio vengono visualizzati i componenti di ogni tupla nella matrice in ordine casuale, Ordina la matrice e chiama quindi il <xref:System.Tuple%606.ToString%2A> metodo per visualizzare ogni tupla in un criterio di ordinamento. L'output mostra che la matrice è ordinata in base al nome, ovvero il primo componente. Si noti che nell'esempio viene chiamato direttamente il <xref:System.Tuple%606.System%23IComparable%23CompareTo%28System.Object%29> metodo. Questo metodo viene chiamato in modo implicito dal <xref:System.Array.Sort%28System.Array%29> metodo per ogni elemento nella matrice.  
  
 [!code-csharp[System.Tuple\`6.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`6.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> non è un oggetto <see cref="T:System.Tuple`6" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Runtime.CompilerServices.ITuple.Item[int] { System::Object ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice dell'elemento <see langword="Tuple" /> specificato. <c>index</c> può variare da 0 a 5.</param>
        <summary>Ottiene il valore dell'elemento <see langword="Tuple" /> specificato.</summary>
        <value>Valore dell'elemento <see langword="Tuple" /> nella posizione specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> proprietà è un'implementazione esplicita dell'interfaccia. Per chiamarlo, è necessario eseguire il cast o convertire il <xref:System.Tuple%606> l'oggetto in un <xref:System.Runtime.CompilerServices.ITuple> oggetto di interfaccia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> è minore di 0 o maggiore di 5.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System.Runtime.CompilerServices.ITuple.Length { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di elementi in <see langword="Tuple" />.</summary>
        <value>6, il numero di elementi in un oggetto <see cref="T:System.Tuple`6" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Tuple%606.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> proprietà è un'implementazione esplicita dell'interfaccia. Per chiamarlo, è necessario eseguire il cast o convertire il <xref:System.Tuple%606> l'oggetto in un <xref:System.Runtime.CompilerServices.ITuple> oggetto di interfaccia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`6.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta il valore di questa istanza di <see cref="T:System.Tuple`6" />.</summary>
        <returns>Rappresentazione di stringa dell'oggetto <see cref="T:System.Tuple`6" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita da questo metodo assume il formato (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6`), dove *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, e *Item6*rappresentano i valori del <xref:System.Tuple%606.Item1%2A>, <xref:System.Tuple%606.Item2%2A>, <xref:System.Tuple%606.Item3%2A>, <xref:System.Tuple%606.Item4%2A>, <xref:System.Tuple%606.Item5%2A>, e <xref:System.Tuple%606.Item6%2A> proprietà, rispettivamente. Se si verifica uno dei valori di proprietà `null`, essa viene rappresentata come <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente definisce un <xref:System.Tuple%606> oggetto che contiene i dati della popolazione di New York City per ogni censimento dal 1960 fino a 2000. I componenti della sestupla vengono quindi visualizzati da una chiamata al <xref:System.Tuple%606.ToString%2A> metodo.  
  
 [!code-csharp[System.Tuple\`6.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`6.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`6.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`6.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>