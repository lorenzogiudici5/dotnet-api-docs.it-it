<Type Name="IObserver&lt;T&gt;" FullName="System.IObserver&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3facb3d52ed4cf715a9c826dd48e65f8e79aa81b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728175" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObserver&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObserver`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObserver`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObserver(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObserver" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Oggetto che fornisce informazioni di notifica.</typeparam>
    <summary>Fornisce un meccanismo per la ricezione di notifiche basate su push.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IObserver%601> e <xref:System.IObservable%601> interfacce forniscono un meccanismo generalizzato per le notifiche basate su push, noto anche come modello di progettazione osservatore. Il <xref:System.IObservable%601> interfaccia rappresenta la classe che invia le notifiche (provider); il <xref:System.IObserver%601> interfaccia rappresenta la classe che li riceve (l'osservatore). `T` rappresenta la classe che fornisce le informazioni di notifica.  
  
 Un <xref:System.IObserver%601> dispone di implementazione ricevere notifiche da un provider (un <xref:System.IObservable%601> implementazione) passando un'istanza di se stesso al provider <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metodo. Questo metodo restituisce un <xref:System.IDisposable> completamento dell'oggetto che può essere usato per annullare l'osservatore prima che il provider l'invio di notifiche.  
  
 Il <xref:System.IObserver%601> interfaccia definisce i tre metodi seguenti che l'osservatore deve implementare:  
  
-   Il <xref:System.IObserver%601.OnNext%2A> metodo, che viene in genere chiamato dal provider per fornire all'osservatore nuovi dati o informazioni sullo stato.  
  
-   Il <xref:System.IObserver%601.OnError%2A> metodo, che viene in genere chiamato dal provider per indicare che i dati sono accessibile, danneggiati o non disponibile, o che il provider ha riscontrato una condizione di errore.  
  
-   Il <xref:System.IObserver%601.OnCompleted%2A> metodo, che viene in genere chiamato dal provider per indicare che ha terminato l'invio di notifiche agli osservatori.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il modello di progettazione osservatore. Definisce un `Location` classe che contiene informazioni di latitudine e longitudine.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 Il `LocationReporter` classe fornisce il <xref:System.IObserver%601> implementazione. Vengono visualizzate informazioni relative alla posizione corrente nella console. Il costruttore include un `name` parametro, che consente di `LocationReporter` istanza per identificarsi nella stringa restituita. Include inoltre un `Subscribe` metodo, che esegue il wrapping di una chiamata al provider <xref:System.IObservable%601.Subscribe%2A> metodo. In questo modo il metodo a cui assegnare l'oggetto restituito <xref:System.IDisposable> riferimento a una variabile privata. Il `LocationReporter` include anche un `Unsubscribe` metodo che chiama il <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> l'oggetto restituito dal metodo di <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> (metodo). Il codice seguente definisce la `LocationReporter` classe.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 Il `LocationTracker` classe fornisce il <xref:System.IObservable%601> implementazione. Il relativo `TrackLocation` viene passato un valore nullable `Location` oggetto che contiene i dati di latitudine e longitudine. Se il `Location` valore non è `null`, `TrackLocation` chiamate al metodo di <xref:System.IObserver%601.OnNext%2A> metodo di ogni osservatore.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 Se il `Location` valore `null`, `TrackLocation` metodo crea un'istanza un `LocationNotFoundException` oggetto, come illustrato nell'esempio seguente. Chiama quindi ogni osservatore <xref:System.IObserver%601.OnError%2A> metodo e passa il `LocationNotFoundException` oggetto. Si noti che `LocationNotFoundException` deriva da <xref:System.Exception> ma non può aggiungere nuovi membri.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 Registrare gli Observer per ricevere notifiche da un `TrackLocation` oggetto chiamando il relativo <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> metodo, che assegna un riferimento all'oggetto dell'osservatore a un oggetto generico privato <xref:System.Collections.Generic.List%601> oggetto. Il metodo restituisce un `Unsubscriber` oggetto, ovvero un <xref:System.IDisposable> implementazione che consente agli osservatori di interrompere la ricezione di notifiche. Il `LocationTracker` include anche un `EndTransmission` metodo. Se non esistono altri dati di posizione sono disponibili, il metodo viene chiamato ogni osservatore <xref:System.IObserver%601.OnCompleted%2A> (metodo) e quindi Cancella l'elenco interno di osservatori.  
  
 Il codice seguente crea quindi il provider e l'osservatore.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObservable`1" />
  </Docs>
  <Members>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="public void OnCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnCompleted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica all'osservatore che il provider ha terminato di inviare notifiche basate su push.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'osservatore <xref:System.IObserver%601.OnCompleted%2A> implementazione viene chiamata, il <xref:System.IObserver%601.OnCompleted%2A> metodo facoltativamente è possibile chiamare il <xref:System.IDisposable.Dispose%2A> metodo il <xref:System.IDisposable> oggetto restituito all'osservatore quando chiamato il <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente fornisce un'implementazione del <xref:System.IObserver%601.OnCompleted%2A> metodo in un'applicazione di rilevamento di latitudine e longitudine. Il metodo indica semplicemente che non esistono altri dati sono disponibili e chiama il provider <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione. Vedere la sezione esempio del <xref:System.IObserver%601> argomento per un esempio completo.  
  
 [!code-csharp[System.IObserver.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#11)]
 [!code-vb[System.IObserver.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnError">
      <MemberSignature Language="C#" Value="public void OnError (Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnError(class System.Exception error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnError(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnError (error As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnError(Exception ^ error);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="error">Oggetto che fornisce informazioni aggiuntive sull'errore.</param>
        <summary>Notifica all'osservatore una condizione di errore del provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene `error` è un oggetto derivato da <xref:System.Exception?displayProperty=nameWithType>, non rappresenta necessariamente un'eccezione generata dal provider. Può inoltre rappresentare una condizione di routine o di errore previsto, ad esempio i dati sono mancante o non disponibile. Il <xref:System.IObserver%601.OnError%2A> metodo dovrebbe essere considerato come informativo e non prevede l'osservatore per fornire la gestione degli errori di provider.  
  
   
  
## Examples  
 Nell'esempio seguente fornisce un'implementazione del <xref:System.IObserver%601.OnError%2A> metodo in un'applicazione di rilevamento di latitudine e longitudine. Il metodo indica semplicemente che i dati sono attualmente disponibili; non utilizzare il <xref:System.Exception> oggetto passato come parametro. Vedere la sezione esempio del <xref:System.IObserver%601> argomento per un esempio completo.  
  
 [!code-csharp[System.IObserver.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#10)]
 [!code-vb[System.IObserver.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNext">
      <MemberSignature Language="C#" Value="public void OnNext (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnNext(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObserver`1.OnNext(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OnNext (value As T)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">Informazioni per la notifica corrente.</param>
        <summary>Fornisce nuovi dati all'osservatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dopo che un osservatore è chiamato un provider <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> (metodo), il provider chiama l'osservatore <xref:System.IObserver%601.OnNext%2A> metodo per fornire notifiche.  
  
   
  
## Examples  
 Nell'esempio seguente fornisce un'implementazione del <xref:System.IObserver%601.OnNext%2A> metodo in un'applicazione di rilevamento di latitudine e longitudine. Vedere la sezione esempio del <xref:System.IObserver%601> argomento per un esempio completo.  
  
 [!code-csharp[System.IObserver.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#12)]
 [!code-vb[System.IObserver.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>