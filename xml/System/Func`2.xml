<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="376675baf8e14d5ae81bf0b102d6017fb220e31b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431599" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Tipo del parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.</typeparam>
    <param name="arg">Parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che dispone di un parametro e restituisce un valore del tipo specificato dal parametro <typeparamref name="TResult" />.</summary>
    <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo delegato rappresenta un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato. Il metodo incapsulato deve corrispondere alla firma del metodo definita da questo delegato. Ciò significa che il metodo incapsulato deve avere un parametro che viene passato per valore e che deve restituire un valore.  
  
> [!NOTE]
>  Riferimento a un metodo che presenta un parametro e restituisce `void` (o in Visual Basic, che è dichiarato come un `Sub` piuttosto che come una `Function`), utilizzare il metodo generico <xref:System.Action%601> delegato.  
  
 Quando si usa il <xref:System.Func%602> delegato, è necessario definire in modo esplicito un delegato che incapsula un metodo con un singolo parametro. Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato `ConvertMethod` e assegna un riferimento al `UppercaseString` metodo all'istanza di delegato.  
  
 [!code-csharp[System.Func~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs#1)]
 [!code-vb[System.Func~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb#1)]  
  
 Nell'esempio seguente per semplificare questo codice creando il <xref:System.Func%602> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.  
  
 [!code-csharp[System.Func~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs#2)]
 [!code-vb[System.Func~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb#2)]  
  
 È anche possibile usare il <xref:System.Func%602> delegato con i metodi anonimi nel linguaggio c#, come illustrato nell'esempio seguente. (Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs#3)]  
  
 È inoltre possibile assegnare un'espressione lambda a un <xref:System.Func%602> delegare, come illustrato nell'esempio seguente. (Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs#4)]
 [!code-vb[System.Func~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb#4)]  
  
 Il tipo sottostante di un'espressione lambda è uno dei generica `Func` delegati. Questo rende possibile passare un'espressione lambda come un parametro senza alcuna assegnazione in modo esplicito a un delegato. In particolare, poiché molti metodi di tipi nel <xref:System.Linq> dispone di spazio dei nomi <xref:System.Func%602> parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un <xref:System.Func%602> delegare.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare e utilizzare un <xref:System.Func%602> delegare. Questo esempio dichiara un <xref:System.Func%602> variabile e lo assegna un'espressione lambda che converte i caratteri in una stringa in lettere maiuscole. Il delegato che incapsula questo metodo viene successivamente passato per il <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> metodo per convertire le stringhe in una matrice di stringhe in lettere maiuscole.  
  
 [!code-csharp[System.Func~2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs#5)]
 [!code-vb[System.Func~2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>