<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5da4af93ad7b061e8a044bcad37e9192c6c78b1" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52610667" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">Tipo del primo componente della tupla.</typeparam>
    <typeparam name="T2">Tipo del secondo componente della tupla.</typeparam>
    <typeparam name="T3">Tipo del terzo componente della tupla.</typeparam>
    <typeparam name="T4">Tipo del quarto componente della tupla.</typeparam>
    <typeparam name="T5">Tipo del quinto componente della tupla.</typeparam>
    <typeparam name="T6">Tipo del sesto componente della tupla.</typeparam>
    <typeparam name="T7">Tipo del settimo componente della tupla.</typeparam>
    <typeparam name="TRest">Qualsiasi oggetto <see langword="Tuple" /> generico che definisce i tipi dei componenti restanti della tupla.</typeparam>
    <summary>Rappresenta una tupla di *n* valori, dove *n* è maggiore o uguale a 8.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una tupla è una struttura di dati con un numero e una sequenza di valori. Il <xref:System.Tuple%608> classe rappresenta un *n*- tupla che dispone di otto o più componenti.  
  
 È possibile creare un'istanza di un <xref:System.Tuple%608> oggetti con componenti esattamente otto chiamando il metodo statico <xref:System.Tuple.Create%2A?displayProperty=nameWithType> (metodo). L'esempio seguente crea una tupla con 8 componenti (ottupla) che contiene i numeri primi che sono meno di 20. Si noti che usa l'inferenza del tipo per determinare il tipo di ogni componente.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 È anche possibile creare l'istanza di un oggetto n-plo con otto o più componenti chiamando il <xref:System.Tuple%608.%23ctor%2A> costruttore. L'esempio seguente usa il <xref:System.Tuple%608.%23ctor%2A> costruttore per creare una tupla con 8 elementi che è equivalente alla tupla creata nell'esempio precedente.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  Per creare una tupla con n elementi con nove o più componenti, è necessario chiamare il <xref:System.Tuple%608.%23ctor%2A> costruttore. I metodi factory statici del <xref:System.Tuple> classe non supportano la creazione di `Tuple` oggetti con più di otto componenti.  
  
 Creare un'istanza di una tupla con n elementi con otto o più componenti con i <xref:System.Tuple%608.%23ctor%2A> costruttore, è fornire un oggetto generico `Tuple` dell'oggetto come il `rest` parametro per definire l'intervallo tra l'ottavo *n*componente della tupla. Annidando generico `Tuple` gli oggetti in questo modo, è possibile creare una tupla che non è previste limitazioni pratiche per il numero dei relativi componenti.  
  
 L'esempio seguente crea una tupla con 17 elementi che contiene i dati della popolazione della città di Detroit, Michigan, per ogni censimento dal 1860 national a 2000. Il primo componente della tupla è il nome della città. Il secondo componente è la data di inizio della serie di dati e il terzo componente rappresenta la popolazione in corrispondenza della data di inizio. Ogni componente successivo fornisce la popolazione in intervalli di dieci anni. Viene creata la tupla con 17 elementi annidando un <xref:System.Tuple%603> dell'oggetto all'interno di un <xref:System.Tuple%608> oggetto. (Che è, il <xref:System.Tuple%603> viene fornito come valore dell'oggetto di `rest` parametro nel <xref:System.Tuple%608> costruttore della classe.) Ciò <xref:System.Tuple%608> oggetti, a sua volta, annidato in un outer <xref:System.Tuple%608> oggetto. (Che è, il <xref:System.Tuple%608> viene fornito come valore dell'oggetto di `rest` parametro esterna <xref:System.Tuple%608> costruttore della classe dell'oggetto.)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 È possibile recuperare il valore di primi sette componenti della tupla di valori usando le proprietà di sola lettura <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, e <xref:System.Tuple%607.Item7%2A> delle proprietà dell'istanza. Tutti i componenti aggiuntivi sono annidati e possono essere recuperati dal <xref:System.Tuple%608.Rest%2A> proprietà. Nell'esempio precedente, il <xref:System.Tuple%608.Item1%2A> tramite <xref:System.Tuple%608.Item7%2A> proprietà recuperano il primo al settimo componente della tupla. L'ottavo attraverso componenti quattordicesimo sono contenuti nella tupla nidificato nel secondo livello e sono rappresentati dal `Rest.Item1` tramite `Rest.Item7` proprietà. I componenti diciassettesimo quindicesimo e sono contenuti nella tupla nidificata al terzo livello e sono rappresentati dal `Rest.Rest.Item1` anche se `Rest.Rest.Item3` proprietà.  
  
 Le tuple sono comunemente usate in quattro modi diversi:  
  
-   Per rappresentare un singolo set di dati. Ad esempio, una tupla può rappresentare un record di database e i relativi componenti possono rappresentare i singoli campi del record.  
  
-   Per fornire accesso semplificato alle e la manipolazione di, un set di dati.  
  
-   Per restituire più valori da un metodo senza usare `out` parametri (in c#) o `ByRef` parametri (in Visual Basic). Ad esempio, nell'esempio precedente restituisce le statistiche calcolate, insieme al nome di città, in un <xref:System.Tuple%607> oggetto.  
  
-   Per passare più valori a un metodo tramite un singolo parametro. Ad esempio, il <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> metodo ha un singolo parametro che consente di fornire un valore al metodo eseguito dal thread all'avvio. Se si fornisce un <xref:System.Tuple%607> dell'oggetto come argomento del metodo, è possibile fornire routine di avvio del thread con sette elementi di dati.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">Valore del primo componente della tupla.</param>
        <param name="item2">Valore del secondo componente della tupla.</param>
        <param name="item3">Valore del terzo componente della tupla.</param>
        <param name="item4">Valore del quarto componente della tupla.</param>
        <param name="item5">Valore del quinto componente della tupla.</param>
        <param name="item6">Valore del sesto componente della tupla.</param>
        <param name="item7">Valore del settimo componente della tupla.</param>
        <param name="rest">Qualsiasi oggetto <see langword="Tuple" /> generico contenente i valori dei componenti restanti della tupla.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Tuple`8" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È anche possibile usare il metodo statico <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metodo per creare un'istanza di un oggetto tupla con 8 componenti (ottupla) senza dover specificare in modo esplicito i tipi dei relativi componenti. L'esempio seguente usa il <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metodo per creare un'istanza di un oggetto tupla con 8 elementi contenente i numeri primi che sono meno di 20.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Ciò equivale alla chiamata seguente al <xref:System.Tuple%607.%23ctor%2A> costruttore della classe.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 Tuttavia, il metodo statico <xref:System.Tuple.Create%2A?displayProperty=nameWithType> metodo non può essere usato per creare un oggetto tupla con più di otto componenti.  
  
 Quando si usa la <xref:System.Tuple%608.%23ctor%2A> costruttore per creare una tupla con n elementi con otto o più componenti, si utilizza il `rest` parametro per creare un n-plo annidato con da uno a sette componenti. Tramite i livelli successivi di annidamento, è possibile creare una tupla con n elementi con un numero praticamente illimitato di componenti. Ad esempio, per creare una tupla con 25, crea un'istanza di un <xref:System.Tuple%608> oggetto con tre livelli di nidificazione, come indicato di seguito:  
  
-   Più esterna <xref:System.Tuple%608> oggetto contiene i componenti settimo dal primo. Relativi <xref:System.Tuple%608.Rest%2A> proprietà offre l'accesso a un <xref:System.Tuple%608> oggetto al primo livello di annidamento.  
  
-   Annidati più esterna <xref:System.Tuple%608> oggetto contiene l'ottavo attraverso componenti quattordicesimo e la relativa <xref:System.Tuple%608.Rest%2A> proprietà offre l'accesso a un <xref:System.Tuple%608> oggetto nel secondo livello di annidamento.  
  
-   Il <xref:System.Tuple%608> oggetto nel secondo livello di annidamento contiene il quindicesimo attraverso ventunesimo componenti e la relativa <xref:System.Tuple%608.Rest%2A> proprietà offre l'accesso a un <xref:System.Tuple%604> oggetto al terzo livello di annidamento.  
  
-   La tupla più interna è un <xref:System.Tuple%604> oggetto che contiene i componenti di venti quinto ventiduesimo tramiti.  
  
   
  
## Examples  
 L'esempio seguente crea una tupla con 17 elementi che contiene i dati della popolazione per la città di Detroit, Michigan, per ogni censimento dal 1860 a 2000. Il primo componente della tupla è il nome della città. Il secondo componente è la data di inizio della serie di dati e il terzo componente rappresenta la popolazione in corrispondenza della data di inizio. Ogni componente successivo fornisce la popolazione in intervalli di dieci anni. L'esempio usa due livelli di annidamento per creare la tupla con 17 elementi: definisce una tupla con 7 elementi la cui terza al settimo componente contengono dati sulla popolazione di 1860 tramite 1900, un nidificata tupla con 7 elementi che contiene i dati della popolazione per 1910 tramite 1970 e inner annidati tupla con 3 elementi che contiene i dati della popolazione per 1980 e 2000.  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">L'oggetto <paramref name="rest" /> non è un oggetto <see langword="Tuple" /> generico.</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con questa istanza.</param>
        <summary>Restituisce un valore che indica se l'oggetto <see cref="T:System.Tuple`8" /> corrente è uguale a un oggetto specificato.</summary>
        <returns>
          <see langword="true" /> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `obj` parametro viene considerato uguale all'istanza corrente se soddisfa tutte le condizioni seguenti:  
  
-   Si tratta di un <xref:System.Tuple%608> oggetto.  
  
-   Ha lo stesso numero totale di componenti che sono dello stesso tipo dell'istanza corrente.  
  
-   I componenti, compresi i relativi componenti annidati, sono uguali a quelli dell'istanza corrente. L'uguaglianza è determinata dall'operatore di uguaglianza predefinito per ogni componente.  
  
   
  
## Examples  
 L'esempio seguente definisce cinque <xref:System.Tuple%608> oggetti contenenti i numeri primi. Confronta quindi il primo oggetto con tutti gli oggetti rimanenti. Come illustrato nell'output, solo il primo e ultimo <xref:System.Tuple%608> oggetti sono uguali, perché hanno lo stesso numero di componenti con valori identici.  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Calcola il codice hash per l'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del primo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del primo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item1%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item1%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero del primo elemento dalla matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il primo componente della tupla con 17 elementi è il nome della città. Nell'esempio viene usato il <xref:System.Tuple%608.Item1%2A> proprietà per visualizzare il nome della città nell'intestazione della tabella prima di visualizzare i dati della popolazione.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del secondo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del secondo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item2%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item2%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero del secondo elemento dalla matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il secondo componente della tupla con 17 elementi è il primo anno della serie di dati. Nell'esempio viene assegnato il valore della <xref:System.Tuple%608.Item2%2A> proprietà a una variabile e quindi usa tale variabile per rappresentare l'anno i cui dati vengono visualizzati.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del terzo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del terzo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item3%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item3%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero del terzo elemento dalla matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il terzo componente della tupla con 17 elementi è la popolazione di 1860. Nell'esempio viene usato il <xref:System.Tuple%608.Item3%2A> proprietà per visualizzare il valore della popolazione e per la quale calcolare il tasso di variazione della popolazione tra 1860 e 1870 annuo.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del quarto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del quarto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item4%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item4%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero al quarto elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il quarto componente della tupla con 17 elementi è il popolamento in 1870. Nell'esempio viene usato il <xref:System.Tuple%608.Item4%2A> proprietà per visualizzare il valore della popolazione e per la quale calcolare il tasso di variazione della popolazione tra 1870 e 1880 annuo.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del quinto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del quinto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item5%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item5%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero al quinto elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il quinto componente della tupla con 17 elementi è il popolamento in 1880. Nell'esempio viene usato il <xref:System.Tuple%608.Item5%2A> proprietà per visualizzare il valore della popolazione e per la quale calcolare il tasso di variazione della popolazione tra 1880 e 1890 annuo.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del sesto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del sesto componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item6%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item6%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero di sesto elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il sesto componente della tupla con 17 elementi è il popolamento in 1890. Nell'esempio viene usato il <xref:System.Tuple%608.Item6%2A> proprietà per visualizzare il valore della popolazione e per la quale calcolare il tasso di variazione della popolazione tra 1900 e 1890 annuo.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il valore del settimo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore del settimo componente dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile determinare in modo dinamico il tipo del <xref:System.Tuple%608.Item7%2A> componente in uno dei due modi:  
  
-   Chiamando il `GetType` sul valore restituito dal metodo di <xref:System.Tuple%608.Item7%2A> proprietà.  
  
-   Recuperando il <xref:System.Type> oggetto che rappresenta il <xref:System.Tuple%608> dell'oggetto e il recupero di settimo elemento della matrice restituita dal relativo <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> (metodo).  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il settimo componente della tupla con 17 elementi è la popolazione di 1900. Nell'esempio viene usato il <xref:System.Tuple%608.Item7%2A> proprietà per visualizzare il valore della popolazione e per la quale calcolare il tasso di variazione della popolazione tra 1900 e 1910 annuo.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene i componenti restanti dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</summary>
        <value>Valore dei componenti restanti dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Tuple%608.Rest%2A> proprietà restituisce nidificato `Tuple` che consente l'accesso all'ottavo tuttavia *n*componente della tupla. A seconda del numero totale di componenti nella tupla, i valori dell'ottavo attraverso componenti quattordicesimo possono essere recuperati da annidata `Tuple` dell'oggetto <xref:System.Tuple%608.Item1%2A> tramite <xref:System.Tuple%608.Item7%2A> proprietà. È quindi possibile usare la <xref:System.Tuple%608.Rest%2A> proprietà di un tipo annidato <xref:System.Tuple%608> oggetto da cui recuperare il `Tuple` oggetto al successivo livello di annidamento.  
  
 È possibile determinare in modo dinamico il numero di componenti in un tipo annidato `Tuple` oggetto restituito dal <xref:System.Tuple%608.Rest%2A> proprietà tramite l'estrazione di cifre dal nome del tipo. Nell'esempio seguente viene illustrato questo concetto.  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 L'esempio seguente crea un oggetto tupla con 17 elementi contenente i dati della popolazione per la città di Detroit, Michigan, da 1860 a 2000. Il settimo componente della tupla con 17 elementi è la popolazione di 1900. Nell'esempio viene usato il <xref:System.Tuple%608.Rest%2A> proprietà per recuperare i valori dell'ottavo tramite componenti quattordicesimo che usa la <xref:System.Tuple%608.Rest%2A> proprietà di annidata <xref:System.Tuple%608> oggetto per recuperare i valori dei componenti restanti.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Oggetto da confrontare con l'istanza corrente.</param>
        <param name="comparer">Oggetto che fornisce regole personalizzate per il confronto.</param>
        <summary>Confronta l'oggetto <see cref="T:System.Tuple`8" /> corrente con un oggetto specificato mediante un operatore di confronto specificato e restituisce un Integer che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato all'interno dell'ordinamento.</summary>
        <returns>Intero con segno che indica la posizione relativa di questa istanza e di <paramref name="other" /> nell'ordinamento, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore 
 </term><description> Descrizione 
 </description></listheader><item><term> Intero negativo 
 </term><description> Questa istanza precede <paramref name="other" />.  
  
 </description></item><item><term> Zero 
 </term><description> Questa istanza si trova nella stessa posizione di <paramref name="other" /> nell'ordinamento.  
  
 </description></item><item><term> Intero positivo 
 </term><description> L'istanza segue <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il membro è un'implementazione esplicita dell'interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%608> a un'interfaccia <xref:System.Collections.IStructuralComparable>.  
  
 Questo metodo consente di definire i confronti personalizzati di <xref:System.Tuple%608> oggetti. Ad esempio, è possibile usare questo metodo per ordine <xref:System.Tuple%608> gli oggetti in basano al valore di un componente specifico.  
  
 Sebbene questo metodo può essere chiamato direttamente, viene chiamato più di frequente quando si ordinano insieme i metodi che includono <xref:System.Collections.IComparer> parametri per ordinare i membri di una raccolta. Ad esempio, viene chiamato <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> (metodo) e il <xref:System.Collections.SortedList.Add%2A> metodo di un <xref:System.Collections.SortedList> oggetto che viene creata un'istanza usando il <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> costruttore.  
  
> [!CAUTION]
>  Il <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> metodo è destinato all'utilizzo nelle operazioni di ordinamento. Consigliabile non usarla quando lo scopo principale di un confronto per determinare se due oggetti sono uguali. Per determinare se due oggetti sono uguali, chiamare il <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente viene creata una matrice di oggetti <xref:System.Tuple%608> contenente i dati della popolazione di quattro città degli Stati Uniti dal 1940 al 2000. Primo componente dell'ottupla è il nome della città. I sei componenti rimanenti rappresentano la popolazione in intervalli di 10 anni dal 1940 al 2000.  
  
 Il `PopulationComparer` classe fornisce un <xref:System.Collections.IComparer> implementazione che consente la matrice degli ottuple in base a uno qualsiasi dei relativi componenti. Vengono forniti due valori per il `PopulationComparer` classe nel relativo costruttore: la posizione del componente che definisca l'ordinamento, e un <xref:System.Boolean> valore che indica se gli oggetti tupla devono essere disposti in ordine crescente o decrescente.  
  
 Nell'esempio viene quindi Visualizza gli elementi nella matrice in ordine casuale, li ordina in base al terzo componente (il popolamento in 1950), verranno visualizzati e li ordina in base al componente ottavo (la popolazione nel 2000) e li visualizza.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> non è un oggetto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Oggetto da confrontare con questa istanza.</param>
        <param name="comparer">Oggetto che definisce il metodo da usare per valutare se i due oggetti sono uguali.</param>
        <summary>Restituisce un valore che indica se l'oggetto <see cref="T:System.Tuple`8" /> corrente è uguale a un oggetto specificato in base a un metodo di confronto specificato.</summary>
        <returns>
          <see langword="true" /> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%608> a un'interfaccia <xref:System.Collections.IStructuralEquatable>.  
  
 Il <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementazione viene chiamata solo se `other` non è `null`, e se è possibile eseguirne correttamente il cast (in c#) o convertire (in Visual Basic) per un <xref:System.Tuple%608> oggetto con lo stesso numero totale di componenti (inclusi quelli annidati `Tuple` oggetti) dello stesso tipo dell'istanza corrente. Il <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> metodo passa prima il <xref:System.Tuple%608.Item1%2A> i valori del <xref:System.Tuple%608> oggetti da confrontare con il <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> implementazione. Se questa chiamata al metodo restituisce `true`, il metodo viene chiamato nuovamente e passare il <xref:System.Tuple%608.Item2%2A> i valori dei due <xref:System.Tuple%608> oggetti. Il processo continua fino a quando la chiamata al metodo restituisce `false` quando viene confrontata una specifica coppia di valori o due <xref:System.Tuple%608.Rest%2A> valori vengono passati al metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Oggetto il cui metodo <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> calcola il codice hash dell'oggetto <see cref="T:System.Tuple`8" /> corrente.</param>
        <summary>Calcola il codice hash per l'oggetto <see cref="T:System.Tuple`8" /> corrente tramite un metodo di calcolo specificato.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%608> a un'interfaccia <xref:System.Collections.IStructuralEquatable>.  
  
 Il metodo esegue semplicemente il wrapping di una chiamata ai `comparer` dell'oggetto <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> implementazione.  
  
 L'algoritmo utilizzato per calcolare il codice hash deve restituire lo stesso codice hash per due <xref:System.Tuple%608> gli oggetti che sono considerati uguali.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
        <summary>Confronta l'oggetto <see cref="T:System.Tuple`8" /> corrente con un oggetto specificato e restituisce un intero che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato nell'ordinamento.</summary>
        <returns>Intero con segno che indica la posizione relativa di questa istanza e di <paramref name="obj" /> nell'ordinamento, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore 
 </term><description> Descrizione 
 </description></listheader><item><term> Intero negativo 
 </term><description> Questa istanza precede <paramref name="obj" />.  
  
 </description></item><item><term> Zero 
 </term><description> Questa istanza si trova nella stessa posizione di <paramref name="obj" /> nell'ordinamento.  
  
 </description></item><item><term> Intero positivo 
 </term><description> L'istanza segue <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Tuple%608> a un'interfaccia <xref:System.IComparable>.  
  
 Questo metodo fornisce il <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> implementazione per il <xref:System.Tuple%608> classe. Anche se il metodo può essere chiamato direttamente, viene chiamato più di frequente dagli overload predefiniti di ordinamento alla raccolta dei metodi, ad esempio <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> e <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, ordinare i membri di una raccolta.  
  
> [!CAUTION]
>  Il <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> metodo è destinato all'utilizzo nelle operazioni di ordinamento. Consigliabile non usarla quando lo scopo principale di un confronto per determinare se due oggetti sono uguali. Per determinare se due oggetti sono uguali, chiamare il <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> (metodo).  
  
 Il seguente metodo utilizza l'operatore di confronto predefinito dell'oggetto per confrontare ogni componente.  
  
   
  
## Examples  
 L'esempio seguente crea una matrice di ottuple i cui componenti sono numeri interi che contengono un intervallo di numeri primi. L'esempio visualizza gli elementi della matrice in ordine casuale, Ordina la matrice e quindi Visualizza la matrice in base all'ordinamento. L'output mostra che la matrice siano stata ordinata, <xref:System.Tuple%608.Item1%2A>, o primo componente della tupla. Si noti che l'esempio non viene chiamato direttamente il <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> (metodo). Questo metodo viene chiamato in modo implicito dal <xref:System.Array.Sort%28System.Array%29> metodo per ogni elemento nella matrice.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> non è un oggetto <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indice dell'elemento <see langword="Tuple" /> specificato. <paramref name="index" /> può variare da 0 per <see langword="Item1" /> al numero di elementi in <see langword="Tuple" /> meno uno.</param>
        <summary>Ottiene il valore dell'elemento <see langword="Tuple" /> specificato.</summary>
        <value>Valore dell'elemento <see langword="Tuple" /> nella posizione specificata.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> proprietà è un'implementazione esplicita dell'interfaccia. Per la chiamata, è necessario eseguire il cast o convertire le <xref:System.Tuple%608> dell'oggetto a un <xref:System.Runtime.CompilerServices.ITuple> oggetto interfaccia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> è minore di 0.  
  
oppure 
 <paramref name="index" /> è maggiore o uguale a <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di elementi in <see langword="Tuple" />.</summary>
        <value>Numero di elementi in <see langword="Tuple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> proprietà è un'implementazione esplicita dell'interfaccia. Per la chiamata, è necessario eseguire il cast o convertire le <xref:System.Tuple%608> tipo di un <xref:System.Runtime.CompilerServices.ITuple> oggetto interfaccia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una stringa che rappresenta il valore di questa istanza di <see cref="T:System.Tuple`8" />.</summary>
        <returns>Rappresentazione di stringa dell'oggetto <see cref="T:System.Tuple`8" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La stringa restituita da questo metodo accetta il form (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`,  *Item8*...), dove *Item1*, *Item2*, *Item3*, *Item4*, *Item5*, *Item6*, e *Item7* rappresentano i valori del <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, e <xref:System.Tuple%608.Item7%2A> proprietà. *Item8* rappresenta il valore della <xref:System.Tuple%608> dell'oggetto `Next.Item1` proprietà. Il valore di tutti i componenti annidati aggiuntivi seguire *Item8*. Se uno dei valori della proprietà è `null`, essa viene rappresentata come <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente crea una tupla con 17 elementi che contiene i dati della popolazione per la città di Detroit, Michigan, da 1860 a 1900. Usa quindi il <xref:System.Tuple%608.ToString%2A> metodo per visualizzare i dati della tupla.  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>