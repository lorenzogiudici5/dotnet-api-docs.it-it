<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`8.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5748dd4b2ec95cbd704aabcd790b51dc2d7fe169a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">748dd4b2ec95cbd704aabcd790b51dc2d7fe169a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's first component.</source>
          <target state="translated">Tipo del primo componente della tupla.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's second component.</source>
          <target state="translated">Tipo del secondo componente della tupla.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's third component.</source>
          <target state="translated">Tipo del terzo componente della tupla.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">Tipo del quarto componente della tupla.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">Tipo del quinto componente della tupla.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">Tipo del sesto componente della tupla.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">Tipo del settimo componente della tupla.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that defines the types of the tuple's remaining components.</source>
          <target state="translated">Qualsiasi oggetto <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> generico che definisce i tipi dei componenti restanti della tupla.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="T:System.Tuple`8">
          <source>Represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple, where <bpt id="p2">*</bpt>n<ept id="p2">*</ept> is 8 or greater.</source>
          <target state="translated">Rappresenta una tupla di <bpt id="p1">*</bpt>n<ept id="p1">*</ept> valori, dove <bpt id="p2">*</bpt>n<ept id="p2">*</ept> è maggiore o uguale a 8.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">Una tupla è una struttura di dati con un numero specifico e la sequenza di valori.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> class represents an <bpt id="p1">*</bpt>n<ept id="p1">*</ept>-tuple that has eight or more components.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> classe rappresenta un <bpt id="p1">*</bpt>n<ept id="p1">*</ept>- tupla con otto o più componenti.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with exactly eight components by calling the static <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">È possibile creare un'istanza di un <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto con esattamente otto componenti chiamando il metodo statico <ph id="ph2">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates an 8-tuple (octuple) that contains prime numbers that are less than 20.</source>
          <target state="translated">L'esempio seguente crea una tupla con 8 elementi (ottupla) che contiene i numeri primi che sono minori di 20.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Note that it uses type inference to determine the type of each component.</source>
          <target state="translated">Si noti che usa l'inferenza del tipo per determinare il tipo di ogni componente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can also instantiate an n-tuple object with eight or more components by calling the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">È anche possibile creare un oggetto tupla con n elementi con otto o più componenti chiamando il <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an 8-tuple that is equivalent to the tuple created in the previous example.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> costruttore per creare una tupla con 8 elementi che è equivalente alla tupla creata nell'esempio precedente.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To create an n-tuple with nine or more components, you must call the  <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Per creare una tupla con n elementi con nove o più componenti, è necessario chiamare il <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The static factory methods of the <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> class do not support the creation of <ph id="ph2">`Tuple`</ph> objects with more than eight components.</source>
          <target state="translated">I metodi factory statici del <ph id="ph1">&lt;xref:System.Tuple&gt;</ph> non supportano la creazione della classe <ph id="ph2">`Tuple`</ph> oggetti con più di otto componenti.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To instantiate an n-tuple that has eight or more components with the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor, you supply a generic <ph id="ph2">`Tuple`</ph> object as the <ph id="ph3">`rest`</ph> parameter to define the eighth through <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">Per creare un'istanza di una tupla con n elementi con otto o più componenti con la <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> costruttore, si fornisce un oggetto generico <ph id="ph2">`Tuple`</ph> dell'oggetto come i <ph id="ph3">`rest`</ph> parametro per definire l'ottavo tramite <bpt id="p1">*</bpt>n<ept id="p1">*</ept>componente della tupla.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>By nesting generic <ph id="ph1">`Tuple`</ph> objects in this way, you can create a tuple that has no practical limitation on the number of its components.</source>
          <target state="translated">Annidando generico <ph id="ph1">`Tuple`</ph> oggetti in questo modo, è possibile creare una tupla che non esistono limiti pratici per il numero dei relativi componenti.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each national census from 1860 to 2000.</source>
          <target state="translated">L'esempio seguente crea una tupla di 17 che contiene i dati della popolazione per la città di Detroit, Michigan, per ogni censimento nazionale dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Il primo componente della tupla è il nome della città.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The second component is the start date of the data series, and the third component is the population at the start date.</source>
          <target state="translated">Il secondo componente è la data di inizio della serie di dati e il terzo componente è la popolazione alla data di inizio.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Ogni componente successivo fornisce il popolamento a intervalli di dieci anni.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The 17-tuple is created by nesting a <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object inside a <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">Viene creata la tupla di 17 annidando un <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> oggetto all'interno di un <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> class constructor.) This <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object is, in turn, nested in an outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">(Che è, il <ph id="ph1">&lt;xref:System.Tuple%603&gt;</ph> fornito come valore dell'oggetto di <ph id="ph2">`rest`</ph> parametro il <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> costruttore della classe.) Questo <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> oggetto, a sua volta, annidato in un outer <ph id="ph5">&lt;xref:System.Tuple%608&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>(That is, the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object is supplied as the value of the <ph id="ph2">`rest`</ph> parameter in the outer <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object's class constructor.)</source>
          <target state="translated">(Ovvero, il <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> fornito come valore dell'oggetto il <ph id="ph2">`rest`</ph> parametro esterna <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> costruttore della classe dell'oggetto.)</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>You can retrieve the value of the tuple's first seven components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">È possibile recuperare il valore di primi sette componenti della tupla utilizzando la proprietà di sola lettura <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, e <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> delle proprietà dell'istanza.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Any additional components are nested and can be retrieved from the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property.</source>
          <target state="translated">Tutti i componenti aggiuntivi sono nidificati e può essere recuperati dal <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>In the previous example, the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties retrieve the first through seventh components of the tuple.</source>
          <target state="translated">Nell'esempio precedente, il <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> tramite <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> recuperano dal primo al settimo componente della tupla.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The eighth through fourteenth components are contained in the tuple that is nested at the second level, and are represented by the <ph id="ph1">`Rest.Item1`</ph> through <ph id="ph2">`Rest.Item7`</ph> properties.</source>
          <target state="translated">L'ottavo mediante i componenti di quattordicesimo sono contenuti nella tupla annidata al secondo livello e sono rappresentate dal <ph id="ph1">`Rest.Item1`</ph> tramite <ph id="ph2">`Rest.Item7`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>The fifteenth through seventeenth components are contained in the tuple that is nested at the third level, and are represented by the <ph id="ph1">`Rest.Rest.Item1`</ph> though <ph id="ph2">`Rest.Rest.Item3`</ph> properties.</source>
          <target state="translated">I componenti diciassettesimo quindicesimo e sono contenuti nella tupla annidata al terzo livello e sono rappresentati di <ph id="ph1">`Rest.Rest.Item1`</ph> se <ph id="ph2">`Rest.Rest.Item3`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">Le tuple sono comunemente utilizzate in quattro modi diversi:</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To represent a single set of data.</source>
          <target state="translated">Per rappresentare un singolo set di dati.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">Ad esempio, una tupla può rappresentare un record di database e i componenti possono rappresentare i singoli campi del record.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">Per fornire facile accesso e la manipolazione di un set di dati.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">Per restituire più valori da un metodo senza l'utilizzo di <ph id="ph1">`out`</ph> parametri (c#) o <ph id="ph2">`ByRef`</ph> parametri (in Visual Basic).</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">Ad esempio, l'esempio precedente restituisce le statistiche calcolate, insieme al nome di città, in un <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">Per passare più valori a un metodo tramite un singolo parametro.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">Ad esempio, il <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> dispone di un singolo parametro che consente di fornire un valore al metodo eseguito dal thread all'avvio.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`8">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">Se si fornisce un <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> dell'oggetto come argomento del metodo, è possibile fornire la routine di avvio del thread con sette elementi di dati.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">Valore del primo componente della tupla.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">Valore del secondo componente della tupla.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">Valore del terzo componente della tupla.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">Valore del quarto componente della tupla.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">Valore del quinto componente della tupla.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">Valore del sesto componente della tupla.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">Valore del settimo componente della tupla.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Any generic <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> object that contains the values of the tuple's remaining components.</source>
          <target state="translated">Qualsiasi oggetto <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> generico contenente i valori dei componenti restanti della tupla.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>You can also use the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple (octuple) object without having to explicitly specify the types of its components.</source>
          <target state="translated">È inoltre possibile utilizzare il metodo statico <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metodo per creare un'istanza di un oggetto tupla con 8 elementi (ottupla) senza dover specificare in modo esplicito i tipi dei relativi componenti.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method to instantiate an 8-tuple object that contains prime numbers that are less than 20.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metodo un'istanza dell'oggetto tupla con 8 elementi che contiene i numeri primi che sono minori di 20.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">Ciò equivale alla chiamata seguente al <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> costruttore della classe.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>However, the static <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> method cannot be used to create a tuple object with more than eight components.</source>
          <target state="translated">Tuttavia, il metodo statico <ph id="ph1">&lt;xref:System.Tuple.Create%2A?displayProperty=nameWithType&gt;</ph> metodo non può essere utilizzato per creare un oggetto tupla con più di otto componenti.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>When using the <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> constructor to create an n-tuple with eight or more components, you use the <ph id="ph2">`rest`</ph> parameter to create a nested n-tuple that has from one to seven components.</source>
          <target state="translated">Quando si utilizza il <ph id="ph1">&lt;xref:System.Tuple%608.%23ctor%2A&gt;</ph> costruttore per creare una tupla con n elementi con otto o più componenti, utilizzare il <ph id="ph2">`rest`</ph> parametro per creare una nidificata tupla con n elementi con da uno a sette componenti.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>By using successive levels of nesting, you can create an n-tuple that has a virtually unlimited number of components.</source>
          <target state="translated">Utilizzando i livelli successivi di annidamento, è possibile creare una tupla con n elementi con un numero virtualmente illimitato dei componenti.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>For example, to create a 25-tuple, you instantiate a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object with three levels of nesting, as follows:</source>
          <target state="translated">Ad esempio, per creare una tupla di 25, creare un <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto con tre livelli di nidificazione, come indicato di seguito:</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the first through seventh components.</source>
          <target state="translated">Più esterna <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto contiene il primo al settimo componente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Its <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object at the first level of nesting.</source>
          <target state="translated">Il relativo <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà fornisce l'accesso a un <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> oggetto al primo livello di annidamento.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The outermost nested <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object contains the eighth through fourteenth components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting.</source>
          <target state="translated">Annidato più esterno <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto contiene tra componenti quattordicesimo, l'ottavo e il relativo <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà fornisce l'accesso a un <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> oggetto al secondo livello di annidamento.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object at the second level of nesting contains the fifteenth through twenty-first  components, and its <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property provides access to an <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> object at the third level of nesting.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto al secondo livello di annidamento contiene quindicesimo attraverso i componenti a ventuno e il relativo <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà fornisce l'accesso a un <ph id="ph3">&lt;xref:System.Tuple%604&gt;</ph> oggetto nel terzo livello di annidamento.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The innermost tuple is a <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> object that contains the twenty-second through twenty-fifth components.</source>
          <target state="translated">La tupla più interna è un <ph id="ph1">&lt;xref:System.Tuple%604&gt;</ph> oggetto che contiene i componenti di venti quinto ventiduesimo tramiti.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, for each census from 1860 to 2000.</source>
          <target state="translated">L'esempio seguente crea una tupla di 17 che contiene i dati della popolazione per la città di Detroit, Michigan, per ogni censimento dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The first component of the tuple is the city name.</source>
          <target state="translated">Il primo componente della tupla è il nome della città.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The second component is the start date of the series of data, and the third component is the population at the start date.</source>
          <target state="translated">Il secondo componente è la data di inizio delle serie di dati e il terzo componente è la popolazione alla data di inizio.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>Each subsequent component provides the population at decade intervals.</source>
          <target state="translated">Ogni componente successivo fornisce il popolamento a intervalli di dieci anni.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source>The example uses two layers of nesting to create the 17-tuple: It defines a 7-tuple whose third through seventh components contain population data for 1860 through 1900, a nested 7-tuple that contains population data for 1910 through 1970, and an inner nested 3-tuple that contains population data for 1980 through 2000.</source>
          <target state="translated">L'esempio usa due livelli di annidamento per creare la tupla di 17: definisce una tupla con 7 il cui terze al settimo componente contengono dati di popolamento per 1860 tramite 1900 nidificata 7-tupla che contiene i dati della popolazione per 1910 tramite 1970, e un inner annidati tupla con 3 elementi che contiene i dati della popolazione per 1980 fino a 2000.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
          <source><ph id="ph1">&lt;paramref name="rest" /&gt;</ph> is not a generic <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> object.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;paramref name="rest" /&gt;</ph> non è un oggetto <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> generico.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Oggetto da confrontare con questa istanza.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">Restituisce un valore che indica se l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente è uguale a un oggetto specificato.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance if it meets all the following conditions:</source>
          <target state="translated">Il <ph id="ph1">`obj`</ph> parametro è considerato uguale all'istanza corrente se soddisfa tutte le condizioni seguenti:</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object.</source>
          <target state="translated">Si tratta di un <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It has the same total number of components that are of the same types as the current instance.</source>
          <target state="translated">Ha lo stesso numero totale di componenti che sono dello stesso tipo dell'istanza corrente.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Its components (including its nested components) are equal to those of the current instance.</source>
          <target state="translated">I componenti, compresi i relativi componenti annidati, sono uguali a quelli dell'istanza corrente.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>Equality is determined by the default equality comparer for each component.</source>
          <target state="translated">L'uguaglianza è determinata dall'operatore di uguaglianza predefinito per ogni componente.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>The following example defines five <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contain prime numbers.</source>
          <target state="translated">L'esempio seguente definisce cinque <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetti che contengono numeri primi.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>It then compares the first object with each of the remaining objects.</source>
          <target state="translated">Confronta quindi il primo oggetto con tutti gli oggetti rimanenti.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.Equals(System.Object)">
          <source>As the output shows, only the first and the last <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects are equal, because they have an identical number of components with identical values.</source>
          <target state="translated">Come illustrato nell'output, solo il primo e ultimo <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetti sono uguali, perché hanno lo stesso numero di componenti con valori identici.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Calcola il codice hash per l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Codice hash di un intero con segno a 32 bit.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Ottiene il valore del primo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's first component.</source>
          <target state="translated">Valore del primo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il primo elemento della matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The first component of the 17-tuple is the city name.</source>
          <target state="translated">Il primo componente della tupla-17 è il nome della città.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> property to display the city name in the table header before displaying the population data.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> proprietà per visualizzare il nome della città nell'intestazione della tabella prima di visualizzare i dati della popolazione.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Ottiene il valore del secondo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's second component.</source>
          <target state="translated">Valore del secondo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e il recupero del secondo elemento della matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The second component of the 17-tuple is the first year of the data series.</source>
          <target state="translated">Il secondo componente della tupla-17 è il primo anno della serie di dati.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item2">
          <source>The example assigns the value of the <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> property to a variable, and then uses that variable to represent the year whose data is displayed.</source>
          <target state="translated">Nell'esempio viene assegnato il valore di <ph id="ph1">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> proprietà a una variabile e quindi usare tale variabile per rappresentare l'anno i cui dati vengono visualizzati.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Ottiene il valore del terzo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's third component.</source>
          <target state="translated">Valore del terzo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il terzo elemento della matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The third component of the 17-tuple is the population in 1860.</source>
          <target state="translated">Il terzo componente della tupla 17-rappresenta la popolazione nel 1860.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item3">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1860 and 1870.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph> proprietà per visualizzare il valore della popolazione e calcolare il tasso di variazione della popolazione tra 1860 e 1870 annuale.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Ottiene il valore del quarto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fourth component.</source>
          <target state="translated">Valore del quarto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il quarto elemento della matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The fourth component of the 17-tuple is the population in 1870.</source>
          <target state="translated">Il quarto componente della tupla 17-rappresenta la popolazione nel 1870.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item4">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1870 and 1880.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph> proprietà per visualizzare il valore della popolazione e calcolare il tasso di variazione della popolazione tra 1870 e 1880 annuale.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Ottiene il valore del quinto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's fifth component.</source>
          <target state="translated">Valore del quinto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il quinto elemento dalla matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The fifth component of the 17-tuple is the population in 1880.</source>
          <target state="translated">Il quinto componente della tupla 17-rappresenta la popolazione nel 1880.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item5">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1880 and 1890.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph> proprietà per visualizzare il valore della popolazione e calcolare il tasso di variazione della popolazione tra 1880 e 1890 annuale.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Ottiene il valore del sesto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's sixth component.</source>
          <target state="translated">Valore del sesto componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il sesto elemento della matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The sixth component of the 17-tuple is the population in 1890.</source>
          <target state="translated">Il sesto componente della tupla 17-rappresenta la popolazione nel 1890.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item6">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1890 and 1900.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph> proprietà per visualizzare il valore della popolazione e per calcolare il tasso di variazione della popolazione tra 1900 e il 1890 annuale.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Ottiene il valore del settimo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's seventh component.</source>
          <target state="translated">Valore del settimo componente dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">È possibile determinare in modo dinamico il tipo di <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> componente in uno dei due modi:</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property.</source>
          <target state="translated">Chiamando il <ph id="ph1">`GetType`</ph> il valore restituito dal metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Recuperando il <ph id="ph1">&lt;xref:System.Type&gt;</ph> oggetto che rappresenta il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto e recuperando il settimo elemento dalla matrice restituita dal relativo <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Il settimo componente della tupla 17-rappresenta la popolazione nel 1900.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Item7">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> property to display the population value and to calculate the annual rate of population change between 1900 and 1910.</source>
          <target state="translated">Nell'esempio viene utilizzata la <ph id="ph1">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> proprietà per visualizzare il valore della popolazione e calcolare il tasso di variazione della popolazione tra 1900 e 1910 annuale.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.Rest">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Ottiene i componenti restanti dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object's remaining components.</source>
          <target state="translated">Valore dei componenti restanti dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property returns a nested <ph id="ph2">`Tuple`</ph> object that allows access to the eighth though <bpt id="p1">*</bpt>n<ept id="p1">*</ept>th components of the tuple.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà restituisce un nidificate <ph id="ph2">`Tuple`</ph> oggetto che consente l'accesso all'ottavo tuttavia <bpt id="p1">*</bpt>n<ept id="p1">*</ept>componente della tupla.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>Depending on the total number of components in the tuple, the values of the eighth through fourteenth components can be retrieved from the nested <ph id="ph1">`Tuple`</ph> object's <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> through <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">A seconda del numero totale dei componenti nella tupla, i valori dell'ottavo oggetto attraverso il quattordicesimo componenti possono essere recuperati da nidificata <ph id="ph1">`Tuple`</ph> dell'oggetto <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> tramite <ph id="ph3">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can then use the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of a nested <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the <ph id="ph3">`Tuple`</ph> object at the next level of nesting.</source>
          <target state="translated">È quindi possibile utilizzare il <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà di un tipo annidato <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> oggetto per recuperare il <ph id="ph3">`Tuple`</ph> oggetto al successivo livello di annidamento.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>You can dynamically determine the number of components in a nested <ph id="ph1">`Tuple`</ph> object that is returned by the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property by extracting the digit from its type name.</source>
          <target state="translated">È possibile determinare in modo dinamico il numero di componenti annidati <ph id="ph1">`Tuple`</ph> oggetto restituito dal <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà estraendo la cifra dal nome del tipo.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example provides an illustration.</source>
          <target state="translated">Nell'esempio seguente viene illustrato questo concetto.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The following example creates a 17-tuple object that contains population data for the city of Detroit, Michigan, from 1860 to 2000.</source>
          <target state="translated">Nell'esempio seguente crea un oggetto di 17 tupla che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 2000.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The seventh component of the 17-tuple is the population in 1900.</source>
          <target state="translated">Il settimo componente della tupla 17-rappresenta la popolazione nel 1900.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.Rest">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property to retrieve the values of the eighth through fourteenth components, and it uses the <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> property of the nested <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> object to retrieve the values of the remaining components.</source>
          <target state="translated">Nell'esempio viene utilizzato il <ph id="ph1">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà per recuperare i valori dell'ottavo tramite componenti quattordicesimo e utilizza il <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> proprietà nidificata <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> oggetto per recuperare i valori dei componenti rimanenti.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Oggetto da confrontare con l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">Oggetto che fornisce regole personalizzate per il confronto.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Confronta l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente con un oggetto specificato mediante un operatore di confronto specificato e restituisce un Integer che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato all'interno dell'ordinamento.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Intero con segno che indica la posizione relativa di questa istanza e di <ph id="ph1">&lt;paramref name="other" /&gt;</ph> nell'ordinamento, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valore</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrizione</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Numero intero negativo</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Questa istanza precede <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Questa istanza si trova nella stessa posizione di <ph id="ph3">&lt;paramref name="other" /&gt;</ph> nell'ordinamento.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Intero positivo</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> L'istanza segue <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">Il membro è un'implementazione esplicita dell'interfaccia.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">Può essere utilizzato solo quando si esegue il cast dell'istanza <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> a un'interfaccia <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Questo metodo consente di definire i confronti personalizzati di <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">Ad esempio, è possibile utilizzare questo metodo per ordine <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> oggetti in base al valore di un componente specifico.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">Anche se questo metodo può essere chiamato direttamente, viene chiamato più di frequente quando si ordinano raccolta metodi che includono <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parametri per ordinare i membri di una raccolta.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">Ad esempio, viene chiamato <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> (metodo) e <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> metodo di un <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> oggetto che viene creata un'istanza utilizzando il <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> costruttore.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> metodo è destinato all'utilizzo nelle operazioni di ordinamento.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">E non deve essere utilizzato quando lo scopo principale di un confronto per determinare se due oggetti sono uguali.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">Per determinare se due oggetti sono uguali, chiamare il <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that contains population data for four U.S. cities from 1940 to 2000.</source>
          <target state="translated">Nell'esempio seguente viene creata una matrice di oggetti <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> contenente i dati della popolazione di quattro città degli Stati Uniti dal 1940 al 2000.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The octuple's first component is the city name.</source>
          <target state="translated">Primo componente dell'ottupla è il nome della città.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining six components represent the population at 10-year intervals from 1940 to 2000.</source>
          <target state="translated">I sei componenti rimanenti rappresentano la popolazione a intervalli di 10 anni da 1940 a 2000.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of octuples to be sorted by any one of its components.</source>
          <target state="translated">Il <ph id="ph1">`PopulationComparer`</ph> classe fornisce un <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementazione che consente la matrice di ottuple in base a uno qualsiasi dei relativi componenti.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">Vengono forniti due valori per il <ph id="ph1">`PopulationComparer`</ph> nel relativo costruttore di classe: la posizione del componente che definisce l'ordinamento, e un <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valore che indica se gli oggetti tupla devono essere ordinati in ordine crescente o decrescente.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1950) and displays them, and then sorts them by the eighth component (the population in 2000) and displays them.</source>
          <target state="translated">Nell'esempio viene quindi Visualizza gli elementi nella matrice in ordine casuale, li ordina in base al terzo componente (la popolazione nel 1950), verranno visualizzati e quindi li ordina in base all'ottavo componente (la popolazione nel 2000) e li visualizza.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> non è un oggetto <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Oggetto da confrontare con questa istanza.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">Oggetto che definisce il metodo da usare per valutare se i due oggetti sono uguali.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">Restituisce un valore che indica se l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente è uguale a un oggetto specificato in base a un metodo di confronto specificato.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'istanza corrente è uguale all'oggetto specificato; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Questo membro è un’implementazione esplicita di un membro di interfaccia.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Può essere utilizzato solo quando si esegue il cast dell'istanza <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> a un'interfaccia <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if <ph id="ph2">`other`</ph> is not <ph id="ph3">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> object that has the same total number of components (including those in nested <ph id="ph5">`Tuple`</ph> objects) of the same types as the current instance.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementazione viene chiamata solo se <ph id="ph2">`other`</ph> non <ph id="ph3">`null`</ph>, e se può essere correttamente il cast (in c#) o convertire (in Visual Basic) per un <ph id="ph4">&lt;xref:System.Tuple%608&gt;</ph> oggetto con lo stesso numero totale di componenti (comprese quelle nell'annidato <ph id="ph5">`Tuple`</ph> oggetti) dello stesso tipo dell'istanza corrente.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> passa primo metodo di <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph> valori del <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> oggetti da confrontare con il <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementazione.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> objects.</source>
          <target state="translated">Se questo metodo restituisce <ph id="ph1">`true`</ph>, il metodo viene chiamato nuovamente e passato il <ph id="ph2">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph> i valori dei due <ph id="ph3">&lt;xref:System.Tuple%608&gt;</ph> oggetti.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of values, or the two <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">Il processo continua fino a quando la chiamata al metodo restituisce <ph id="ph1">`false`</ph> quando viene confrontata una particolare coppia di valori o i due <ph id="ph2">&lt;xref:System.Tuple%608.Rest%2A&gt;</ph> i valori vengono passati al metodo.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Oggetto il cui metodo <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> calcola il codice hash dell'oggetto <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">Calcola il codice hash per l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente tramite un metodo di calcolo specificato.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">Codice hash di un intero con segno a 32 bit.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Questo membro è un’implementazione esplicita di un membro di interfaccia.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">Può essere utilizzato solo quando si esegue il cast dell'istanza <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> a un'interfaccia <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The method simply wraps a call to the <ph id="ph1">`comparer`</ph> object's <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Il metodo esegue semplicemente il wrapping di una chiamata al <ph id="ph1">`comparer`</ph> dell'oggetto <ph id="ph2">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementazione.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">L'algoritmo utilizzato per calcolare il codice hash deve restituire lo stesso codice hash per due <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> gli oggetti che sono considerati uguali.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">Oggetto da confrontare con l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">Confronta l'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> corrente con un oggetto specificato e restituisce un intero che indica se l'oggetto corrente precede, segue o si trova nella stessa posizione dell'oggetto specificato nell'ordinamento.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">Intero con segno che indica la posizione relativa di questa istanza e di <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> nell'ordinamento, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Valore</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Descrizione</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Numero intero negativo</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Questa istanza precede <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Questa istanza si trova nella stessa posizione di <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> nell'ordinamento.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Intero positivo</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> L'istanza segue <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Questo membro è un’implementazione esplicita di un membro di interfaccia.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">Può essere utilizzato solo quando si esegue il cast dell'istanza <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> a un'interfaccia <ph id="ph2">&lt;xref:System.IComparable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> class.</source>
          <target state="translated">Questo metodo fornisce il <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementazione per il <ph id="ph2">&lt;xref:System.Tuple%608&gt;</ph> classe.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">Anche se il metodo può essere chiamato direttamente, viene chiamato più di frequente dagli overload predefiniti di ordinamento alla raccolta di metodi, ad esempio <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> e <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, per ordinare i membri di una raccolta.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%2A&gt;</ph> metodo è destinato all'utilizzo nelle operazioni di ordinamento.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">E non deve essere utilizzato quando lo scopo principale di un confronto per determinare se due oggetti sono uguali.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Per determinare se due oggetti sono uguali, chiamare il <ph id="ph1">&lt;xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">Il seguente metodo utilizza l'operatore di confronto predefinito dell'oggetto per confrontare ogni componente.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of octuples whose components are integers that contain a range of prime numbers.</source>
          <target state="translated">L'esempio seguente crea una matrice di ottuple i cui componenti sono numeri interi che contengono un intervallo di numeri primi.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the elements of the array in unsorted order, sorts the array, and then displays the array in sorted order.</source>
          <target state="translated">L'esempio visualizza gli elementi della matrice in ordine casuale, Ordina la matrice e quindi Visualizza la matrice in base all'ordinamento.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, or the tuple's first component.</source>
          <target state="translated">L'output mostra che la matrice è ordinata dal <ph id="ph1">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, o primo componente della tupla.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">Si noti che nell'esempio viene chiamato direttamente il <ph id="ph1">&lt;xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">Questo metodo viene chiamato in modo implicito dal <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> metodo per ogni elemento nella matrice.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> non è un oggetto <ph id="ph2">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Indice dell'elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 for <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> to one less than the number of elements in the <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> può variare da 0 per <ph id="ph1">&lt;see langword="Item1" /&gt;</ph> al numero di elementi in <ph id="ph2">&lt;see langword="Tuple" /&gt;</ph> meno uno.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">Ottiene il valore dell'elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> specificato.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">Valore dell'elemento <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> nella posizione specificata.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> proprietà è un'implementazione esplicita dell'interfaccia.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Per chiamarlo, è necessario eseguire il cast o convertire il <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> l'oggetto in un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> oggetto di interfaccia.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è minore di 0.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> è maggiore o uguale a <ph id="ph2">&lt;see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Ottiene il numero di elementi in <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">Numero di elementi in <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> proprietà è un'implementazione esplicita dell'interfaccia.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> type to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">Per chiamarlo, è necessario eseguire il cast o convertire il <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> tipo un <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> oggetto di interfaccia.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> instance.</source>
          <target state="translated">Restituisce una stringa che rappresenta il valore di questa istanza di <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Tuple`8.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph> object.</source>
          <target state="translated">Rappresentazione di stringa dell'oggetto <ph id="ph1">&lt;see cref="T:System.Tuple`8" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt>Item8<ept id="p5">*</ept>…), where <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, and <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> properties.</source>
          <target state="translated">La stringa restituita da questo metodo assume il formato (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>, <bpt id="p5">*</bpt> Item8<ept id="p5">*</ept>...), dove <bpt id="p6">*</bpt>Item1<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item2<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item3<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item4<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item5<ept id="p10">*</ept>, <bpt id="p11">*</bpt>Item6<ept id="p11">*</ept>, e <bpt id="p12">*</bpt>Item7<ept id="p12">*</ept> rappresentano i valori del <ph id="ph2">&lt;xref:System.Tuple%608.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%608.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%608.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%608.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%608.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%608.Item6%2A&gt;</ph>, e <ph id="ph8">&lt;xref:System.Tuple%608.Item7%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> represents the value of the <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> object's <ph id="ph2">`Next.Item1`</ph> property.</source>
          <target state="translated"><bpt id="p1">*</bpt>Item8<ept id="p1">*</ept> rappresenta il valore di <ph id="ph1">&lt;xref:System.Tuple%608&gt;</ph> dell'oggetto <ph id="ph2">`Next.Item1`</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The value of any additional nested components follow <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</source>
          <target state="translated">Il valore di tutti i componenti annidati aggiuntivi seguire <bpt id="p1">*</bpt>Item8<ept id="p1">*</ept>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se si verifica uno dei valori di proprietà <ph id="ph1">`null`</ph>, essa viene rappresentata come <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>The following example creates a 17-tuple that contains population data for the city of Detroit, Michigan, from 1860 to 1900.</source>
          <target state="translated">L'esempio seguente crea una tupla di 17 che contiene i dati della popolazione per la città di Detroit, Michigan, dal 1860 al 1900.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`8.ToString">
          <source>It then uses the <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> method to display the tuple's data.</source>
          <target state="translated">Viene quindi utilizzato il <ph id="ph1">&lt;xref:System.Tuple%608.ToString%2A&gt;</ph> metodo per visualizzare i dati della tupla.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>