<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef809a2ab35e0e8acf32b0fecae027f229d4fcc0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39766109" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce un enumeratore per gli elementi di un <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

Il codice c# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) del linguaggio c# e [For Each... Avanti](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) costrutto in Visual Basic nasconde la complessità degli enumeratori. Anziché modificare direttamente l'enumeratore, usando `foreach` o `For Each...Next` è consigliato. 

Inizialmente, l'enumeratore è posizionato prima del primo elemento nel <xref:System.Span%601>. In questa posizione, la proprietà <xref:System.Span%601.Enumerator.Current> è indefinita. È necessario chiamare <xref:System.Span%601.Enumerator.MoveNext%2A> per passare l'enumeratore al primo elemento di <xref:System.Span%601> prima di leggere il valore di <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> Restituisce lo stesso valore fino a <xref:System.Span%601.Enumerator.MoveNext%2A> viene chiamato. <xref:System.Span%601.Enumerator.MoveNext%2A> imposta <xref:System.Span%601.Enumerator.Current> all'elemento successivo nel <xref:System.Span%601>.

Se <xref:System.Span%601.Enumerator.MoveNext%2A> raggiunge la fine del <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> restituisce `false`. Quando l'enumeratore si trova in questo stato, le chiamate successive a <xref:System.Span%601.Enumerator.MoveNext%2A> inoltre restituire `false` e <xref:System.Span%601.Enumerator.Current> è definito. Non è possibile impostare <xref:System.Span%601.Enumerator.Current> sul primo elemento nel <xref:System.Span%601> ovvero anche in questo caso, è necessario creare una nuova istanza di enumeratore. 

L'enumeratore non ha accesso esclusivo al <xref:System.Span%601>. Inoltre, i dati sottostanti in cui si basa l'intervallo anche modificabili. Di conseguenza, l'enumerazione di un intervallo di per sé non è una procedura thread-safe. Per garantire la sicurezza dei thread durante l'enumerazione, è necessario implementare la propria sincronizzazione. Ad esempio, il codice seguente è una race condition. Quindi non verifica che l'intervallo verrà enumerata prima la `ClearContents` esecuzione del metodo. Di conseguenza, la matrice sottostante viene cancellata durante l'enumerazione dell'intervallo:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Se si sincronizza l'accesso alla matrice prima dell'intervallo, come la versione aggiornata di enumerazione di `EnumerateSpan` metodo svolge nell'esempio seguente, il `ClearContents` metodo non modifica dati span sottostanti durante l'enumerazione. Si noti che l'esempio consente di bloccare la matrice sottostante su cui si basa l'intervallo.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

A differenza di altre strutture di enumeratore in .NET i <xref:System.Span%601.Enumerator>:

- Non implementa il <xref:System.Collections.IEnumerator> o <xref:System.Collections.Generic.IEnumerator%601> interfaccia. Infatti <xref:System.Span%601.Enumerator> è un [struct ref](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Non include un `Reset` metodo, che è possibile impostare l'enumeratore sulla propria posizione iniziale prima del primo elemento nell'intervallo. (Il <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> metodo deve essere implementato come parte dell'interfaccia, ma la maggior parte degli implementatori generano un'eccezione o non forniscono alcuna implementazione.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Restituisce un riferimento all'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
        <value>Elemento dell'insieme <see cref="T:System.Span`1" /> in corrispondenza della posizione corrente dell'enumeratore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` non è definito in una delle condizioni seguenti: 

- Immediatamente dopo la creazione dell'enumeratore, l'enumeratore è posizionato prima del primo elemento nell'intervallo. <xref:System.Span%601.Enumerator.MoveNext%2A> deve essere chiamato per passare l'enumeratore al primo elemento dell'intervallo prima di leggere il valore di `Current`.

- L'ultima chiamata a <xref:System.Span%601.Enumerator.MoveNext%2A> restituiti `false`, che indica la fine dell'intervallo. 

`Current` Restituisce lo stesso valore fino a <xref:System.Span%601.Enumerator.MoveNext%2A> viene chiamato. <xref:System.Span%601.Enumerator.MoveNext%2A> imposta `Current` all'elemento successivo nell'intervallo. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sposta l'enumeratore all'elemento successivo dell'oggetto <see cref="System.Span`1" />.</summary>
        <returns>`true` se l'enumeratore è stato spostato correttamente all'elemento successivo; `false` se è stata superata la fine dell'intervallo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Dopo aver creato, un enumeratore è posizionato prima del primo elemento nell'intervallo e la prima chiamata a `MoveNext` Sposta l'enumeratore al primo elemento nell'intervallo. 

Se `MoveNext` raggiunge la fine dell'intervallo `MoveNext` restituisce `false`. Quando l'enumeratore si trova in questo stato, le chiamate successive a `MoveNext` restituire anche `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>