<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cd9d4c900e7e20f02b9005d05b82e9bcd83c9257" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37732856" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents an instant in time, typically expressed as a date and time of day.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Collegamenti rapidi al codice di esempio

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

Questo articolo include diversi esempi che usano il `DateTime` tipo:

**Esempi di inizializzazione**      
 [Richiamare un costruttore](#initialization-01)     
 [Richiamare il costruttore predefinito implicito](#initialization-02)     
 [Assegnazione dal valore restituito](#initialization-03)     
 [Analisi di una stringa che rappresenta una data e ora](#initialization-04)     
 [Sintassi di Visual Basic per inizializzare una data e ora](#initialization-05)     

**Formattazione `DateTime` oggetti come stringhe**  
 [Usare il formato di ora predefinito Data](#formatting-01)     
 [Formattare una data e ora usando impostazioni cultura](#formatting-02)     
 [Formattare una data ora usando una stringa di formato standard o personalizzato](#formatting-03)     
 [Specificare sia una stringa di formato e impostazioni cultura specifiche](#formatting-04)     
 [Formattare una data ora usando lo standard ISO 8601 per i servizi web](#formatting-05)     

**Analisi di stringhe come `DateTime` oggetti**  
 [Uso `Parse` o `TryParse` per convertire una stringa in una data e ora](#parsing-01)     
 [Uso `ParseExact` o `TryParseExact` per convertire una stringa in un formato noto](#parsing-02)     
 [Convertire la rappresentazione di stringa ISO 8601 una data e ora](#parsing-03)     

**`DateTime` risoluzione**  
 [Esplorare la risoluzione dei valori di data e ora](#resolution-01)     
 [Confronto di uguaglianza all'interno di una certa tolleranza](#comparison-01)     

**Impostazioni cultura e calendari**  
 [Visualizzare i valori di data e ora usando i calendari specifici delle impostazioni cultura](#calendars-01)     
 [Analizzare le stringhe in base al calendario specifico delle impostazioni cultura](#calendars-02)     
 [Inizializzare una data e ora da calendario di una specifica impostazione cultura](#calendars-03)     
 [Accesso alle proprietà di data e ora al calendario di una specifica impostazione cultura](#calendars-04)     
 [Recuperare la settimana dell'anno utilizzando le impostazioni cultura specifiche calendari](#calendars-05)     

**Persistenza**  
 [Rendere persistenti i valori di data e ora come stringhe nel fuso orario locale](#persistence-01)     
 [Rendere persistenti i valori di data e ora come stringhe in delle impostazioni cultura invariante formato ora](#persistence-02)     
 [Rendere persistenti i valori di data e ora come numeri interi](#persistence-03)     
 [Salvare in modo permanente date e ora i valori usando il `XmlSerializer`](#persistence-04)     
 [Salvare in modo permanente date e ora i valori usando il `BinaryFormatter`](#persistence-05)     
 [Rendere persistenti i valori di data e ora con fuso orario data](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Collegamenti rapidi agli argomenti di osservazioni.

Questa sezione contiene argomenti per molti utilizzi comuni del `DateTime` struct:
  
 [Inizializzazione di un `DateTime` oggetto](#initializing-a-datetime-object)   
 [I valori DateTime e le relative rappresentazioni di stringa](#datetime-values-and-their-string-representations)   
 [Analisi dei valori di data/ora da stringhe](#parsing-datetime-values-from-strings)   
 [Valori DateTime](#datetime-values)   
 [Operazioni di data/ora](#datetime-operations)   
 [Data/ora risoluzione](#datetime-resolution)   
 [Calendari e i valori DateTime](#datetime-values-and-calendars)   
 [Rendere persistenti i valori DateTime](#persisting-datetime-values)   
 [Visual Studio di data/ora. TimeSpan](#datetime-vs-timespan)   
 [Confronto di uguaglianza compresa nella tolleranza](#comparing-for-equality-within-tolerance) [considerazioni sull'interoperabilità COM](#com-interop-considerations)  
   
Il <xref:System.DateTime> tipo valore rappresenta le date e ore con valori compresi tra 00:00:00 (mezzanotte), il 1 ° gennaio 0001 cristiana (DC Era) attraverso 11: alle 23.59.59, 31 dicembre 9999 D.C. (C.E.) nel calendario gregoriano.  
  
I valori di ora sono misurati in unità di 100 nanosecondi denominate segni di graduazione. Una determinata data è il numero di tick trascorsi dalla mezzanotte 12:00 del 1 ° gennaio 0001 D.C. (C.E.) nel <xref:System.Globalization.GregorianCalendar> calendario. Il numero esclude i segni di graduazione che verrebbero aggiunti per i secondi intercalari. Ad esempio, un valore di tick di 31241376000000000L rappresenta la data Friday, gennaio 01, 0100 mezzanotte 12:00:00. Oggetto <xref:System.DateTime> valore è espresso sempre nel contesto di un'esplicita o calendario predefinito.  
  
> [!NOTE]
>  Se si lavora con un valore di tick che si desidera convertire in altro intervallo di tempo, ad esempio minuti o secondi, è consigliabile usare la <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, o <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> costante per eseguire la conversione. Ad esempio, per aggiungere il numero di secondi rappresentato da un numero specificato di segni di graduazione per le <xref:System.DateTime.Second%2A> componente di un <xref:System.DateTime> valore, è possibile usare l'espressione `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

È possibile visualizzare l'origine per l'intero set di esempi in questo articolo in uno [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oppure [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) dal repository docs su GitHub.

> [!NOTE]
>  Un'alternativa per il <xref:System.DateTime> struttura per l'utilizzo di valori data e ora in particolare fuso orario è il <xref:System.DateTimeOffset> struttura. Il <xref:System.DateTimeOffset> struttura consente di archiviare le informazioni di data e ora in un privato <xref:System.DateTime> campo e il numero di minuti mediante il quale data e l'ora è diverso rispetto all'ora UTC in un privato <xref:System.Int16> campo. Questo rende possibile per un <xref:System.DateTimeOffset> valore in modo da riflettere il tempo in un determinato fuso orario, mentre un <xref:System.DateTime> valore in modo non ambiguo può riflettere solo ora UTC e del fuso orario locale. Per una discussione su quando usare le <xref:System.DateTime> struttura o il <xref:System.DateTimeOffset> struttura quando si lavora con valori di data e ora, vedere [scelta tra DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inizializzazione di un oggetto DateTime  

È possibile assegnare un valore iniziale a un nuovo `DateTime` valore in molti modi diversi:

- Chiamare un costruttore, uno in cui si specificano argomenti per i valori, oppure utilizzare il costruttore predefinito implicito.
- Assegnazione di un `DateTime` al valore restituito di una proprietà o metodo.
- L'analisi una `DateTime` valore dalla relativa rappresentazione di stringa.
- Usando le funzionalità di linguaggio specifico di Visual Basic per creare un'istanza di un `DateTime`. 

I frammenti di codice seguenti mostrano esempi di ogni:

#### <a name="invoke-constructors"></a>Richiamare i costruttori

Chiamare uno degli overload del <xref:System.DateTime> costruttore che specificano gli elementi del valore data e ora (ad esempio l'anno, mese e giorno o il numero di tick). Il codice seguente crea una data specifica usando il <xref:System.DateTime> costruttore specificando l'anno, mese, giorno, ora, minuto e secondo.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Si richiama il `DateTime` costruttore predefinito implicito della struttura quando si desidera che un `DateTime` inizializzata sul valore predefinito. (Per informazioni dettagliate sul costruttore predefinito implicito di un tipo valore, vedere [tipi di valore](~/docs/csharp/language-reference/keywords/value-types.md).) Alcuni compilatori supportano anche la dichiarazione di un <xref:System.DateTime> valore senza assegnarle un valore in modo esplicito. Creazione di un valore senza un'inizializzazione esplicita anche comporta il valore predefinito. Nell'esempio seguente viene illustrato il <xref:System.DateTime> costruttore predefinito implicito in c# e Visual Basic, nonché un <xref:System.DateTime> dichiarazione senza assegnazione in Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>Assegnazione di un valore calcolato

È possibile assegnare il <xref:System.DateTime> un valore di data e ora restituito dal metodo o proprietà dell'oggetto. L'esempio seguente assegna la data corrente e ora, la data corrente Coordinated Universal Time (UTC) e ora e la data corrente a tre nuove <xref:System.DateTime> variabili.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analisi di una stringa che rappresenta un valore DateTime

Il <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, e <xref:System.DateTime.TryParseExact%2A> tutti i metodi convertono una stringa in relativo equivalente valore data e ora. Gli esempi seguenti usano il <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> metodi per analizzare una stringa e convertirla in un <xref:System.DateTime> valore. Il secondo formato adotta un formato supportato dal [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard per una data e ora in formato stringa che rappresenta. Questa rappresentazione standard viene spesso utilizzata per trasferire le informazioni sulla data nei servizi web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Il <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> metodi indicano se una stringa è una rappresentazione valida di un <xref:System.DateTime> valore e, se si tratta, esegue la conversione.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintassi specifica del linguaggio per Visual Basic

Inizializza una nuova istruzione Visual Basic seguente <xref:System.DateTime> valore.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>I valori DateTime e le relative rappresentazioni di stringa  

Internamente, tutti <xref:System.DateTime> valori sono rappresentati come il numero di tick (il numero di intervalli di 100 nanosecondi) che sono trascorsi dalla mezzanotte 12:00:00, il 1 ° gennaio 0001. L'effettivo <xref:System.DateTime> valore è indipendente dalla modalità in cui tale valore viene visualizzato quando visualizzata. L'aspetto di un <xref:System.DateTime> valore è il risultato di un'operazione di formattazione che converte un valore alla relativa rappresentazione di stringa.  
  
L'aspetto dei valori di data e ora è dipendente da impostazioni cultura, gli standard internazionali, i requisiti dell'applicazione e preferenze personali. Il <xref:System.DateTime> struttura offre flessibilità nella formattazione di data e ora tramite gli overload del <xref:System.DateTime.ToString%2A>. Il valore predefinito <xref:System.DateTime.ToString?displayProperty=nameWithType> restituisce la rappresentazione di stringa di un valore di data e ora usando le impostazioni cultura correnti data breve e ora estesa. L'esempio seguente usa il valore predefinito <xref:System.DateTime.ToString?displayProperty=nameWithType> (metodo). Visualizza la data e ora usando il modello di data breve e ora estesa per le impostazioni cultura correnti. Le impostazioni cultura en-US sono la lingua corrente nel computer in cui è stato eseguito l'esempio.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Potrebbe essere necessario formattare le date nelle impostazioni cultura per supportare scenari di web in cui il server potrebbe essere in una lingua diversa dal client. Specificare la classe delle impostazioni cultura utilizzando il <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metodo per creare il modello di data breve e rappresentazione dell'ora estesa nelle impostazioni cultura. L'esempio seguente usa il <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metodo per visualizzare la data e ora usando il modello di data breve e ora estesa per le impostazioni cultura fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Altre applicazioni possono richiedere diverse rappresentazioni di stringa di una data. Il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> restituisce la rappresentazione di stringa definita da un identificatore di formato standard o personalizzata usando le convenzioni di formattazione delle impostazioni cultura correnti. L'esempio seguente usa il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo per visualizzare il modello di tempo per en-US e data completa delle impostazioni cultura, le impostazioni cultura correnti del computer in cui è stato eseguito l'esempio.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Infine, è possibile specificare le impostazioni cultura e il formato tramite il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> (metodo). L'esempio seguente usa il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo per visualizzare la data completa e il modello di tempo per le impostazioni cultura fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> overload può essere usato anche con una stringa di formato personalizzato per specificare altri formati. Nell'esempio seguente viene illustrato come formattare una stringa usando il [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato standard spesso usato per i servizi web. Il formato Iso 8601 non è una stringa di formato standard corrispondente.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Per altre informazioni sulla formattazione <xref:System.DateTime> valori, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Analisi dei valori di data/ora da stringhe

L'analisi converte la rappresentazione di stringa di data e ora per un <xref:System.DateTime> valore. In genere, le stringhe di data e ora presentano due diversi utilizzi nelle applicazioni:  
  
-   Data e ora accetta una varietà di forme e riflette le convenzioni delle impostazioni cultura correnti o impostazioni cultura specifiche. Ad esempio, un'applicazione consente a un utente con le impostazioni cultura corrente sono en-US di un valore di data di input come "12/15/2013" o "15 dicembre 2013". Consente a un utente il cui impostazioni cultura correnti sono en-gb per un valore di data di input come "15/12/2013" o "15 dicembre 2013".  
  
-   Data e ora è rappresentato in un formato predefinito. Ad esempio, un'applicazione serializza una data come "20130103" indipendentemente dalle impostazioni cultura in cui viene eseguita l'app. Un'applicazione richieda le date da dati di input in formato di data breve di cultura correnti.
  
Si utilizza il <xref:System.DateTime.Parse%2A> oppure <xref:System.DateTime.TryParse%2A> metodo per convertire una stringa da uno dei formati comuni di data e ora per impostazioni cultura per un <xref:System.DateTime> valore. L'esempio seguente illustra come usare <xref:System.DateTime.TryParse%2A> per convertire le stringhe di data in vari formati, impostazioni cultura specifiche per un <xref:System.DateTime> valore. Modifica le impostazioni cultura correnti inglese (Gran Bretagna) e chiama il <xref:System.DateTime.GetDateTimeFormats> metodo per generare una matrice di stringhe di data e ora. Passa quindi a ogni elemento nella matrice in cui il <xref:System.DateTime.TryParse%2A> (metodo). L'output dell'esempio mostra che il metodo di analisi è stata in grado di convertire correttamente ogni le impostazioni cultura specifiche stringhe data e ora.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Si utilizza il <xref:System.DateTime.ParseExact%2A> e <xref:System.DateTime.TryParseExact%2A> metodi per convertire una stringa che deve corrispondere a un determinato formato o formati, per un <xref:System.DateTime> valore. Specificare uno o più stringhe di formato data e ora come parametro al metodo di analisi. L'esempio seguente usa il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo per convertire le stringhe che devono essere in un formato "aaaammgg" o un formato "HHmmss" da <xref:System.DateTime> valori.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Uno degli usi comuni per <xref:System.DateTime.ParseExact%2A> consiste nel convertire una rappresentazione di stringa da un servizio web, in genere nel [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato standard. Il codice seguente mostra la stringa di formato corretto da usare:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Se non è possibile analizzare una stringa, il <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> metodi generano un'eccezione. Il <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> metodi restituiscono un <xref:System.Boolean> valore che indica se la conversione ha avuto esito positivo o negativo. È consigliabile usare la <xref:System.DateTime.TryParse%2A> o <xref:System.DateTime.TryParseExact%2A> metodi negli scenari in cui le prestazioni sono importanti. L'operazione di analisi per le stringhe di data e ora tende ad avere una frequenza di errori elevata e la gestione delle eccezioni è dispendiosa. Usare questi metodi se le stringhe immesse dagli utenti o provenienti da un'origine sconosciuta. 
  
Per altre informazioni sull'analisi dei valori di data e ora, vedere [l'analisi di stringhe di data e ora](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valori DateTime

Le descrizioni dei valori ora il <xref:System.DateTime> tipo sono spesso espressi usando lo standard Coordinated Universal Time (UTC). Ora UTC è il nome riconosciuto a livello internazionale per ora di Greenwich (GMT). Ora UTC è il tempo misurato a zero gradi di longitudine, il punto di origine di ora UTC. L'ora legale non è applicabile all'ora UTC.  
  
Ora locale è relativo a un determinato fuso orario. Un fuso orario è associato a una differenza di fuso orario. Una differenza di fuso orario è il dislocamento del fuso orario misurato in ore dal punto di origine di ora UTC. Inoltre, ora locale, facoltativamente, è influenzato dall'ora legale, che aggiunge o sottrae una regolazione dell'intervallo ora. Ora locale viene calcolato sommando la differenza di fuso orario UTC e la regolazione dell'ora legale se necessario. La differenza di fuso orario in corrispondenza del punto di origine di ora UTC è uguale a zero.  
  
Ora UTC è adatto per i calcoli, confronti e l'archiviazione di date e ora nei file. Ora locale è appropriato per la visualizzazione nelle interfacce utente delle applicazioni desktop. Applicazioni compatibili con fuso orario (ad esempio, molte applicazioni Web) è anche necessario lavorare con un numero di fusi orari diversi.  
  
Se il <xref:System.DateTime.Kind%2A> proprietà di un <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, non viene specificato se l'ora rappresentata è ora locale, ora UTC o un'ora in un fuso orario diverso.  

### <a name="datetime-resolution"></a>Data/ora risoluzione
  
> [!NOTE]
>  Come alternativa all'esecuzione di una data e ora operazioni aritmetica sul <xref:System.DateTime> i valori per misurare il tempo trascorso, è possibile usare il <xref:System.Diagnostics.Stopwatch> classe.  
  
Il <xref:System.DateTime.Ticks%2A> espressa dalla proprietà di valori di data e ora in unità di un decimilionesimo di secondo. Il <xref:System.DateTime.Millisecond%2A> proprietà restituisce i millesimi di secondo in un valore di data e ora. Tramite chiamate ripetute al <xref:System.DateTime.Now%2A?displayProperty=nameWithType> proprietà per misurare il tempo trascorso è dipendente dal clock di sistema. L'orologio di sistema nei sistemi Windows 7 e Windows 8 offre una risoluzione di circa 15 millisecondi. Questa risoluzione interessa gli intervalli di tempo piccole inferiore a 100 millisecondi. 
  
L'esempio seguente illustra la dipendenza della data corrente e i valori di tempo alla risoluzione del clock di sistema. Nell'esempio, un ciclo esterno viene ripetuto a 20 volte, e un ciclo interno che consente di ritardare il ciclo esterno. Se il valore del contatore del ciclo esterno è 10, una chiamata al <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metodo introduce un ritardo di cinque millisecondi. Nell'esempio seguente mostra il numero di millisecondi restituiti dai `DateTime.Now.Milliseconds` le modifiche alle proprietà solo dopo la chiamata a <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operazioni di data/ora  

Un calcolo eseguito utilizzando un <xref:System.DateTime> struttura, ad esempio <xref:System.DateTime.Add%2A> o <xref:System.DateTime.Subtract%2A>, non modifica il valore della struttura. Al contrario, restituisce un nuovo calcolo <xref:System.DateTime> struttura il cui valore è il risultato del calcolo.  
  
Operazioni di conversione tra fusi orari, ad esempio tra UTC e l'ora locale, o tra un fuso orario e un altro, considerare l'ora legale, ma non operazioni aritmetiche e di confronto.  
  
Il <xref:System.DateTime> struttura stessa offre un supporto limitato per la conversione da un fuso orario a un altro. È possibile usare la <xref:System.DateTime.ToLocalTime%2A> metodo per convertire l'ora UTC in ora locale o è possibile usare il <xref:System.DateTime.ToUniversalTime%2A> metodo per convertire l'ora locale in ora UTC. Tuttavia, è disponibile in un set completo di metodi di conversione di fuso orario di <xref:System.TimeZoneInfo> classe. All'ora in fusi orari diversi utilizzando questi metodi convertire l'ora in uno dei fusi orari del mondo.  
  
I calcoli e i confronti di <xref:System.DateTime> gli oggetti sono significativi solo se gli oggetti rappresentano i casi nello stesso fuso orario. È possibile usare una <xref:System.TimeZoneInfo> oggetto di rappresentare un <xref:System.DateTime> fuso orario del valore, anche se i due sono loosely coupled. Oggetto <xref:System.DateTime> oggetto non ha una proprietà che restituisce un oggetto che rappresenta la data e ora di fuso orario del valore. Il <xref:System.DateTime.Kind%2A> proprietà indica se un `DateTime` rappresenta l'ora UTC, ora locale, o non è specificato. In un'applicazione compatibile con fuso orario, è necessario basarsi su un meccanismo esterno per determinare il fuso orario in cui un <xref:System.DateTime> oggetto è stato creato. È possibile usare una struttura che esegue il wrapping di entrambe le <xref:System.DateTime> valore e il <xref:System.TimeZoneInfo> che rappresenta il <xref:System.DateTime> fuso orario del valore. Per informazioni dettagliate sull'utilizzo di UTC nei calcoli e i confronti con <xref:System.DateTime> valori, vedere [esecuzione di operazioni aritmetiche con date e ore](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Ogni <xref:System.DateTime> membro utilizzato in modo implicito il calendario gregoriano per eseguire l'operazione. Le eccezioni sono metodi che specificano in modo implicito un calendario. Sono inclusi i costruttori che specificano un calendario e i metodi con un parametro derivate da <xref:System.IFormatProvider>, ad esempio <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Le operazioni con i membri del <xref:System.DateTime> tipo prendono in considerazione i dettagli, ad esempio il numero di giorni al mese e gli anni bisestili.  

## <a name="datetime-values-and-calendars"></a>Calendari e i valori DateTime  

La libreria di classi .NET Framework include una serie di classi di calendario, ognuno dei quali sono derivate dal <xref:System.Globalization.Calendar> classe.  Ad esempio:  
  
-   Classe <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   Classe <xref:System.Globalization.EastAsianLunisolarCalendar>.  
-   Classe <xref:System.Globalization.GregorianCalendar>.  
-   Classe <xref:System.Globalization.HebrewCalendar>.  
-   Classe <xref:System.Globalization.HijriCalendar>.  
-   Classe <xref:System.Globalization.JapaneseCalendar>.  
-   Classe <xref:System.Globalization.JapaneseLunisolarCalendar>.  
-   Classe <xref:System.Globalization.JulianCalendar>.  
-   Classe <xref:System.Globalization.KoreanCalendar>.  
-   Classe <xref:System.Globalization.KoreanLunisolarCalendar>.  
-   Classe <xref:System.Globalization.PersianCalendar>.  
-   Classe <xref:System.Globalization.TaiwanCalendar>.  
-   Classe <xref:System.Globalization.TaiwanLunisolarCalendar>.  
-   Classe <xref:System.Globalization.ThaiBuddhistCalendar>.  
-   Classe <xref:System.Globalization.UmAlQuraCalendar>.  
  
Ognuna delle impostazioni cultura viene utilizzato un calendario predefinito definito dalla relativa proprietà di sola lettura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> proprietà. Ognuna delle impostazioni cultura può supportare uno o più calendari definiti dalla relativa proprietà di sola lettura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> proprietà. Il calendario attualmente usato da uno specifico <xref:System.Globalization.CultureInfo> oggetto viene definito dalle relative <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà. Deve essere uno dei calendari trovati nel <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matrice.  
  
Calendario corrente di un'impostazione cultura viene usato in tutte le operazioni di formattazione per le impostazioni cultura. Ad esempio, il calendario predefinito delle impostazioni cultura buddista Thai è il calendario buddista tailandese, in cui è rappresentato dal <xref:System.Globalization.ThaiBuddhistCalendar> classe.  Quando un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura buddista Thai viene utilizzato in una data e l'operazione di formattazione dell'ora, per impostazione predefinita viene utilizzato il calendario buddista Thai. Il calendario gregoriano viene utilizzato solo se le impostazioni cultura <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà viene modificata, come illustrato nell'esempio seguente:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendario corrente di un'impostazione cultura viene usato anche in tutte le operazioni di analisi per le impostazioni cultura, come illustrato nell'esempio seguente.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Crea un'istanza di un <xref:System.DateTime> valore tramite gli elementi di data e ora (numero dell'anno, mese e giorno) di un calendario specifico chiamando un [costruttore DateTime](xref:System.DateTime.%23ctor%2A) che include un `calendar` parametro e passandogli un <xref:System.Globalization.CultureInfo.Calendar%2A>oggetto che rappresenta il calendario. L'esempio seguente usa gli elementi di data e ora dal <xref:System.Globalization.ThaiBuddhistCalendar> calendario.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> i costruttori che non includono un `calendar` parametro presupporre che gli elementi di data e ora sono espressi come unità di misura del calendario gregoriano.  
  
Tutti gli altri <xref:System.DateTime> proprietà e metodi usano il calendario gregoriano. Ad esempio, il <xref:System.DateTime.Year%2A?displayProperty=nameWithType> proprietà restituisce l'anno del calendario gregoriano e il <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> metodo presuppone che il `year` parametro è un anno del calendario gregoriano.  Ciascuna <xref:System.DateTime> membro che utilizza il calendario gregoriano dispone di un membro corrispondente del <xref:System.Globalization.CultureInfo.Calendar%2A> classe che utilizza un calendario specifico. Ad esempio, il <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> metodo restituisce l'anno in un calendario specifico e il <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> metodo interpreta il `year` parametro come un numero di anno in un calendario specifico. Nell'esempio seguente usa sia la <xref:System.DateTime> e i membri corrispondenti del <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Il <xref:System.DateTime> struttura include un <xref:System.DateTime.DayOfWeek%2A> proprietà che restituisce il giorno della settimana del calendario gregoriano. Non include un membro che consente di recuperare il numero della settimana dell'anno. Per recuperare la settimana dell'anno, chiamare il calendario singoli <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> (metodo). Nell'esempio seguente viene illustrato questo concetto.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Per altre informazioni su date e calendari, vedere [utilizzo di calendari](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Rendere persistenti i valori DateTime  

È possibile rendere persistenti <xref:System.DateTime> valori in quattro modi:  
  
-   Si [convertirle in stringhe](#persisting-values-as-strings) e rendere persistenti le stringhe.  
-   Si [convertiti in valori integer a 64 bit](#persisting-values-as-integers) (il valore della <xref:System.DateTime.Ticks%2A> proprietà) e rendere persistenti i numeri interi.  
-   Si [serializzare i valori DateTime](#serializing-dateTime-values).  
-   Si [serializzare i valori di data/ora insieme alle informazioni sul fuso orario](#serializing-datetime-and-time-zone-data).  
  
È necessario assicurarsi che la routine che ripristina il <xref:System.DateTime> valori non perdere dati o generare un'eccezione indipendentemente dalla tecnica scelta. <xref:System.DateTime> i valori dovrebbero eseguire il round trip. Vale a dire, il valore originale e il valore ripristinato deve essere lo stesso. E se originale <xref:System.DateTime> valore rappresenta un singolo istante nel tempo, consigliabile identificare nello stesso momento di tempo quando viene ripristinata.  
  
#### <a name="persisting-values-as-strings"></a>Mantenimento di valori sotto forma di stringhe  

Per ripristinare correttamente <xref:System.DateTime> valori che vengono rese persistenti come stringhe, seguire queste regole:  
  
-   Apportare le stesse ipotesi sulle informazioni di formattazione specifiche delle impostazioni cultura quando si ripristina la stringa come quando persistente. Per essere certi che una stringa può essere ripristinata in un sistema le cui impostazioni cultura corrente sono diverse dalle impostazioni cultura del sistema in cui è stato salvato, chiamare il <xref:System.DateTime.ToString%2A> overload per salvare la stringa usando le convenzioni delle impostazioni cultura invarianti. Chiamare il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> overload per ripristinare la stringa usando le convenzioni delle impostazioni cultura invarianti. Non usare mai i <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> overload, che usa le convenzioni delle impostazioni cultura del thread corrente.  
  
-   Se la data rappresenta un singolo momento di tempo, assicurarsi che rappresenti lo stesso momento nel tempo quando si è ripristinato, anche in un fuso orario diverso. Convertire il <xref:System.DateTime> valore a Coordinated Universal Time (UTC) prima di salvarlo. È anche possibile serializzare il valore insieme a informazioni sul fuso orario. Per altre informazioni su questo approccio, vedere [i dati di serializzazione di data/ora e fuso orario](#TimeZone).  
  
 L'errore più comune effettuata quando rende persistente <xref:System.DateTime> valori sotto forma di stringhe consiste nel basarsi sulle convenzioni di formattazione degli account predefiniti o impostazioni cultura correnti. I problemi si verificano se le impostazioni cultura correnti è diversa durante il salvataggio e il ripristino le stringhe. L'esempio seguente illustra questi problemi. Salva le cinque date usando le convenzioni di formattazione delle impostazioni cultura correnti, in questo caso è l'inglese (Stati Uniti). Ripristina le date usando le convenzioni di formattazione delle impostazioni cultura diverse, ovvero in questo caso l'inglese (Gran Bretagna). Poiché le convenzioni di formattazione delle impostazioni due cultura sono diverse, due delle date non possono essere ripristinati e le date di tre rimanenti vengono interpretate in modo non corretto. Inoltre, se i valori originali di data e ora rappresentano singoli istante nel tempo, ripristinato volte in cui non sono corrette perché vengono perse informazioni sul fuso orario.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Eseguire il round trip <xref:System.DateTime> valori correttamente, seguono questa procedura:  
  
1.  Se i valori rappresentano singoli istante di tempo, convertirli dall'ora locale in formato UTC chiamando il <xref:System.DateTime.ToUniversalTime%2A> (metodo).  
1.  Convertire le date nelle relative rappresentazioni di stringa chiamando il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> o <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> rapporto di overload. Usare le convenzioni di formattazione della cultura invariabile, specificando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> come il `provider` argomento. Specificare che il valore deve essere il round trip usando la stringa di formato standard "O" o "R".  
  
Per ripristinare la classe resa persistente <xref:System.DateTime> valori senza perdita di dati, seguire questa procedura:  
  
1.  Analizzare i dati chiamando il <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> rapporto di overload. Specificare <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> come il `provider` argomento e usare lo stesso formato standard di stringa è stata usata per il `format` argomento durante la conversione. Includere il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valore il `styles` argomento.  
1.  Se il <xref:System.DateTime> valori rappresentano singoli istante nel tempo, chiamata di <xref:System.DateTime.ToLocalTime%2A> metodo per convertire la data analizzata rispetto all'ora UTC nell'ora locale.  
  
L'esempio seguente usa la lingua inglese e la stringa di formato standard "O" per garantire che <xref:System.DateTime> salvati e ripristinati i valori rappresentano lo stesso momento, indipendentemente dal sistema, impostazioni cultura o fuso orario dei sistemi di origine e destinazione.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Rendere persistenti i valori come numeri interi  

È possibile mantenere una data e ora come un <xref:System.Int64> valore che rappresenta un numero di tick. In questo caso, non è necessario prendere in considerazione le impostazioni cultura dei sistemi di <xref:System.DateTime> valori vengono salvati in modo permanente e ripristinati in.  
  
Per rendere persistente un <xref:System.DateTime> valore come numero intero:  
  
-   Se il <xref:System.DateTime> i valori rappresentano determinati momenti singoli, convertirli in formato UTC chiamando il <xref:System.DateTime.ToUniversalTime%2A> (metodo).  
-   Recuperare il numero di tick rappresentato dal <xref:System.DateTime> valore dal relativo <xref:System.DateTime.Ticks%2A> proprietà.  
  
Per ripristinare un <xref:System.DateTime> valore che è stata resa persistente come valore integer:  
  
1.  Creare un'istanza di una nuova <xref:System.DateTime> passando il <xref:System.Int64> valore per il <xref:System.DateTime.%23ctor%28System.Int64%29> costruttore.  
1.  Se il <xref:System.DateTime> valore rappresenta un singolo momento, convertirlo dall'ora UTC nell'ora locale chiamando il <xref:System.DateTime.ToLocalTime%2A> (metodo).  
  
Nell'esempio seguente mantiene una matrice di <xref:System.DateTime> valori come numeri interi in un sistema in Stati Uniti. fuso orario Pacifico (Stati Uniti). Questo viene ripristinato in un sistema nel fuso orario UTC. Il file che contiene i numeri interi include un' <xref:System.Int32> valore che indica il numero totale di <xref:System.Int64> valori che lo segue immediatamente.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>La serializzazione dei valori DateTime  

È possibile rendere persistenti <xref:System.DateTime> valori attraverso la serializzazione di un flusso o file e quindi ripristinare tali attraverso la deserializzazione. <xref:System.DateTime> i dati viene serializzati in un formato di oggetto specificato. Gli oggetti vengono ripristinati quando vengono deserializzate. Un formattatore o un serializzatore, ad esempio <xref:System.Xml.Serialization.XmlSerializer> o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, gestisce il processo di serializzazione e deserializzazione. Per altre informazioni sulla serializzazione e i tipi di serializzazione supportato da .NET Framework, vedere [serializzazione](~/docs/standard/serialization/index.md).
  
L'esempio seguente usa il <xref:System.Xml.Serialization.XmlSerializer> classe per serializzare e deserializzare <xref:System.DateTime> valori. I valori rappresentano tutti i giorni anno bisestile il ventunesimo secolo. L'output rappresenta il risultato se nell'esempio viene eseguito in un sistema le cui impostazioni cultura correnti è inglese (Gran Bretagna). Poiché è stata deserializzata di <xref:System.DateTime> oggetto stesso, il codice non è necessario gestire le differenze culturali di formati di data e ora.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Nell'esempio precedente non include informazioni sull'ora. Se un <xref:System.DateTime> valore rappresenta un momento specifico e viene espresso come ora locale, convertirlo dall'ora locale in ora UTC prima di serializzarlo chiamando il <xref:System.DateTime.ToUniversalTime%2A> (metodo). Dopo che deserializzarlo, convertirlo dall'ora UTC nell'ora locale chiamando il <xref:System.DateTime.ToLocalTime%2A> (metodo). L'esempio seguente usa il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe per serializzare <xref:System.DateTime> dati in un sistema in Stati Uniti. Fuso orario ora solare Pacifico e deserializzarlo in un sistema in Stati Uniti. Orario Standard centrale.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>La serializzazione dei dati di data/ora e fuso orario  

Tutti gli esempi precedenti, si suppone che <xref:System.DateTime> valori sono espressi come ora locale. Il codice di convertita i valori compresi tra UTC e l'ora locale in modo che riflettano nello stesso momento nel tempo in sistemi di origine e destinazione. <xref:System.DateTime> i valori possono inoltre riflettere istante nel tempo in un fuso orario diverso da local e l'ora UTC. Poiché il <xref:System.DateTime> struttura non è compatibile con fuso orario, è necessario serializzare sia il <xref:System.DateTime> valore e il <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario. Creare un tipo i cui campi includono entrambi il <xref:System.DateTime> valore e il relativo fuso orario. L'esempio seguente definisce un `DateWithTimeZone` struttura.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Il `DateWithTimeZone` struttura viene usata negli esempi successivi due quale serializzare e deserializzare una matrice di `DateWithTimeZone` oggetti. È possibile visualizzare l'origine per l'intero set di esempi in questo articolo in uno [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) oppure [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) dal repository docs su GitHub.
  
Tramite il `DateWithTimeZone` struttura, poterlo mentenere data e ora insieme a informazioni sul fuso orario. L'esempio seguente usa il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe per serializzare una matrice di `DateWithTimeZone` oggetti.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

L'esempio seguente chiama quindi il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> metodo deserializzarlo.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Visual Studio di data/ora. TimeSpan  

Il <xref:System.DateTime> e <xref:System.TimeSpan> tipi di valore differiscono in quanto un <xref:System.DateTime> rappresenta un istante di tempo, mentre un <xref:System.TimeSpan> rappresenta un intervallo di tempo. È possibile sottrarre un'istanza di <xref:System.DateTime> da un altro per ottenere un <xref:System.TimeSpan> oggetto che rappresenta l'intervallo di tempo tra di essi. Oppure è possibile aggiungere un numero positivo <xref:System.TimeSpan> all'oggetto corrente <xref:System.DateTime> per ottenere un <xref:System.DateTime> valore che rappresenta una data futura.  
  
È possibile aggiungere o sottrarre un intervallo di tempo da una <xref:System.DateTime> oggetto. Gli intervalli di tempo possono essere positivo o negativo e possono essere espressi in unità di misura, ad esempio i segni di graduazione, secondi, o come un <xref:System.TimeSpan> oggetto.  

### <a name="comparing-for-equality-within-tolerance"></a>Confronto di uguaglianza compresa nella tolleranza

I confronti di uguaglianza per <xref:System.DateTime> valori siano esatti. Ciò significa che due valori devono essere espresse come lo stesso numero di segni di graduazione per essere considerate uguali. La precisione è spesso non necessari o addirittura non corretta per molte applicazioni. Spesso, si desidera testare se <xref:System.DateTime> gli oggetti vengono **approssimativamente uguale**. 

Nell'esempio seguente viene illustrato come confrontare più o meno equivalente <xref:System.DateTime> . Accetta un piccolo margine di differenza quando si dichiara essi uguali.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Considerazioni sull'interoperabilità COM  

Oggetto <xref:System.DateTime> valore che viene trasferito a un'applicazione COM e quindi trasferito nuovamente a un'applicazione gestita, esegue il round trip. Tuttavia, un <xref:System.DateTime> valore che specifica un periodo di tempo non andata e ritorno come è prevedibile.  
  
Se è andata solo un'ora, ad esempio le 15.00, la data finale e l'ora è il 30 dicembre 1899 E.V. alle 3 P.M., invece, 1 ° gennaio 0001 E.V. alle ore 15.00: 00 .NET Framework e COM presuppone un valore date predefinito quando viene specificato un periodo di tempo. Tuttavia, il sistema COM presuppone una data di base di 30 dicembre 1899 D.C., mentre .NET Framework presuppone una data di base, 1 ° gennaio 0001 E.V.  
  
Quando solo una volta che viene passata da .NET Framework a COM, viene eseguita un'elaborazione speciale che converte l'ora nel formato usato da COM. Quando solo una volta che viene passata da COM a .NET Framework, non viene eseguita alcuna elaborazione speciale perché che danneggiasse legittime date e ore entro il 30 dicembre 1899. Se una data di inizio relativa round trip da COM, .NET Framework e COM mantiene la data.  
  
Il comportamento di .NET Framework e COM significa che se i round trip dell'applicazione una <xref:System.DateTime> che specifica solo una volta, l'applicazione è necessario ricordarsi di modificare o ignorare la data non corretti da finale <xref:System.DateTime> oggetto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Tutti i membri di questo tipo sono thread-safe. I membri che sembrano modificare lo stato dell'istanza è in realtà restituiscono una nuova istanza inizializzata con il nuovo valore. Come con qualsiasi altro tipo, la lettura e scrittura in una variabile condivisa che contiene un'istanza di questo tipo deve essere protetto da un blocco per garantire la thread safety.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato uno del <xref:System.DateTime> costruttori.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>ticks</c> specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta `year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno in un altro calendario, chiamare il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 L'ora del giorno per l'oggetto risultante <xref:System.DateTime> è costituito dalla mezzanotte (00: 00:00). La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore. Nell'esempio viene inoltre illustrato che questo overload consente di creare un <xref:System.DateTime> valore il cui componente ora è uguale a mezzanotte (o 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, and day for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ora del giorno per l'oggetto risultante <xref:System.DateTime> è costituito dalla mezzanotte (00: 00:00). La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi usando `calendar`.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari incluse <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere designato come calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede chiamate singole al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio viene modificato le impostazioni cultura correnti e impostarla sull'arabo (Siria) e Modifica calendario predefinito delle impostazioni cultura correnti per il calendario Hijri. Perché Hijri come calendario predefinito delle impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo lo usa per formattare la data. Quando le precedenti impostazioni cultura correnti, ovvero inglese (Stati Uniti) in questo caso, viene ripristinata, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno in un altro calendario, chiamare il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%2A> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c> and <c>second</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno in un altro calendario, chiamare il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, and second for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi usando `calendar`.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari incluse <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere designato come calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede chiamate singole al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio viene modificato le impostazioni cultura correnti e impostarla sull'arabo (Siria) e Modifica calendario predefinito delle impostazioni cultura correnti per il calendario Hijri. Perché Hijri come calendario predefinito delle impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo lo usa per formattare la data. Quando le precedenti impostazioni cultura correnti, ovvero inglese (Stati Uniti) in questo caso, viene ripristinata, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno in un altro calendario, chiamare il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno in un altro calendario, chiamare il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.  -or-  <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and millisecond for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi usando `calendar`.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari incluse <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere designato come calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede chiamate singole al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio viene modificato le impostazioni cultura correnti e impostarla sull'arabo (Siria) e Modifica calendario predefinito delle impostazioni cultura correnti per il calendario Hijri. Perché Hijri come calendario predefinito delle impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo lo usa per formattare la data. Quando le precedenti impostazioni cultura correnti, ovvero inglese (Stati Uniti) in questo caso, viene ripristinata, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through the number of years in <c>calendar</c>).</param>
        <param name="month">The month (1 through the number of months in <c>calendar</c>).</param>
        <param name="day">The day (1 through the number of days in <c>month</c>).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret <c>year</c>, <c>month</c>, and <c>day</c>.</param>
        <param name="kind">One of the enumeration values that indicates whether <c>year</c>, <c>month</c>, <c>day</c>, <c>hour</c>, <c>minute</c>, <c>second</c>, and <c>millisecond</c> specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I valori consentiti per `year`, `month`, e `day` parametri dipendono il `calendar` parametro. Viene generata un'eccezione se la data e ora specificate non possono essere espressi usando `calendar`.  
  
 Per le applicazioni nelle quali la portabilità dei dati di data e ora o un livello limitato di fuso orario sia importante orario, è possibile usare la corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari incluse <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere designato come calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede chiamate singole al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio viene modificato le impostazioni cultura correnti e impostarla sull'arabo (Siria) e Modifica calendario predefinito delle impostazioni cultura correnti per il calendario Hijri. Perché Hijri come calendario predefinito delle impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo lo usa per formattare la data. Quando le precedenti impostazioni cultura correnti, ovvero inglese (Stati Uniti) in questo caso, viene ripristinata, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is not in the range supported by <paramref name="calendar" />.  -or-  <paramref name="month" /> is less than 1 or greater than the number of months in <paramref name="calendar" />.  -or-  <paramref name="day" /> is less than 1 or greater than the number of days in <paramref name="month" />.  -or-  <paramref name="hour" /> is less than 0 or greater than 23.  -or-  <paramref name="minute" /> is less than 0 or greater than 59.  -or-  <paramref name="second" /> is less than 0 or greater than 59.  -or-  <paramref name="millisecond" /> is less than 0 or greater than 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> is not one of the <see cref="T:System.DateTimeKind" /> values.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">A positive or negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the value of the specified <see cref="T:System.TimeSpan" /> to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.DateTime.Add%2A> metodo per aggiungere più di un tipo di intervallo di tempo (giorni, ore, minuti, secondi o millisecondi) in un'unica operazione. Comportamento di questo metodo è identico a quello dell'operatore di addizione. Il <xref:System.DateTime> struttura supporta anche i metodi di aggiunta specializzati (ad esempio <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, e <xref:System.DateTime.AddMinutes%2A>) per ogni intervallo di tempo.  
  
 Il <xref:System.DateTime.Add%2A> metodo prende in considerazione gli anni bisestili e il numero di giorni al mese durante l'esecuzione di operazioni aritmetiche alla data.  
  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione. Il <xref:System.DateTime.Kind%2A> proprietà del nuovo <xref:System.DateTime> istanza è uguale a quello dell'istanza corrente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Add%2A> (metodo). Calcola il giorno della settimana in cui è 36 giorni (ore 864) da questo momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional days. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria di `value` è la parte frazionaria di un giorno. 4.5 equivale ad esempio, 4 giorni, 12 ore, 0 minuti, 0 secondi, 0 millisecondi e 0 tick.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
 Il <xref:System.DateTime.AddDays%2A> metodo prende in considerazione gli anni bisestili e il numero di giorni al mese durante l'esecuzione di operazioni aritmetiche alla data.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddDays%2A> metodo per determinare il giorno della settimana 36 giorni dopo la data corrente.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional hours. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione. Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è uguale a quello di `value`.  
  
 La parte frazionaria di `value` è la parte frazionaria di un'ora. 4.5 equivale ad esempio, per 4 ore, 30 minuti, 0 secondi e millisecondi 0 0 tick.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
 La conversione di intervalli di tempo di meno di un'ora a una frazione può comportare una perdita di precisione se il risultato è un numero decimale ripetuto non fatale. (Ad esempio, un minuto è 0,016667 ore). Se si verificano problemi, è possibile usare il <xref:System.DateTime.Add%2A> metodo, che consente di specificare più di un tipo di intervallo di tempo in una singola chiamata al metodo ed elimina la necessità di convertire gli intervalli di tempo in parte frazionaria di un'ora.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddHours%2A> metodo per aggiungere un numero di valori interi e frazionari in una data e ora. Illustra anche la perdita di precisione causata passando il metodo di un valore che includa un componente frazionario.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional milliseconds. The <c>value</c> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria di `value` è la parte frazionaria di un millisecondo. Ad esempio 4.5 è equivalente a 4 millisecondi e 5000 tick, dove un millisecondo = 10000 segni di graduazione.  
  
 Il `value` parametro viene arrotondato all'intero più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddMilliseconds%2A> metodo per aggiungere un millisecondo e 1.5 millisecondi per un <xref:System.DateTime> valore. Quindi, ogni nuovo valore viene visualizzato e Visualizza la differenza tra questo e il valore originale. La differenza viene visualizzata sia come un intervallo di tempo come un numero di tick. L'esempio in modo chiaro che un millisecondo uguale a 10.000 tick. Viene inoltre illustrato che millisecondi frazionari vengono arrotondati prima di eseguire l'aggiunta; il <xref:System.DateTime> valore risultante dalla somma 1,5 millisecondi e la data originale è maggiore della data originale 2 millisecondi.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional minutes. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria di `value` è la parte frazionaria di un minuto. Ad esempio 4.5 è equivalente a 4 minuti, 30 secondi, 0 millisecondi e 0 tick.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddMinutes%2A> metodo per aggiungere un numero di valori interi e frazionari in una data e ora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of months. The <c>months</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime> oggetto. Al contrario, restituisce un nuovo <xref:System.DateTime> oggetto il cui valore è il risultato di questa operazione.  
  
 Il <xref:System.DateTime.AddMonths%2A> (metodo) calcola il mese risultante e anno, prendendo in considerazione gli anni bisestili e il numero di giorni al mese, quindi modifica la parte del giorno dell'oggetto risultante <xref:System.DateTime> oggetto. Se il giorno risulta non è un giorno del mese risultante valido, viene usato l'ultimo giorno del mese valido. Ad esempio, il 31 marzo + 1 mese = 30 aprile e il 31 marzo - 1 mese = 28 febbraio per non-bisestile e 29 febbraio per un anno bisestile.  
  
 La parte ora del giorno dell'oggetto risultante <xref:System.DateTime> oggetto rimane identica a questa istanza.  
  
   
  
## Examples  
 L'esempio seguente aggiunge compreso tra zero e 15 mesi all'ultimo giorno di dicembre 2015. In questo caso, il metodo AddMonths restituisce la data dell'ultimo giorno di ogni mese e gestisce correttamente gli anni bisestili.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.  -or-  <paramref name="months" /> is less than -120,000 or greater than 120,000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of whole and fractional seconds. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria di `value` è la parte frazionaria di un secondo. Ad esempio 4.5 equivale a 0 tick 4 secondi e 500 millisecondi.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddSeconds%2A> metodo aggiungere 30 secondi e il numero di secondi in un giorno per un <xref:System.DateTime> valore. Quindi, ogni nuovo valore viene visualizzato e Visualizza la differenza tra questo e il valore originale. La differenza viene visualizzata sia come un intervallo di tempo come un numero di tick.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of 100-nanosecond ticks. The <c>value</c> parameter can be positive or negative.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A number of years. The <c>value</c> parameter can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTime" /> that adds the specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime> oggetto. Al contrario, restituisce un nuovo <xref:System.DateTime> oggetto il cui valore è il risultato di questa operazione.  
  
 Il <xref:System.DateTime.AddYears%2A> metodo calcola l'anno risulta prendendo in considerazione gli anni bisestili. La parte mese e l'ora del giorno dell'oggetto risultante <xref:System.DateTime> oggetto rimane identica a questa istanza.  
  
 Se l'istanza corrente rappresenta il giorno intercalare in un anno bisestile, il valore restituito dipende la data di destinazione:  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> anche è bisestile, il valore restituito rappresenta il giorno intercalare nell'anno. Ad esempio, se quattro anni viene aggiunto al 29 febbraio 2012, la data restituita è 29 febbraio 2016.  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> non è bisestile, il valore restituito rappresenta il giorno prima del giorno intercalare nell'anno. Ad esempio, se un anno viene aggiunto al 29 febbraio 2012, la data restituita è 28 febbraio 2013.  
  
 Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.DateTime.AddYears%2A> metodo con un <xref:System.DateTime> valore che rappresenta un giorno anno bisestile. Visualizza la data per disporre di quindici anni precedenti a e di quindici anni successivi al 29 febbraio 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> or the resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Compares two instances of <see cref="T:System.DateTime" /> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.</summary>
        <returns>A signed number indicating the relative values of <paramref name="t1" /> and <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Value Type  </term><description> Condition  </description></listheader><item><term> Less than zero  </term><description><paramref name="t1" /> is earlier than <paramref name="t2" />.  </description></item><item><term> Zero  </term><description><paramref name="t1" /> is the same as <paramref name="t2" />.  </description></item><item><term> Greater than zero  </term><description><paramref name="t1" /> is later than <paramref name="t2" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per stabilire la relazione di `t1` al `t2`, il <xref:System.DateTime.Compare%2A> metodo confronta il <xref:System.DateTime.Ticks%2A> proprietà di `t1` e `t2` ma ignora i <xref:System.DateTime.Kind%2A> proprietà. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Compare%2A> (metodo).  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I due overload del <xref:System.DateTime.CompareTo%2A> metodo di restituire un numero con segno che indica il valore relativo di questa istanza e il `value` argomento, come illustrato nella tabella seguente.  
  
|Valore|Descrizione|  
|-----------|-----------------|  
|Minore di zero|Questa istanza è precedente al parametro `value`.|  
|Zero|Questa istanza è uguale al parametro `value`.|  
|Maggiore di zero|Questa istanza è successiva al parametro `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to the current instance.</param>
        <summary>Compares the value of this instance to a specified <see cref="T:System.DateTime" /> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and the <paramref name="value" /> parameter.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per stabilire la relazione dell'istanza corrente di `value`, il <xref:System.DateTime.CompareTo%2A> metodo confronta le <xref:System.DateTime.Ticks%2A> proprietà dell'istanza corrente e `value` ma ignora i <xref:System.DateTime.Kind%2A> proprietà.  Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. È possibile farlo tramite il confronto tra i valori delle loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 Questo metodo implementa il <xref:System.IComparable%601?displayProperty=nameWithType> interfaccia ed esegue leggermente migliori rispetto al <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> overload del metodo perché non è necessario convertire il `value` parametro a un oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente crea tre <xref:System.DateTime> oggetti, uno che rappresenta data odierna data, un altro che rappresenta la data di un anno in precedenza, e un terzo che rappresenta la data di un anno nel futuro. Chiama quindi il <xref:System.DateTime.CompareTo%28System.DateTime%29> (metodo) e visualizza il risultato del confronto.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A boxed object to compare, or <see langword="null" />.</param>
        <summary>Compares the value of this instance to a specified object that contains a specified <see cref="T:System.DateTime" /> value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <see cref="T:System.DateTime" /> value.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table"><listheader><term> Value  </term><description> Description  </description></listheader><item><term> Less than zero  </term><description> This instance is earlier than <paramref name="value" />.  </description></item><item><term> Zero  </term><description> This instance is the same as <paramref name="value" />.  </description></item><item><term> Greater than zero  </term><description> This instance is later than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per stabilire la relazione dell'istanza corrente di `value`, il <xref:System.DateTime.CompareTo%2A> metodo confronta le <xref:System.DateTime.Ticks%2A> proprietà dell'istanza corrente e `value` ma ignora i <xref:System.DateTime.Kind%2A> proprietà. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. È possibile farlo tramite il confronto tra i valori delle loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 Qualsiasi istanza di <xref:System.DateTime>, indipendentemente dal relativo valore, viene considerato maggiore `null`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.CompareTo%2A> (metodo).  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date component of this instance.</summary>
        <value>Nuovo oggetto con la medesima data dell'istanza e il valore dell'ora impostato sulla mezzanotte (00.00.00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore è uguale a quello dell'istanza corrente.  
  
 Poiché il <xref:System.DateTime> tipo rappresenta date e ore in un unico tipo, è importante evitare di interpretare una data restituita dal <xref:System.DateTime.Date%2A> proprietà come data e ora.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Date%2A> proprietà per estrarre il componente Data di un <xref:System.DateTime> valore con il componente ora impostato su zero (oppure 0:00:00, o a mezzanotte). Viene inoltre illustrato che, a seconda della stringa di formato usata quando si visualizzano i <xref:System.DateTime> valore, il componente della fase è possibile continuare a essere incluso nell'output formattato.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by this instance.</summary>
        <value>Componente che indica il giorno, espresso mediante un valore compreso tra 1 e 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Day%2A> proprietà restituisce sempre il giorno del mese nel calendario gregoriano, anche se l'oggetto corrente <xref:System.DateTime> è stata creata un'istanza di valore utilizzando un calendario diverso o se il calendario predefinito delle impostazioni cultura del thread corrente non è il calendario gregoriano. Per recuperare il giorno del mese di una data specifica utilizzando un calendario diverso, chiamare del calendario <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> (metodo). Nell'esempio seguente usa sia la <xref:System.DateTime.Day%2A> proprietà e i <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodo per recuperare il giorno del mese per un <xref:System.DateTime> valore che viene creata un'istanza utilizzando il calendario Hijri.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Analogamente, nell'esempio seguente usa sia la <xref:System.DateTime.Day%2A> proprietà e il <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodo per recuperare il giorno del mese quando le impostazioni cultura del thread corrente sono ar-SA, che usa Hijri come calendario predefinito delle relative.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Day%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by this instance.</summary>
        <value>Costante enumerata che indica il giorno della settimana del valore <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore delle costanti nel <xref:System.DayOfWeek> enumerazione u+DC00 <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> a <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Se il cast in un numero intero, il relativo valore compreso tra zero (che indica <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a 6 (che indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Il <xref:System.DateTime.DayOfWeek%2A> proprietà restituisce una costante enumerata; non riflette le impostazioni internazionali e della lingua del sistema. Per recuperare una stringa che rappresenta un nome di giorno della settimana localizzato per una determinata data, chiamare uno degli overload del <xref:System.DateTime.ToString%2A> metodo che include un `format` parametro e passarlo sia la `ddd` o `dddd` stringhe di formato personalizzato. Per informazioni dettagliate, vedere [procedura: estrarre il giorno della settimana da una data specifica](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.DayOfWeek%2A> proprietà e il <xref:System.DayOfWeek?displayProperty=nameWithType> enumerazione.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by this instance.</summary>
        <value>Giorno dell'anno, espresso mediante un valore compreso fra 1 e 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.DayOfYear%2A> proprietà accetta gli anni bisestili in considerazione quando si calcola il giorno dell'anno. Il valore della proprietà riflette sempre il giorno dell'anno del calendario gregoriano, indipendentemente dal calendario corrente thread cultura correnti. Per recuperare il giorno dell'anno in un calendario diverso, chiamare il <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> metodo del calendario.  
  
   
  
## Examples  
 Nell'esempio seguente visualizza il giorno dell'anno del 31 dicembre 2010 2020 anni nel calendario gregoriano. Si noti che nell'esempio viene illustrato che il 31 dicembre è il 366 ° giorno dell'anno in un anno bisestile.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (a number ranging from 1 to 12).</param>
        <summary>Returns the number of days in the specified month and year.</summary>
        <returns>The number of days in <paramref name="month" /> for the specified <paramref name="year" />.  For example, if <paramref name="month" /> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year" /> is a leap year.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.DaysInMonth%2A> metodo sempre interpreta `month` e `year` come il mese e anno del calendario gregoriano di calendario anche se il calendario gregoriano non calendario corrente di cultura correnti. Per ottenere il numero di giorni in un mese di un determinato calendario specificato, chiamare del calendario <xref:System.Globalization.Calendar.GetDaysInMonth%2A> (metodo).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.DateTime.DaysInMonth%2A> metodo per determinare il numero di giorni nel luglio 2001, febbraio 1998 (un non-anno bisestile) e 1996 febbraio (un anno bisestile).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Nell'esempio seguente visualizza il numero di giorni nel mese di un anno specificato in una matrice di integer.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> is less than 1 or greater than 12.  -or-  <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> objects, or a <see cref="T:System.DateTime" /> instance and another object or <see cref="T:System.DateTime" />, have the same value.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:System.DateTime" /> instance.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="value" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza corrente e `value` sono uguali se i <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. Loro <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test per verificarne l'uguaglianza.  
  
 Questo metodo implementa il <xref:System.IEquatable%601?displayProperty=nameWithType> interfaccia ed esegue leggermente migliori rispetto il <xref:System.DateTime.Equals%2A> metodo perché il `value` parametro non deve essere convertito in un oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> (metodo).  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is an instance of <see cref="T:System.DateTime" /> and equals the value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza corrente e `value` sono uguali se i <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. Loro <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test per verificarne l'uguaglianza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> (metodo).  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Returns a value indicating whether two <see cref="T:System.DateTime" /> instances  have the same date and time value.</summary>
        <returns>
          <see langword="true" /> if the two values are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` e `t2` sono uguali se i <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. Loro <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test per verificarne l'uguaglianza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> (metodo).  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> property in a 2-bit field and the <see cref="P:System.DateTime.Ticks" /> property in a 62-bit field.</param>
        <summary>Deserializes a 64-bit binary value and recreates an original serialized <see cref="T:System.DateTime" /> object.</summary>
        <returns>An object that is equivalent to the <see cref="T:System.DateTime" /> object that was serialized by the <see cref="M:System.DateTime.ToBinary" /> method.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.DateTime.ToBinary%2A> metodo per convertire il valore dell'oggetto corrente <xref:System.DateTime> oggetto su un valore binario. Successivamente, usare il valore binario e il <xref:System.DateTime.FromBinary%2A> metodo ricreare originale <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In alcuni casi, il <xref:System.DateTime> valore restituito dal <xref:System.DateTime.FromBinary%2A> metodo non è identico all'originale <xref:System.DateTime> valore fornito per il <xref:System.DateTime.ToBinary%2A> (metodo). Per altre informazioni, vedere la sezione successiva, "Regolazione dell'ora locale".  
  
## <a name="local-time-adjustment"></a>Regolazione dell'ora locale  
 Un'ora locale, ovvero un tempo universale coordinato regolata in base al fuso orario locale, è rappresentata da un <xref:System.DateTime> struttura la cui proprietà <xref:System.DateTime.Kind%2A> proprietà ha un valore <xref:System.DateTimeKind.Local>. Quando si ripristina una variabile locale <xref:System.DateTime> valore dalla rappresentazione binaria derivante dal <xref:System.DateTime.ToBinary%2A> metodo, il <xref:System.DateTime.FromBinary%2A> metodo potrebbe modificare il valore ricreato in modo che non è uguale al valore originale. Ciò può verificarsi nelle seguenti condizioni:  
  
-   Se una variabile locale <xref:System.DateTime> oggetto viene serializzato in un fuso orario per il <xref:System.DateTime.ToBinary%2A> metodo e sarà successivamente deserializzato in un fuso orario diverso dal <xref:System.DateTime.FromBinary%2A> metodo, l'ora locale rappresentato dall'oggetto risultante <xref:System.DateTime> oggetto viene regolato automaticamente per il fuso orario secondo.  
  
     Si consideri, ad esempio, un <xref:System.DateTime> oggetto che rappresenta un'ora locale PM di 3 Un'applicazione che è in esecuzione negli Stati Uniti Fuso orario del Pacifico utilizza il <xref:System.DateTime.ToBinary%2A> metodo per convertire che <xref:System.DateTime> oggetto su un valore binario. Un'altra applicazione che è in esecuzione negli Stati Uniti Fuso orientale quindi Usa il <xref:System.DateTime.FromBinary%2A> metodo per convertire il valore binario in un nuovo <xref:System.DateTime> oggetto. Il valore del nuovo <xref:System.DateTime> oggetto è le 18, che rappresenta lo stesso punto nel tempo come l'indicatore P.M. 3 originale valore, ma viene aggiornata all'ora locale nel fuso orario solare fuso orientale.  
  
-   Se la rappresentazione binaria di una variabile locale <xref:System.DateTime> valore rappresenta un'ora non valida nel fuso orario locale del sistema in cui <xref:System.DateTime.FromBinary%2A> viene chiamato, l'ora viene regolata in modo che sia valido.  
  
     Ad esempio, la transizione dall'ora solare all'ora legale si verifica nel fuso orario del Pacifico degli Stati Uniti il 14 marzo 2010, alle 2.00, quando il tempo avanza di un'ora, alle 3:00 Questo intervallo di ore è un'ora non valida, vale a dire, un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente illustra che quando un tempo compreso in questo intervallo viene convertito in valore binario dal <xref:System.DateTime.ToBinary%2A> metodo e quindi Ripristina il <xref:System.DateTime.FromBinary%2A> metodo, il valore originale viene modificata per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetto a modifiche passandolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> metodo, come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerazioni sulla versione  
 A partire da .NET Framework versione 2.0, un <xref:System.DateTime> struttura è costituita da un campo di tipo privato, che indica se il tempo specificato viene ora locale, Coordinated Universal Time (UTC) o nessuna delle due, concatenata a un campo privato tick, che contiene il numero di tick di 100 nanosecondi che specificano una data e ora. Il numero di segni di graduazione sono accessibili con il <xref:System.DateTime.Ticks%2A> campo di proprietà e theKind accessibili con il <xref:System.DateTime.Kind%2A> proprietà.  
  
 Prima di .NET Framework 2.0, se è serializzato un <xref:System.DateTime> oggetto manualmente anziché, ad esempio un'interfaccia di serializzazione <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, è necessari per serializzare solo i dati di segni di graduazione nel <xref:System.DateTime>. A partire da .NET Framework 2.0, è anche necessario serializzare i dati relativi al tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the local time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli di 100 nanosecondi trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Windows Usa ora di un file per registrare un'applicazione consente di creare, accede a o scrive in un file.  
  
 Il `fileTime` parametro specifica l'ora di un file espressa in tick di 100 nanosecondi.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.FromFileTime%2A> (metodo).  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>In genere, il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo ripristini un <see cref="T:System.DateTime" /> valore salvato dal <see cref="M:System.DateTime.ToFileTime" /> (metodo). Tuttavia, i due valori possono variare nelle condizioni seguenti: - se la serializzazione e deserializzazione del <see cref="T:System.DateTime" /> valore si verificano in fusi orari diversi. Ad esempio, se un <see cref="T:System.DateTime" /> valore con un tempo di 12.30 negli Stati Uniti Fuso orientale viene serializzato e sarà successivamente deserializzato negli Stati Uniti Fuso orario del Pacifico, il valore originale di 12: le ore 20:30 verrà adattata alle 9.30 in modo da riflettere la differenza tra i due fusi orari.  -Se il <see cref="T:System.DateTime" /> valore serializzato rappresenta un'ora non valida nel fuso orario locale. In questo caso, il <see cref="M:System.DateTime.ToFileTime" /> metodo regola ripristinato <see cref="T:System.DateTime" /> valore in modo che rappresenti un'ora valida nel fuso orario locale.  Ad esempio, si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario del Pacifico il 14 marzo 2010, alle 2.00, quando il tempo avanza di un'ora, alle 3:00 Questo intervallo di ore è un'ora non valida, vale a dire, un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente illustra che quando un tempo compreso in questo intervallo viene convertito in un valore long integer dal <see cref="M:System.DateTime.ToFileTime" /> (metodo) e quindi Ripristina il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo, il valore originale viene modificata per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetto a modifiche passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metodo, come illustra l'esempio.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent UTC time.</summary>
        <returns>An object that represents the UTC time equivalent of the date and time represented by the <paramref name="fileTime" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli di 100 nanosecondi trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Windows Usa ora di un file per registrare un'applicazione consente di creare, accede a o scrive in un file.  
  
 Il `fileTime` parametro specifica l'ora di un file espressa in tick di 100 nanosecondi.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" /> is less than 0 or represents a time greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">An OLE Automation Date value.</param>
        <summary>Returns a <see cref="T:System.DateTime" /> equivalent to the specified OLE Automation Date.</summary>
        <returns>An object that represents the same date and time as <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `d` parametro è un numero a virgola mobile a precisione doppia che rappresenta una data come numero di giorni prima o dopo la data di riferimento, mezzanotte, 30 dicembre 1899. La parte integrale e accesso di `d` codificare la data come uno scostamento positivo o negativo dal 30 dicembre 1899 e il valore assoluto della parte frazionaria di `d` consente di codificare l'ora del giorno come frazione di uno spostamento di giorno da mezzanotte. `d` deve essere un valore compreso tra-657435,0 tramite 2958465.99999999 positivo.  
  
 Si noti che a causa della modalità le date vengono codificate, esistono due modi per rappresentare qualsiasi ora del giorno 30 dicembre 1899. Ad esempio, -0,5 e 0,5 significa mezzogiorno 30 dicembre 1899 perché uno scostamento del segno più o meno zero giorni dalla data di base è sempre la data di base e corrisponde a uno spostamento di mezza giornata da mezzanotte a mezzogiorno.  
  
 Vedere <xref:System.DateTime.ToOADate%2A> per altre informazioni sull'automazione OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The date is not a valid OLE Automation Date value.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Non si deve presupporre che più chiamate al <xref:System.DateTime.GetDateTimeFormats%2A> overload restituirà dati identici. In base all'overload specifico, è possono modificare i dati restituiti da questo metodo se le modifiche delle impostazioni cultura correnti, l'utente esegue l'override di singole impostazioni cultura, o si verifica un aggiornamento ai dati relative alla lingua del sistema.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di stringhe restituita dal <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> metodo equivale alla combinazione delle matrici di stringhe restituite dalle chiamate separate per il <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> metodo con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e stringhe di formato standard "y". Per altre informazioni sugli identificatori di formato standard, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato usando le informazioni da impostazioni cultura correnti. Per altre informazioni sulle informazioni di formattazione specifiche delle impostazioni cultura per le impostazioni cultura correnti, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Poiché questo metodo Usa i dati dipendenti dalle impostazioni cultura, non si deve presupporre che più chiamate al metodo restituirà dati identici. I dati restituiti da questo metodo possono cambiare se le modifiche delle impostazioni cultura correnti, l'utente esegue l'override di singole impostazioni cultura, o si verifica un aggiornamento ai dati relative alla lingua del sistema.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> (metodo). Viene visualizzata la rappresentazione di stringa di una data usando tutte le possibili standard formati data e ora nelle impostazioni cultura correnti del computer, in questo caso sono en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 L'esempio visualizza l'output seguente:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">A standard date and time format string.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with the <paramref name="format" /> standard date and time format specifier.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `format` parametro può essere uno qualsiasi degli identificatori di formato di ora e data standard. Questi includono 1!d, D, f, F, g, G, M o m, O (o o), R o r, s, t, T, u, U e Y (o y). Per altre informazioni, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato usando le informazioni da impostazioni cultura correnti. Per altre informazioni sulle informazioni di formattazione specifiche delle impostazioni cultura per le impostazioni cultura correnti, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Poiché questo metodo Usa i dati dipendenti dalle impostazioni cultura, non si deve presupporre che più chiamate al metodo restituirà dati identici. I dati restituiti da questo metodo possono cambiare se le modifiche delle impostazioni cultura correnti, l'utente esegue l'override di singole impostazioni cultura, o si verifica un aggiornamento ai dati relative alla lingua del sistema.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> (metodo). Viene visualizzata la rappresentazione di stringa di una data usando l'identificatore di formato data estesa ("D") per le impostazioni cultura correnti.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the standard date and time format specifiers and the specified culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di stringhe restituita dal <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> metodo equivale alla combinazione delle matrici di stringhe restituite dalle chiamate separate per il <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo con la "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e stringhe di formato standard "y". Per altre informazioni sugli identificatori di formato standard, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato usando informazioni specifiche delle impostazioni cultura fornite da `provider`.  
  
> [!IMPORTANT]
>  Poiché questo metodo Usa i dati dipendenti dalle impostazioni cultura, non è certo che più chiamate al metodo restituirà dati identici, a meno che `provider` è un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura invarianti. I dati restituiti da questo metodo possono modificare se l'utente esegue l'override le singole impostazioni cultura del `provider` oppure se si verifica un aggiornamento per i dati relative alla lingua del sistema per `provider`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> (metodo). Viene visualizzata la rappresentazione di stringa di una data usando tutte le possibili standard formati data e ora per le impostazioni cultura fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 L'esempio visualizza l'output seguente:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information about this instance.</param>
        <summary>Converts the value of this instance to all the string representations supported by the specified standard date and time format specifier and culture-specific formatting information.</summary>
        <returns>A string array where each element is the representation of the value of this instance formatted with one of the standard date and time format specifiers.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro di formato può essere uno qualsiasi degli identificatori di formato di ora e data standard. Questi includono 1!d, D, f, F, g, G, M o m, O (o o), R o r, s, t, T, u, U e Y (o y). Per altre informazioni, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato usando informazioni specifiche delle impostazioni cultura fornite da `provider`.  
  
> [!IMPORTANT]
>  Poiché questo metodo Usa i dati dipendenti dalle impostazioni cultura, non è certo che più chiamate al metodo restituirà dati identici, a meno che `provider` è un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura invarianti. I dati restituiti da questo metodo possono modificare se l'utente esegue l'override le singole impostazioni cultura del `provider` oppure se si verifica un aggiornamento per i dati relative alla lingua del sistema per `provider`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> (metodo). Vengono visualizzate le rappresentazioni di stringa di una data usando l'identificatore di formato data breve ("d") per le impostazioni cultura fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid standard date and time format specifier character.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.DateTime" />.</summary>
        <returns>The enumerated constant, <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the date represented by this instance.</summary>
        <value>Componente che indica l'ora, espresso mediante un valore compreso tra 0 e 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della <xref:System.DateTime.Hour%2A> proprietà sempre viene espressa utilizzando un formato a 24 ore. Per recuperare una stringa che rappresenta l'ora di una data e ora usando un formato a 12 ore, chiamare il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo con l'identificatore di formato personalizzato "h". Ad esempio:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Hour%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the current time zone.</summary>
        <returns>
          <see langword="true" /> if the value of the <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" /> or <see cref="F:System.DateTimeKind.Unspecified" /> and the value of this instance of <see cref="T:System.DateTime" /> is within the daylight saving time range for the local time zone; <see langword="false" /> if <see cref="P:System.DateTime.Kind" /> is <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo determina se l'oggetto corrente <xref:System.DateTime> valore è compreso all'interno dell'intervallo dell'ora legale del fuso orario locale, che viene restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà. È possibile determinare se un fuso orario supporta l'ora legale recuperando il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> proprietà. Per i fusi orari che osservare l'ora legale, è possibile determinare quando la transizione alla e dall'ora legale si verifica recuperando il <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matrice restituita del fuso orario <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> proprietà.  
  
 Se l'oggetto corrente <xref:System.DateTime> valore rappresenta un ambigui o un'ora non valida nel fuso orario locale, il metodo restituisce `false`.  
  
 Sul [!INCLUDE[winxp](~/includes/winxp-md.md)] i sistemi, il <xref:System.DateTime.IsDaylightSavingTime%2A> metodo riconosce solo la regola di rettifica corrente quando si determina se l'istanza corrente è un'ora legale. Di conseguenza, il metodo potrebbe non segnalare con precisione se l'istanza corrente è un'ora legale per periodi precedenti la regola di rettifica correnti in vigore.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">A 4-digit year.</param>
        <summary>Returns an indication whether the specified year is a leap year.</summary>
        <returns>
          <see langword="true" /> if <paramref name="year" /> is a leap year; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` viene specificato come un numero di 10 a 4 cifre base. ad esempio, 1996.  
  
 `year` viene sempre interpretato come un anno del calendario gregoriano. Per determinare se un anno specifico è bisestile in altri calendari, chiamare l'oggetto calendario `IsLeapYear` (metodo).  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.IsLeapYear%2A> metodo per determinare quale anni tra 1994 e 2014 sono gli anni bisestili. Nell'esempio viene inoltre illustrato il risultato quando il <xref:System.DateTime.AddYears%2A> metodo viene utilizzato per aggiungere un anno a un giorno intercalare.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than 1 or greater than 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.</summary>
        <value>Uno dei valori di enumerazione che indica ciò che l'ora corrente rappresenta. Il valore predefinito è <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile impostare esplicitamente il <xref:System.DateTime.Kind%2A> proprietà di un nuovo <xref:System.DateTime> valore a un determinato <xref:System.DateTimeKind> valore chiamando il <xref:System.DateTime.SpecifyKind%2A> (metodo).  
  
 Il <xref:System.DateTime.Kind%2A> proprietà consente a un <xref:System.DateTime> valore in modo da riflettere chiaramente Coordinated Universal Time (UTC) o l'ora locale. Al contrario, il <xref:System.DateTimeOffset> struttura può riflettere in modo non ambiguo ogniqualvolta un qualsiasi fuso orario come singolo punto nel tempo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come il <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the largest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di questa costante è equivalente alle ore 23.59.59,9999999 UTC, il 31 dicembre 9999 del calendario gregoriano, esattamente un tick di 100 nanosecondi prima dell'ora UTC 00:00:00, il 1 ° gennaio, 10000.  
  
 Alcuni calendari, ad esempio la <xref:System.Globalization.ThaiBuddhistCalendar>, supportano un intervallo di date superiore precedente a <xref:System.DateTime.MaxValue>. In questi casi, tentando di accedere <xref:System.DateTime.MaxValue> assegnazioni di variabili o la formattazione e operazioni di analisi può generare un <xref:System.ArgumentOutOfRangeException>. Invece di recuperare il valore della <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, è possibile recuperare il valore del valore date valido più recente della cultura specificata dal <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente crea una <xref:System.DateTime> oggetto passando al relativo costruttore un <xref:System.Int64> valore che rappresenta un numero di tick. Prima di richiamare il costruttore, ci si assicura che questo valore è maggiore o uguale a `DateTime.MinValue.Ticks` e minore o uguale a `DateTime.MaxValue.Ticks`. Se non lo genera un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the date represented by this instance.</summary>
        <value>Componente che indica i millisecondi, espresso mediante un valore compreso tra 0 e 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile visualizzare la rappresentazione di stringa del <xref:System.DateTime.Millisecond%2A> proprietà utilizzando l'identificatore di formato "fff". Ad esempio, il codice seguente visualizza una stringa che contiene il numero di millisecondi in una data e ora nella console.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 È anche possibile visualizzare il componente relativo ai millisecondi con gli altri componenti di un valore di data e ora con l'identificatore di formato standard "o". Ad esempio:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Tuttavia, l'identificatore di formato "o" è destinato per visualizzazione rispetto del round trip o archiviare un <xref:System.DateTime> valore. È anche possibile visualizzare i millisecondi con altri componenti di data e ora usando una stringa di formato personalizzato, come illustrato nell'esempio seguente.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Millisecond%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the date represented by this instance.</summary>
        <value>Componente che indica i minuti, espresso mediante un valore compreso tra 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Minute%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the smallest possible value of <see cref="T:System.DateTime" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di questa costante è equivalente alle ore 00.00.00,0000000 UTC, il 1 ° gennaio 0001 nel calendario gregoriano.  
  
 <xref:System.DateTime.MinValue> definisce la data e ora in cui viene assegnato a un valore non inizializzato <xref:System.DateTime> variabile. Questa condizione è illustrata nell'esempio seguente.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Il <xref:System.DateTime.MinValue> e <xref:System.DateTime.MaxValue> proprietà possono essere usate per garantire che un valore si trova nell'intervallo supportato prima di passarlo a un <xref:System.DateTime> costruttore. Il codice nella sezione esempio mostra questo utilizzo.  
  
   
  
## Examples  
 Nell'esempio seguente crea una <xref:System.DateTime> oggetto passando al relativo costruttore un <xref:System.Int64> valore che rappresenta un numero di tick. Prima di richiamare il costruttore, ci si assicura che questo valore è maggiore o uguale a `DateTime.MinValue.Ticks` e minore o uguale a `DateTime.MaxValue.Ticks`. Se non lo genera un <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by this instance.</summary>
        <value>Componente che indica il mese, espresso mediante un valore compreso tra 1 e 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Month%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        <value>Oggetto il cui valore corrisponde alla data e all'ora locali correnti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Now%2A> proprietà restituisce un <xref:System.DateTime> valore che rappresenta la data e ora correnti nel computer locale. Si noti che sussiste una differenza tra un <xref:System.DateTime> valore, che rappresenta il numero di tick trascorsi dalla mezzanotte del 1 ° gennaio 0001, e la rappresentazione di stringa di tale <xref:System.DateTime> valore, che esprime un valore di data e ora in un formato delle impostazioni cultura specifiche specifici. Per informazioni sulla formattazione dei valori di data e ora, vedere il <xref:System.DateTime.ToString%2A> (metodo). Nell'esempio seguente consente di visualizzare il breve stringa data e ora in diversi formati di impostazioni cultura specifiche.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 La risoluzione di questa proprietà dipende dal timer di sistema, che dipende dal sistema operativo sottostante. Tende a essere compresa tra 0,5 e 15 millisecondi. Di conseguenza, le chiamate ripetute al <xref:System.DateTime.Now%2A> proprietà in un intervallo di tempo breve, ad esempio in un ciclo, può restituire lo stesso valore.  
  
 Il <xref:System.DateTime.Now%2A> proprietà spesso viene utilizzata per misurare le prestazioni. Tuttavia, a causa della bassa risoluzione, non è adatto per l'utilizzo come strumento di benchmarking. Un'alternativa migliore consiste nell'utilizzare il <xref:System.Diagnostics.Stopwatch> classe.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  È anche possibile usare il <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> proprietà da recuperare la data locale corrente e l'ora. Consente a un'ora locale può essere espresso in modo non ambiguo come singolo punto nel tempo, che a sua volta il valore dell'ora portabile tra più computer.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Now%2A> e <xref:System.DateTime.UtcNow%2A> proprietà da recuperare data e ora locale corrente e il corrente universal coordinated data e ora (UTC). Quindi Usa le convenzioni di formattazione di un numero di impostazioni cultura per visualizzare le stringhe, insieme con i valori del loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to add.</param>
        <param name="t">The time interval to add.</param>
        <summary>Adds a specified time interval to a specified date and time, yielding a new date and time.</summary>
        <returns>An object that is the sum of the values of <paramref name="d" /> and <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[È il metodo equivalente per l'operatore <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato l'operatore di addizione.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Equality%2A> operatore determina se due <xref:System.DateTime> valori sono uguali confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato l'operatore di uguaglianza.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_GreaterThan%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or later than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or later than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_GreaterThanOrEqual%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The first object to compare.</param>
        <param name="d2">The second object to compare.</param>
        <summary>Determines whether two specified instances of <see cref="T:System.DateTime" /> are not equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="d1" /> and <paramref name="d2" /> do not represent the same date and time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Inequality%2A> operatore determina se due <xref:System.DateTime> valori non sono uguali confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> is earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_LessThan%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">The first object to compare.</param>
        <param name="t2">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTime" /> represents a date and time that is the same as or earlier than another specified <see cref="T:System.DateTime" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="t1" /> is the same as or earlier than <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_LessThanOrEqual%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts a specified <see cref="T:System.DateTime" /> or<see cref="T:System.TimeSpan" /> from a specified <see cref="T:System.DateTime" />.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">The date and time value to subtract from (the minuend).</param>
        <param name="d2">The date and time value to subtract (the subtrahend).</param>
        <summary>Subtracts a specified date and time from another specified date and time and returns a time interval.</summary>
        <returns>The time interval between <paramref name="d1" /> and <paramref name="d2" />; that is, <paramref name="d1" /> minus <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> metodo non prende in considerazione il valore della <xref:System.DateTime.Kind%2A> proprietà di due <xref:System.DateTime> valori quando si esegue la sottrazione. Prima di sottrazione <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. In caso contrario, il risultato includerà la differenza tra fusi orari.  
  
> [!NOTE]
>  Il <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metodo prende in considerazione la differenza tra fusi orari quando si esegue la sottrazione.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">The date and time value to subtract from.</param>
        <param name="t">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time and returns a new date and time.</summary>
        <returns>An object whose value is the value of <paramref name="d" /> minus the value of <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo sottrae il valore dei segni `t` dal valore di tick del `d`.  
  
 È il metodo equivalente per l'operatore <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTime" /> is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contenuto della sezione:  
  
 [Quale metodo viene chiamato?](#Tasks)   
 [La stringa da analizzare](#StringToParse)   
 [Convenzioni culturale e analisi](#Culture)   
 [Elementi di stile e l'analisi](#Styles)   
 [Il valore restituito e DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Quale metodo viene chiamato?  
  
|A|Chiamata|  
|--------|----------|  
|Analizzare una stringa di data e ora usando le convenzioni delle impostazioni cultura correnti.|Overload <xref:System.DateTime.Parse%28System.String%29>|  
|Analizzare una stringa di data e ora usando le convenzioni delle impostazioni cultura specifiche.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> eseguire l'overload (vedere [analisi e le convenzioni culturali](#Culture))|  
|Analizzare una stringa di data e ora con elementi di stile di visualizzazione speciali (ad esempio spazi vuoti o senza spazi).|Overload <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analizzare una stringa di data e ora che deve essere in un formato particolare.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analizzare una stringa di data e ora ed eseguire una conversione in ora UTC o locale.|Overload <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analizzare una stringa di data e ora senza la gestione delle eccezioni.|Metodo <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Ripristinare (roundtrip) un valore di data e ora creato da un'operazione di formattazione.|Passare la stringa di formato standard "o" o "r" per il <xref:System.DateTime.ToString%28System.String%29> metodo e chiamare il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload con <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analizzare una stringa di data e ora in un formato fisso attraverso i limiti di computer (e possibilmente relative alla lingua).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> (metodo)|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>La stringa da analizzare  
 Il <xref:System.DateTime.Parse%2A> metodo prova a convertire la rappresentazione di stringa di un valore di data e ora al relativo <xref:System.DateTime> equivalente. Tenta di analizzare la stringa di input completamente senza generare un <xref:System.FormatException> eccezione.  
  
> [!IMPORTANT]
>  Se l'operazione di analisi ha esito negativo a causa di un formato stringa non riconosciuto, il <xref:System.DateTime.Parse%2A> metodo genera un <xref:System.FormatException>, mentre le <xref:System.DateTime.TryParse%2A> restituzione del metodo `false`. Poiché la gestione delle eccezioni può essere costosa, è consigliabile usare <xref:System.DateTime.Parse%2A> quando è previsto l'operazione di analisi abbia esito positivo perché l'origine di input è attendibile. <xref:System.DateTime.TryParse%2A> è preferibile quando sono probabile che gli errori di analisi, soprattutto perché un'origine di input non attendibile o si hanno valori predefiniti ragionevoli per sostituire le stringhe che non vengono analizzate correttamente.   

 La stringa da analizzare è possibile usare uno dei formati seguenti:  
  
-   Una stringa con una data e ora.  
  
-   Una stringa con una data ma non all'ora. Se il componente della fase non è presente, il metodo presuppone ore 00.00. Se il componente Data dispone di un anno a due cifre, viene convertito in un anno in base il <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> del calendario corrente di cultura correnti o della cultura specificata corrente (se si usa un overload con un valore non null `provider` argomento).  
  
- Una stringa con un componente di data che include solo il mese e anno, ma nessun componente giorno. Il metodo presuppone che il primo giorno del mese.

- Una stringa con un componente di data che include solo il mese e giorno, ma nessun componente anno. Il metodo presuppone che l'anno corrente.

-   Una stringa con un'ora ma nessun componente di Data. Il metodo presuppone che la data corrente a meno che non si chiama il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> rapporto di overload e includere <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> nel `styles` argomento, nel quale caso il metodo presuppone che una data del 1 ° gennaio 0001.  

- Una stringa con un componente di ora che include solo l'ora e un indicatore AM/PM, con nessun componente di Data. Il metodo presuppone la data corrente e un'ora senza alcun minuti e senza secondi. È possibile modificare questo comportamento chiamando il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> rapporto di overload e includere <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> nel `styles` argomento, nel quale caso il metodo presuppone che una data del 1 ° gennaio 0001.

-   Stringa che include informazioni sul fuso orario ed è conforme a ISO 8601. Negli esempi seguenti, la prima stringa designa Coordinated Universal Time (UTC) e il secondo definisce il tempo in un fuso orario è sette ore precedenti rispetto all'ora UTC:  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07.00"  
  
-   Una stringa che include l'indicatore GMT ed è conforme al formato di ora RFC 1123; Per esempio:  
  
     "Sabato 01 novembre 2008 19 35: 12:00:00 GMT"  
  
-   Una stringa che include la data e ora insieme a informazioni relative alla differenza fuso orario; Per esempio:  
  
     "03/01/2009 05:42:00 -5:00"  

Nell'esempio seguente analizza le stringhe in ognuno di questi formati utilizzando le convenzioni di formattazione delle impostazioni cultura correnti, ovvero in questo caso le impostazioni cultura en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Se la stringa di input rappresenta un giorno intercalare in un anno bisestile il calendario usato per il metodo di analisi (vedere [convenzioni relative alla lingua e analisi](#Culture)), il <xref:System.DateTime.Parse%2A> metodo analizza la stringa correttamente. Se la stringa di input rappresenta un giorno intercalare in un non-anno bisestile, il metodo genera un <xref:System.FormatException>.  
  
 Poiché il <xref:System.DateTime.Parse%2A> metodo tenta di analizzare la rappresentazione di stringa di una data e ora usando le regole di formattazione delle impostazioni cultura specificate, il tentativo di analizzare una stringa tra diverse impostazioni cultura corrente può avere esito negativo. Per analizzare una data specifica e formato di ora tra impostazioni locali diverse, usare uno degli overload del <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> metodo e fornire un identificatore di formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenzioni culturale e analisi  
 Tutti gli overload del <xref:System.DateTime.Parse%2A> metodo sono dipendenti dalle impostazioni cultura, a meno che la stringa da analizzare (rappresentata dal `s` nella tabella seguente) conforme al modello di ISO 8601. L'operazione di analisi Usa le informazioni di formattazione in un <xref:System.Globalization.DateTimeFormatInfo> oggetto derivato come indicato di seguito:  
  
|Se si chiama|E `provider` è|Informazioni di formattazione sono derivate da|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Impostazioni cultura del thread corrente (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> proprietà)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|un <xref:System.Globalization.DateTimeFormatInfo> oggetto|L'oggetto specificato <xref:System.Globalization.DateTimeFormatInfo> oggetto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Impostazioni cultura del thread corrente (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> proprietà)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|un <xref:System.Globalization.CultureInfo> oggetto|Proprietà <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Custom <xref:System.IFormatProvider> implementazione|Metodo <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Quando le informazioni di formattazione sono derivata da un <xref:System.Globalization.DateTimeFormatInfo> oggetti, il <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà definisce il calendario utilizzato nell'operazione di analisi.  
  
 Se si utilizza una stringa di data e ora usando una <xref:System.Globalization.DateTimeFormatInfo> oggetto con le impostazioni che sono diverse da quelle delle impostazioni cultura standard personalizzate, usare il <xref:System.DateTime.ParseExact%2A> invece del metodo di <xref:System.DateTime.Parse%2A> metodo per aumentare le probabilità per una corretta conversione. Una stringa di ora e data non standard può essere complessa e difficile da analizzare. Il <xref:System.DateTime.Parse%2A> metodo tenta di analizzare una stringa con diversi modelli di analisi impliciti, ognuno dei quali potrebbero non riuscire. Al contrario, il <xref:System.DateTime.ParseExact%2A> metodo richiede all'utente di impostare in modo esplicito uno o più modelli di analisi che sono probabile che abbia esito positivo. Per altre informazioni, vedere la sezione "DateTimeFormatInfo e Dynamic Data" nel <xref:System.Globalization.DateTimeFormatInfo> argomento.  
  
> [!IMPORTANT]
>  Si noti che le convenzioni di formattazione per determinate impostazioni cultura sono dinamiche e possono essere soggette a modifiche. Ciò significa che le operazioni di analisi che dipendono dalle convenzioni di formattazione delle impostazioni cultura predefinite (corrente) o che specificano un <xref:System.IFormatProvider> oggetto che rappresenta le impostazioni cultura diverse da impostazioni cultura invarianti imprevista può avere esito negativo se si verifica una delle operazioni seguenti:  
>   
> -   I dati specifici delle impostazioni cultura sono stato modificato tra versioni principali o secondari di .NET Framework o come risultato di un aggiornamento alla versione esistente di .NET Framework.  
> -   I dati specifici delle impostazioni cultura riflettano preferenze dell'utente, che possono variare da computer a computer o una sessione da altra.  
> -   I dati specifici delle impostazioni cultura rappresentano impostazioni cultura di sostituzione che sostituisce le impostazioni delle impostazioni cultura standard o impostazioni cultura personalizzate.  
>   
>  Per evitare le difficoltà nell'analisi di stringhe di data e ora che sono associate alle modifiche nei dati relative alla lingua, è possibile analizzare le stringhe di data e ora con le impostazioni cultura invarianti, oppure è possibile chiamare il <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> (metodo) e specificare il formato esatto della stringa da analizzare. Se si serializza e deserializza i dati di data e ora, è possibile usare le convenzioni di formattazione della cultura invariabile oppure è possibile serializzare e deserializzare il <xref:System.DateTime> valore in un formato binario.  
>   
>  Per altre informazioni, vedere la sezione "dati dinamici delle impostazioni cultura" i <xref:System.Globalization.CultureInfo> argomento e i valori di data/ora persistenti"" sezione di <xref:System.DateTime> argomento.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementi di stile e l'analisi  
 Tutti i <xref:System.DateTime.Parse%2A> overload ignorare i caratteri spazi vuoti iniziali, interni o finali nella stringa di input (rappresentata dal `s` nella tabella seguente). Data e ora possono essere racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ("#", U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (u+0000).  
  
 Inoltre, il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload presenta una `styles` parametro costituito da uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione. Questo parametro definisce la modalità `s` deve essere interpretato e modo in cui convertire l'operazione di analisi `s` a una data e ora. Nella tabella seguente vengono descritti gli effetti della ognuno <xref:System.Globalization.DateTimeStyles> membro sull'operazione di analisi.  
  
|Membro DateTimeStyles|Effetto sulla conversione|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC, come indicato di seguito:<br /><br /> -Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore Ora UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Questo valore viene ignorato. Lo spazio vuoto interno è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Questo valore viene ignorato. Lo spazio vuoto iniziale è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Questo valore viene ignorato. Lo spazio vuoto finale è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti finali. Comportamento predefinito. Impossibile eseguire l'override fornendo una più restrittiva <xref:System.Globalization.DateTimeStyles> valore dell'enumerazione, ad esempio <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` mancano si presuppone che le informazioni sul fuso orario, ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` mancano presuppone alcuna informazione sul fuso orario UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Anche se valido, questo valore viene ignorato.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione di una stringa di data e ora in un <xref:System.DateTime> valore che rappresenta un'ora locale con relativa <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In genere, tale stringa viene creato chiamando il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> (metodo) e con l'identificatore di formato standard "o", "r" o "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Il valore restituito e DateTime. Kind

Il `DateTime.Parse` overload restituiscono una <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind> proprietà include informazioni sul fuso orario. Può indicare che l'ora è:

- Coordinated Universal Time (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- L'ora nel fuso orario locale (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Il tempo in un fuso orario sconosciuto (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 In generale, il <xref:System.DateTime.Parse%2A> metodo restituisce un <xref:System.DateTime> oggetto la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Tuttavia, il <xref:System.DateTime.Parse%2A> metodo può anche eseguire una conversione del fuso orario e impostare il valore della <xref:System.DateTime.Kind%2A> proprietà in modo diverso, a seconda dei valori del `s` e `styles` parametri:  
  
|Se|Conversione del fuso orario|Proprietà Kind|  
|--------|--------------------------|-------------------|  
|`s` contiene informazioni sul fuso orario.|Data e ora viene convertito nell'ora nel fuso orario locale.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contiene informazioni sul fuso orario, e `styles` include il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag.|Data e ora viene convertito a Coordinated Universal Time (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contiene l'identificatore del fuso orario Z o GMT, e `styles` include il <xref:System.Globalization.DateTimeStyles.RoundtripKind> flag.|Data e ora vengono interpretati come ora UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 L'esempio seguente converte le stringhe di data che contengono informazioni sul fuso orario all'ora nel fuso orario locale:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  È inoltre possibile mantenere il valore di data e dell'ora <xref:System.DateTime.Kind%2A> proprietà durante una formattazione e l'operazione di analisi usando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag. Nell'esempio seguente viene illustrato come la <xref:System.Globalization.DateTimeStyles.RoundtripKind> flag influisce sull'operazione di analisi su <xref:System.DateTime> valori che vengono convertiti in stringhe usando l'identificatore di formato "o", "r" o "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Esaminare numerosi esempi che chiamano il `DateTime.Parse` in varie posizioni metodo la [osservazioni](#remarks) sezione di questo articolo e nella documentazione per i singoli `DateTime.Parse` overload.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

È anche possibile scaricare un set completo di `DateTime.Parse` esempi, che sono inclusi in un [progetto .NET Core 2.0 per Visual c#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip) e un [progetto .NET Core 2.0 per Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), dal [dotnet / repository GitHub degli esempi](https://github.com/dotnet/samples).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the conventions of the current thread culture.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contiene informazioni sul fuso orario, il metodo restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte la data e ora in `s` nell'ora locale. In caso contrario, non eseguita alcuna conversione del fuso orario e restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Questo overload tenta di analizzare `s` usando le convenzioni di formattazione delle impostazioni cultura correnti. Le impostazioni cultura correnti è indicata dal <xref:System.Globalization.CultureInfo.CurrentCulture> proprietà. Per analizzare una stringa usando le convenzioni di formattazione delle impostazioni cultura specifiche, chiamare il <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> o il <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> overload.

Questo overload tenta di analizzare `s` tramite <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> stile.

## <a name="example"></a>Esempio

Nell'esempio seguente consente di analizzare la rappresentazione di stringa dei valori di data e ora diversi da:

- Usa il provider di formato predefinito, che fornisce le convenzioni di formattazione delle impostazioni cultura del thread corrente del computer utilizzato per produrre l'output di esempio. L'output di questo esempio riflette le convenzioni di formattazione delle impostazioni cultura en-US.

- Utilizzando il valore di stile predefinito, ovvero <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Gestisce il <xref:System.FormatException> convenzioni di formattazione di eccezione generata quando il metodo tenta di analizzare la rappresentazione di stringa di data e ora usando alcune delle impostazioni cultura. Viene inoltre illustrato come analizzare correttamente un valore di data e ora che non usa le convenzioni di formattazione delle impostazioni cultura del thread corrente.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" /> as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contiene informazioni sul fuso orario, il metodo restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte la data e ora in `s` nell'ora locale. In caso contrario, non eseguita alcuna conversione del fuso orario e restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Questo overload tenta di analizzare `s` utilizzando il <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> stile.

## <a name="example"></a>Esempio

Nell'esempio seguente analizza una matrice di stringhe di data usando le convenzioni di impostazioni cultura de-DE, en-US, fr-FR. Viene illustrato che le rappresentazioni di stringa di una singola data possono essere interpretate in modo diverso nelle diverse impostazioni cultura.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert. See [The string to parse](#StringToParse) for more information.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.  See [Parsing and cultural conventions](#Culture)</param>
        <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in <c>s</c> for the parse operation to succeed, and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using culture-specific format information and a formatting style.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="provider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Questo overload del metodo converte la data e ora `s` e imposta la <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore come indicato di seguito:

|Se |Conversione del fuso orario|Proprietà Kind|   
|-----|-----|-----|  
|`s` non contiene alcuna informazione di fuso orario.|Nessuno.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contiene informazioni sul fuso orario.|Per l'ora nel fuso orario locale|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contiene informazioni sul fuso orario, e ' include gli stili di <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag.|A Coordinated Universal Time (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contiene l'identificatore del fuso orario Z o GMT, e `styles` include il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Nessuno.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Esempio

Nell'esempio seguente viene illustrato il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metodo e visualizza il valore della <xref:System.DateTime.Kind%2A> proprietà dell'oggetto risultante <xref:System.DateTime> valori.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> does not contain a valid string representation of a date and time.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly or an exception is thrown.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere nel formato definito per il `format` parametro. Richiede inoltre che il \<data > e \<ora > gli elementi della rappresentazione di stringa di data e ora vengono visualizzati nell'ordine specificato da `format`e che `s` non spazio vuoto diverso da quello consentito dal `format`. Se `format` definisce una data senza alcun elemento tempo e l'analisi operazione ha esito positivo, l'oggetto risultante <xref:System.DateTime> valore dispone di un'ora dalla mezzanotte (00: 00:00). Se `format` definisce un'ora senza alcun elemento di data e l'analisi operazione ha esito positivo, l'oggetto risultante <xref:System.DateTime> valore ha una data di `DateTime.Now.Date`.  
  
 Se `s` non rappresenta un'ora in un determinato fuso orario e l'operazione di analisi ha esito positivo, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> valore <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se `s` rappresentano il tempo in un determinato fuso orario e `format` consente di informazioni sul fuso orario deve essere presente (ad esempio, se `format` è uguale all'oggetto "o", "r" o identificatori di formato standard "u", o se contiene la "z", "zz" o "zzz" identificatori di formato personalizzato), il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 Il `format` parametro è una stringa che contiene un identificatore di formato singolo standard oppure uno o più identificatori di formato personalizzato che definiscono il formato richiesto di `s`. Per informazioni dettagliate sui codici di formattazione validi, vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) oppure [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Se `format` è un modello di formato personalizzato che non includono i separatori di data o ora (ad esempio, "yyyyMMddHHmm"), usano la lingua inglese per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello di formato, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 La data e i simboli di tempo e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) usate nelle `s` sono definiti dal `provider` parametro, perché è il formato esatto di `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Una classe personalizzata <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o il <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.CultureInfo> viene usato l'oggetto che corrisponde alla lingua corrente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ParseExact%2A> (metodo).  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v40_short](~/Includes/NET-v40-short-MD.MD)], il <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare include un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [! INCLUDE[net_v35_short](~/Includes/NET-v35-short-MD.MD)] e le versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of the enumeration values that provides additional information about <c>s</c>, about style elements that may be present in <c>s</c>, or about the conversion from <c>s</c> to a <see cref="T:System.DateTime" /> value. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="format" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere in un formato definito dal `format` parametro. Inoltre, richiede che gli elementi di data e ora in `s` vengono visualizzati nell'ordine specificato dalla `format`. Se `s` non corrisponde al modello del `format` parametro, qualsiasi variazione definito dal `style` parametro, il metodo genera un <xref:System.FormatException>. Al contrario, il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data in uno dei formati riconosciuto dal provider di formato <xref:System.Globalization.DateTimeFormatInfo> oggetto. Il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo consente inoltre di elementi di data e ora in `s` vengano visualizzati in qualsiasi ordine.  
  
 Se il `s` parametro contiene solo una volta e non una data, la data corrente viene usata, a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene usato. Se il `s` parametro non contiene solo la data e ora, mezzanotte (00: 00:00) viene usato. Il `style` parametro determina inoltre se il `s` parametro può contenere i caratteri spazi vuoti iniziali, interna o finali.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag per non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `format` parametro definisce il criterio obbligatorio del `s` parametro. Può essere costituito da uno o più identificatori di formato personalizzati i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [data Standard e Stringhe di formato di tipo ora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizza i separatori di data o ora in un modello di formato personalizzato, usare la lingua inglese per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
> [!NOTE]
>  Invece di richiedere che `s` conformi a un singolo formato per l'operazione di analisi abbia esito positivo, è possibile chiamare il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (metodo) e specificare più formati consentiti. In questo modo l'operazione di analisi più probabile che abbia esito positivo.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determina se e in cui lo spazio vuoto non è definito dal `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (metodo).  
  
|Membro DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi singola data o un elemento relativo all'ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio del `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti non è definiti da finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone per rappresentare l'ora UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni relative alla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro analizzato usando i valori predefiniti. Nessun spazio vuoto diverso dal quello presente in `format` è consentito. Se `s` non dispone di un componente relativo alla data, la data del valore restituito <xref:System.DateTime> valore è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se è presente nelle informazioni sul fuso orario `s`, l'ora viene convertita nell'ora locale e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione in un <xref:System.DateTime> il valore di data e ora con relativo <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag è principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
 La data e i simboli di tempo e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) usate nelle `s` sono definiti dal `provider` parametro, perché è il formato esatto di `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Una classe personalizzata <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o il <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.CultureInfo> viene usato l'oggetto che corrisponde alla lingua corrente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> (metodo). Si noti che la stringa "5/01/2009 8:30" non può essere analizzato correttamente quando la `styles` parametro è uguale a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> perché non sono consentiti gli spazi iniziali da `format`. Inoltre, la stringa "5/01/2009 GMT+09.00" non può essere analizzato correttamente con un `format` di "MM/GG/yyyyhh:mm" perché la stringa di data non precede il numero di mesi con uno zero iniziale, come `format` richiede.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> or <paramref name="format" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to the pattern specified in <paramref name="format" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v40_short](~/Includes/NET-v40-short-MD.MD)], il <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare include un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [! INCLUDE[net_v35_short](~/Includes/NET-v35-short-MD.MD)] e le versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>. For more information, see the Remarks section.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.</summary>
        <returns>An object that is equivalent to the date and time contained in <paramref name="s" />, as specified by <paramref name="formats" />, <paramref name="provider" />, and <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data che corrisponde a uno dei modelli assegnati per il `formats` parametro. Se la stringa `s` non corrispondono a uno di questi modelli con una delle varianti definite dal `styles` parametro, il metodo genera un <xref:System.FormatException>. Oltre a confrontare `s` o a più schemi di formattazione, anziché a un singolo modello di formattazione, questo overload si comporta in modo identico al <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (metodo).  
  
 Il `s` parametro contiene la data e ora da analizzare. Se il `s` parametro contiene solo una volta e non una data, la data corrente viene usata, a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene usato. Se il `s` parametro non contiene solo la data e ora, mezzanotte (00: 00:00) viene usato. Il `style` parametro determina inoltre se il `s` parametro può contenere leader, spazi vuoti interni o finali caratteri diversi da quelli consentiti da una delle stringhe di formato in `formats`.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag di non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `formats` parametro contiene una matrice di criteri, uno dei quali `s` deve corrispondere esattamente se l'operazione di analisi abbia esito positivo. I modelli nel `formats` parametro è costituito da uno o più identificatori di formato personalizzati i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizza i separatori di data o ora in un modello di formato personalizzato, usare la lingua inglese per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determina se e in cui lo spazio vuoto non è definito dal `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> (metodo).  
  
|Membro DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi singola data o un elemento relativo all'ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio del `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti non è definiti da finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone per rappresentare l'ora UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni relative alla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro analizzato usando i valori predefiniti. Nessun spazio vuoto diverso dal quello presente in `format` è consentito. Se `s` non dispone di un componente relativo alla data, la data del valore restituito <xref:System.DateTime> valore è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se è presente nelle informazioni sul fuso orario `s`, l'ora viene convertita nell'ora locale e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione a una data e ora con relativi <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag è principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
 La data e i simboli di tempo e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) usate nelle `s` sono definiti dal `provider` parametro, perché è il formato esatto di `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Una classe personalizzata <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o il <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.CultureInfo> viene usato l'oggetto che corrisponde alla lingua corrente.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo per garantire che una stringa in un numero di possibili formati può essere analizzata correttamente.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> or <paramref name="formats" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> is an empty string.  -or-  an element of <paramref name="formats" /> is an empty string.  -or-  <paramref name="s" /> does not contain a date and time that corresponds to any element of <paramref name="formats" />.  -or-  The hour component and the AM/PM designator in <paramref name="s" /> do not agree.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values. For example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v40_short](~/Includes/NET-v40-short-MD.MD)], il <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare include un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [! INCLUDE[net_v35_short](~/Includes/NET-v35-short-MD.MD)] e le versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the date represented by this instance.</summary>
        <value>Componente che indica i secondi, espresso mediante un valore compreso tra 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Second%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">A date and time.</param>
        <param name="kind">One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.</param>
        <summary>Creates a new <see cref="T:System.DateTime" /> object that has the same number of ticks as the specified <see cref="T:System.DateTime" />, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified <see cref="T:System.DateTimeKind" /> value.</summary>
        <returns>A new object that has the same number of ticks as the object represented by the <paramref name="value" /> parameter and the <see cref="T:System.DateTimeKind" /> value specified by the <paramref name="kind" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.DateTime> oggetto è costituito da un campo di tipo che indica se il valore di ora è basato sull'ora locale, Coordinated Universal Time (UTC) o nessuno, e un campo di segni di graduazione che contiene un valore di tempo misurato in tick di 100 nanosecondi. Il <xref:System.DateTime.SpecifyKind%2A> crea un nuovo metodo <xref:System.DateTime> mediante l'oggetto `kind` parametro e il valore di ora originale.  
  
> [!IMPORTANT]
>  L'oggetto restituito <xref:System.DateTime> valore non rappresentano lo stesso istante nel tempo come i `value` parametro, e <xref:System.DateTime.SpecifyKind%2A> non è un metodo di conversione del fuso orario. Vengono invece demandate il tempo specificato dal `value` parametro invariato e imposta la <xref:System.DateTime.Kind%2A> proprietà `kind`. Per informazioni sulle conversioni di fusi orari, vedere [conversione degli orari tra fusi](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Il <xref:System.DateTime.SpecifyKind%2A> metodo è utile in scenari di interoperabilità in cui si ricevono un <xref:System.DateTime> oggetto con un campo di tipo non specificato, ma è possibile determinare eseguendo indipendente significa che il campo di segni di graduazione rappresenta ora locale o UTC.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come il <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Subtracts the specified time or duration from this instance.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to subtract.</param>
        <summary>Subtracts the specified date and time from this instance.</summary>
        <returns>A time interval that is equal to the date and time represented by this instance minus the date and time represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Subtract%28System.DateTime%29> metodo determina la differenza tra due date. Per sottrarre un intervallo di tempo dall'istanza corrente, chiamare il <xref:System.DateTime.Subtract%28System.TimeSpan%29> (metodo). Per sottrarre un intervallo di tempo specifico dall'istanza corrente, chiamare il metodo che aggiunge tale intervallo di tempo per la data corrente e fornire un valore negativo come argomento del metodo. Ad esempio, per sottrarre due mesi dalla data corrente, chiamare il <xref:System.DateTime.AddMonths%28System.Int32%29> metodo con un valore compreso tra -2.  
  
 Se la data e l'ora dell'istanza corrente è anteriore `value`, il metodo restituisce un <xref:System.TimeSpan> oggetto che rappresenta un intervallo di tempo negativo. Vale a dire, il valore di tutte le relative proprietà diverso da zero (ad esempio <xref:System.TimeSpan.Days%2A> o <xref:System.TimeSpan.Ticks%2A>) è un valore negativo.  
  
 Il <xref:System.DateTime.Subtract%28System.DateTime%29> metodo non prende in considerazione il valore della <xref:System.DateTime.Kind%2A> proprietà di due <xref:System.DateTime> valori quando si esegue la sottrazione. Prima di sottrazione <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano i casi nello stesso fuso orario. In caso contrario, il risultato includerà la differenza tra fusi orari.  
  
> [!NOTE]
>  Il <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> metodo prende in considerazione la differenza tra fusi orari quando si esegue la sottrazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts the specified duration from this instance.</summary>
        <returns>An object that is equal to the date and time represented by this instance minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Subtract%28System.TimeSpan%29> metodo restituisce la data che ricorre una differenza di intervallo di tempo specificato dall'istanza corrente. Per determinare l'intervallo di tempo tra due date, chiamare il <xref:System.DateTime.Subtract%28System.DateTime%29> (metodo). Per sottrarre un intervallo di tempo specifico dall'istanza corrente, chiamare il metodo che aggiunge tale intervallo di tempo per la data corrente e fornire un valore negativo come argomento del metodo. Ad esempio, per sottrarre due mesi dalla data corrente, chiamare il <xref:System.DateTime.AddMonths%28System.Int32%29> metodo con un valore compreso tra -2.  
  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 In genere, il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo sottrae un <xref:System.TimeSpan> oggetto che rappresenta un intervallo di tempo positivo e restituisce un <xref:System.DateTime> valore precedente alla data e ora dell'istanza corrente. Tuttavia, se il <xref:System.TimeSpan> oggetto rappresenta un intervallo di tempo negativo, il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo restituisce un <xref:System.DateTime> valore successiva alla data e ora dell'istanza corrente.  
  
 Il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo consente di sottrarre un intervallo di tempo che è costituito da più di un'unità di tempo, ad esempio (un numero specificato di ore) e un numero specificato di minuti. Da cui sottrarre una singola unità di tempo (ad esempio anni, mesi o giorni) il <xref:System.DateTime> istanza, può passare un valore numerico negativo come parametro a uno dei metodi seguenti:  
  
-   <xref:System.DateTime.AddYears%2A>, da cui sottrarre un numero specifico di anni dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddMonths%2A>, da cui sottrarre un numero specifico di mesi dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddDays%2A>, da cui sottrarre un numero specifico di giorni dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddHours%2A>, da cui sottrarre un numero specifico di ore dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddMinutes%2A>, da cui sottrarre un numero specifico di minuti dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddSeconds%2A>, da cui sottrarre un numero specifico di secondi dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, da cui sottrarre un numero specifico di millisecondi dall'istanza di data e ora corrente.  
  
-   <xref:System.DateTime.AddTicks%2A>, da cui sottrarre un numero specifico di tick dall'istanza di data e ora corrente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The result is less than <see cref="F:System.DateTime.MinValue" /> or greater than <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Returns the current <see cref="T:System.DateTime" /> object.</summary>
        <returns>The current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">The desired type.</param>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Converts the current <see cref="T:System.DateTime" /> object to an object of a specified type.</summary>
        <returns>An object of the type specified by the <paramref name="type" /> parameter, with a value equivalent to the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">This conversion is not supported for the <see cref="T:System.DateTime" /> type.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that implements the <see cref="T:System.IFormatProvider" /> interface. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>This conversion is not supported. Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</summary>
        <returns>The return value for this member is not used.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In all cases.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization. (This parameter is not used; specify <see langword="null" />.)</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.DateTime" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo popola i `info` parametro con il <xref:System.DateTime.Ticks%2A> e <xref:System.DateTime.Kind%2A> i valori delle proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the date and time of this instance.</summary>
        <value>Numero di tick che rappresentano data e ora dell'istanza. Valore è compreso tra <see langword="DateTime.MinValue.Ticks" /> e <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un singolo tick rappresenta 100 nanosecondi oppure un decimilionesimo di secondo. Sono presenti 10.000 Tick in un millisecondo, o 10 milioni di tick in un secondo.  
  
 Il valore di questa proprietà rappresenta il numero di intervalli di 100 nanosecondi trascorsi dalla mezzanotte del 12:00:00, il 1 ° gennaio 0001 (0: 00:00 UTC dell'1 gennaio 0001 nel calendario gregoriano), che rappresenta <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Non include il numero di segni di graduazione sono attribuibili a secondi intercalari.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Ticks%2A> proprietà per visualizzare il numero di tick trascorsi a partire dall'inizio del ventunesimo secolo e per creare un'istanza di un <xref:System.TimeSpan> oggetto. Il <xref:System.TimeSpan> oggetto viene quindi usato per visualizzare il tempo trascorso usando altri intervalli di tempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for this instance.</summary>
        <value>Intervallo di tempo che rappresenta la frazione del giorno trascorsa a partire dalla mezzanotte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.DateTime.Date%2A> proprietà. che restituisce un <xref:System.DateTime> valore che rappresenta una data senza componente relativo all'ora, il <xref:System.DateTime.TimeOfDay%2A> proprietà restituisce una <xref:System.TimeSpan> valore che rappresenta un <xref:System.DateTime> componente ora del valore.  
  
 Se si desidera visualizzare l'ora del giorno o recuperare la rappresentazione di stringa dell'ora del giorno di un <xref:System.DateTime> valore, è invece possibile chiamare un overload del <xref:System.DateTime.ToString%2A> metodo con un `format` parametro o utilizzare il [formattazione composita ](~/docs/standard/base-types/composite-formatting.md) funzionalità con la "t" o una stringa di formato standard "T".  
  
   
  
## Examples  
 Nell'esempio seguente visualizza il valore della <xref:System.DateTime.TimeOfDay%2A> proprietà per una matrice di <xref:System.DateTime> valori. Il valore restituito inoltre contrasta con la stringa restituita dalla stringa di formato standard "t" in un'operazione di formattazione composita.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializes the current <see cref="T:System.DateTime" /> object to a 64-bit binary value that subsequently can be used to recreate the <see cref="T:System.DateTime" /> object.</summary>
        <returns>A 64-bit signed integer that encodes the <see cref="P:System.DateTime.Kind" /> and <see cref="P:System.DateTime.Ticks" /> properties.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare la <xref:System.DateTime.ToBinary%2A> metodo per convertire il valore dell'oggetto corrente <xref:System.DateTime> oggetto su un valore binario. Successivamente, usare il valore binario e il <xref:System.DateTime.FromBinary%2A> metodo ricreare originale <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In alcuni casi, il <xref:System.DateTime> valore restituito dal <xref:System.DateTime.FromBinary%2A> metodo non è identico all'originale <xref:System.DateTime> valore fornito per il <xref:System.DateTime.ToBinary%2A> (metodo). Per altre informazioni, vedere la sezione successiva, "Regolazione dell'ora locale".  
  
## <a name="local-time-adjustment"></a>Regolazione dell'ora locale  
 Un'ora locale, ovvero un tempo universale coordinato regolata in base al fuso orario locale, è rappresentata da un <xref:System.DateTime> struttura la cui proprietà <xref:System.DateTime.Kind%2A> proprietà ha un valore <xref:System.DateTimeKind.Local>. Quando si ripristina una variabile locale <xref:System.DateTime> valore dalla rappresentazione binaria derivante dal <xref:System.DateTime.ToBinary%2A> metodo, il <xref:System.DateTime.FromBinary%2A> metodo potrebbe modificare il valore ricreato in modo che non è uguale al valore originale. Ciò può verificarsi nelle seguenti condizioni:  
  
-   Se una variabile locale <xref:System.DateTime> oggetto viene serializzato in un fuso orario per il <xref:System.DateTime.ToBinary%2A> metodo e sarà successivamente deserializzato in un fuso orario diverso dal <xref:System.DateTime.FromBinary%2A> metodo, l'ora locale rappresentato dall'oggetto risultante <xref:System.DateTime> oggetto viene regolato automaticamente per il fuso orario secondo.  
  
     Si consideri, ad esempio, un <xref:System.DateTime> oggetto che rappresenta un'ora locale PM di 3 Un'applicazione che è in esecuzione negli Stati Uniti Fuso orario del Pacifico utilizza il <xref:System.DateTime.ToBinary%2A> metodo per convertire che <xref:System.DateTime> oggetto su un valore binario. Un'altra applicazione che è in esecuzione negli Stati Uniti Fuso orientale utilizza il <xref:System.DateTime.FromBinary%2A> metodo per convertire il valore binario in un nuovo <xref:System.DateTime> oggetto. Il valore del nuovo <xref:System.DateTime> oggetto è le 18, che rappresenta lo stesso punto nel tempo come l'indicatore P.M. 3 originale valore, ma viene aggiornata all'ora locale nel fuso orario solare fuso orientale.  
  
-   Se la rappresentazione binaria di una variabile locale <xref:System.DateTime> valore rappresenta un'ora non valida nel fuso orario locale del sistema in cui <xref:System.DateTime.FromBinary%2A> viene chiamato, l'ora viene regolata in modo che sia valido.  
  
     Ad esempio, si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario del Pacifico il 14 marzo 2010, alle 2.00, quando il tempo avanza di un'ora, alle 3:00 Questo intervallo di ore è un'ora non valida, vale a dire, un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente illustra che quando un tempo compreso in questo intervallo viene convertito in valore binario dal <xref:System.DateTime.ToBinary%2A> metodo e quindi Ripristina il <xref:System.DateTime.FromBinary%2A> metodo, il valore originale viene modificata per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetto a modifiche passandolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> metodo, come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerazioni sulla versione  
 A partire da .NET Framework versione 2.0, un <xref:System.DateTime> struttura è costituita da un campo di tipo privato, che indica se il valore di tempo specificato è basato sull'ora locale, Coordinated Universal Time (UTC) o nessuno e un campo privato tick, che contiene il numero di tick di 100 nanosecondi che specificano una data e ora. Il campo di segni di graduazione sono accessibili con il <xref:System.DateTime.Ticks%2A> proprietà e il campo tipo sono accessibili con il <xref:System.DateTime.Kind%2A> proprietà.  
  
 Prima di .NET Framework 2.0, se è serializzato un <xref:System.DateTime> oggetto manualmente anziché, ad esempio un'interfaccia di serializzazione <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, è necessario solo serializzare i dati di segni di graduazione nel <xref:System.DateTime> struttura. A partire dalla versione 2.0, è anche necessario serializzare i dati relativi al tipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current date.</summary>
        <value>Oggetto che è impostato sulla data corrente, con il componente ora impostato su 00.00.00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Local>.  
  
 Perché restituisce la data corrente senza l'ora corrente, il <xref:System.DateTime.Today%2A> proprietà può essere utilizzato nelle applicazioni che usano solo date. Per informazioni dettagliate, vedere [scelta tra DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Al contrario, il <xref:System.DateTime.TimeOfDay%2A> proprietà restituisce l'ora corrente senza specificare la data corrente e il <xref:System.DateTime.Now%2A> proprietà restituisce la data corrente sia l'ora corrente.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Date%2A> proprietà per recuperare la data corrente. Illustra anche come un <xref:System.DateTime> valore può essere formattato usando alcune delle stringhe di formato di ora e data standard. Si noti che l'output generato dalla terza chiamata al metodo il <xref:System.DateTime.ToString%28System.String%29> metodo Usa l'identificatore di formato g per includere il componente della fase, ovvero zero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli di 100 nanosecondi trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Windows Usa ora di un file per registrare un'applicazione consente di creare, accede a o scrive in un file.  
  
 Il <xref:System.DateTime.ToFileTime%2A> metodo viene utilizzato il <xref:System.DateTime.Kind%2A> proprietà per determinare se corrente <xref:System.DateTime> oggetto è un'ora locale, un'ora UTC o un tipo non specificato di tempo che viene considerato come un'ora locale.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToFileTime%2A> (metodo).  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>In genere, il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo ripristini un <see cref="T:System.DateTime" /> valore salvato dal <see cref="M:System.DateTime.ToFileTime" /> (metodo). Tuttavia, i due valori possono variare nelle condizioni seguenti: - se la serializzazione e deserializzazione del <see cref="T:System.DateTime" /> valore si verificano in fusi orari diversi. Ad esempio, se un <see cref="T:System.DateTime" /> valore con un tempo di 12.30 negli Stati Uniti Fuso orientale viene serializzato e sarà successivamente deserializzato negli Stati Uniti Fuso orario del Pacifico, il valore originale di 12: le ore 20:30 verrà adattata alle 9.30 in modo da riflettere la differenza tra i due fusi orari.  -Se il <see cref="T:System.DateTime" /> valore serializzato rappresenta un'ora non valida nel fuso orario locale. In questo caso, il <see cref="M:System.DateTime.ToFileTime" /> metodo regola ripristinato <see cref="T:System.DateTime" /> valore in modo che rappresenti un'ora valida nel fuso orario locale.  Ad esempio, si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario del Pacifico il 14 marzo 2010, alle 2.00, quando il tempo avanza di un'ora, alle 3:00 Questo intervallo di ore è un'ora non valida, vale a dire, un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente illustra che quando un tempo compreso in questo intervallo viene convertito in un valore long integer dal <see cref="M:System.DateTime.ToFileTime" /> (metodo) e quindi Ripristina il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo, il valore originale viene modificata per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetto a modifiche passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metodo, come illustra l'esempio.  [! code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)] [! code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTime" /> object expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli di 100 nanosecondi trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Windows Usa ora di un file per registrare un'applicazione consente di creare, accede a o scrive in un file.  
  
 Il <xref:System.DateTime.ToFileTimeUtc%2A> metodo viene utilizzato il <xref:System.DateTime.Kind%2A> proprietà per determinare se corrente <xref:System.DateTime> oggetto è un'ora locale, un'ora UTC o un tipo non specificato di tempo che viene considerato come un'ora UTC. Se è un'ora locale, l'ora viene convertita in formato UTC prima di eseguire la conversione a un'ora di un file di Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before 12:00 midnight January 1, 1601 C.E. UTC.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToFileTimeUtc" /> metodo viene a volte usato per convertire un'ora locale in ora UTC e successivamente ripristinare il server chiamando il <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> metodo seguita dal <see cref="M:System.DateTime.ToLocalTime" /> (metodo). Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, i due valori di ora locale non sarà uguale. Per altre informazioni, vedere il <see cref="M:System.DateTime.ToLocalTime" /> (metodo).</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to local time.</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Local" />, and whose value is the local time equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented as a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È uguale all'ora Coordinated Universal Time (UTC) più l'offset UTC nell'ora locale. Per altre informazioni sull'offset dell'ora UTC, vedere <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversione tiene in considerazione anche la regola dell'ora legale che si applica all'ora rappresentata dall'oggetto corrente <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  Sul [!INCLUDE[winxp](~/includes/winxp-md.md)] i sistemi, il <xref:System.DateTime.ToLocalTime%2A> metodo riconosce solo la regola di rettifica corrente durante la conversione dall'ora UTC nell'ora locale. Di conseguenza, le conversioni per periodi precedenti la regola di rettifica correnti in vigore potrebbero non riflettere accuratamente la differenza tra ora UTC e l'ora locale.  
  
 A partire da .NET Framework versione 2.0, il valore restituito dal <xref:System.DateTime.ToLocalTime%2A> metodo è determinato dal <xref:System.DateTime.Kind%2A> proprietà dell'oggetto corrente <xref:System.DateTime> oggetto. La tabella seguente descrive i possibili risultati.  
  
|Tipo|Risultati|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Questa istanza di <xref:System.DateTime> viene convertito nell'ora locale.|  
|<xref:System.DateTimeKind.Local>|Viene eseguita alcuna conversione.|  
|<xref:System.DateTimeKind.Unspecified>|Questa istanza di <xref:System.DateTime> presuppone che sia un'ora UTC, e la conversione viene eseguita come se <xref:System.DateTime.Kind%2A> erano <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Il <xref:System.DateTime.ToLocalTime%2A> metodo converte una <xref:System.DateTime> valore rispetto all'ora UTC nell'ora locale. Per convertire l'ora in un determinato fuso orario in ora locale, usare il <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> (metodo).  
  
 Il valore restituito per la conversione è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> proprietà restituisce sempre <xref:System.DateTimeKind.Local>. Di conseguenza, viene restituito un risultato valido anche se <xref:System.DateTime.ToLocalTime%2A> viene applicato più volte alla stessa <xref:System.DateTime>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLocalTime%2A> (metodo). Tenere presente che l'output esatta dipende dalle impostazioni cultura correnti e il fuso orario locale del sistema in cui viene eseguito.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come il <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>È possibile usare la <see cref="M:System.DateTime.ToLocalTime" /> metodo per ripristinare un data locale e il valore di ora che è stata convertita in ora UTC, il <see cref="M:System.DateTime.ToUniversalTime" /> o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> (metodo). Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, verrà corrisponde al valore ripristinato. Quando il <see cref="M:System.DateTime.ToLocalTime" /> metodo converte un'ora da UTC al fuso orario locale, modifica anche il tempo in modo che sia valido nel fuso orario locale.  Ad esempio, si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario del Pacifico il 14 marzo 2010, alle 2.00, quando il tempo avanza di un'ora, alle 3:00 Questo intervallo di ore è un'ora non valida, vale a dire, un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente illustra che quando un tempo compreso in questo intervallo viene convertito in ora UTC, il <see cref="M:System.DateTime.ToUniversalTime" /> (metodo) e quindi Ripristina il <see cref="M:System.DateTime.ToLocalTime" /> metodo, il valore originale viene modificata per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetto a modifiche passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> metodo, come illustra l'esempio.  [! code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)] [! code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long date string representation.</summary>
        <returns>A string that contains the long date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato usando il modello definito dal <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "D" [stringa di formato data/ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> (metodo).  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToLongDateString%2A> metodo è dipendente dalla lingua. Riflette il modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello di data estesa standard è "dddd, MMMMdd, yyyy"; per le impostazioni cultura de-DE, è "dddd, d. MMMMaaaa"; per le impostazioni cultura ja-JP, è "yyyy'? ' M'? ' 1!d '?'". La stringa di formato specifico in un determinato computer può anche essere personalizzata in modo che si differenzia dalla stringa di formato standard di data estesa.  
  
 Per altre informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per altre informazioni sui caratteri di formato, i modelli di formato e l'output generati, vedere la [formattazione di tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per altre informazioni su come modificare il modello di formato associato con un carattere di formato, vedere il <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLongDateString%2A> (metodo).  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent long time string representation.</summary>
        <returns>A string that contains the long time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato usando il modello definito dal <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "T" [stringa di formato data e ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> (metodo).  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToLongTimeString%2A> metodo è dipendente dalla lingua. Riflette il modello definito per il <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> proprietà delle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello standard molto tempo è "h:mm: ss tt"; per le impostazioni cultura de-DE, è "Hh"; per le impostazioni cultura ja-JP, è "H:mm: ss". La stringa di formato specifico in un determinato computer può anche essere personalizzata in modo che si differenzia dalla stringa di formato standard molto tempo.  
  
 Per altre informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per altre informazioni sui caratteri di formato, i modelli di formato e l'output generati, vedere la [formattazione di tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per altre informazioni su come modificare il modello di formato associato con un carattere di formato, vedere il <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLongTimeString%2A> (metodo).  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of this instance to the equivalent OLE Automation date.</summary>
        <returns>A double-precision floating-point number that contains an OLE Automation date equivalent to the value of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una data di automazione OLE viene implementata come un numero a virgola mobile e il relativo componente integrale è il numero di giorni prima o dopo la mezzanotte, 30 dicembre 1899, e il cui componente frazionario rappresenta l'ora del giorno corrente diviso per 24. Ad esempio, la mezzanotte del 31 dicembre 1899 è rappresentato da 1.0; 6 AM, 1 gennaio 1900 è rappresentato da 2.25; la mezzanotte del 29 dicembre 1899 è rappresentato da -1,0; e 6 ore, a cui è rappresentata da -1.25 29 dicembre 1899.  
  
 La data di automazione OLE è costituito dalla mezzanotte, 30 dicembre 1899. La data di automazione OLE minima è mezzanotte del 1 gennaio 0100. Data di automazione OLE massimo è identico <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, all'ultimo istante del 31 dicembre 9999.  
  
 Il <xref:System.DateTime.ToOADate%2A> metodo genera un' <xref:System.OverflowException> se l'istanza corrente rappresenta una data successiva a quella <xref:System.DateTime.MinValue> e precedente alla mezzanotte del 1 gennaio 0100. Tuttavia, se il valore dell'istanza corrente è <xref:System.DateTime.MinValue>, il metodo restituisce 0.  
  
 Per altre informazioni sull'automazione OLE, vedere la [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance cannot be represented as an OLE Automation Date.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short date string representation.</summary>
        <returns>A string that contains the short date string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato usando il modello definito dal <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "d" [stringa di formato data/ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> (metodo).  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToShortDateString%2A> metodo è dipendente dalla lingua. Riflette il modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello standard di data breve è "G/aaaa"; per le impostazioni cultura de-DE, è "aaaa. MM.yyyy"; per le impostazioni cultura ja-JP, è "yyyy/M/d". La stringa di formato specifico in un determinato computer può anche essere personalizzata in modo che si differenzia dalla stringa di formato standard di data breve.  
  
 Per altre informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> proprietà. Per altre informazioni sui caratteri di formato, i modelli di formato e l'output generati, vedere la [formattazione di tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per altre informazioni su come modificare il modello di formato associato con un carattere di formato, vedere il <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToShortDateString%2A> (metodo). Viene inoltre illustrato che il risultato della chiamata al metodo il <xref:System.DateTime.ToShortDateString%2A> è identico alla chiamata al metodo il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo con "d" come parametro del formato.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent short time string representation.</summary>
        <returns>A string that contains the short time string representation of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato usando il modello definito dal <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "t" [stringa di formato data/ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> (metodo).  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToShortTimeString%2A> metodo è dipendente dalla lingua. Riflette il modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello standard di ora breve è "h:mm tt"; per le impostazioni cultura de-DE, è "Hh: mm"; per le impostazioni cultura ja-JP, è "Hh". La stringa di formato specifico in un determinato computer può anche essere personalizzata in modo che si differenzia dalla stringa di formato standard breve periodo di tempo.  
  
 Per altre informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per altre informazioni sui caratteri di formato, i modelli di formato e l'output generati, vedere la [formattazione di tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per altre informazioni su come modificare il modello di formato associato con un carattere di formato, vedere il <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToShortTimeString%2A> (metodo).  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the formatting conventions of the current culture.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato con il data generale e l'identificatore di formato di ora ("G"). Per formattare utilizzando una specifica data e l'identificatore di formato di ora, chiamare il <xref:System.DateTime.ToString%28System.String%29> (metodo). Per formattare utilizzando l'identificatore di formato di ora ("G") e il data generale per impostazioni cultura specifiche, chiamare il <xref:System.DateTime.ToString%28System.IFormatProvider%29> (metodo). Per formattare utilizzando una data specifica e identificatore di formato di ora e le convenzioni delle impostazioni cultura specifiche, chiamare il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> (metodo).  
  
 Questo metodo Usa le informazioni di formattazione derivate da impostazioni cultura correnti. In particolare, consente di combinare le stringhe di formato personalizzato restituite dal <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> e <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> proprietà delle <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal `Thread.CurrentThread.CurrentCulture.DateTimeFormat` proprietà. Per altre informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Altri overload del <xref:System.DateTime.ToString%2A> metodo consentono di specificare le impostazioni cultura la cui formattazione da utilizzare e per definire il modello di output del <xref:System.DateTime> valore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la rappresentazione di stringa di un <xref:System.DateTime> valore restituito dal <xref:System.DateTime.ToString> metodo dipende dalle impostazioni cultura correnti del thread. Impostazioni cultura del thread corrente vengono modificate da en-US, fr-FR al ja-JP. e in ogni caso chiama il <xref:System.DateTime.ToString> metodo per restituire la rappresentazione di stringa di un valore di data e ora usando tale lingua.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString" /> metodo restituisce la rappresentazione di stringa della data e ora nel calendario utilizzato dalle impostazioni cultura correnti. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successiva a quella <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che non rientra nell'intervallo del <see cref="T:System.Globalization.HijriCalendar" /> classe quando le impostazioni cultura correnti è quelle arabe (Siria).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs# 2)] [! codice Visual Basic [System.DateTime.ToString.ArgumentOutOfRangeException#2] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato con il data generale e l'identificatore di formato di ora ("G"), che formatta l'output utilizzando il modello di data breve e il modello di molto tempo.  
  
 Il formato della data breve e ora estesa è definito dal `provider` parametro. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura le cui convenzioni di formattazione riflesse nella stringa restituita. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione della stringa restituita.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato che implementa il <xref:System.IFormatProvider> interfaccia. Relativi <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.DateTimeFormatInfo> viene usato l'oggetto associato a impostazioni cultura correnti. Per altre informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente mostra la rappresentazione di stringa di data e ora usando <xref:System.Globalization.CultureInfo> gli oggetti che rappresentano i cinque diverse impostazioni cultura.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> metodo restituisce la rappresentazione di stringa della data e ora nel calendario utilizzato dalle impostazioni cultura rappresentate dal <paramref name="provider" /> parametro. Il calendario è definito dal <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> proprietà. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successiva a quella <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che non rientra nell'intervallo del <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs# 1)] [! codice Visual Basic [System.DateTime.ToString.ArgumentOutOfRangeException#1] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and the formatting conventions of the current culture.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ToString%28System.String%29> metodo restituisce la rappresentazione di stringa di un valore di data e ora in un formato specifico che usa le convenzioni di formattazione delle impostazioni cultura correnti; per altre informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Il `format` parametro deve contenere un carattere identificatore di formato singolo (vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modello di formato personalizzato (vedere [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) che definisce il formato della stringa restituita. Se `format` è `null` o una stringa vuota, l'identificatore di formato generale "G", viene usata.  
  
 Alcuni usi di questo metodo includono:  
  
-   Ottiene una stringa che visualizza la data e ora in formato data breve di cultura correnti e ora. A tale scopo, utilizzare l'identificatore di formato "G".  
  
-   Ottiene una stringa che contiene solo il mese e anno. A tale scopo, si usa la stringa di formato "MM/yyyy". La stringa di formato Usa separatore della data di cultura correnti.  
  
-   Ottiene una stringa che contiene la data e ora in un formato specifico. Ad esempio, il "MM/GG/yyyyHH:mm" stringa di formato consente di visualizzare la stringa di data e ora in un formato fisso, ad esempio "19 2013 / / 03 / / 18:06". Usa la stringa di formato "/" come separatore della data fissa, indipendentemente dalle impostazioni cultura.  
  
-   Recupero di una data in formato abbreviato che può essere usato per la serializzazione di una stringa di Data. Ad esempio, la stringa di formato "aaaammgg" Visualizza un anno a quattro cifre seguito da un mese a due cifre e giorno a due cifre con nessun separatore della data.  
  
 L'esempio seguente Usa queste tre stringhe di formato per visualizzare un valore di data e ora usando le convenzioni delle impostazioni cultura en-US e fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 L'esempio seguente usa ognuna delle stringhe di formato di ora e data standard e una selezione di stringhe di formato di ora e Data personalizzata per visualizzare la rappresentazione di stringa di un <xref:System.DateTime> valore. Impostazioni cultura del thread corrente per l'esempio sono en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.String)" /> metodo restituisce la rappresentazione di stringa della data e ora nel calendario utilizzato dalle impostazioni cultura correnti. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successiva a quella <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che non rientra nell'intervallo del <see cref="T:System.Globalization.HebrewCalendar" /> classe quando le impostazioni cultura correnti sono ebraico (Israele).  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs# 3)] [! codice Visual Basic [System.DateTime.ToString.ArgumentOutOfRangeException#3] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom date and time format string.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of value of the current <see cref="T:System.DateTime" /> object as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `format` parametro può contenere un carattere identificatore di formato singolo (vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modello di formato personalizzato (vedere [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Se `format` è `null` o una stringa vuota (""), l'identificatore di formato standard "G", viene usato.  
  
 Il `provider` parametro definisce il modello che corrisponde agli identificatori di formato standard, nonché i simboli e nomi dei componenti data e ora. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura le cui convenzioni di formattazione riflesse nella stringa restituita. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione della stringa restituita.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato che implementa il <xref:System.IFormatProvider> interfaccia. Relativi <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.DateTimeFormatInfo> associato all'oggetto corrente viene usata dalle impostazioni cultura. Per altre informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente Usa tutte le stringhe di formato standard di data ora per visualizzare la rappresentazione di stringa di data e ora per quattro diverse impostazioni cultura.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 L'esempio seguente illustra diversi modi per formattare un <xref:System.DateTime> valore usando l'invariante <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is 1, and it is not one of the format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  -or-  <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> metodo restituisce la rappresentazione di stringa della data e ora nel calendario usato dal <paramref name="provider" /> parametro. Il calendario è definito dal <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> proprietà. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successiva a quella <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che non rientra nell'intervallo del <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs# 4)] [! codice Visual Basic [System.DateTime.ToString.ArgumentOutOfRangeException#4] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/ DateTime.ToString.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTime" /> object to Coordinated Universal Time (UTC).</summary>
        <returns>An object whose <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" />, and whose value is the UTC equivalent to the value of the current <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MaxValue" /> if the converted value is too large to be represented by a <see cref="T:System.DateTime" /> object, or <see cref="F:System.DateTime.MinValue" /> if the converted value is too small to be represented by a <see cref="T:System.DateTime" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Coordinated Universal Time (UTC) è uguale all'ora locale meno l'offset UTC. Per altre informazioni sull'offset dell'ora UTC, vedere <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversione tiene in considerazione anche la regola dell'ora legale che si applica all'ora rappresentata dall'oggetto corrente <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  Sul [!INCLUDE[winxp](~/includes/winxp-md.md)] i sistemi, il <xref:System.DateTime.ToUniversalTime%2A> metodo riconosce solo la regola di rettifica corrente durante la conversione dall'ora locale in ora UTC. Di conseguenza, le conversioni per periodi precedenti la regola di rettifica correnti in vigore potrebbero non riflettere accuratamente la differenza tra ora locale e l'ora UTC.  
  
 A partire da .NET Framework versione 2.0, il valore restituito dal <xref:System.DateTime.ToUniversalTime%2A> metodo è determinato dal <xref:System.DateTime.Kind%2A> proprietà dell'oggetto corrente <xref:System.DateTime> oggetto. La tabella seguente descrive i possibili risultati.  
  
|Tipo|Risultati|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Viene eseguita alcuna conversione.|  
|<xref:System.DateTimeKind.Local>|Corrente <xref:System.DateTime> oggetto viene convertito in formato UTC.|  
|<xref:System.DateTimeKind.Unspecified>|L'oggetto corrente <xref:System.DateTime> oggetto viene considerato come un'ora locale e la conversione viene eseguita come se <xref:System.DateTime.Kind%2A> erano <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Il <xref:System.DateTime.ToUniversalTime%2A> metodo converte una <xref:System.DateTime> valore dall'ora locale in ora UTC. Per convertire l'ora in un fuso orario non locale in ora UTC, usare il <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (metodo). Per convertire un'ora il cui offset rispetto all'ora UTC è noto, usare il <xref:System.DateTimeOffset.ToUniversalTime%2A> (metodo).  
  
 Se il valore dell'istanza di data e ora è un'ora ambigua, questo metodo presuppone che si tratti di un'ora solare. (Un'ora ambigua è uno che è possibile eseguire il mapping a un'ora solare o a un'ora legale nel fuso orario locale) Se il valore dell'istanza di data e ora è un'ora non valida, il metodo sottrae semplicemente l'ora locale rispetto all'ora UTC del fuso orario locale offset per restituire l'ora UTC. (Un'ora non valida è uno che non esiste a causa dell'applicazione delle regole di regolazione dell'ora legale).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToUniversalTime%2A> (metodo).  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come il <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToUniversalTime" /> metodo talvolta viene utilizzato per convertire un'ora locale in ora UTC. Il <see cref="M:System.DateTime.ToLocalTime" /> viene quindi chiamato il metodo per ripristinare l'ora locale originale. Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, i due valori di ora locale non sarà uguale. Per altre informazioni e un esempio, vedere il <see cref="M:System.DateTime.ToLocalTime" /> (metodo).  In [! I sistemi include[winxp](~/Includes/winxp-MD.MD)], il <see cref="M:System.DateTime.ToUniversalTime" /> metodo riconosce solo la regola di rettifica corrente per il fuso orario locale, che si applica a tutte le date, incluse le date di livello inferiore (vale a dire, le date precedenti alla data di inizio della regola di regolazione corrente). Le applicazioni in esecuzione in [! INCLUDE[winxp](~/Includes/winxp-MD.MD)] che richiedono sempre accurata data locale e i calcoli temporali devono risolvere questo comportamento usando il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare un <see cref="T:System.TimeZoneInfo" /> oggetto che corrisponde al fuso orario locale e la chiamata a relativo <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> (metodo).  Nell'esempio seguente viene illustrata la differenza tra il <see cref="M:System.DateTime.ToUniversalTime" /> e <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> metodi su una [! Sistema include[winxp](~/Includes/winxp-MD.MD)] negli Stati Uniti fuso orario Pacifico (Stati Uniti). I primi due chiamate al metodo, la regola di rettifica fuso orario corrente (che è verificato un errore in vigore nel 2007) si applicano a una data nel 2006. La regola di rettifica corrente fornisce la transizione all'ora legale della seconda domenica di marzo. la regola precedente, che era attivo nel 2006, fornito per la transizione all'ora legale si verifichi la prima domenica del mese di aprile. Solo la terza chiamata al metodo esegue in maniera accurata questa cronologiche conversione date e ore.  [! code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)] [! code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo è simile al <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> metodo, con la differenza che il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> metodo non genera un'eccezione se la conversione non riesce.  
  
 La stringa `s` analizzato usando le informazioni di formattazione corrente <xref:System.Globalization.DateTimeFormatInfo> oggetto, che viene fornito in modo implicito dalle impostazioni cultura del thread corrente.  
  
 Questo metodo prova a ignorare i dati non riconosciuti, se possibile e riempie manchino mese, giorno e anno informazioni con la data corrente. Se `s` contiene solo la data e non l'ora, questo metodo presuppone che l'ora è mezzanotte. Se `s` include un componente relativo alla data con anno a due cifre, viene convertito in un anno nel calendario corrente di cultura correnti in base al valore della <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> proprietà. Qualsiasi iniziali, interni o spazi vuoti finali in `s` viene ignorato. Data e ora possono essere racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ('#', U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (u+0000).  
  
 Poiché il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo tenta di analizzare la rappresentazione di stringa di una data e ora usando le regole di formattazione delle impostazioni cultura correnti, il tentativo di analizzare una stringa determinata tra diverse impostazioni cultura può restituire risultati diversi o esito negativo. Se un determinato formato data e ora viene analizzati in impostazioni locali diverse, usare il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo o uno degli overload del <xref:System.DateTime.TryParseExact%2A> metodo e fornire un identificatore di formato.  
  
 Se `s` è la rappresentazione di stringa di un giorno intercalare in un anno bisestile nel calendario corrente, analizza il metodo `s` correttamente. Se `s` è la rappresentazione di stringa di un giorno intercalare in un non-anno bisestile nel calendario corrente di cultura correnti, l'operazione di analisi ha esito negativo e restituisce il metodo `false`.  
  
 Se `s` non contiene alcuna informazione, fuso orario `result` contiene una <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> quando restituito dal metodo. Se la stringa da analizzare contiene informazioni sul fuso orario, `result` contiene un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> quando restituito dal metodo.  
  
   
  
## Examples  
 L'esempio seguente passa un numero di stringhe di data e ora per il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> (metodo).  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>La formattazione è influenzata dalle proprietà dell'oggetto corrente <see cref="T:System.Globalization.DateTimeFormatInfo" /> oggetto, che per impostazione predefinita sono derivati dalla * * elemento Regional and Language opzioni * * nel Pannello di controllo. Il <see cref="Overload:System.DateTime.TryParse" /> metodo può non riuscire in modo imprevisto e restituire <see langword="False" /> se l'oggetto corrente <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> proprietà vengono impostate sullo stesso valore.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if the <c>s</c> parameter is <see langword="null" />, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza una stringa che può contenere informazioni sulla data, ora e fuso orario. È simile al <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo, con la differenza che il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo non genera un'eccezione se la conversione non riesce.  
  
 Questo metodo tenta di analisi e dati non riconosciuti ignorati `s` completamente. Se `s` contiene un'ora, ma nessuna data, il metodo sostituisce per impostazione predefinita la data corrente oppure, se `styles` include le <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> flag, sostituisce `DateTime.Date.MinValue`. Se `s` contiene una data ma non l'ora, 12.00 mezzanotte viene utilizzata come il tempo predefinito. Se è presente una data, ma il componente anno è costituito da due sole cifre, viene convertito in un anno nel `provider` calendario corrente del parametro in base al valore della <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> proprietà. Qualsiasi, inner join, caratteri iniziali o finali spazi vuoti in `s` vengono ignorati. Data e ora possono essere racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ('#', U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (u+0000).  
  
 Specifici formati validi per date e gli elementi di tempo, nonché i nomi e i simboli utilizzati per date e ore, vengono definiti dal `provider` parametro, che può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura di cui formattazione verrà usata nel `s` parametro. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione usata in `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce la formattazione usata in `s`.  
  
-   Implementazione personalizzata di <xref:System.IFormatProvider>. Relativi <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> che definisce la formattazione usata in `s`.  
  
 Se `provider` è `null`, verranno usate le impostazioni cultura correnti.  
  
 Se `s` è la rappresentazione di stringa di un giorno intercalare in un anno bisestile nel calendario corrente, analizza il metodo `s` correttamente. Se `s` è la rappresentazione di stringa di un giorno intercalare in un non-anno bisestile nel calendario corrente del `provider`, l'operazione di analisi ha esito negativo e restituisce il metodo `false`.  
  
 Il `styles` parametro definisce l'interpretazione esatta della stringa analizzata e modo in cui l'operazione di analisi deve gestirlo. Può essere uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione, come descritto nella tabella seguente.  
  
|Membro DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Anche se valido, questo valore viene ignorato. Lo spazio vuoto interno è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Anche se valido, questo valore viene ignorato. Lo spazio vuoto iniziale è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Anche se valido, questo valore viene ignorato. Lo spazio vuoto finale è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti finali. Comportamento predefinito. Impossibile eseguire l'override fornendo una più restrittiva <xref:System.Globalization.DateTimeStyles> valore dell'enumerazione, ad esempio <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone per rappresentare l'ora UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Anche se valido, questo valore viene ignorato.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione di una stringa di data e ora in un <xref:System.DateTime> valore con relativo <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In genere, tale stringa viene creato chiamando il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo usando identificatori di formato standard "o", "r" o "u".|  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a meno che un `styles` flag indica in caso contrario. Se `s` include fuso orario o informazioni relative alla differenza fuso orario, il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo esegue tutte le conversioni temporali necessarie e restituisce uno dei seguenti:  
  
-   Oggetto <xref:System.DateTime> la cui data e ora riflette l'ora locale e il cui valore <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   In alternativa, se `styles` include le <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag, un <xref:System.DateTime> valore la cui data e ora riflette ora UTC e la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Questo comportamento può essere sottoposto a override utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag.  
  
## <a name="parsing-custom-cultures"></a>Analisi delle lingue personalizzate  
 Se si analizza una stringa di data e ora per impostazioni cultura personalizzate generata, usare il <xref:System.DateTime.TryParseExact%2A> invece del metodo di <xref:System.DateTime.TryParse%2A> metodo per migliorare la probabilità che l'operazione di analisi abbia esito positivo. Può essere una stringa di data e ora di impostazioni cultura personalizzate complicate e difficili da analizzare. Il <xref:System.DateTime.TryParse%2A> metodo tenta di analizzare una stringa con diversi modelli di analisi impliciti, ognuno dei quali potrebbero non riuscire. Al contrario, il <xref:System.DateTime.TryParseExact%2A> metodo richiede all'utente di impostare in modo esplicito uno o più modelli di analisi che sono probabile che abbia esito positivo.  
  
 Per altre informazioni sulle impostazioni cultura personalizzate, vedere il <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (metodo).  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> is a neutral culture and cannot be used in a parsing operation.</exception>
        <block subset="none" type="usage">
          <para>La formattazione è influenzata dalle proprietà dell'oggetto corrente <see cref="T:System.Globalization.DateTimeFormatInfo" /> oggetto, che viene fornito dal <paramref name="provider" /> parametro. Il <see cref="Overload:System.DateTime.TryParse" /> metodo può non riuscire in modo imprevisto e restituire <see langword="False" /> se l'oggetto corrente <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> proprietà vengono impostate sullo stesso valore.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent. The format of the string representation must match a specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string containing a date and time to convert.</param>
        <param name="format">The required format of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific formatting information about <c>s</c>.</param>
        <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <c>s</c>.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <c>s</c> or <c>format</c> parameter is <see langword="null" />, is an empty string, or does not contain a date and time that correspond to the pattern specified in <c>format</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere nel formato definito per il `format` parametro. È simile al <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo, con la differenza che il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo non genera un'eccezione se la conversione non riesce.  
  
 Il `s` parametro contiene la data e ora per analizzare e deve essere in un formato definito dal `format` parametro. Se sono presenti in elementi di data, ora e fuso orario `s`, è anche necessario specificarle nell'ordine specificato dalla `format`. Se `format` definisce una data senza alcun elemento tempo e l'analisi operazione ha esito positivo, l'oggetto risultante <xref:System.DateTime> valore dispone di un'ora dalla mezzanotte (00: 00:00). Se `format` definisce un'ora senza alcun elemento di data e l'analisi operazione ha esito positivo, l'oggetto risultante <xref:System.DateTime> valore per impostazione predefinita con una data di `DateTime.Now.Date`, o la data del `DateTime.MinValue.Date` se `styles` include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag. Il `style` parametro determina se il `s` parametro può contenere i caratteri spazi vuoti iniziali, interna o finali.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s' contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag di non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `format` parametro contiene un modello che corrisponde al formato previsto del `s` parametro. Il modello nel `format` parametro è costituito da uno o più identificatori di formato personalizzati i [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizza i separatori di data o ora in un modello di formato personalizzato, usare la lingua inglese per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
> [!NOTE]
>  Invece di richiedere che `s` conformi a un singolo formato per l'operazione di analisi abbia esito positivo, è possibile chiamare il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (metodo) e specificare più formati consentiti. In questo modo l'operazione di analisi più probabile che abbia esito positivo.  
  
 La data e i simboli di tempo e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) usate nelle `s` sono definiti dal `provider` parametro, perché è il formato esatto di `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Una classe personalizzata <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o il <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.CultureInfo> viene usato l'oggetto che corrisponde alla lingua corrente.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determina se e in cui lo spazio vuoto non è definito dal `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> (metodo).  
  
|Membro DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi singola data o un elemento relativo all'ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio del `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti non è definiti da finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone per rappresentare l'ora UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni relative alla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro analizzato usando i valori predefiniti. Nessun spazio vuoto diverso dal quello presente in `format` è consentito. Se `s` non dispone di un componente relativo alla data, la data del valore restituito <xref:System.DateTime> valore è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se è presente nelle informazioni sul fuso orario `s`, l'ora viene convertita nell'ora locale e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione in un <xref:System.DateTime> valore con relativo <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag è principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (metodo). Si noti che la stringa "5/01/2009 8:30" non può essere analizzato correttamente quando la `styles` parametro è uguale a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> perché non sono consentiti gli spazi iniziali da `format`. Inoltre, la stringa "5/01/2009 GMT+09.00" non può essere analizzato correttamente con un `format` di "MM/GG/yyyyhh:mm" perché la stringa di data non precede il numero di mesi con uno zero iniziale, come `format` richiede.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v40_short](~/Includes/NET-v40-short-MD.MD)], il <see cref="Overload:System.DateTime.TryParseExact" /> restituzione del metodo <see langword="false" /> se la stringa da analizzare include un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [! INCLUDE[net_v35_short](~/Includes/NET-v35-short-MD.MD)] e le versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles *  -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that contains a date and time to convert.</param>
        <param name="formats">An array of allowable formats of <c>s</c>.</param>
        <param name="provider">An object that supplies culture-specific format information about <c>s</c>.</param>
        <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <c>s</c>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <c>s</c> or <c>formats</c> is <see langword="null" />, <c>s</c> or an element of <c>formats</c> is an empty string, or the format of <c>s</c> is not exactly as specified by at least one of the format patterns in <c>formats</c>. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data che corrisponde a uno dei modelli assegnati per il `formats` parametro. È, ad esempio il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo, ad eccezione di <xref:System.DateTime.TryParseExact%2A> metodo non genera un'eccezione se la conversione non riesce.  
  
 Il `s` parametro contiene la data e ora da analizzare. Se il `s` parametro contiene solo una volta e non una data, la data corrente viene usata, a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene usato. Se il `s` parametro non contiene solo la data e ora, mezzanotte (00: 00:00) viene usato. Il `style` parametro determina inoltre se il `s` parametro può contenere leader, spazi vuoti interni o finali caratteri diversi da quelli consentiti da una delle stringhe di formato in `formats`.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, o utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s' contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato usando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag di non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `formats` parametro contiene una matrice di criteri, uno dei quali `s` deve corrispondere esattamente se l'operazione di analisi abbia esito positivo. I modelli nel `formats` parametro è costituito da uno o più identificatori di formato personalizzati il [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizza i separatori di data o ora in un modello di formato personalizzato, usare la lingua inglese per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 La data e i simboli di tempo e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) usate nelle `s` sono definiti dal `provider` parametro, perché è il formato esatto di `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Una classe personalizzata <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o il <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` viene `null`, il <xref:System.Globalization.CultureInfo> viene usato l'oggetto che corrisponde alla lingua corrente.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determina se e in cui lo spazio vuoto non è definito dal `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> (metodo).  
  
|Membro DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, oppure se `s` non contiene alcuna informazione di fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, le chiamate <xref:System.DateTime.ToUniversalTime%2A> convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, oppure se `s` non contiene informazioni sul fuso orario, ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario sull'oggetto restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha alcun effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi singola data o un elemento relativo all'ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio del `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti non è definiti da finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone per rappresentare l'ora UTC. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC in ora locale e imposta relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni relative alla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro analizzato usando i valori predefiniti. Nessun spazio vuoto diverso dal quello presente in `format` è consentito. Se `s` non dispone di un componente relativo alla data, la data del valore restituito <xref:System.DateTime> valore è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se è presente nelle informazioni sul fuso orario `s`, l'ora viene convertita nell'ora locale e il <xref:System.DateTime.Kind%2A> proprietà del valore restituito <xref:System.DateTime> è impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, prova a impedire la conversione in un <xref:System.DateTime> valore con relativo <xref:System.DateTime.Kind%2A> impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag è principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo per garantire che una stringa in un numero di possibili formati può essere analizzata correttamente.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  -or-  <paramref name="styles" /> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
        <block subset="none" type="usage">
          <para>Nel [! INCLUDE[net_v40_short](~/Includes/NET-v40-short-MD.MD)], il <see cref="Overload:System.DateTime.TryParseExact" /> restituzione del metodo <see langword="false" /> se la stringa da analizzare include un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [! INCLUDE[net_v35_short](~/Includes/NET-v35-short-MD.MD)] e le versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        <value>Oggetto il cui valore corrisponde alla data e all'ora UTC correnti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La risoluzione di questa proprietà dipende dal timer di sistema, che dipende dal sistema operativo sottostante. Tende a essere compresa tra 0,5 e 15 millisecondi.

 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> la cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Un'alternativa all'uso <xref:System.DateTime.UtcNow%2A> è <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Mentre il primo indica che un valore di data e ora Coordinated Universal Time (UTC) assegnando <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> al relativo <xref:System.DateTime.Kind%2A> proprietà, quest'ultimo assegna la data e offset dell'ora valore UTC ora (uguale a <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come il <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by this instance.</summary>
        <value>Anno, compreso fra 1 e 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Year%2A> proprietà restituisce l'anno dell'istanza corrente del calendario gregoriano. Non viene restituito il valore dell'anno utilizzando il calendario predefinito delle impostazioni cultura correnti. Per recuperare il valore dell'anno utilizzando un determinato calendario, è possibile chiamare tale calendario `GetYear` metodo, come illustrato nel codice seguente.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Year%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>