<Type Name="DateTime" FullName="System.DateTime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0e0f91e3e6e3eea5c50028b600eadc103187a955" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731465" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Rappresenta un istante di tempo, in genere espresso come data e ora del giorno.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## <a name="quick-links-to-example-code"></a>Collegamenti rapidi a codice di esempio

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

In questo articolo include diversi esempi che utilizzano il `DateTime` tipo:

**Esempi di inizializzazione**      
 [Richiamare un costruttore](#initialization-01)     
 [Richiamare il costruttore predefinito implicito](#initialization-02)     
 [Assegnazione dal valore restituito](#initialization-03)     
 [Analisi di una stringa che rappresenta una data e ora](#initialization-04)     
 [Sintassi di Visual Basic per inizializzare una data e ora](#initialization-05)     

**Formattazione `DateTime` oggetti come stringhe**  
 [Utilizzare il formato di ora predefinito Data](#formatting-01)     
 [Formattare una data e ora usando impostazioni cultura](#formatting-02)     
 [Formattare una data ora utilizzando una stringa di formato standard o personalizzato](#formatting-03)     
 [Specificare una stringa di formato e impostazioni cultura specifiche](#formatting-04)     
 [Formattare una data ora utilizzando lo standard ISO 8601 per i servizi web](#formatting-05)     

**Analisi di stringhe come `DateTime` oggetti**  
 [Utilizzare `Parse` o `TryParse` per convertire una stringa in una data e ora](#parsing-01)     
 [Utilizzare `ParseExact` o `TryParseExact` per convertire una stringa in un formato noto](#parsing-02)     
 [Convertire la rappresentazione di stringa ISO 8601 una data e ora](#parsing-03)     

**`DateTime` Risoluzione**  
 [Esplorare la risoluzione dei valori di data e ora](#resolution-01)     
 [Confrontare l'uguaglianza all'interno di una certa tolleranza](#comparison-01)     

**Impostazioni cultura e i calendari**  
 [Visualizzare i valori di data e ora utilizzando i calendari specifici delle impostazioni cultura](#calendars-01)     
 [Analizzare le stringhe in base a un calendario specifico delle impostazioni cultura](#calendars-02)     
 [Inizializzare una data e ora di calendario di impostazioni di cultura specifiche](#calendars-03)     
 [L'accesso alle proprietà di data e ora di calendario di impostazioni di cultura specifiche](#calendars-04)     
 [Recuperare la settimana dell'anno utilizzando calendari specifici delle impostazioni cultura](#calendars-05)     

**Persistenza**  
 [Persistenza dei valori di data e ora come stringhe nel fuso orario locale](#persistence-01)     
 [Rendere persistenti i valori di data e ora come stringhe in delle impostazioni cultura invariante formato ora](#persistence-02)     
 [Persistenza dei valori di data e ora come numeri interi](#persistence-03)     
 [Mantenimento di data e ora i valori usando il `XmlSerializer`](#persistence-04)     
 [Mantenimento di data e ora i valori usando il `BinaryFormatter`](#persistence-05)     
 [Persistenza dei valori di data e ora con dati del fuso orario](#persistence-06)     

## <a name="quick-links-to-remarks-topics"></a>Collegamenti agli argomenti la sezione Osservazioni.

In questa sezione contiene argomenti per molti utilizzi comuni del `DateTime` struct:
  
 [Inizializzazione di un `DateTime` oggetto](#initializing-a-datetime-object)   
 [I valori DateTime e le relative rappresentazioni di stringa](#datetime-values-and-their-string-representations)   
 [Analisi dei valori di data/ora da stringhe](#parsing-datetime-values-from-strings)   
 [Valori DateTime](#datetime-values)   
 [Operazioni di data/ora](#datetime-operations)   
 [Risoluzione di DateTime](#datetime-resolution)   
 [Calendari e i valori DateTime](#datetime-values-and-calendars)   
 [Persistenza dei valori DateTime](#persisting-datetime-values)   
 [Visual Studio di DateTime. TimeSpan](#datetime-vs-timespan)   
 [Confrontare l'uguaglianza nei limiti di tolleranza](#comparing-for-equality-within-tolerance) [considerazioni sull'interoperabilità COM](#com-interop-considerations)  
   
Il <xref:System.DateTime> tipo di valore rappresenta le date e ore con valori compresi tra 00:00:00 (mezzanotte), il 1 ° gennaio, 0001 DC (era cristiana) a 11:59:59 PM, 31 dicembre 9999 D.C. (C.E.) nel calendario gregoriano.  
  
I valori di ora vengono misurati in unità di 100 nanosecondi denominate segni di graduazione. Una determinata data è il numero di tick trascorsi dalla mezzanotte 12:00 del 1 gennaio 0001 D.C. (C.E.) nel <xref:System.Globalization.GregorianCalendar> calendario. Sono escluse segni di graduazione che sarebbero aggiunti dai secondi di compensazione. Ad esempio, il valore di segni di graduazione 31241376000000000L rappresenta la data venerdì 01 gennaio 0100 mezzanotte (12:00:00). Oggetto <xref:System.DateTime> valore è espresso sempre nel contesto di esplicita o calendario predefinito.  
  
> [!NOTE]
>  Se si lavora con un valore di segni di graduazione che si desidera convertire in altro intervallo di tempo, ad esempio minuti o secondi, è necessario utilizzare il <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>, o <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> (costante) per eseguire la conversione. Ad esempio, per aggiungere il numero di secondi rappresentato da un numero specificato di tick per le <xref:System.DateTime.Second%2A> componente di un <xref:System.DateTime> valore, è possibile utilizzare l'espressione `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  

È possibile visualizzare l'origine per l'intero set di esempi in questo articolo in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) dal repository di documenti su GitHub.

> [!NOTE]
>  Un'alternativa per il <xref:System.DateTime> struttura per l'utilizzo di valori di data e ora in particolare fuso orario è il <xref:System.DateTimeOffset> struttura. Il <xref:System.DateTimeOffset> struttura archivia le informazioni di data e ora in una privata <xref:System.DateTime> campo e il numero di minuti che data e l'ora rispetto all'ora UTC in un privato <xref:System.Int16> campo. Ciò rende possibile un <xref:System.DateTimeOffset> valore in modo da riflettere il tempo in un particolare fuso orario, mentre un <xref:System.DateTime> valore in modo non ambiguo può riflettere solo l'ora UTC e del fuso orario locale. Per una discussione sull'utilizzo di <xref:System.DateTime> struttura o <xref:System.DateTimeOffset> struttura quando si lavora con valori di data e ora, vedere [scelta tra DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md).  
  
### <a name="initializing-a-datetime-object"></a>Inizializzazione di un oggetto DateTime  

È possibile assegnare un valore iniziale a un nuovo `DateTime` valore in molti modi diversi:

- Chiamare un costruttore, dei due in cui specificare argomenti per i valori, oppure utilizzare il costruttore predefinito implicito.
- L'assegnazione di un `DateTime` al valore restituito di una proprietà o metodo.
- L'analisi di un `DateTime` valore dalla relativa rappresentazione di stringa.
- Utilizzando le funzionalità specifiche del linguaggio Visual Basic per creare un'istanza di un `DateTime`. 

Frammenti di codice seguenti mostrano esempi di ogni:

#### <a name="invoke-constructors"></a>Richiamare i costruttori

Chiamare uno degli overload di <xref:System.DateTime> costruttore che specifica gli elementi del valore di data e ora (ad esempio l'anno, mese e giorno o il numero di tick). Il codice seguente crea una data specifica utilizzando il <xref:System.DateTime> costruttore che specifica l'anno, mese, giorno, ora, minuto e secondo.  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp-interactive[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

Si richiama il `DateTime` il costruttore predefinito implicito della struttura quando si desidera un `DateTime` inizializzata sul valore predefinito. (Per informazioni dettagliate sul costruttore predefinito implicito di un tipo di valore, vedere [tipi di valore](~/docs/csharp/language-reference/keywords/value-types.md).) Alcuni compilatori supportano anche la dichiarazione di un <xref:System.DateTime> valore senza assegnarle un valore in modo esplicito. La creazione di un valore senza un'inizializzazione esplicita anche comporta il valore predefinito. Nell'esempio seguente viene illustrato il <xref:System.DateTime> il costruttore predefinito implicito in c# e Visual Basic, nonché una <xref:System.DateTime> dichiarazione senza assegnazione in Visual Basic.  

<a name="initialization-02"></a> [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#5)]  
[!code-csharp-interactive[System.DateTime.Instantiation#5](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#5)]
    
#### <a name="assigning-a-computed-value"></a>L'assegnazione di un valore calcolato

È possibile assegnare il <xref:System.DateTime> un valore di data e ora restituito da una proprietà o metodo dell'oggetto. L'esempio seguente assegna la data corrente e ora, la data corrente (UTC) Coordinated Universal Time e ora e la data corrente a tre nuovi <xref:System.DateTime> variabili.  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>Analisi di una stringa che rappresenta un valore DateTime

Il <xref:System.DateTime.Parse%2A>, <xref:System.DateTime.ParseExact%2A>, <xref:System.DateTime.TryParse%2A>, e <xref:System.DateTime.TryParseExact%2A> tutti i metodi di convertono una stringa per il relativo equivalente valore data e ora. L'esempio seguente usa il <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> metodi per analizzare una stringa e convertirla in un <xref:System.DateTime> valore. Il secondo formato viene utilizzato un formato supportato dal [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) standard per una data e l'ora in formato stringa che rappresenta. Questa rappresentazione standard viene spesso utilizzata per trasferire le informazioni di data nei servizi web.

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

Il <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> indicano se una stringa è una rappresentazione valida di un <xref:System.DateTime> valore e, in caso affermativo, esegue la conversione.  

#### <a name="language-specific-syntax-for-visual-basic"></a>Sintassi specifica del linguaggio per Visual Basic

Inizializza una nuova istruzione Visual Basic seguente <xref:System.DateTime> valore.  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>I valori DateTime e le relative rappresentazioni di stringa  

Internamente, tutti <xref:System.DateTime> i valori sono rappresentati come il numero di tick (il numero di intervalli da 100 nanosecondi) che sono trascorsi dalla mezzanotte 12:00:00 del 1 ° gennaio 0001. L'effettivo <xref:System.DateTime> valore è indipendente dalla modalità in cui tale valore viene visualizzato quando visualizzata. L'aspetto di un <xref:System.DateTime> valore è il risultato di un'operazione di formattazione che converte un valore nella relativa rappresentazione di stringa.  
  
L'aspetto dei valori di data e ora è dipendente da impostazioni cultura, gli standard internazionali, requisiti dell'applicazione e le preferenze personali. Il <xref:System.DateTime> struttura offre flessibilità nella formattazione di valori di data e ora tramite gli overload del <xref:System.DateTime.ToString%2A>. Il valore predefinito <xref:System.DateTime.ToString?displayProperty=nameWithType> metodo restituisce la rappresentazione di stringa di un valore di data e ora utilizzando le impostazioni cultura correnti data breve e ora estesa. L'esempio seguente usa il valore predefinito <xref:System.DateTime.ToString?displayProperty=nameWithType> metodo. Visualizza la data e l'utilizzo di data breve e ora estesa per le impostazioni cultura correnti. Le impostazioni cultura en-US sono le impostazioni cultura correnti del computer in cui è stato eseguito l'esempio.  
  
<a name="formatting-01"></a> [!code-csharp-interactive[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

Potrebbe essere necessario formattare le date in una lingua specifica per supportare scenari web in cui il server potrebbe essere in una lingua diversa dal client. Specificare la classe delle impostazioni cultura utilizzando il <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> metodo per creare il modello di data breve e la rappresentazione di tempo in una lingua specifica. L'esempio seguente usa il <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> per visualizzare la data e ora utilizzando il modello di data breve e ora estesa per le impostazioni cultura fr-FR.  
  
<a name="formatting-02"></a> [!code-csharp-interactive[System.DateTime.Formatting#2](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#2)]
[!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#2)]  

 Altre applicazioni potrebbero richiedere diverse rappresentazioni di stringa di una data. Il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo restituisce la rappresentazione di stringa definita da un identificatore di formato standard o personalizzato utilizzando le convenzioni di formattazione delle impostazioni cultura correnti. L'esempio seguente usa il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo per visualizzare la completa modello di data e ora per en-US impostazioni cultura, le impostazioni cultura correnti del computer in cui è stato eseguito l'esempio.  
  
<a name="formatting-03"></a> [!code-csharp-interactive[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 Infine, è possibile specificare le impostazioni cultura e il formato tramite il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo. L'esempio seguente usa il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo per visualizzare la completa modello di data e ora per le impostazioni cultura fr-FR.  

<a name="formatting-04"></a> [!code-csharp-interactive[System.DateTime.Formatting#4](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#4)]
[!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#4)]  

Il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> overload anche utilizzabile con una stringa di formato personalizzata per specificare altri formati. Nell'esempio seguente viene illustrato come formattare una stringa usando il [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato standard utilizzata spesso per servizi web. Il formato Iso 8601 non dispone di una stringa di formato standard corrispondente.

<a name="formatting05"></a> [!code-csharp-interactive[System.DateTime.Formatting#5](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#5)]
[!code-vb[System.DateTime.Formatting#5](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#5)]  

Per ulteriori informazioni sulla formattazione <xref:System.DateTime> valori, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  

### <a name="parsing-datetime-values-from-strings"></a>Analisi dei valori di data/ora da stringhe

L'analisi converte la rappresentazione di stringa di data e ora per un <xref:System.DateTime> valore. In genere, le stringhe di data e ora hanno due diversi utilizzi nelle applicazioni:  
  
-   Data e ora accetta una varietà di forme e riflette le convenzioni delle impostazioni cultura correnti o impostazioni cultura specifiche. Ad esempio, un'applicazione consente a un utente con le impostazioni cultura corrente sono en-US per immettere un valore di data "15/12/2013" o "15 dicembre 2013". Consente a un utente cui impostazioni cultura correnti è en-gb a un valore di data di input come "15/12/2013" o "15 dicembre 2013."  
  
-   Data e ora è rappresentato in un formato predefinito. Ad esempio, un'applicazione serializza una data come "20130103" indipendentemente dalle impostazioni cultura in cui viene eseguita l'app. Un'applicazione può richiedere le date come input nel formato di data breve della lingua corrente.
  
Utilizzare il <xref:System.DateTime.Parse%2A> o <xref:System.DateTime.TryParse%2A> metodo per convertire una stringa da uno dei formati comuni di data e ora per impostazioni cultura per un <xref:System.DateTime> valore. Nell'esempio seguente viene illustrato come utilizzare <xref:System.DateTime.TryParse%2A> per convertire le stringhe di data in diversi formati specifici delle impostazioni cultura per un <xref:System.DateTime> valore. Modifica le impostazioni cultura correnti per inglese (Regno Unito) e chiama il <xref:System.DateTime.GetDateTimeFormats> metodo per generare una matrice di stringhe di data e ora. Passa quindi a ogni elemento nella matrice di <xref:System.DateTime.TryParse%2A> metodo. L'output dell'esempio mostra che il metodo di analisi è stata in grado di convertire ogni le specifiche delle impostazioni cultura stringhe data e ora.  
  
<a name="parsing-01"></a> [!code-csharp-interactive[System.DateTime.Parsing#1](~/samples/snippets/csharp/System.DateTime/Parsing.cs#1)]
[!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#1)]  

Utilizzare il <xref:System.DateTime.ParseExact%2A> e <xref:System.DateTime.TryParseExact%2A> metodi per convertire una stringa che deve corrispondere a un particolare formato o formati da un <xref:System.DateTime> valore. Specificare uno o più stringhe di formato data e ora come parametro al metodo di analisi. L'esempio seguente usa il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo per convertire le stringhe che devono essere in un formato "aaaammgg" o un formato "HHmmss" <xref:System.DateTime> valori.  
  
<a name="parsing-02"></a> [!code-csharp-interactive[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

Un utilizzo comune per <xref:System.DateTime.ParseExact%2A> consiste nel convertire una rappresentazione di stringa di un servizio web, in genere [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) formato standard. Il codice seguente mostra la stringa di formato corretto da utilizzare:

<a name="parsing-03"></a> [!code-csharp-interactive[System.DateTime.Parsing#3](~/samples/snippets/csharp/System.DateTime/Parsing.cs#3)]
[!code-vb[System.DateTime.Parsing#3](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#3)]  

Se una stringa non può essere analizzata, il <xref:System.DateTime.Parse%2A> e <xref:System.DateTime.ParseExact%2A> metodi generano un'eccezione. Il <xref:System.DateTime.TryParse%2A> e <xref:System.DateTime.TryParseExact%2A> i metodi restituiscono un <xref:System.Boolean> valore che indica se la conversione ha avuto esito positivo o negativo. È consigliabile utilizzare il <xref:System.DateTime.TryParse%2A> o <xref:System.DateTime.TryParseExact%2A> metodi negli scenari in cui le prestazioni sono importanti. L'operazione di analisi delle stringhe di data e ora tenderà ad avere una frequenza elevata di errore e la gestione delle eccezioni è dispendiosa. Utilizzare questi metodi se le stringhe di input da parte degli utenti o provenienti da un'origine sconosciuta. 
  
Per ulteriori informazioni sull'analisi dei valori di data e ora, vedere [l'analisi di stringhe di data e ora](~/docs/standard/base-types/parsing-datetime.md).  

### <a name="datetime-values"></a>Valori DateTime

Le descrizioni dei valori ora il <xref:System.DateTime> tipo sono spesso espressi utilizzando lo standard Coordinated Universal Time (UTC). Ora è il nome riconosciuto a livello internazionale per ora di Greenwich (GMT). Ora UTC è ora misurata longitudine zero gradi, il punto di origine UTC. L'ora legale non è applicabile in formato UTC.  
  
Ora locale è relativo a un particolare fuso orario. Un fuso orario è associato a una differenza di fuso orario. Una differenza di fuso orario è lo spostamento del fuso orario espresso in ore dal punto di origine UTC. Inoltre, ora locale, facoltativamente, è interessata dall'ora legale, che aggiunge o sottrae una regolazione di intervallo di tempo. Ora locale viene calcolata sommando l'offset del fuso orario UTC e la regolazione dell'ora legale se necessario. La differenza di fuso orario nel punto di origine UTC è zero.  
  
Ora UTC è adatto per i calcoli, confronti e l'archiviazione di date e ora nei file. Ora locale è appropriata per la visualizzazione nelle interfacce utente delle applicazioni desktop. Le applicazioni di fuso orario (ad esempio, molte applicazioni Web) devono anche con un numero di altri fusi orari di lavoro.  
  
Se il <xref:System.DateTime.Kind%2A> proprietà di un <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, non viene specificato se l'ora rappresentata è ora locale, ora UTC o un'ora in un fuso orario diverso.  

### <a name="datetime-resolution"></a>Risoluzione di DateTime
  
> [!NOTE]
>  In alternativa all'esecuzione di una data e ora operazioni aritmetica sul <xref:System.DateTime> valori per misurare il tempo trascorso, è possibile utilizzare il <xref:System.Diagnostics.Stopwatch> classe.  
  
Il <xref:System.DateTime.Ticks%2A> proprietà esprime i valori di data e ora in unità di un decimilionesimo di secondo. Il <xref:System.DateTime.Millisecond%2A> restituirà i millesimi di secondo in un valore di data e ora. Con chiamate ripetute al <xref:System.DateTime.Now%2A?displayProperty=nameWithType> proprietà per misurare il tempo trascorso è dipendente dal clock di sistema. L'orologio di sistema nei sistemi Windows 7 e Windows 8 con una risoluzione di circa 15 millisecondi. Questa soluzione interessa gli intervalli di tempo piccola minore di 100 millisecondi. 
  
Nell'esempio seguente viene illustrata la dipendenza della data corrente e i valori di ora alla risoluzione del clock di sistema. Nell'esempio, un ciclo esterno si ripete 20 volte, e un ciclo interno che consente di ritardare il ciclo esterno. Se il valore del contatore del ciclo esterno è 10, una chiamata al <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> metodo introduce un ritardo di cinque millisecondi. L'esempio seguente mostra il numero di millisecondi restituiti dal `DateTime.Now.Milliseconds` le modifiche alle proprietà solo dopo la chiamata a <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>.  

<a name="resolution-01"></a> [!code-csharp-interactive[System.DateTime.Resolution#1](~/samples/snippets/csharp/System.DateTime/Resolution.cs#1)]
[!code-vb[System.DateTime.Resolution#1](~/samples/snippets/visualbasic/System.DateTime/Resolution.vb#1)]  

### <a name="datetime-operations"></a>Operazioni di data/ora  

Un calcolo eseguito utilizzando un <xref:System.DateTime> struttura, ad esempio <xref:System.DateTime.Add%2A> o <xref:System.DateTime.Subtract%2A>, non modificare il valore della struttura. Al contrario, il calcolo restituisce un nuovo <xref:System.DateTime> struttura il cui valore è il risultato del calcolo.  
  
Operazioni di conversione tra fusi orari (ad esempio tra l'ora UTC e l'ora locale, o tra un fuso orario) all'ora legale di prendere in considerazione, ma non eseguire operazioni aritmetiche e di confronto.  
  
Il <xref:System.DateTime> struttura stessa offre un supporto limitato per la conversione da un fuso orario a un altro. È possibile utilizzare il <xref:System.DateTime.ToLocalTime%2A> metodo per convertire l'ora UTC in ora locale o si può usare il <xref:System.DateTime.ToUniversalTime%2A> metodo per convertire l'ora locale in ora UTC. È tuttavia disponibile in un set completo di metodi di conversione di fuso orario di <xref:System.TimeZoneInfo> classe. Convertire l'ora in uno dei fusi orari del mondo nell'ora di qualsiasi altro fuso orario mediante questi metodi.  
  
I calcoli e i confronti di <xref:System.DateTime> gli oggetti sono significativi solo se gli oggetti rappresentano orari dello stesso fuso orario. È possibile utilizzare un <xref:System.TimeZoneInfo> oggetto per rappresentare un <xref:System.DateTime> fuso orario del valore, anche se i due ad accoppiamento debole. Oggetto <xref:System.DateTime> oggetto non ha una proprietà che restituisce un oggetto che rappresenta fuso orario il valore data e ora del. Il <xref:System.DateTime.Kind%2A> proprietà indica se un `DateTime` rappresenta l'ora UTC, ora locale, o non è specificato. In un'applicazione di fuso orario, è necessario basarsi su un meccanismo esterno per determinare il fuso orario in cui un <xref:System.DateTime> oggetto è stato creato. È possibile utilizzare una struttura che esegue il wrapping di entrambe le <xref:System.DateTime> valore e <xref:System.TimeZoneInfo> oggetto che rappresenta il <xref:System.DateTime> fuso orario del valore. Per informazioni dettagliate sull'utilizzo di UTC nei calcoli e i confronti con <xref:System.DateTime> valori, vedere [esecuzione di operazioni aritmetiche con date e ore](~/docs/standard/datetime/performing-arithmetic-operations.md).  
  
Ogni <xref:System.DateTime> membro utilizzato in modo implicito il calendario gregoriano per eseguire l'operazione. Le eccezioni sono i metodi che specificano in modo implicito un calendario. Sono inclusi i costruttori che specificano un calendario e i metodi con un parametro derivate da <xref:System.IFormatProvider>, ad esempio <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>.  
  
Le operazioni con i membri del <xref:System.DateTime> tipo prendere in considerazione i dettagli, ad esempio gli anni bisestili e il numero di giorni in un mese.  

## <a name="datetime-values-and-calendars"></a>Calendari e i valori DateTime  

Libreria di classi .NET Framework include una serie di classi di calendario, derivate dalla <xref:System.Globalization.Calendar> classe.  Ad esempio:  
  
-   Classe <xref:System.Globalization.ChineseLunisolarCalendar>.  
-   Classe <xref:System.Globalization.EastAsianLunisolarCalendar>.  
-   Classe <xref:System.Globalization.GregorianCalendar>.  
-   Classe <xref:System.Globalization.HebrewCalendar>.  
-   Classe <xref:System.Globalization.HijriCalendar>.  
-   Classe <xref:System.Globalization.JapaneseCalendar>.  
-   Classe <xref:System.Globalization.JapaneseLunisolarCalendar>.  
-   Classe <xref:System.Globalization.JulianCalendar>.  
-   Classe <xref:System.Globalization.KoreanCalendar>.  
-   Classe <xref:System.Globalization.KoreanLunisolarCalendar>.  
-   Classe <xref:System.Globalization.PersianCalendar>.  
-   Classe <xref:System.Globalization.TaiwanCalendar>.  
-   Classe <xref:System.Globalization.TaiwanLunisolarCalendar>.  
-   Classe <xref:System.Globalization.ThaiBuddhistCalendar>.  
-   Classe <xref:System.Globalization.UmAlQuraCalendar>.  
  
Tutte le impostazioni cultura viene utilizzato un calendario predefinito definito per la proprietà di sola lettura <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> proprietà. Tutte le impostazioni cultura può supportare uno o più calendari definiti dal relativo di sola lettura <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> proprietà. Il calendario attualmente utilizzato da uno specifico <xref:System.Globalization.CultureInfo> oggetto è definito dal relativo <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà. Deve essere uno dei calendari, vedere il <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> matrice.  
  
Calendario corrente delle impostazioni cultura viene utilizzato in tutte le operazioni di formattazione per le impostazioni cultura. Ad esempio, il calendario predefinito delle impostazioni cultura buddista è il calendario buddista tailandese, in cui è rappresentato dalla <xref:System.Globalization.ThaiBuddhistCalendar> classe.  Quando un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura buddista viene utilizzato in una data e l'operazione di formattazione dell'ora, per impostazione predefinita viene utilizzato il calendario buddista Thai. Il calendario gregoriano viene utilizzato solo se le impostazioni cultura <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà viene modificata, come illustrato nell'esempio seguente:  

<a name="calendars-01"></a> [!code-csharp-interactive[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

Calendario corrente delle impostazioni cultura viene utilizzato anche in tutte le operazioni di analisi per le impostazioni cultura, come illustrato nell'esempio seguente.  
  
<a name="calendars-02"></a> [!code-csharp-interactive[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

Creare un <xref:System.DateTime> valore utilizzando gli elementi di data e ora (numero dell'anno, mese e giorno) di un calendario specifico chiamando un [costruttore DateTime](xref:System.DateTime.%23ctor%2A) che include un `calendar` parametro e passando un <xref:System.Globalization.CultureInfo.Calendar%2A>oggetto che rappresenta il calendario. L'esempio seguente usa gli elementi di data e ora dal <xref:System.Globalization.ThaiBuddhistCalendar> calendario.  
  
<a name="calendars-03"></a> [!code-csharp-interactive[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

<xref:System.DateTime> costruttori che non includono un `calendar` parametro si presuppone che gli elementi di data e ora sono espressi come unità nel calendario gregoriano.  
  
Tutti gli altri <xref:System.DateTime> proprietà e metodi utilizzano il calendario gregoriano. Ad esempio, il <xref:System.DateTime.Year%2A?displayProperty=nameWithType> proprietà restituisce l'anno del calendario gregoriano e <xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> metodo presuppone che il `year` parametro è un anno nel calendario gregoriano.  Ogni <xref:System.DateTime> membro che utilizza il calendario gregoriano dispone di un membro della <xref:System.Globalization.CultureInfo.Calendar%2A> classe che utilizza un calendario specifico. Ad esempio, il <xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> metodo restituisce l'anno in un calendario specifico e <xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> metodo interpreta il `year` parametro come un numero di anno in un calendario specifico. L'esempio seguente usa sia il <xref:System.DateTime> e i membri corrispondenti del <xref:System.Globalization.ThaiBuddhistCalendar> classe.  
  
<a name="calendars-04"></a> [!code-csharp-interactive[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

Il <xref:System.DateTime> struttura include un <xref:System.DateTime.DayOfWeek%2A> proprietà che restituisce il giorno della settimana del calendario gregoriano. Non include un membro che consente di recuperare il numero della settimana dell'anno. Per recuperare la settimana dell'anno, chiamare il calendario singoli <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> metodo. Nell'esempio seguente viene illustrato questo concetto.  
  
<a name="calendars-05"></a> [!code-csharp-interactive[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

Per ulteriori informazioni su date e calendari, vedere [utilizzo di calendari](~/docs/standard/datetime/working-with-calendars.md).  
  
### <a name="persisting-datetime-values"></a>Persistenza dei valori DateTime  

È possibile mantenere <xref:System.DateTime> i valori in quattro modi:  
  
-   Si [convertirli in stringhe](#persisting-values-as-strings) e rendere persistenti le stringhe.  
-   Si [convertiti in valori integer a 64 bit](#persisting-values-as-integers) (il valore della <xref:System.DateTime.Ticks%2A> proprietà) e rendere persistenti i numeri interi.  
-   Si [serializzare i valori DateTime](#serializing-dateTime-values).  
-   Si [serializzare i valori DateTime con informazioni sul fuso orario](#serializing-datetime-and-time-zone-data).  
  
È necessario assicurarsi che la routine che esegue il ripristino di <xref:System.DateTime> valori non perdita di dati o generare un'eccezione indipendentemente dalla tecnica prescelto. <xref:System.DateTime> i valori devono round trip. Ovvero, il valore originale e il valore ripristinato deve essere lo stesso. E se originale <xref:System.DateTime> valore rappresenta un istante di tempo, è necessario identificare nello stesso momento di tempo quando viene ripristinato.  
  
#### <a name="persisting-values-as-strings"></a>Persistenza dei valori come stringhe  

Per ripristinare correttamente <xref:System.DateTime> valori che vengono rese persistenti come stringhe, seguire queste regole:  
  
-   Apportare le stesse ipotesi sulle informazioni di formattazione specifiche delle impostazioni cultura quando si ripristina la stringa come quando si mantenuto. Per garantire che una stringa può essere ripristinata su un sistema le cui impostazioni cultura correnti è diversa dalle impostazioni cultura del sistema in cui è stato salvato, chiamare il <xref:System.DateTime.ToString%2A> overload per salvare la stringa usando le convenzioni delle impostazioni cultura invarianti. Chiamare il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> o <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> overload per ripristinare la stringa usando le convenzioni delle impostazioni cultura invarianti. Non utilizzare mai il <xref:System.DateTime.ToString>, <xref:System.DateTime.Parse%28System.String%29>, o <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> overload, che utilizza le convenzioni delle impostazioni cultura del thread corrente.  
  
-   Se la data rappresenta un singolo istante di tempo, assicurarsi che rappresenta il momento stesso in quando viene ripristinato, anche in un fuso orario diverso. Convertire il <xref:System.DateTime> valore Coordinated Universal Time (UTC) prima del salvataggio. È anche possibile serializzare il valore insieme a informazioni sul fuso orario. Per ulteriori informazioni, vedere [dati DateTime con la serializzazione e il fuso orario](#TimeZone).  
  
 L'errore più comune eseguita durante il salvataggio <xref:System.DateTime> valori come stringhe consiste nell'utilizzare le convenzioni di formattazione predefiniti delle impostazioni cultura correnti. Problemi se le impostazioni cultura correnti sono diversa durante il salvataggio e il ripristino delle stringhe. Nell'esempio seguente vengono illustrati questi problemi. Salva cinque date utilizzando le convenzioni di formattazione delle impostazioni cultura correnti, in questo caso è l'inglese (Stati Uniti). Ripristina le date usando le convenzioni di formattazione di una lingua diversa, ovvero in questo caso l'inglese (Regno Unito). Poiché le convenzioni di formattazione delle impostazioni due cultura sono diverse, due delle date non possono essere ripristinati e le date di tre rimanenti vengono interpretate in modo non corretto. Inoltre, se i valori originali di data e ora rappresentano una singole momenti nel tempo, la versione ripristinata volte in cui non sono corrette perché informazioni sul fuso orario viene persi.  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

Per il round trip <xref:System.DateTime> valori correttamente, seguono questi passaggi:  
  
1.  Se i valori rappresentano singoli momenti di tempo, convertirle dall'ora locale in formato UTC chiamando il <xref:System.DateTime.ToUniversalTime%2A> metodo.  
1.  Convertire le date nelle rispettive rappresentazioni di stringa chiamando il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> o <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> rapporto di overload. Utilizzare le convenzioni di formattazione delle impostazioni cultura invarianti specificando <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> come il `provider` argomento. Specificare che il valore deve essere il round trip usando la stringa di formato standard "O" o "R".  
  
Per ripristinare la classe resa persistente <xref:System.DateTime> valori senza perdita di dati, seguire questi passaggi:  
  
1.  Analizzare i dati chiamando il <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> rapporto di overload. Specificare <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> come il `provider` argomento e utilizzare lo stesso formato standard di stringa è stato utilizzato per il `format` argomento durante la conversione. Includere il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> valore il `styles` argomento.  
1.  Se il <xref:System.DateTime> valori rappresentano singoli momenti, chiamata di <xref:System.DateTime.ToLocalTime%2A> metodo per convertire la data analizzata dall'ora UTC in ora locale.  
  
L'esempio seguente usa le impostazioni cultura invarianti e la stringa di formato standard "O" per garantire che <xref:System.DateTime> valori salvato e ripristinato rappresentano nello stesso momento nel tempo indipendentemente dal sistema, delle impostazioni cultura o fuso orario dei sistemi di origine e destinazione.  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>Mantenimento di valori come numeri interi  

È possibile mantenere una data e ora come un <xref:System.Int64> valore che rappresenta un numero di segni di graduazione. In questo caso, non è necessario prendere in considerazione le impostazioni cultura dei sistemi di <xref:System.DateTime> valori vengono mantenuti e ripristinati su.  
  
Per rendere persistente un <xref:System.DateTime> valore come numero intero:  
  
-   Se il <xref:System.DateTime> valori rappresentano i momenti singoli, convertirli in formato UTC chiamando il <xref:System.DateTime.ToUniversalTime%2A> metodo.  
-   Recuperare il numero di tick rappresentato dal <xref:System.DateTime> valore relativo <xref:System.DateTime.Ticks%2A> proprietà.  
  
Per ripristinare un <xref:System.DateTime> valore che è stata resa persistente come valore integer:  
  
1.  Creare un'istanza di un nuovo <xref:System.DateTime> oggetto passando il <xref:System.Int64> valore per il <xref:System.DateTime.%23ctor%28System.Int64%29> costruttore.  
1.  Se il <xref:System.DateTime> valore rappresenta un singolo momento, convertirla rispetto a UTC all'ora locale chiamando il <xref:System.DateTime.ToLocalTime%2A> metodo.  
  
Nell'esempio seguente viene persiste una matrice di <xref:System.DateTime> valori come numeri interi in un sistema negli Stati Uniti. fuso orario Pacifico (Stati Uniti). Viene ripristinato in un sistema fuso UTC. Il file che contiene i numeri interi include un <xref:System.Int32> valore che indica il numero totale di <xref:System.Int64> valori che seguono immediatamente.  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

#### <a name="serializing-datetime-values"></a>La serializzazione di valori DateTime  

È possibile mantenere <xref:System.DateTime> valori mediante la serializzazione di un flusso o file e quindi ripristinare tali tramite la deserializzazione. <xref:System.DateTime> dati viene serializzati in un formato di oggetto specificato. Gli oggetti vengono ripristinati quando vengono deserializzati. Un formattatore oppure un serializzatore, ad esempio <xref:System.Xml.Serialization.XmlSerializer> o <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>, gestisce il processo di serializzazione e deserializzazione. Per ulteriori informazioni sulla serializzazione e i tipi di serializzazione supportato da .NET Framework, vedere [serializzazione](~/docs/standard/serialization/index.md).
  
L'esempio seguente usa il <xref:System.Xml.Serialization.XmlSerializer> classe per serializzare e deserializzare <xref:System.DateTime> valori. I valori rappresentano tutti i giorni di anno bisestile ventunesimo secolo. Se nell'esempio viene eseguito in un sistema le cui impostazioni cultura correnti è inglese (Regno Unito), l'output rappresenta il risultato. Poiché è stato deserializzato il <xref:System.DateTime> privo di oggetto, il codice gestire le differenze culturali di formati di data e ora.  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

Nell'esempio precedente non include informazioni sull'ora. Se un <xref:System.DateTime> valore rappresenta un istante nel tempo e viene espresso come ora locale, convertirli dall'ora locale in formato UTC prima di eseguire la serializzazione, chiamando la <xref:System.DateTime.ToUniversalTime%2A> metodo. Dopo la deserializzazione, convertirlo dall'ora UTC in ora locale chiamando il <xref:System.DateTime.ToLocalTime%2A> metodo. L'esempio seguente usa il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe per serializzare <xref:System.DateTime> dati in un sistema negli Stati Uniti. Fuso orario ora solare Pacifico e deserializzarlo in un sistema negli Stati Uniti. Zona Standard centrale.  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

#### <a name="serializing-datetime-and-time-zone-data"></a>La serializzazione dei dati di data/ora e fuso orario  

Negli esempi precedenti tutti presuppone che <xref:System.DateTime> valori sono espressi come ora locale. Il codice di convertita i valori compresi tra l'ora UTC e l'ora locale affinché riflettano nello stesso momento nel tempo nei sistemi di origine e di destinazione. <xref:System.DateTime> i valori possono inoltre riflettere momenti in un fuso orario diverso da local e l'ora UTC. Poiché il <xref:System.DateTime> struttura non è compatibile con fuso orario, è necessario serializzare entrambi il <xref:System.DateTime> valore e <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario. Creare un tipo i cui campi sono inclusi entrambi i <xref:System.DateTime> valore e il fuso orario. L'esempio seguente definisce un `DateWithTimeZone` struttura.  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  Il `DateWithTimeZone` struttura viene utilizzata negli esempi successivi due cui serializzare e deserializzare una matrice di `DateWithTimeZone` oggetti. È possibile visualizzare l'origine per l'intero set di esempi in questo articolo in [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/) o [c#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) dal repository di documenti su GitHub.
  
Tramite il `DateWithTimeZone` struttura, è quindi possibile mantenere data e ora insieme a informazioni sul fuso orario. L'esempio seguente usa il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> classe per serializzare una matrice di `DateWithTimeZone` oggetti.  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

Nell'esempio seguente viene chiamato il <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> metodo di deserializzazione.  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>Visual Studio di DateTime. TimeSpan  

Il <xref:System.DateTime> e <xref:System.TimeSpan> tipi di valore differiscono in quanto un <xref:System.DateTime> rappresenta un istante di tempo, mentre un <xref:System.TimeSpan> rappresenta un intervallo di tempo. È possibile sottrarre un'istanza di <xref:System.DateTime> da un'altra per ottenere un <xref:System.TimeSpan> oggetto che rappresenta l'intervallo di tempo tra di essi. Oppure è possibile aggiungere un numero positivo <xref:System.TimeSpan> corrente <xref:System.DateTime> per ottenere un <xref:System.DateTime> valore che rappresenta una data futura.  
  
È possibile aggiungere o sottrarre un intervallo di tempo da un <xref:System.DateTime> oggetto. Gli intervalli di tempo possono essere positivo o negativo e possono essere espressi in unità, ad esempio segni di graduazione, secondi, o come un <xref:System.TimeSpan> oggetto.  

### <a name="comparing-for-equality-within-tolerance"></a>Confrontare l'uguaglianza nei limiti di tolleranza

I confronti di uguaglianza per <xref:System.DateTime> valori sono esatti. Ciò significa che due valori devono essere espresso come lo stesso numero di segni di graduazione per essere considerate uguali. Precisione è spesso non necessari oppure non è valido anche per molte applicazioni. Spesso, con cui si desidera testare se <xref:System.DateTime> sono oggetti **approssimativamente uguale**. 

Nell'esempio riportato di seguito viene illustrato come confrontare approssimativamente equivalente <xref:System.DateTime> . Accetta un piccolo margine di differenza nella dichiarazione di tali uguale.  
  
<a name="comparison-02"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>Considerazioni sull'interoperabilità COM  

Oggetto <xref:System.DateTime> valore viene trasferito a un'applicazione COM e quindi trasferito nuovamente a un'applicazione gestita, viene definito per il round trip. Tuttavia, un <xref:System.DateTime> valore che specifica un periodo di tempo non completa il round trip come previsto.  
  
Se è andata solo un'ora, ad esempio le ore 3, la data di scadenza e l'ora dal 30 dicembre 1899 E.V. in 3:00 P.M., invece, il 1 ° gennaio, 0001 D.C. alle ore 3:00. .NET Framework e COM viene utilizzata una data predefinita quando viene specificato un periodo di tempo. Tuttavia, il sistema COM si presuppone la data di 30 dicembre 1899 D.C., mentre .NET Framework presuppone una data di base, il 1 ° gennaio, 0001 D.C.  
  
Quando solo una volta che viene passata da .NET Framework a COM, viene eseguita un'elaborazione speciale che converte l'ora nel formato usato da COM. Quando solo una volta che viene passato da COM a .NET Framework, non viene eseguita alcuna elaborazione particolare perché che dovesse danneggiare le date e ore o prima del 30 dicembre 1899. Se una data di inizio il round trip da COM, .NET Framework e COM preservare la data.  
  
Il comportamento di .NET Framework e COM implica che se il round trip applicazione un <xref:System.DateTime> specifica solo un periodo di tempo, l'applicazione è necessario ricordarsi di modificare o ignorare la data finale errata <xref:System.DateTime> oggetto.  
     
 ]]></format>
    </remarks>
    <threadsafe>Tutti i membri di questo tipo sono thread-safe. I membri che apparentemente modificano lo stato dell'istanza è in realtà restituiscono una nuova istanza inizializzata con il nuovo valore. Come con qualsiasi altro tipo, lettura e scrittura in una variabile condivisa che contiene un'istanza di questo tipo deve essere protetto da un blocco per garantire la thread safety.</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Data e ora espresse come numero di intervalli da 100 nanosecondi trascorsi dalle ore 00.00.00.000 del 01 gennaio 0001 nel calendario gregoriano.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su un numero di tick specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente illustra uno del <xref:System.DateTime> costruttori.  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">Data e ora espresse come numero di intervalli da 100 nanosecondi trascorsi dalle ore 00.00.00.000 del 01 gennaio 0001 nel calendario gregoriano.</param>
        <param name="kind">Uno dei valori di enumerazione che indica se i <c>tick</c> specificano un'ora locale, un'ora UTC (Coordinated Universal Time) o nessuna delle due.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su un numero specificato di tick e sull'ora UTC (Coordinated Universal Time) oppure sull'ora locale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> non è uno dei valori di <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 a 9999).</param>
        <param name="month">Mese (da 1 a 12).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese e giorno specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta `year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Per creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno nel calendario un'altra chiamata di <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 L'ora del giorno per l'oggetto risultante <xref:System.DateTime> corrisponde a mezzanotte (00: 00:00). La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore. Nell'esempio viene inoltre illustrato che questo overload crea un <xref:System.DateTime> valore il cui componente ora corrisponde a mezzanotte (o 0:00).  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 al numero di anni nel <c>calendario</c>).</param>
        <param name="month">Mese (da 1 al numero di mesi nel <c>calendario</c>).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="calendar">Calendario usato per interpretare <c>anno</c>, <c>mese</c> e <c>giorno</c>.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese e giorno indicati per il calendario specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ora del giorno per l'oggetto risultante <xref:System.DateTime> corrisponde a mezzanotte (00: 00:00). La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi mediante `calendar`.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari inclusi <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere definito come il calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede singole chiamate al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio le impostazioni cultura arabe (Siria) e Modifica calendario predefinito di impostazioni cultura correnti per il calendario Hijri. Poiché Hijri è calendario predefinito di impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo viene utilizzato per formattare la data. Dopo aver ripristinata le precedenti impostazioni cultura correnti (ovvero inglese (Stati Uniti) in questo caso), il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni di cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> non è compreso nell'intervallo supportato da <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore del numero di mesi in <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 a 9999).</param>
        <param name="month">Mese (da 1 a 12).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto e secondo specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Per creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno nel calendario un'altra chiamata di <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%2A> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 a 9999).</param>
        <param name="month">Mese (da 1 a 12).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="kind">Uno dei valori di enumerazione che indica se <c>anno</c>, <c>mese</c>, <c>giorno</c>, <c>ora</c>, <c>minuto</c> e <c>secondo</c> specificano un'ora locale, un'ora UTC (Coordinated Universal Time) o nessuna delle due.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto, secondo e ora UTC (Coordinated Universal Time) oppure ora locale specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Per creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno nel calendario un'altra chiamata di <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> non è uno dei valori di <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 al numero di anni nel <c>calendario</c>).</param>
        <param name="month">Mese (da 1 al numero di mesi nel <c>calendario</c>).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="calendar">Calendario usato per interpretare <c>anno</c>, <c>mese</c> e <c>giorno</c>.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto e secondo determinati per il calendario specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi mediante `calendar`.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari inclusi <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere definito come il calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede singole chiamate al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio le impostazioni cultura arabe (Siria) e Modifica calendario predefinito di impostazioni cultura correnti per il calendario Hijri. Poiché Hijri è calendario predefinito di impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo viene utilizzato per formattare la data. Dopo aver ripristinata le precedenti impostazioni cultura correnti (ovvero inglese (Stati Uniti) in questo caso), il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni di cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> non è compreso nell'intervallo supportato da <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore del numero di mesi in <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 a 9999).</param>
        <param name="month">Mese (da 1 a 12).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="millisecond">Millisecondi (da 0 a 999).</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto, secondo e millisecondo specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Per creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno nel calendario un'altra chiamata di <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore.  
  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="millisecond" /> è minore di 0 o maggiore di 999.</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 a 9999).</param>
        <param name="month">Mese (da 1 a 12).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="millisecond">Millisecondi (da 0 a 999).</param>
        <param name="kind">Uno dei valori di enumerazione che indica se <c>anno</c>, <c>mese</c>, <c>giorno</c>, <c>ora</c>, <c>minuto</c>, <c>secondo</c> e <c>millisecondo</c> specificano un'ora locale, un'ora UTC (Coordinated Universal Time) o nessuna delle due.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto, secondo, millisecondo e ora UTC (Coordinated Universal Time) oppure ora locale specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore interpreta`year`, `month`, e `day` come un anno, mese e giorno del calendario gregoriano. Per creare un'istanza di un <xref:System.DateTime> valore usando l'anno, mese e giorno nel calendario un'altra chiamata di <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> costruttore per creare un'istanza di un <xref:System.DateTime> valore.  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="millisecond" /> è minore di 0 o maggiore di 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> non è uno dei valori di <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 al numero di anni nel <c>calendario</c>).</param>
        <param name="month">Mese (da 1 al numero di mesi nel <c>calendario</c>).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="millisecond">Millisecondi (da 0 a 999).</param>
        <param name="calendar">Calendario usato per interpretare <c>anno</c>, <c>mese</c> e <c>giorno</c>.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto, secondo e millisecondo determinati per il calendario specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La proprietà <xref:System.DateTime.Kind%2A> viene inizializzata su <xref:System.DateTimeKind.Unspecified>.  
  
 I valori consentiti per `year`, `month`, e `day` dipendono `calendar`. Viene generata un'eccezione se la data e ora specificate non possono essere espressi mediante `calendar`.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari inclusi <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere definito come il calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede singole chiamate al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio le impostazioni cultura arabe (Siria) e Modifica calendario predefinito di impostazioni cultura correnti per il calendario Hijri. Poiché Hijri è calendario predefinito di impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo viene utilizzato per formattare la data. Dopo aver ripristinata le precedenti impostazioni cultura correnti (ovvero inglese (Stati Uniti) in questo caso), il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni di cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> non è compreso nell'intervallo supportato da <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore del numero di mesi in <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="millisecond" /> è minore di 0 o maggiore di 999.</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">Anno (da 1 al numero di anni nel <c>calendario</c>).</param>
        <param name="month">Mese (da 1 al numero di mesi nel <c>calendario</c>).</param>
        <param name="day">Giorno (da 1 al numero di giorni nel <c>mese</c>).</param>
        <param name="hour">Ore (da 0 a 23).</param>
        <param name="minute">Minuti (da 0 a 59).</param>
        <param name="second">Secondi (da 0 a 59).</param>
        <param name="millisecond">Millisecondi (da 0 a 999).</param>
        <param name="calendar">Calendario usato per interpretare <c>anno</c>, <c>mese</c> e <c>giorno</c>.</param>
        <param name="kind">Uno dei valori di enumerazione che indica se <c>anno</c>, <c>mese</c>, <c>giorno</c>, <c>ora</c>, <c>minuto</c>, <c>secondo</c> e <c>millisecondo</c> specificano un'ora locale, un'ora UTC (Coordinated Universal Time) o nessuna delle due.</param>
        <summary>Inizializza una nuova istanza della struttura <see cref="T:System.DateTime" /> su anno, mese, giorno, ora, minuto, secondo, millisecondo e ora UTC (Coordinated Universal Time) oppure ora locale specificati per il calendario indicato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I valori consentiti per `year`, `month`, e `day` parametri dipendono il `calendar` parametro. Viene generata un'eccezione se la data e ora specificate non possono essere espressi mediante `calendar`.  
  
 Per le applicazioni in cui la portabilità dei dati data e ora o un livello limitato di fuso orario consapevolezza è importante, è possibile utilizzare il corrispondente <xref:System.DateTimeOffset> costruttore.  
  
 Il <xref:System.Globalization> spazio dei nomi fornisce diversi calendari inclusi <xref:System.Globalization.GregorianCalendar> e <xref:System.Globalization.JulianCalendar>.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> costruttore due volte per creare un'istanza di due <xref:System.DateTime> valori. La prima chiamata crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.PersianCalendar> oggetto. Poiché il calendario persiano non può essere definito come il calendario predefinito per le impostazioni cultura, la visualizzazione di una data del calendario persiano richiede singole chiamate al relativo <xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>, <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>, e <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> metodi. La seconda chiamata al costruttore crea un <xref:System.DateTime> valore utilizzando un <xref:System.Globalization.HijriCalendar> oggetto. Nell'esempio le impostazioni cultura arabe (Siria) e Modifica calendario predefinito di impostazioni cultura correnti per il calendario Hijri. Poiché Hijri è calendario predefinito di impostazioni cultura correnti, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo viene utilizzato per formattare la data. Dopo aver ripristinata le precedenti impostazioni cultura correnti (ovvero inglese (Stati Uniti) in questo caso), il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo utilizza calendario gregoriano predefinito delle impostazioni di cultura correnti per formattare la data.  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> non è compreso nell'intervallo supportato da <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="month" /> è minore di 1 o maggiore del numero di mesi in <paramref name="calendar" />.  
  
 oppure  
  
 <paramref name="day" /> è minore di 1 o maggiore del numero di giorni in <paramref name="month" />.  
  
 oppure  
  
 <paramref name="hour" /> è minore di 0 o maggiore di 23.  
  
 oppure  
  
 <paramref name="minute" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="second" /> è minore di 0 o maggiore di 59.  
  
 oppure  
  
 <paramref name="millisecond" /> è minore di 0 o maggiore di 999.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> non è uno dei valori di <see cref="T:System.DateTimeKind" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervallo di tempo positivo o negativo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il valore dell'oggetto <see cref="T:System.TimeSpan" /> specificato al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e dell'intervallo di tempo rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.DateTime.Add%2A> metodo per aggiungere più di un tipo di intervallo di tempo (giorni, ore, minuti, secondi o millisecondi) in un'unica operazione. Comportamento di questo metodo è identico a quello dell'operatore di addizione. Il <xref:System.DateTime> struttura supporta inoltre metodi addizione specializzati (ad esempio <xref:System.DateTime.AddDays%2A>, <xref:System.DateTime.AddHours%2A>, e <xref:System.DateTime.AddMinutes%2A>) per ogni intervallo di tempo.  
  
 Il <xref:System.DateTime.Add%2A> metodo prende in considerazione gli anni bisestili e il numero di giorni in un mese durante l'esecuzione di operazioni aritmetiche alla data.  
  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione. Il <xref:System.DateTime.Kind%2A> proprietà del nuovo <xref:System.DateTime> istanza è uguale a quello dell'istanza corrente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Add%2A> metodo. Calcola il giorno della settimana di 36 giorni (ore 864) da questo momento.  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero di giorni interi e frazionari. Il parametro <c>valore</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di giorni al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di giorni rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria `value` è la parte frazionaria di un giorno. Ad esempio, 4.5 è equivalente a 4 giorni, 12 ore, 0 minuti, 0 secondi, 0 millisecondi e 0 segni di graduazione.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
 Il <xref:System.DateTime.AddDays%2A> metodo prende in considerazione gli anni bisestili e il numero di giorni in un mese durante l'esecuzione di operazioni aritmetiche alla data.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddDays%2A> metodo per determinare il giorno della settimana 36 giorni dopo la data corrente.  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero di ore intere e frazionarie. Il parametro <c>valore</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di ore al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di ore rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione. Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è uguale a quello di `value`.  
  
 La parte frazionaria `value` è la parte frazionaria di un'ora. Ad esempio, 4.5 è equivalente a 4 ore, 30 minuti, 0 secondi, 0 millisecondi e 0 segni di graduazione.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
 La conversione di intervalli di tempo minore di un'ora in una frazione può comportare una perdita di precisione se il risultato è un numero decimale ripetuto non irreversibile. (Ad esempio, un minuto è 0,016667 ore) Se si verificano problemi, è possibile utilizzare il <xref:System.DateTime.Add%2A> metodo, che consente di specificare più di un tipo di intervallo di tempo in una singola chiamata al metodo ed elimina la necessità di convertire gli intervalli di tempo in parti frazionarie di un'ora.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddHours%2A> metodo per aggiungere un numero di valori interi e frazionari in una data e ora. Illustra anche la perdita di precisione causata passando il metodo di un valore che include un componente frazionario.  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero di millisecondi interi e frazionari. Il parametro <c>valore</c> può essere negativo o positivo. Il valore viene arrotondato all'intero più vicino.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di millisecondi al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di millisecondi rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria `value` è la parte frazionaria di un millisecondo. Ad esempio, 4.5 è equivalente a 4 millisecondi e 5000 segni di graduazione, in cui un millisecondo = 10000 segni di graduazione.  
  
 Il `value` parametro viene arrotondato all'intero più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddMilliseconds%2A> metodo per aggiungere un millisecondo e 1,5 millisecondi a un <xref:System.DateTime> valore. Quindi, ogni nuovo valore viene visualizzato e Visualizza la differenza tra questo e il valore originale. La differenza viene visualizzata come un intervallo di tempo e sotto forma di numero di segni di graduazione. Nell'esempio viene evidenziato che un millisecondo è uguale a 10.000 segni di graduazione. Viene inoltre illustrato che millisecondi frazionari vengono arrotondati prima di eseguire l'addizione; il <xref:System.DateTime> valore risultante dall'aggiunta di 1,5 millisecondi alla data originale è maggiore della data originale 2 millisecondi.  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero di minuti interi e frazionari. Il parametro <c>valore</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di minuti al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di minuti rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria `value` è la parte frazionaria di un minuto. Ad esempio, 4.5 è equivalente a 4 minuti, 30 secondi, 0 millisecondi e 0 segni di graduazione.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddMinutes%2A> metodo per aggiungere un numero di valori interi e frazionari in una data e ora.  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">Numero di mesi. Il parametro <c>mesi</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di mesi al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime> oggetto. Al contrario, restituisce un nuovo <xref:System.DateTime> oggetto il cui valore è il risultato di questa operazione.  
  
 Il <xref:System.DateTime.AddMonths%2A> metodo calcola il mese risultante e l'anno, prendendo in considerazione gli anni bisestili e il numero di giorni in un mese, quindi modifica la parte del giorno dell'oggetto risultante <xref:System.DateTime> oggetto. Se il giorno risultante non è un giorno del mese risultante valido, viene utilizzato l'ultimo giorno del mese valido. Ad esempio, il 31 marzo + 1 mese = 30 aprile e il 31 marzo - 1 mese = 28 febbraio per un anno non bisestile e 29 febbraio per un anno bisestile.  
  
 La parte dell'ora del giorno dell'oggetto risultante <xref:System.DateTime> oggetto rimane lo stesso di questa istanza.  
  
   
  
## Examples  
 L'esempio seguente aggiunge compreso tra zero e 15 mesi e l'ultimo giorno di dicembre 2015. In questo caso, il metodo AddMonths restituisce la data dell'ultimo giorno del mese e gestisce correttamente gli anni bisestili.  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.  
  
 oppure  
  
 <paramref name="months" /> è minore di -120.000 o maggiore di 120.000.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Numero di secondi interi e frazionari. Il parametro <c>valore</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di secondi al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di secondi rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 La parte frazionaria `value` è la parte frazionaria del secondo. Ad esempio, 4.5 è equivalente a 4 secondi, 500 millisecondi e 0 segni di graduazione.  
  
 Il `value` parametro viene arrotondato al millisecondo più vicino.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.AddSeconds%2A> metodo per aggiungere 30 secondi e il numero di secondi in un giorno per un <xref:System.DateTime> valore. Quindi, ogni nuovo valore viene visualizzato e Visualizza la differenza tra questo e il valore originale. La differenza viene visualizzata come un intervallo di tempo e sotto forma di numero di segni di graduazione.  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Numero di tick di 100 nanosecondi. Il parametro <c>valore</c> può essere positivo o negativo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di tick al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e dell'ora rappresentata da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Numero di anni. Il parametro <c>valore</c> può essere negativo o positivo.</param>
        <summary>Restituisce un nuovo oggetto <see cref="T:System.DateTime" /> che aggiunge il numero specificato di anni al valore di questa istanza.</summary>
        <returns>Oggetto il cui valore è la somma della data e dell'ora rappresentate dall'istanza e del numero di anni rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non modifica il valore di questo <xref:System.DateTime> oggetto. Al contrario, restituisce un nuovo <xref:System.DateTime> oggetto il cui valore è il risultato di questa operazione.  
  
 Il <xref:System.DateTime.AddYears%2A> metodo calcola l'anno risultante prendendo in considerazione gli anni bisestili. La parte del mese e l'ora del giorno dell'oggetto risultante <xref:System.DateTime> oggetto rimane lo stesso di questa istanza.  
  
 Se l'istanza corrente rappresenta il giorno intercalare in un anno bisestile, il valore restituito dipende dalla data di destinazione:  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> è bisestile, valore restituito rappresenta il giorno intercalare in tale anno. Ad esempio, se quattro anni viene aggiunto a 29 febbraio 2012, la data restituita è 29 febbraio 2016.  
  
-   Se `value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType> non è un anno bisestile, valore restituito rappresenta il giorno prima del giorno intercalare in tale anno. Ad esempio, se viene aggiunto un anno a 29 febbraio 2012, la data restituita è 28 febbraio 2013.  
  
 Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.DateTime.AddYears%2A> metodo con un <xref:System.DateTime> valore che rappresenta un giorno dell'anno bisestile. Visualizza la data per 15 anni precedenti a e i 15 anni successivi al 29 febbraio 2000.  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> o l'oggetto <see cref="T:System.DateTime" /> risultante è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Confronta due istanze di <see cref="T:System.DateTime" /> e restituisce un intero che indica se la prima istanza è precedente, uguale o successiva alla seconda istanza.</summary>
        <returns>Numero con segno che indica i valori relativi di <paramref name="t1" /> e <paramref name="t2" />.  
  
 <list type="table"><listheader><term> Tipo valore  
  
 </term><description> Condizione  
  
 </description></listheader><item><term> Minore di zero  
  
 </term><description><paramref name="t1" /> è precedente a <paramref name="t2" />.  
  
 </description></item><item><term> Zero  
  
 </term><description><paramref name="t1" /> è uguale a <paramref name="t2" />.  
  
 </description></item><item><term> Maggiore di zero  
  
 </term><description><paramref name="t1" /> è successivo a <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare la relazione di `t1` per `t2`, <xref:System.DateTime.Compare%2A> metodo confronta il <xref:System.DateTime.Ticks%2A> proprietà di `t1` e `t2` ma ignora i relativi <xref:System.DateTime.Kind%2A> proprietà. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Compare%2A> metodo.  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Confronta il valore di questa istanza con un valore <see cref="T:System.DateTime" /> specificato e indica se l'istanza è precedente, uguale o successiva al valore <see cref="T:System.DateTime" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I due overload del <xref:System.DateTime.CompareTo%2A> il metodo restituisce un numero con segno che indica il valore relativo di questa istanza e `value` argomento, come illustrato nella tabella seguente.  
  
|Valore|Descrizione|  
|-----------|-----------------|  
|Minore di zero|Questa istanza è precedente al parametro `value`.|  
|Zero|Questa istanza è uguale al parametro `value`.|  
|Maggiore di zero|Questa istanza è successiva al parametro `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da confrontare con l'istanza corrente della classe.</param>
        <summary>Confronta il valore di questa istanza con un valore <see cref="T:System.DateTime" /> specificato e restituisce un intero che indica se l'istanza è precedente, uguale o successiva al valore <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>Numero con segno che indica i valori relativi di questa istanza e il parametro <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Descrizione  
  
 </description></listheader><item><term> Minore di zero  
  
 </term><description> Questa istanza è precedente al parametro <paramref name="value" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> L'istanza è uguale al parametro <paramref name="value" />.  
  
 </description></item><item><term> Maggiore di zero  
  
 </term><description> Questa istanza è successiva al parametro <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare la relazione tra l'istanza corrente di `value`, <xref:System.DateTime.CompareTo%2A> metodo confronta il <xref:System.DateTime.Ticks%2A> proprietà dell'istanza corrente e `value` ma ignora i <xref:System.DateTime.Kind%2A> proprietà.  Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. È possibile farlo, confrontando i valori della loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 Questo metodo implementa il <xref:System.IComparable%601?displayProperty=nameWithType> interfaccia ed esegue leggermente migliori rispetto di <xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> overload del metodo perché non è necessario convertire il `value` parametro a un oggetto.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata un'istanza di tre <xref:System.DateTime> oggetti, uno che rappresenta oggi data, un altro che rappresenta la data di un anno in precedenza, e un terzo che rappresenta la data di un anno in futuro. Chiama quindi il <xref:System.DateTime.CompareTo%28System.DateTime%29> metodo e viene visualizzato il risultato del confronto.  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto boxed da confrontare o <see langword="null" />.</param>
        <summary>Confronta il valore di questa istanza con un oggetto specificato contenente un valore <see cref="T:System.DateTime" /> specificato e restituisce un intero che indica se l'istanza è precedente, uguale o successiva al valore <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>Numero con segno che indica i valori relativi di questa istanza e di <paramref name="value" />.  
  
 <list type="table"><listheader><term> Valore  
  
 </term><description> Descrizione  
  
 </description></listheader><item><term> Minore di zero  
  
 </term><description> Questa istanza è precedente al parametro <paramref name="value" />.  
  
 </description></item><item><term> Zero  
  
 </term><description> L'istanza è uguale al parametro <paramref name="value" />.  
  
 </description></item><item><term> Maggiore di zero  
  
 </term><description> Questa istanza è successiva al parametro <paramref name="value" />, oppure <paramref name="value" /> è <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per determinare la relazione tra l'istanza corrente di `value`, <xref:System.DateTime.CompareTo%2A> metodo confronta il <xref:System.DateTime.Ticks%2A> proprietà dell'istanza corrente e `value` ma ignora i <xref:System.DateTime.Kind%2A> proprietà. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. È possibile farlo, confrontando i valori della loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 Qualsiasi istanza di <xref:System.DateTime>, indipendentemente dal valore, viene considerato maggiore `null`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.CompareTo%2A> metodo.  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> non è un oggetto <see cref="T:System.DateTime" />.</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di data dell'istanza.</summary>
        <value>Nuovo oggetto con la medesima data dell'istanza e il valore dell'ora impostato sulla mezzanotte (00.00.00).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore è uguale a quello dell'istanza corrente.  
  
 Poiché il <xref:System.DateTime> tipo rappresenta date e ore in un unico tipo, è importante evitare di interpretare una data restituita dal <xref:System.DateTime.Date%2A> proprietà come data e ora.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Date%2A> proprietà per il componente Data di estrarre un <xref:System.DateTime> valore con il componente ora impostato su zero (o 0:00:00 o mezzanotte). Viene inoltre illustrato che, a seconda della stringa di formato utilizzata per la visualizzazione di <xref:System.DateTime> valore, a cui è possibile continuare a essere visualizzato nell'output formattato il componente della fase.  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il giorno del mese rappresentato dall'istanza.</summary>
        <value>Componente che indica il giorno, espresso mediante un valore compreso tra 1 e 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Day%2A> proprietà restituisce sempre il giorno del mese del calendario gregoriano, anche se l'oggetto corrente <xref:System.DateTime> valore istanza è stato creato utilizzando un calendario diverso o se il calendario predefinito delle impostazioni cultura del thread corrente non è il calendario gregoriano. Per recuperare il giorno del mese di una determinata data utilizzando un calendario diverso, chiamare del calendario <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodo. L'esempio seguente usa sia il <xref:System.DateTime.Day%2A> proprietà e <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodo per recuperare il giorno del mese per un <xref:System.DateTime> valore che viene creata un'istanza utilizzando il calendario Hijri.  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 Analogamente, l'esempio seguente usa sia il <xref:System.DateTime.Day%2A> proprietà e <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> metodo per recuperare il giorno del mese quando le impostazioni cultura del thread corrente sono ar-SA, che utilizza Hijri come il calendario predefinito.  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Day%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il giorno della settimana rappresentato dall'istanza.</summary>
        <value>Costante enumerata che indica il giorno della settimana del valore <see cref="T:System.DateTime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore delle costanti nel <xref:System.DayOfWeek> enumerazione varia da <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> a <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>. Se il cast in un intero, il relativo valore compreso tra zero (ovvero <xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) a sei (che indica <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>).  
  
 Il <xref:System.DateTime.DayOfWeek%2A> proprietà restituisce una costante enumerata; non riflette le impostazioni internazionali e della lingua del sistema. Per recuperare una stringa che rappresenta il nome del giorno della settimana localizzato per una determinata data, chiamare uno degli overload di <xref:System.DateTime.ToString%2A> metodo che include un `format` parametro e passarlo sia il `ddd` o `dddd` stringhe di formato personalizzato. Per informazioni dettagliate, vedere [procedura: estrarre il giorno della settimana da una data specifica](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.DayOfWeek%2A> proprietà e <xref:System.DayOfWeek?displayProperty=nameWithType> enumerazione.  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il giorno dell'anno rappresentato dall'istanza.</summary>
        <value>Giorno dell'anno, espresso mediante un valore compreso fra 1 e 366.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.DayOfYear%2A> proprietà considerando gli anni bisestili quando si calcola il giorno dell'anno. Il valore della proprietà riflette sempre il giorno dell'anno del calendario gregoriano, indipendentemente dal calendario corrente di thread impostazioni cultura correnti. Per recuperare il giorno dell'anno in un calendario diverso, chiamare il <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> metodo del calendario.  
  
   
  
## Examples  
 Nell'esempio seguente visualizza il giorno dell'anno del 31 dicembre 2010 2020 agli anni nel calendario gregoriano. Si noti che nell'esempio viene illustrato che il 31 dicembre è il 366 ° giorno dell'anno in un anno bisestile.  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Anno.</param>
        <param name="month">Mese (un numero compreso fra 1 e 12).</param>
        <summary>Restituisce il numero di giorni del mese specificato dell'anno specificato.</summary>
        <returns>Numero di giorni in <paramref name="month" /> per il parametro <paramref name="year" /> specificato.  
  
 Se ad esempio <paramref name="month" /> risulta uguale a 2 per febbraio, il valore restituito sarà 28 o 29 a seconda che <paramref name="year" /> sia o meno bisestile.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.DaysInMonth%2A> metodo interpreta sempre `month` e `year` come il mese e anno del calendario gregoriano calendario anche se il calendario gregoriano non è di tipo calendario corrente di impostazioni cultura correnti. Per ottenere il numero di giorni nel mese di un determinato calendario specificato, chiamare del calendario <xref:System.Globalization.Calendar.GetDaysInMonth%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.DateTime.DaysInMonth%2A> metodo per determinare il numero di giorni nel July 2001, febbraio 1998 (non-bisestile) e febbraio 1996 (un anno bisestile).  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 Nell'esempio seguente visualizza il numero di giorni in ciascun mese dell'anno specificato in una matrice di interi.  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> è minore di 1 o maggiore di 12.  
  
 oppure  
  
 <paramref name="year" /> è minore di 1 o maggiore di 9999.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce un valore che indica se due oggetti <see cref="T:System.DateTime" /> o un'istanza di <see cref="T:System.DateTime" /> e un oggetto di altro tipo o <see cref="T:System.DateTime" /> presentano lo stesso valore.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da confrontare con questa istanza.</param>
        <summary>Restituisce un valore che indica se il valore di questa istanza è uguale al valore dell'istanza di <see cref="T:System.DateTime" /> specificata.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="value" /> è uguale al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza corrente e `value` sono uguali se i relativi <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. I relativi <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test di uguaglianza.  
  
 Questo metodo implementa il <xref:System.IEquatable%601?displayProperty=nameWithType> interfaccia ed esegue leggermente migliori rispetto di <xref:System.DateTime.Equals%2A> metodo perché il `value` non deve essere convertito in un oggetto parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> metodo.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto da confrontare con questa istanza.</param>
        <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
        <returns>
          <see langword="true" /> se <paramref name="value" /> è un'istanza di <see cref="T:System.DateTime" /> ed è uguale al valore dell'istanza; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'istanza corrente e `value` sono uguali se i relativi <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. I relativi <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test di uguaglianza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> metodo.  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Restituisce un valore che indica se due istanze di <see cref="T:System.DateTime" /> presentano lo stesso valore di data e ora.</summary>
        <returns>
          <see langword="true" /> se i due valori sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` e `t2` sono uguali se i relativi <xref:System.DateTime.Ticks%2A> i valori delle proprietà sono uguali. I relativi <xref:System.DateTime.Kind%2A> i valori delle proprietà non vengono considerati nel test di uguaglianza.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Equals%2A> metodo.  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">Intero con segno a 64 bit che codifica la proprietà <see cref="P:System.DateTime.Kind" /> in un campo a 2 bit e la proprietà <see cref="P:System.DateTime.Ticks" /> in un campo a 62 bit.</param>
        <summary>Deserializza un valore binario a 64 bit e ricrea un oggetto originale <see cref="T:System.DateTime" /> serializzato.</summary>
        <returns>Oggetto equivalente all'oggetto <see cref="T:System.DateTime" /> che è stato serializzato dal metodo <see cref="M:System.DateTime.ToBinary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.DateTime.ToBinary%2A> metodo per convertire il valore dell'oggetto corrente <xref:System.DateTime> oggetto su un valore binario. Successivamente, utilizzare il valore binario e <xref:System.DateTime.FromBinary%2A> metodo ricreare originale <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In alcuni casi, il <xref:System.DateTime> valore restituito dal <xref:System.DateTime.FromBinary%2A> metodo non è identica all'originale <xref:System.DateTime> valore fornito per il <xref:System.DateTime.ToBinary%2A> metodo. Per ulteriori informazioni, vedere la sezione successiva, "Regolazione dell'ora locale".  
  
## <a name="local-time-adjustment"></a>Regolazione dell'ora locale  
 Un'ora locale, ovvero un tempo universale coordinato regolata in base al fuso orario locale, è rappresentata da un <xref:System.DateTime> struttura il cui <xref:System.DateTime.Kind%2A> proprietà ha un valore <xref:System.DateTimeKind.Local>. Quando si ripristina una locale <xref:System.DateTime> valore dalla rappresentazione binaria prodotta dal <xref:System.DateTime.ToBinary%2A> (metodo), il <xref:System.DateTime.FromBinary%2A> metodo potrebbe modificare il valore ricreato in modo che non è uguale al valore originale. Ciò può verificarsi nelle seguenti condizioni:  
  
-   Se una variabile locale <xref:System.DateTime> oggetto viene serializzato in un fuso orario per il <xref:System.DateTime.ToBinary%2A> (metodo) e deserializzato in un fuso orario diverso dal <xref:System.DateTime.FromBinary%2A> metodo, l'ora locale rappresentata dall'oggetto risultante <xref:System.DateTime> oggetto viene regolato automaticamente per il secondo fuso orario.  
  
     Si consideri ad esempio un <xref:System.DateTime> oggetto che rappresenta un'ora locale alle 15: 00 Un'applicazione che è in esecuzione negli Stati Uniti. Fuso orario Pacifico Usa il <xref:System.DateTime.ToBinary%2A> metodo per la conversione che <xref:System.DateTime> oggetto su un valore binario. Un'altra applicazione che è in esecuzione negli Stati Uniti. Fuso orientale USA quindi il <xref:System.DateTime.FromBinary%2A> per convertire il valore binario a un nuovo <xref:System.DateTime> oggetto. Il valore del nuovo <xref:System.DateTime> oggetto è 6 ore, che rappresenta lo stesso punto nel tempo come l'originale di 3 ore valore, ma viene aggiornata all'ora locale del fuso orario orientale.  
  
-   Se la rappresentazione binaria di una variabile locale <xref:System.DateTime> valore rappresenta un'ora non valida nel fuso orario locale del sistema in cui <xref:System.DateTime.FromBinary%2A> viene chiamato, l'ora viene aggiornata in modo che sia valido.  
  
     Ad esempio, la transizione dall'ora solare all'ora legale si verifica nel fuso orario del Pacifico degli Stati Uniti 14 marzo 2010, alle ore 2:00, quando il tempo sposta in avanti di un'ora, alle 3:00. Questo intervallo di ore è un'ora non valida, vale a dire un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente mostra che quando un'ora che rientra in questo intervallo viene convertito in un valore binario con la <xref:System.DateTime.ToBinary%2A> metodo e viene quindi ripristinato dal <xref:System.DateTime.FromBinary%2A> (metodo), il valore originale è regolato per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetta a modifica passandolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> (metodo), come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerazioni sulla versione  
 A partire da .NET Framework versione 2.0, un <xref:System.DateTime> struttura è costituita da un campo di tipo privato, che indica se il tempo specificato viene ora locale, Coordinated Universal Time (UTC) o nessuna delle due, concatenata a un campo privato di segni di graduazione, che contiene il numero di tick di 100 nanosecondi che specificano una data e ora. È possibile accedere con il numero di tick di <xref:System.DateTime.Ticks%2A> campo di proprietà e theKind sono accessibili con il <xref:System.DateTime.Kind%2A> proprietà.  
  
 Prima di .NET Framework 2.0, se è stato serializzato un <xref:System.DateTime> oggetto manualmente anziché come un'interfaccia di serializzazione <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, è necessario serializzare solo i dati di segni di graduazione nel <xref:System.DateTime>. A partire da .NET Framework 2.0, è anche necessario serializzare i dati di tipo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Ora di un file di Windows espressa in tick.</param>
        <summary>Converte l'ora specificata di un file di Windows in un'ora locale equivalente.</summary>
        <returns>Oggetto che rappresenta l'ora locale equivalente della data e dell'ora rappresentate dal parametro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli da 100 nanosecondi che sono trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Ora di un file utilizzato per registrare quando si crea un'applicazione, accede o scrive in un file.  
  
 Il `fileTime` parametro specifica l'ora di un file espressa in tick di 100 nanosecondi.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.FromFileTime%2A> metodo.  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Il parametro <paramref name="fileTime" /> è minore di 0 o rappresenta un'ora maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <block subset="none" type="usage">
          <para>In genere, il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo ripristini un <see cref="T:System.DateTime" /> valore che è stato salvato per il <see cref="M:System.DateTime.ToFileTime" /> (metodo). Tuttavia, i due valori possono differire nelle condizioni seguenti:  
  
-   Se la serializzazione e deserializzazione del <see cref="T:System.DateTime" /> verificarsi in fusi orari diversi. Ad esempio, se un <see cref="T:System.DateTime" /> valore con un tempo pari a 12:30 PM negli Stati Uniti. Fuso orientale è serializzato e deserializzato negli Stati Uniti. Fuso orario Pacifico, il valore originale di 12:30 PM vengono adattate alle 9.30 in modo da riflettere la differenza tra i due fusi orari.  
  
-   Se il <see cref="T:System.DateTime" /> valore serializzato rappresenta un'ora non valida nel fuso orario locale. In questo caso, il <see cref="M:System.DateTime.ToFileTime" /> metodo regola ripristinato <see cref="T:System.DateTime" /> valore in modo che rappresenti un'ora valida nel fuso orario locale.  
  
     Ad esempio, in cui si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario Pacifico 14 marzo 2010, alle ore 2:00, quando il tempo sposta in avanti di un'ora, alle 3:00. Questo intervallo di ore è un'ora non valida, vale a dire un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente mostra che quando un'ora che rientra in questo intervallo viene convertito in un valore long integer dal <see cref="M:System.DateTime.ToFileTime" /> metodo e viene quindi ripristinato dal <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> (metodo), il valore originale è regolato per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetta a modifica passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> (metodo), come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">Ora di un file di Windows espressa in tick.</param>
        <summary>Converte l'ora di un file di Windows specificata in un'ora UTC equivalente.</summary>
        <returns>Oggetto che rappresenta l'ora UTC equivalente della data e dell'ora rappresentate dal parametro <paramref name="fileTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli da 100 nanosecondi che sono trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Ora di un file utilizzato per registrare quando si crea un'applicazione, accede o scrive in un file.  
  
 Il `fileTime` parametro specifica l'ora di un file espressa in tick di 100 nanosecondi.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Il parametro <paramref name="fileTime" /> è minore di 0 o rappresenta un'ora maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">Valore di data di automazione OLE.</param>
        <summary>Restituisce un oggetto <see cref="T:System.DateTime" /> equivalente alla data di automazione OLE specificata.</summary>
        <returns>Oggetto che rappresenta le stesse data e ora del parametro <paramref name="d" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `d` parametro è un numero a virgola mobile a precisione doppia che rappresenta una data come numero di giorni prima o dopo la data di riferimento, mezzanotte, 30 dicembre 1899. La parte integrale e di accesso di `d` codificano la data come scostamento positivo o negativo dal 30 dicembre 1899 e il valore assoluto della parte frazionaria di `d` codifica l'ora del giorno come frazione di uno spostamento giorno da mezzanotte. `d` deve essere un valore compreso tra-657435,0 tramite 2958465.99999999 positivo.  
  
 Si noti che a causa del modo con le date sono codificate, esistono due modi per rappresentare qualsiasi ora del giorno del 30 dicembre 1899. Ad esempio, -0,5 e 0,5 indicano mezzogiorno del 30 dicembre 1899 perché uno scostamento di segno più o meno zero giorni dalla data di base è ancora la data di base e uno spostamento di metà giorno da mezzanotte a mezzogiorno.  
  
 Vedere <xref:System.DateTime.ToOADate%2A> per ulteriori informazioni sull'automazione OLE.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La data è un valore di data di automazione OLE non valido.</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte il valore dell'istanza in tutte le rappresentazioni di stringa supportate dagli identificatori di formato di data e ora standard.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Non si deve supporre che più chiamate al metodo di <xref:System.DateTime.GetDateTimeFormats%2A> overload restituirà dati identici. In base all'overload specifico, è possono modificare i dati restituiti da questo metodo se le modifiche delle impostazioni cultura correnti, l'utente esegue l'override delle impostazioni cultura singole o si verifica un aggiornamento di dati relative alla lingua del sistema.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'istanza in tutte le rappresentazioni di stringa supportate dagli identificatori di formato di data e ora standard.</summary>
        <returns>Matrice di stringhe in cui ciascun elemento è la rappresentazione del valore dell'istanza formattato con uno degli identificatori di formato di data e ora standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di stringhe restituita dal <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> metodo è equivalente alla combinazione delle matrici di stringhe restituite da chiamate separate per la <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> metodo con "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e stringhe di formato standard "y". Per ulteriori informazioni sugli identificatori di formato standard, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato utilizzando le informazioni delle impostazioni cultura correnti. Per ulteriori informazioni sulle informazioni di formattazione specifiche delle impostazioni cultura per le impostazioni cultura correnti, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Poiché questo metodo utilizza dati dipendenti dalle impostazioni cultura, si deve supporre che più chiamate al metodo restituirà dati identici. I dati restituiti da questo metodo è possono modificare le modifiche delle impostazioni cultura correnti, l'utente esegue l'override delle singole impostazioni cultura, se si verifica un aggiornamento di dati relative alla lingua del sistema.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> metodo. Viene visualizzata la rappresentazione di stringa di una data utilizzando tutti i possibili standard formati data e ora nelle impostazioni cultura correnti del computer, in questo caso sono en-US.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 Nell'esempio viene visualizzato il seguente output:  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">Stringa di formato di data e ora standard.</param>
        <summary>Converte il valore dell'istanza in tutte le rappresentazioni di stringa supportate dall'identificatore di formato di data e ora standard specificato.</summary>
        <returns>Matrice di stringhe in cui ciascun elemento è la rappresentazione del valore dell'istanza formattato con l'identificatore di formato di data e ora standard in <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `format` parametro può essere uno degli identificatori di formato di ora e data standard. Questi includono d, D, f, F, g, G, M o m, O (o o), R (o r), s, t, T, u, U e Y (o y). Per ulteriori informazioni, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato utilizzando le informazioni delle impostazioni cultura correnti. Per ulteriori informazioni sulle informazioni di formattazione specifiche delle impostazioni cultura per le impostazioni cultura correnti, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
> [!IMPORTANT]
>  Poiché questo metodo utilizza dati dipendenti dalle impostazioni cultura, si deve supporre che più chiamate al metodo restituirà dati identici. I dati restituiti da questo metodo è possono modificare le modifiche delle impostazioni cultura correnti, l'utente esegue l'override delle singole impostazioni cultura, se si verifica un aggiornamento di dati relative alla lingua del sistema.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.Char%29> metodo. Viene visualizzata la rappresentazione di stringa di una data utilizzando l'identificatore di formato di data estesa ("D") per le impostazioni cultura correnti.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> non è un carattere identificatore del formato di data e ora standard valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura relativamente all'istanza.</param>
        <summary>Converte il valore dell'istanza in tutte le rappresentazioni di stringa supportate dagli identificatori di formato di data e ora standard e dalle informazioni di formattazione relative alle impostazioni cultura specificate.</summary>
        <returns>Matrice di stringhe in cui ciascun elemento è la rappresentazione del valore dell'istanza formattato con uno degli identificatori di formato di data e ora standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Matrice di stringhe restituita dal <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> metodo è equivalente alla combinazione delle matrici di stringhe restituite da chiamate separate per la <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo con "d", "D", "f", "F", "g", "G", "m", "o", "r", "s", "t", "T", "u", "U" e stringhe di formato standard "y". Per ulteriori informazioni sugli identificatori di formato standard, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato utilizzando informazioni specifiche delle impostazioni cultura fornite da `provider`.  
  
> [!IMPORTANT]
>  Poiché questo metodo utilizza dati dipendenti dalle impostazioni cultura, non è certo che più chiamate al metodo restituirà dati identici, a meno che non `provider` è un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura invarianti. Possono modificare i dati restituiti da questo metodo se l'utente esegue l'override delle singole impostazioni cultura di `provider` o se si verifica un aggiornamento per i dati relativi alla lingua del sistema per `provider`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> metodo. Viene visualizzata la rappresentazione di stringa di una data utilizzando tutti i possibili standard formati data e ora per le impostazioni cultura fr-FR.  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 Nell'esempio viene visualizzato il seguente output:  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Stringa di formato di data e ora.</param>
        <param name="provider">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura relativamente all'istanza.</param>
        <summary>Converte il valore dell'istanza in tutte le rappresentazioni di stringa supportate dall'identificatore di formato di data e ora standard e dalle informazioni di formattazione specifiche delle impostazioni cultura.</summary>
        <returns>Matrice di stringhe in cui ciascun elemento è la rappresentazione del valore dell'istanza formattato con uno degli identificatori di formato di data e ora standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il parametro di formato può essere uno qualsiasi degli identificatori di formato di ora e data standard. Questi includono d, D, f, F, g, G, M o m, O (o o), R (o r), s, t, T, u, U e Y (o y). Per ulteriori informazioni, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md).  
  
 Ogni elemento del valore restituito viene formattato utilizzando informazioni specifiche delle impostazioni cultura fornite da `provider`.  
  
> [!IMPORTANT]
>  Poiché questo metodo utilizza dati dipendenti dalle impostazioni cultura, non è certo che più chiamate al metodo restituirà dati identici, a meno che non `provider` è un <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura invarianti. Possono modificare i dati restituiti da questo metodo se l'utente esegue l'override delle singole impostazioni cultura di `provider` o se si verifica un aggiornamento per i dati relativi alla lingua del sistema per `provider`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29> metodo. Vengono visualizzate le rappresentazioni di stringa di una data utilizzando l'identificatore di formato data breve ("d") per le impostazioni cultura fr-FR.  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> non è un carattere identificatore del formato di data e ora standard valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il codice hash per l'istanza.</summary>
        <returns>Codice hash di un intero con segno a 32 bit.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l'oggetto <see cref="T:System.TypeCode" /> del tipo di valore <see cref="T:System.DateTime" />.</summary>
        <returns>Costante enumerata <see cref="F:System.TypeCode.DateTime" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di ora della data rappresentata dall'istanza.</summary>
        <value>Componente che indica l'ora, espresso mediante un valore compreso tra 0 e 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di <xref:System.DateTime.Hour%2A> proprietà è sempre espresso nel formato a 24 ore. Per recuperare una stringa che rappresenta l'ora di una data e ora usando un orario in formato 12 ore, chiamare il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> o <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo con l'identificatore di formato personalizzato "h". Ad esempio:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Hour%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica se l'istanza dell'oggetto <see cref="T:System.DateTime" /> è compresa nell'intervallo l'ora legale del fuso orario corrente.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Local" /> o <see cref="F:System.DateTimeKind.Unspecified" /> e il valore di questa istanza di <see cref="T:System.DateTime" /> è compreso nell'intervallo relativo all'ora legale per il fuso orario corrente; <see langword="false" /> se <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo determina se l'oggetto corrente <xref:System.DateTime> valore è compresa nell'intervallo dell'ora legale del fuso orario locale, che viene restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà. È possibile determinare se un fuso orario supporta l'ora legale per il recupero del valore del relativo <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> proprietà. Per i fusi orari che osservano l'ora legale, è possibile determinare quando avviene la transizione da e verso l'ora legale il recupero di <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> matrice restituita dal fuso orario <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> proprietà.  
  
 Se l'oggetto corrente <xref:System.DateTime> valore rappresenta un ambigui o un'ora non valida nel fuso orario locale, il metodo restituisce `false`.  
  
 In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, il <xref:System.DateTime.IsDaylightSavingTime%2A> metodo riconosce solo la regola di rettifica corrente per determinare se l'istanza corrente è un'ora legale. Di conseguenza, il metodo potrebbe non segnalare con precisione se l'istanza corrente è un'ora legale per periodi precedenti la regola di rettifica corrente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Anno di 4 cifre.</param>
        <summary>Restituisce un'indicazione che informa se l'anno specificato è bisestile.</summary>
        <returns>
          <see langword="true" /> se <paramref name="year" /> è bisestile, in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` viene specificato come un numero di 10 a 4 cifre base. ad esempio, 1996.  
  
 `year` viene sempre interpretato come un anno nel calendario gregoriano. Per determinare se un anno specifico è bisestile in altri calendari, chiamare l'oggetto calendario `IsLeapYear` metodo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.IsLeapYear%2A> metodo per determinare quali anni tra 1994 e 2014 sono gli anni bisestili. Nell'esempio viene inoltre illustrato il risultato quando il <xref:System.DateTime.AddYears%2A> metodo viene utilizzato per aggiungere un anno a un giorno intercalare.  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> è minore di 1 o maggiore di 9999.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'ora rappresentata dall'istanza si basa sull'ora locale, sull'ora UTC (Coordinated Universal Time) o su nessuna delle due.</summary>
        <value>Uno dei valori di enumerazione che indica ciò che l'ora corrente rappresenta. Il valore predefinito è <see cref="F:System.DateTimeKind.Unspecified" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile impostare esplicitamente il <xref:System.DateTime.Kind%2A> proprietà di un nuovo <xref:System.DateTime> valore a un determinato <xref:System.DateTimeKind> valore chiamando il <xref:System.DateTime.SpecifyKind%2A> metodo.  
  
 Il <xref:System.DateTime.Kind%2A> proprietà consente a un <xref:System.DateTime> valore in modo da riflettere chiaramente Coordinated Universal Time (UTC) o all'ora locale. Al contrario, il <xref:System.DateTimeOffset> struttura può riflettere in modo univoco ogni volta che un qualsiasi fuso orario come un singolo punto nel tempo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il valore massimo possibile di <see cref="T:System.DateTime" />. Questo campo è di sola lettura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di questa costante è equivalente a 23.59.59.9999999 UTC, il 31 dicembre 9999 del calendario gregoriano, esattamente un tick di 100 nanosecondi prima 00:00:00 UTC, il 1 ° gennaio 10000.  
  
 Alcuni calendari, ad esempio il <xref:System.Globalization.ThaiBuddhistCalendar>, supportano un intervallo di date superiore precedente a <xref:System.DateTime.MaxValue>. In questi casi, durante il tentativo di accedere <xref:System.DateTime.MaxValue> assegnazioni di variabili o la formattazione e le operazioni di analisi può generare un <xref:System.ArgumentOutOfRangeException>. Anziché il recupero del valore di <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, è possibile recuperare il valore del valore di data valido dal più recente della cultura specificata il <xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata un'istanza di un <xref:System.DateTime> oggetto passando al costruttore un <xref:System.Int64> valore che rappresenta un numero di segni di graduazione. Prima di richiamare il costruttore, ci si assicura che questo valore è maggiore o uguale a `DateTime.MinValue.Ticks` e minore o uguale a `DateTime.MaxValue.Ticks`. Se non viene generata una <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di millisecondi della data rappresentata dall'istanza.</summary>
        <value>Componente che indica i millisecondi, espresso mediante un valore compreso tra 0 e 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile visualizzare la rappresentazione di stringa del <xref:System.DateTime.Millisecond%2A> proprietà utilizzando l'identificatore di formato "fff". Ad esempio, il codice seguente viene visualizzata una stringa che contiene il numero di millisecondi in una data e ora nella console.  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 È inoltre possibile visualizzare il componente relativo ai millisecondi con gli altri componenti di un valore di data e ora con l'identificatore di formato standard "o". Ad esempio:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 Tuttavia, l'identificatore di formato "o" è destinato per visualizzazione di round trip o l'archiviazione di un <xref:System.DateTime> valore. È inoltre possibile visualizzare i millisecondi con altri componenti di data e ora utilizzando una stringa di formato personalizzato, come illustrato nell'esempio seguente.  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Millisecond%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di minuti della data rappresentata dall'istanza.</summary>
        <value>Componente che indica i minuti, espresso mediante un valore compreso tra 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Minute%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Rappresenta il valore più piccolo possibile di <see cref="T:System.DateTime" />. Questo campo è di sola lettura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di questa costante è equivalente a 00.00.00.0000000 UTC, il 1 ° gennaio 0001 nel calendario gregoriano.  
  
 <xref:System.DateTime.MinValue> definisce la data e ora in cui è assegnato a un valore non inizializzato <xref:System.DateTime> variabile. Questa condizione è illustrata nell'esempio seguente.  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 Il <xref:System.DateTime.MinValue> e <xref:System.DateTime.MaxValue> proprietà consente di assicurare che un valore rientri nell'intervallo supportato prima di passarlo a un <xref:System.DateTime> costruttore. Il codice nella sezione esempio mostra questo utilizzo.  
  
   
  
## Examples  
 Nell'esempio seguente viene creata un'istanza di un <xref:System.DateTime> oggetto passando al costruttore un <xref:System.Int64> valore che rappresenta un numero di segni di graduazione. Prima di richiamare il costruttore, ci si assicura che questo valore è maggiore o uguale a `DateTime.MinValue.Ticks` e minore o uguale a `DateTime.MaxValue.Ticks`. Se non viene generata una <xref:System.ArgumentOutOfRangeException>.  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di mese della data rappresentata dall'istanza.</summary>
        <value>Componente che indica il mese, espresso mediante un valore compreso tra 1 e 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Month%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.DateTime" /> impostato su data e ora correnti sul computer, espresso come ora locale.</summary>
        <value>Oggetto il cui valore corrisponde alla data e all'ora locali correnti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Now%2A> proprietà restituisce un <xref:System.DateTime> valore che rappresenta la data e ora correnti sul computer locale. Si noti che esiste una differenza tra un <xref:System.DateTime> valore, che rappresenta il numero di tick trascorsi dalla mezzanotte del 1 ° gennaio 0001, e la rappresentazione di stringa di <xref:System.DateTime> valore che indica un valore di data e ora in un formato delle impostazioni cultura specifiche specifici. Per informazioni sulla formattazione dei valori di data e ora, vedere il <xref:System.DateTime.ToString%2A> metodo. Nell'esempio seguente visualizza la data breve e ora in diversi formati specifici delle impostazioni cultura.  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 La risoluzione di questa proprietà varia a seconda del timer di sistema, che dipende dal sistema operativo sottostante. Tende a essere compreso tra 0,5 e 15 millisecondi. Di conseguenza, le chiamate ripetute al <xref:System.DateTime.Now%2A> proprietà in un intervallo di tempo breve, ad esempio in un ciclo, può restituire lo stesso valore.  
  
 Il <xref:System.DateTime.Now%2A> proprietà viene spesso utilizzata per misurare le prestazioni. A causa della bassa risoluzione, non è tuttavia adatto per l'uso come strumento di benchmark. Un'alternativa migliore consiste nell'usare la <xref:System.Diagnostics.Stopwatch> classe.  
  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
> [!NOTE]
>  È inoltre possibile utilizzare il <xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> proprietà per recuperare la data locale corrente e l'ora. Consente a un'ora locale essere espresso in modo univoco come un singolo punto nel tempo, che consente a sua volta il valore dell'ora portabile tra più computer.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Now%2A> e <xref:System.DateTime.UtcNow%2A> coordinato di proprietà per il recupero di data e ora locale corrente e il corrente universal data e ora (UTC). Le convenzioni di formattazione di un numero di impostazioni cultura viene quindi utilizzato per visualizzare le stringhe, insieme con i valori del loro <xref:System.DateTime.Kind%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valore di data e ora da aggiungere.</param>
        <param name="t">Intervallo di tempo da aggiungere.</param>
        <summary>Aggiunge un determinato intervallo di tempo a una data e a un'ora specificate, producendo una data e un'ora nuove.</summary>
        <returns>Oggetto che è la somma dei valori di <paramref name="d" /> e <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Il metodo equivalente per l'operatore è <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato l'operatore di addizione.  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Primo oggetto da confrontare.</param>
        <param name="d2">Secondo oggetto da confrontare.</param>
        <summary>Determina se due istanze specificate dell'oggetto <see cref="T:System.DateTime" /> sono uguali.</summary>
        <returns>
          <see langword="true" /> se <paramref name="d1" /> e <paramref name="d2" /> rappresentano le medesime data e ora, in caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Equality%2A> operatore determina se due <xref:System.DateTime> valori sono uguali confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato l'operatore di uguaglianza.  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Determina se un <see cref="T:System.DateTime" /> specificato è successivo a un altro <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> è successivo a <paramref name="t2" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_GreaterThan%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Determina se un oggetto <see cref="T:System.DateTime" /> specificato rappresenta una data e ora uguali o successive a un altro oggetto <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> è uguale o successivo a <paramref name="t2" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_GreaterThanOrEqual%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Primo oggetto da confrontare.</param>
        <param name="d2">Secondo oggetto da confrontare.</param>
        <summary>Determina se due istanze specificate dell'oggetto <see cref="T:System.DateTime" /> non sono uguali.</summary>
        <returns>
          <see langword="true" /> se <paramref name="d1" /> e <paramref name="d2" /> non rappresentano le medesime data e ora, in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Inequality%2A> operatore determina se due <xref:System.DateTime> valori non sono uguali confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Determina se un oggetto <see cref="T:System.DateTime" /> specificato è precedente a un altro oggetto <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> è precedente a <paramref name="t2" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_LessThan%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">Primo oggetto da confrontare.</param>
        <param name="t2">Secondo oggetto da confrontare.</param>
        <summary>Determina se un oggetto <see cref="T:System.DateTime" /> specificato rappresenta una data e ora uguali o precedenti a un altro oggetto <see cref="T:System.DateTime" /> specificato.</summary>
        <returns>
          <see langword="true" /> se <paramref name="t1" /> è uguale o precedente a <paramref name="t2" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_LessThanOrEqual%2A> operatore determina la relazione tra due <xref:System.DateTime> valori confrontando il numero di segni di graduazione. Prima di confrontare <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. L'operazione può essere effettuata confrontando i valori della relativa proprietà <xref:System.DateTime.Kind%2A>.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sottrae un determinato oggetto <see cref="T:System.DateTime" /> o <see cref="T:System.TimeSpan" /> da un oggetto <see cref="T:System.DateTime" /> specificato.</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">Valore data e ora da cui sottrarre (minuendo).</param>
        <param name="d2">Valore data e ora da cui sottrarre (sottraendo).</param>
        <summary>Sottrae una data e un'ora specificate da un'altra data e un'altra ora specificate e restituisce un intervallo di tempo.</summary>
        <returns>Intervallo di tempo tra <paramref name="d1" /> e <paramref name="d2" />, ovvero <paramref name="d1" /> meno <paramref name="d2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> metodo non prende in considerazione il valore di <xref:System.DateTime.Kind%2A> proprietà dei due <xref:System.DateTime> valori quando si esegue la sottrazione. Prima di sottrazione <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. In caso contrario, il risultato includerà la differenza tra fusi orari.  
  
> [!NOTE]
>  Il <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> metodo prende in considerazione la differenza tra fusi orari quando si esegue la sottrazione.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">Valore di data e ora da cui sottrarre.</param>
        <param name="t">Intervallo di tempo da sottrarre.</param>
        <summary>Sottrae un intervallo di tempo specificato da una data e un'ora specificate e restituisce una data e un'ora nuove.</summary>
        <returns>Oggetto il cui valore è il valore di <paramref name="d" /> meno il valore di <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo sottrae il valore di segni di graduazione di `t` dal valore di segni di graduazione `d`.  
  
 Il metodo equivalente per l'operatore è <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore risultante di <see cref="T:System.DateTime" /> è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte la rappresentazione di stringa di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contenuto della sezione:  
  
 [Quale metodo si chiama?](#Tasks)   
 [La stringa da analizzare](#StringToParse)   
 [Convenzioni relative alla lingua e analisi](#Culture)   
 [Elementi di stile e l'analisi](#Styles)   
 [Il valore restituito e DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>Quale metodo si chiama?  
  
|A|Call|  
|--------|----------|  
|Analizzare una stringa di data e ora utilizzando le convenzioni delle impostazioni cultura correnti.|Overload <xref:System.DateTime.Parse%28System.String%29>|  
|Analizzare una stringa di data e ora utilizzando le convenzioni delle impostazioni cultura specifiche.|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> eseguire l'overload (vedere [analisi e le convenzioni culturali](#Culture))|  
|Analizzare una stringa di data e ora con elementi di stile speciali (ad esempio gli spazi vuoti o senza spazi).|Overload <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analizzare una stringa di data e ora che deve essere in un formato specifico.|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|Analizzare una stringa di data e ora ed eseguire una conversione in ora UTC o locale.|Overload <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
|Analizzare una stringa di data e ora senza la gestione delle eccezioni.|Metodo <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>|  
|Ripristinare (round trip) un valore di data e ora creato da un'operazione di formattazione.|Passare la stringa di formato standard "o" o "r" per il <xref:System.DateTime.ToString%28System.String%29> (metodo) e chiamare il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> eseguire l'overload con <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|Analizzare una stringa di data e ora in un formato fisso attraverso i limiti di computer (e possibilmente culturali).|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> o <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> (metodo)|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>La stringa da analizzare  
 Il <xref:System.DateTime.Parse%2A> metodo tenta di convertire la rappresentazione di stringa di un valore di data e ora per il relativo <xref:System.DateTime> equivalente. Tenta di analizzare la stringa di input completamente senza generare un <xref:System.FormatException> (eccezione).  
  
> [!IMPORTANT]
>  Se l'operazione di analisi ha esito negativo a causa di un formato stringa non riconosciuta, la <xref:System.DateTime.Parse%2A> metodo genera una <xref:System.FormatException>, mentre il <xref:System.DateTime.TryParse%2A> restituisce `false`. Poiché la gestione delle eccezioni può essere costosa, è consigliabile utilizzare <xref:System.DateTime.Parse%2A> quando è previsto l'operazione di analisi abbia esito positivo perché l'origine di input è considerato attendibile. <xref:System.DateTime.TryParse%2A> è preferibile quando è probabile che gli errori di analisi, soprattutto perché un'origine di input non è attendibile o si dispongono di valori predefiniti ragionevole per sostituire le stringhe che non vengono analizzate correttamente.   

 La stringa da analizzare può assumere uno dei formati seguenti:  
  
-   Una stringa con una data e ora.  
  
-   Una stringa con una data ma non all'ora. Se il componente della fase è assente, il metodo presuppone mezzanotte (12:00). Se il componente Data dispone di un anno a due cifre, viene convertito in un anno in base il <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> di calendario corrente di impostazioni cultura correnti o specificate impostazioni cultura corrente (se si utilizza un overload con un valore non null `provider` argomento).  
  
- Una stringa con un componente relativo alla data che include solo il mese e anno ma nessun componente giorno. Il metodo presuppone che il primo giorno del mese.

- Una stringa con un componente relativo alla data che include solo il mese e giorno ma nessun componente anno. Il metodo presuppone l'anno corrente.

-   Una stringa con un'ora ma nessun componente di Data. Il metodo presuppone la data corrente a meno che non si chiama il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> rapporto di overload e includere <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> nel `styles` argomento, nel quale caso il metodo presuppone che una data del 1 ° gennaio 0001.  

- Una stringa con un componente di ora che include solo l'ora e un indicatore AM/PM, con nessun componente di Data. Il metodo presuppone che la data corrente e un'ora senza alcun minuti e senza secondi. È possibile modificare questo comportamento chiamando il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> rapporto di overload e includere <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> nel `styles` argomento, nel quale caso il metodo presuppone che una data del 1 ° gennaio 0001.

-   Stringa che include informazioni sul fuso orario ed è conforme a ISO 8601. Negli esempi seguenti, la prima stringa corrisponde alla ora UTC (Coordinated Universal Time) e la seconda indica l'ora nel fuso orario è di sette ore precedenti a (UTC):  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   Una stringa che include l'indicatore GMT ed è conforme al formato di ora RFC 1123; Per esempio:  
  
     "Sat 01 novembre 2008 19:35:00 GMT"  
  
-   Una stringa che include la data e ora insieme a informazioni relative all'offset fuso orario; Per esempio:  
  
     "03/01/2009 05:42:00 -5:00"  

Nell'esempio seguente analizza le stringhe in ognuno di questi formati utilizzando le convenzioni di formattazione delle impostazioni cultura correnti, ovvero in questo caso le impostazioni cultura en-US:

[!code-csharp-interactive[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 Se la stringa di input rappresenta un giorno intercalare in un anno bisestile il calendario usato per il metodo di analisi (vedere [analisi dei thread e culturale convenzioni](#Culture)), il <xref:System.DateTime.Parse%2A> metodo analizza correttamente la stringa. Se la stringa di input rappresenta un giorno intercalare in un non-anno bisestile, il metodo genera un <xref:System.FormatException>.  
  
 Poiché il <xref:System.DateTime.Parse%2A> metodo tenta di analizzare la rappresentazione di stringa di una data e ora usando le regole di formattazione delle impostazioni cultura specificate, il tentativo di analizzare una stringa nelle diverse impostazioni cultura corrente può avere esito negativo. Per analizzare una data specifica e il formato di ora tra diverse impostazioni locali, usare uno degli overload di <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> metodo e fornire un identificatore di formato.  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>Convenzioni relative alla lingua e analisi  
 Tutti gli overload del <xref:System.DateTime.Parse%2A> metodo sono dipendenti dalle impostazioni cultura, a meno che la stringa da analizzare (rappresentata dalla `s` nella tabella seguente) conforme al modello di ISO 8601. L'operazione di analisi utilizza le informazioni di formattazione in un <xref:System.Globalization.DateTimeFormatInfo> oggetto derivato come segue:  
  
|Se si chiama|E `provider` è|Informazioni di formattazione sono derivate da|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|Impostazioni cultura del thread corrente (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> proprietà)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto|Specificato <xref:System.Globalization.DateTimeFormatInfo> oggetto|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|Impostazioni cultura del thread corrente (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> proprietà)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Oggetto <xref:System.Globalization.CultureInfo> oggetto|Proprietà <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> o <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|Custom <xref:System.IFormatProvider> implementazione|Metodo <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>|  
  
 Quando le informazioni di formattazione sono derivata da un <xref:System.Globalization.DateTimeFormatInfo> oggetto, il <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> proprietà definisce il calendario utilizzato nell'operazione di analisi.  
  
 Se si analizza una stringa di data e ora usando un <xref:System.Globalization.DateTimeFormatInfo> oggetto con le impostazioni sono diverse da quelle delle impostazioni cultura standard personalizzate, utilizzare il <xref:System.DateTime.ParseExact%2A> anziché il <xref:System.DateTime.Parse%2A> metodo per aumentare le probabilità di una conversione ha esito positivo. Un non standard stringa data e ora può essere complessa e difficile da analizzare. Il <xref:System.DateTime.Parse%2A> metodo tenta di analizzare una stringa con più criteri di analisi impliciti, ognuno dei quali potrebbe avere esito negativo. Al contrario, il <xref:System.DateTime.ParseExact%2A> metodo è necessario definire in modo esplicito uno o più modelli di analisi che possono avranno esito positivo. Per ulteriori informazioni, vedere la sezione "DateTimeFormatInfo e Dynamic Data" nel <xref:System.Globalization.DateTimeFormatInfo> argomento.  
  
> [!IMPORTANT]
>  Si noti che le convenzioni di formattazione per determinate impostazioni cultura sono dinamiche e possono essere soggette a modifiche. Ciò significa che le operazioni di analisi che dipendono le convenzioni di formattazione delle impostazioni cultura predefinite (corrente) o che specificano un <xref:System.IFormatProvider> oggetto che rappresenta una lingua diversa da impostazioni cultura invarianti può non riuscire in modo imprevisto se si verifica una delle operazioni seguenti:  
>   
> -   I dati specifici delle impostazioni cultura vengono modificati tra le versioni principali o secondari di .NET Framework o come risultato di un aggiornamento alla versione esistente di .NET Framework.  
> -   I dati specifici delle impostazioni cultura riflettono le preferenze dell'utente, che possono variare da computer a computer o a una sessione.  
> -   I dati specifici delle impostazioni cultura rappresentano impostazioni cultura di sostituzione che sostituisce le impostazioni di impostazioni cultura standard o impostazioni cultura personalizzate.  
>   
>  Per evitare le difficoltà nell'analisi delle stringhe di data e ora che sono associate alle modifiche nei dati relative alla lingua, è possibile analizzare le stringhe di data e ora utilizzando le impostazioni cultura invarianti, oppure è possibile chiamare il <xref:System.DateTime.ParseExact%2A> o <xref:System.DateTime.TryParseExact%2A> (metodo) e specificare il formato esatto stringa da analizzare. Se si sta serializzando e la deserializzazione dei dati di data e ora, è possibile utilizzare le convenzioni di formattazione delle impostazioni cultura invarianti oppure è possibile serializzare e deserializzare il <xref:System.DateTime> valore in un formato binario.  
>   
>  Per ulteriori informazioni, vedere la sezione "dati dinamici delle impostazioni cultura" il <xref:System.Globalization.CultureInfo> argomento e i valori di data/ora Persisting"" sezione di <xref:System.DateTime> argomento.  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>Elementi di stile e l'analisi  
 Tutti i <xref:System.DateTime.Parse%2A> overload ignorare i caratteri spazi vuoti iniziali, interne o finali nella stringa di input (rappresentata dalla `s` nella tabella seguente). Data e ora racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ("#", U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (U + 0000).  
  
 Inoltre, il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> overload presenta una `styles` parametro costituito da uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione. Questo parametro definisce la modalità `s` devono essere interpretati e come convertire l'operazione di analisi `s` in una data e ora. Nella tabella seguente vengono descritti gli effetti di ogni <xref:System.Globalization.DateTimeStyles> membro sull'operazione di analisi.  
  
|Membro di DateTimeStyles|Effetto sulla conversione|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC, come indicato di seguito:<br /><br /> -Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore Ora UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.<br />-In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Questo valore viene ignorato. Uno spazio vuoto interno è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Questo valore viene ignorato. Gli spazi vuoti iniziali è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Questo valore viene ignorato. Lo spazio vuoto finale è sempre consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti finali. Comportamento predefinito. Impossibile eseguire l'override fornendo più restrittivo <xref:System.Globalization.DateTimeStyles> il valore di enumerazione, ad esempio <xref:System.Globalization.DateTimeStyles.None>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` manca, si presuppone che le informazioni sul fuso orario, ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` manca presuppone alcuna informazione sul fuso orario UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Anche se valido, questo valore viene ignorato.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione di una stringa di data e ora in un <xref:System.DateTime> valore che rappresenta un'ora locale con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In genere, tale stringa viene creata chiamando il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> (metodo) e con l'identificatore di formato standard "o", "r" o "u".|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>Il valore restituito e DateTime. Kind

Il `DateTime.Parse` overload restituiscono una <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind> proprietà include informazioni sul fuso orario. Può indicare che l'ora è:

- Coordinated Universal Time (<xref:System.DateTimeKind.Utc?displayProperty=fullName>).
- L'ora nel fuso orario locale (<xref:System.DateTimeKind.Local?displayProperty=fullName>).
- Il tempo in un fuso orario sconosciuto (xref:System.DateTimeKind.Unspecified?displayProperty=fullName >).
 
 In genere, il <xref:System.DateTime.Parse%2A> metodo restituisce un <xref:System.DateTime> i cui <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Tuttavia, il <xref:System.DateTime.Parse%2A> metodo può anche eseguire la conversione di fuso orario e impostare il valore della <xref:System.DateTime.Kind%2A> proprietà in modo diverso, a seconda dei valori del `s` e `styles` parametri:  
  
|Se|Conversione del fuso orario|Proprietà Kind|  
|--------|--------------------------|-------------------|  
|`s` contiene informazioni sul fuso orario.|La data e l'ora viene convertito nell'ora nel fuso orario locale.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` contiene informazioni sul fuso orario, e `styles` include il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag.|La data e l'ora viene convertita nell'ora Coordinated Universal Time (UTC).|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` contiene l'identificatore del fuso orario Z o GMT, e `styles` include il <xref:System.Globalization.DateTimeStyles.RoundtripKind> flag.|Data e ora vengono interpretati come ora UTC.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 Nell'esempio seguente converte le stringhe di data che contengono informazioni sul fuso orario per l'ora nel fuso orario locale:  
  
 [!code-csharp-interactive[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  È inoltre possibile mantenere il valore di una data e dell'ora <xref:System.DateTime.Kind%2A> proprietà durante la formattazione e l'operazione di analisi utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag. Nell'esempio seguente viene illustrato come la <xref:System.Globalization.DateTimeStyles.RoundtripKind> flag influisce sull'operazione di analisi in <xref:System.DateTime> i valori vengono convertiti in stringhe utilizzando l'identificatore di formato "o", "r" o "u".  
  
 [!code-csharp-interactive[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
### Examples

Numerosi esempi che chiamano il `DateTime.Parse` metodo vengono intercalati in tutta la [osservazioni](#remarks) sezione di questo articolo e nella documentazione per i singoli `DateTime.Parse` overload.

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

È inoltre possibile scaricare un set completo di `DateTime.Parse` esempi, sono inclusi in un [progetti .NET Core 2.0 per c#](https://github.com/dotnet/docs/raw/master/samples/snippets/csharp/downloads/api/System/DateTime.Parse.zip) e un [progetto .NET Core 2.0 per Visual Basic](https://github.com/dotnet/docs/raw/master/samples/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip), dal [dotnet/docs Repository GitHub](https://github.com/dotnet/docs).

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire. Per altre informazioni, vedere [La stringa da analizzare](#StringToParse).</param>
        <summary>Converte la rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando le convenzioni delle impostazioni cultura del thread corrente.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contiene informazioni sul fuso orario, il metodo restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte la data e l'ora in `s` nell'ora locale. In caso contrario, non esegue alcuna conversione del fuso orario e restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Questo overload tenta di analizzare `s` utilizzando le convenzioni di formattazione delle impostazioni cultura correnti. Le impostazioni cultura correnti sono indicata dal <xref:System.Globalization.CultureInfo.CurrentCulture> proprietà. Per analizzare una stringa utilizzando le convenzioni di formattazione delle impostazioni cultura specifiche, chiamare il <xref:System.DateTime.Parse(System.String,System.IFormatProvider)> o <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> overload.

Questo overload tenta di analizzare `s` utilizzando <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> stile.

## <a name="example"></a>Esempio

Nell'esempio seguente analizza la rappresentazione di stringa dei diversi valori di data e ora da:

- Usando il provider di formato predefinito, che fornisce le convenzioni di formattazione delle impostazioni cultura del thread corrente del computer utilizzato per produrre l'output di esempio. L'output di questo esempio riflette le convenzioni di formattazione delle impostazioni cultura en-US.

- Utilizzando il valore di stile predefinito, ovvero <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>. 

Gestisce il <xref:System.FormatException> le convenzioni di formattazione di eccezione generata quando il metodo tenta di analizzare la rappresentazione di stringa di data e ora con altre impostazioni cultura. Viene inoltre illustrato come analizzare correttamente un valore di data e ora che non utilizza le convenzioni di formattazione delle impostazioni cultura del thread corrente.  
  
 [!code-csharp-interactive[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> non contiene una rappresentazione in forma di stringa valida di una data e di un'ora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire. Per altre informazioni, vedere [La stringa da analizzare](#StringToParse).</param>
        <param name="provider">Oggetto che fornisce informazioni sul formato di <c>s</c> specifiche delle impostazioni cultura.  Vedere [Analisi e convenzioni delle impostazioni cultura](#Culture)</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nel relativo <see cref="T:System.DateTime" /> equivalente usando le informazioni sul formato relative alle impostazioni cultura specificate.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />, come specificato da <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
Se `s` contiene informazioni sul fuso orario, il metodo restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> e converte la data e l'ora in `s` nell'ora locale. In caso contrario, non esegue alcuna conversione del fuso orario e restituisce un <xref:System.DateTime> valore la cui proprietà <xref:System.DateTime.Kind%2A> è di proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>.

Questo overload tenta di analizzare `s` utilizzando il <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> stile.

## <a name="example"></a>Esempio

Nell'esempio seguente viene analizzata una matrice di stringhe di data utilizzando le convenzioni delle impostazioni cultura de-DE, en-US e fr-FR. Viene illustrato come rappresentazioni di stringa di una singola data possono essere interpretate in modo diverso nelle diverse impostazioni cultura.  
  
[!code-csharp-interactive[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> non contiene una rappresentazione in forma di stringa valida di una data e di un'ora.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = null, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire. Per altre informazioni, vedere [La stringa da analizzare](#StringToParse).</param>
        <param name="provider">Oggetto che offre informazioni di formattazione specifiche delle impostazioni cultura relative a <c>s</c>.  Vedere [Analisi e convenzioni delle impostazioni cultura](#Culture)</param>
        <param name="styles">Combinazione bit per bit dei valori di enumerazione che indica gli elementi di stile che possono essere presenti in <c>s</c> per la corretta esecuzione dell'operazione di analisi e che definisce come interpretare la data analizzata in relazione al fuso orario o alla data correnti. Un valore tipico da specificare è <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte la rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando le informazioni sul formato specifiche delle impostazioni cultura e uno stile di formattazione.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />, come specificato da <paramref name="provider" /> e <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

Overload di questo metodo converte la data e ora `s` e imposta il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore come indicato di seguito:

|Se |Conversione del fuso orario|Proprietà Kind|   
|-----|-----|-----|  
|`s` non contiene alcuna informazione di fuso orario.|Nessuno.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|
|`s` contiene informazioni sul fuso orario.|Per l'ora nel fuso orario locale|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|
|`s` contiene informazioni sul fuso orario, e ' stili include il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag.|A Coordinated Universal Time (UTC)|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|
|`s` contiene l'identificatore del fuso orario Z o GMT, e `styles` include il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>.|Nessuno.|<xref:System.DateTimeKind.Utc>| 

## <a name="example"></a>Esempio

Nell'esempio seguente viene illustrato il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metodo e visualizza il valore della <xref:System.DateTime.Kind%2A> proprietà dell'oggetto risultante <xref:System.DateTime> valori.  
  
[!code-csharp-interactive[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> non contiene una rappresentazione in forma di stringa valida di una data e di un'ora.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> contiene una combinazione non valida di valori <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la combinazione costituita dai campi <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" />. Il formato della rappresentazione di stringa deve corrispondere esattamente a un formato specificato; in caso contrario, verrà generata un'eccezione.</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire.</param>
        <param name="format">Identificatore di formato che definisce il formato richiesto di <c>s</c>. Per altre informazioni, vedere la sezione Osservazioni.</param>
        <param name="provider">Oggetto che fornisce informazioni sul formato di <c>s</c> specifiche delle impostazioni cultura.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nel relativo oggetto <see cref="T:System.DateTime" /> equivalente usando il formato specificato e le informazioni sul formato relative alle impostazioni cultura specificate. Il formato della rappresentazione di stringa deve corrispondere esattamente al formato specificato.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />, come specificato da <paramref name="format" /> e <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere nel formato definito per il `format` parametro. Richiede inoltre che il \<data > e \<ora > gli elementi della rappresentazione di stringa di data e ora vengono visualizzati nell'ordine specificato da `format`e che `s` non spazio vuoto diverso da quelli consentiti da `format`. Se `format` definisce una data senza alcun elemento ora e l'analisi operazione ha esito positivo, il valore risultante <xref:System.DateTime> valore ha a mezzanotte (00: 00:00). Se `format` definisce un'ora senza alcun elemento di data e l'analisi operazione ha esito positivo, il valore risultante <xref:System.DateTime> valore ha una data di `DateTime.Now.Date`.  
  
 Se `s` non rappresenta un'ora in un particolare fuso orario e l'operazione di analisi ha esito positivo, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se `s` rappresenta l'ora in un particolare fuso orario e `format` consente di informazioni sul fuso orario deve essere presente (ad esempio, se `format` è uguale per gli identificatori di formato standard "u", "o" o "r" o se contiene la "z", "zz" o "zzz" identificatori di formato personalizzati), il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
 Il `format` parametro è una stringa che contiene un identificatore di formato standard singolo o uno o più identificatori di formato personalizzate che definiscono il formato richiesto di `s`. Per ulteriori informazioni sui codici di formattazione validi, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) o [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
> [!NOTE]
>  Se `format` è un modello di formato personalizzate che non includono i separatori di data o ora (ad esempio "yyyyMMddHHmm"), utilizzare le impostazioni cultura invarianti per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel modello di formato, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 Simboli di ora e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) utilizzate particolare data e `s` sono definiti dal `provider` parametro, come il formato del precisa `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.CultureInfo> viene utilizzato l'oggetto corrispondente alle impostazioni cultura correnti.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ParseExact%2A> metodo.  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> o <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> o <paramref name="format" /> è una stringa vuota.  
  
 oppure  
  
 <paramref name="s" /> non contiene una data e un'ora che corrispondano al criterio specificato in <paramref name="format" />.  
  
 oppure  
  
 Il componente relativo alle ore e l'identificatore di AM/PM in <paramref name="s" /> non concordano.</exception>
        <block subset="none" type="usage">
          <para>Nel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare contiene un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene data e ora da convertire.</param>
        <param name="format">Identificatore di formato che definisce il formato richiesto di <c>s</c>. Per altre informazioni, vedere la sezione Osservazioni.</param>
        <param name="provider">Oggetto che offre informazioni di formattazione specifiche delle impostazioni cultura relative a <c>s</c>.</param>
        <param name="style">Combinazione bit per bit dei valori di enumerazione che fornisce informazioni aggiuntive su <c>s</c>, sugli elementi di stile che possono essere presenti in <c>s</c> o sulla conversione da <c>s</c> a un valore <see cref="T:System.DateTime" />. Un valore tipico da specificare è <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando il formato, le informazioni sul formato specifiche delle impostazioni cultura e lo stile specificati. Il formato della rappresentazione di stringa deve corrispondere esattamente al formato specificato; in caso contrario, verrà generata un'eccezione.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />, come specificato da <paramref name="format" />, <paramref name="provider" /> e <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere in un formato definito per il `format` parametro. Inoltre, richiede che gli elementi di data e ora in `s` vengono visualizzati nell'ordine specificato da `format`. Se `s` non corrispondono al modello del `format` parametro, con le eventuali variazioni definite per il `style` parametro, il metodo genera un <xref:System.FormatException>. Al contrario, il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data in uno dei formati riconosciuto dal provider di formato <xref:System.Globalization.DateTimeFormatInfo> oggetto. Il <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo consente inoltre di elementi di data e ora in `s` vengano visualizzati in qualsiasi ordine.  
  
 Se il `s` parametro contiene solo una volta e non viene utilizzata la data corrente a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene utilizzato. Se il `s` parametro non contiene solo una data l'ora e la mezzanotte (00: 00:00) viene utilizzato. Il `style` parametro determina inoltre se il `s` parametro può contenere spazi iniziali, interna e finale.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oppure utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag per non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `format` parametro definisce il modello richiesto del `s` parametro. Può essere costituito da uno o più identificatori di formato personalizzati di [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [data Standard e Stringhe di formato di ora](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizzano i separatori di data o ora in un modello di formato personalizzato, utilizzare le impostazioni cultura invarianti per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel criterio di ricerca, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
> [!NOTE]
>  Anziché richiedere che `s` conformi a un singolo formato per l'operazione di analisi abbia esito positivo, è possibile chiamare il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (metodo) e specificare più formati consentiti. In questo modo l'operazione di analisi più probabilmente avranno esito positivo.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determinano se e in cui lo spazio vuoto non è definito da `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metodo.  
  
|Membro di DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi data singolo elemento o di ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` può apparire alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e non è definiti per gli spazi vuoti finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti l'ora UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni sulla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro viene analizzato utilizzando i valori predefiniti. Non spazio vuoto diverso da quello presente in `format` è consentita. Se `s` non dispone di un componente di data, la data dell'oggetto restituito <xref:System.DateTime> è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se informazioni sul fuso orario è presente in `s`, l'ora viene convertita nell'ora locale e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione in un <xref:System.DateTime> valore data e ora con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
 Simboli di ora e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) utilizzate particolare data e `s` sono definiti dal `provider` parametro, come il formato del precisa `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.CultureInfo> viene utilizzato l'oggetto corrispondente alle impostazioni cultura correnti.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> metodo. Si noti che la stringa "5/01/2009 8:30 AM" non può essere analizzata quando il `styles` parametro è uguale a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> perché non sono consentiti gli spazi iniziali da `format`. Inoltre, la stringa "5/01/2009 09:00" non può essere analizzata con un `format` di "MM/GG/yyyyhh:mm" perché la stringa della data non precede il numero del mese con uno zero iniziale, come `format` richiede.  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> o <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> o <paramref name="format" /> è una stringa vuota.  
  
 oppure  
  
 <paramref name="s" /> non contiene una data e un'ora che corrispondano al criterio specificato in <paramref name="format" />.  
  
 oppure  
  
 Il componente relativo alle ore e l'identificatore di AM/PM in <paramref name="s" /> non concordano.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contiene una combinazione non valida di valori <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la combinazione costituita dai campi <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare contiene un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire.</param>
        <param name="formats">Matrice di formati consentiti di <c>s</c>. Per altre informazioni, vedere la sezione Osservazioni.</param>
        <param name="provider">Oggetto che fornisce informazioni sul formato di <c>s</c> specifiche delle impostazioni cultura.</param>
        <param name="style">Combinazione bit per bit di valori di enumerazione che indica il formato consentito di <c>s</c>. Un valore tipico da specificare è <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando la matrice di formati, le informazioni sul formato specifiche delle impostazioni cultura e lo stile specificati. Il formato della rappresentazione di stringa deve corrispondere esattamente ad almeno uno dei formati specificati. In caso contrario, verrà generata un'eccezione.</summary>
        <returns>Oggetto equivalente alla data e all'ora contenute in <paramref name="s" />, come specificato da <paramref name="formats" />, <paramref name="provider" /> e <paramref name="style" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data che corrisponde a uno dei modelli assegnati al `formats` parametro. Se la stringa `s` non corrisponde a nessuno di questi modelli con le eventuali variazioni definite dal `styles` parametro, il metodo genera un <xref:System.FormatException>. Oltre a confrontare `s` per più modelli di formattazione, anziché a un singolo modello di formattazione, questo overload si comporta in modo identico al <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo.  
  
 Il `s` parametro contiene la data e l'ora da analizzare. Se il `s` parametro contiene solo una volta e non viene utilizzata la data corrente a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene utilizzato. Se il `s` parametro non contiene solo una data l'ora e la mezzanotte (00: 00:00) viene utilizzato. Il `style` parametro determina inoltre se il `s` parametro può contenere iniziali, spazi vuoti interni o finali caratteri diversi da quelli consentiti da una delle stringhe di formato in `formats`.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oppure utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag per non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `formats` parametro contiene una matrice di modelli, uno dei quali `s` deve corrispondere esattamente se l'operazione di analisi abbia esito positivo. I modelli nel `formats` parametro è costituito da uno o più identificatori di formato personalizzati di [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Stringhe di formato di ora e data standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizzano i separatori di data o ora in un modello di formato personalizzato, utilizzare le impostazioni cultura invarianti per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel criterio di ricerca, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determinano se e in cui lo spazio vuoto non è definito da `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> metodo.  
  
|Membro di DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi data singolo elemento o di ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` può apparire alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e non è definiti per gli spazi vuoti finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti l'ora UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni sulla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro viene analizzato utilizzando i valori predefiniti. Non spazio vuoto diverso da quello presente in `format` è consentita. Se `s` non dispone di un componente di data, la data dell'oggetto restituito <xref:System.DateTime> è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se informazioni sul fuso orario è presente in `s`, l'ora viene convertita nell'ora locale e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione in una data e ora con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
 Simboli di ora e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) utilizzate particolare data e `s` sono definiti dal `provider` parametro, come il formato del precisa `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.CultureInfo> viene utilizzato l'oggetto corrispondente alle impostazioni cultura correnti.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo per garantire che una stringa in un numero di possibili formati può essere analizzata correttamente.  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> o <paramref name="formats" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          Il parametro <paramref name="s" /> è una stringa vuota.  
  
 oppure  
  
 un elemento del parametro <paramref name="formats" /> è una stringa vuota.  
  
 oppure  
  
 <paramref name="s" /> non contiene data e ora che corrispondano agli elementi di <paramref name="formats" />.  
  
 oppure  
  
 Il componente relativo alle ore e l'identificatore di AM/PM in <paramref name="s" /> non concordano.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" /> contiene una combinazione non valida di valori <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la combinazione costituita dai campi <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.ParseExact" /> metodo genera un <see cref="T:System.FormatException" /> se la stringa da analizzare contiene un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente di secondi della data rappresentata dall'istanza.</summary>
        <value>Componente che indica i secondi, espresso mediante un valore compreso tra 0 e 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Second%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">Data e ora.</param>
        <param name="kind">Uno dei valori di enumerazione che indica se il nuovo oggetto rappresenta un'ora locale, un'ora UTC o nessuna delle due.</param>
        <summary>Crea un nuovo oggetto <see cref="T:System.DateTime" /> che ha lo stesso numero di tick dell'oggetto <see cref="T:System.DateTime" /> specificato, ma viene definito come ora locale, ora UTC (Coordinated Universal Time) o nessuna delle due, a seconda di quanto indicato nel valore di <see cref="T:System.DateTimeKind" /> specificato.</summary>
        <returns>Nuovo oggetto che ha lo stesso numero di tick dell'oggetto rappresentato dal parametro <paramref name="value" /> e il valore di <see cref="T:System.DateTimeKind" /> specificato nel parametro <paramref name="kind" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.DateTime> oggetto è costituito da un campo di tipo che indica se il valore di ora si basa sull'ora locale, Coordinated Universal Time (UTC) o nessuna delle due, e un campo di segni di graduazione che contiene un valore di tempo misurato in tick di 100 nanosecondi. Il <xref:System.DateTime.SpecifyKind%2A> crea un nuovo metodo <xref:System.DateTime> mediante l'oggetto `kind` parametro e il valore di ora originale.  
  
> [!IMPORTANT]
>  L'oggetto restituito <xref:System.DateTime> valore non rappresenta lo stesso istante nel tempo come il `value` parametro e <xref:System.DateTime.SpecifyKind%2A> non è un metodo di conversione del fuso orario. Vengono invece demandate il tempo specificato da di `value` parametro invariato e imposta il <xref:System.DateTime.Kind%2A> proprietà `kind`. Per informazioni sulle conversioni di fusi orari, vedere [conversione orari tra fusi orari](~/docs/standard/datetime/converting-between-time-zones.md).  
  
 Il <xref:System.DateTime.SpecifyKind%2A> metodo è utile in scenari di interoperabilità in cui si ricevono un <xref:System.DateTime> oggetto con un campo di tipo non specificato, ma è possibile determinare eseguendo indipendente significa che il campo segni di graduazione rappresenta l'ora locale o UTC.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sottrae la data o la durata specificate dall'istanza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">Valore di data e ora da sottrarre.</param>
        <summary>Sottrae la data e l'ora specificate dall'istanza.</summary>
        <returns>Intervallo di tempo uguale alla data e all'ora rappresentate dall'istanza dalle quali sono state sottratte la data e l'ora rappresentate da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Subtract%28System.DateTime%29> metodo determina la differenza tra due date. Per sottrarre un intervallo di tempo dall'istanza corrente, chiamare il <xref:System.DateTime.Subtract%28System.TimeSpan%29> metodo. Per sottrarre un intervallo di tempo determinato dall'istanza corrente, chiamare il metodo che aggiunge tale intervallo di tempo per la data corrente, quindi specificare un valore negativo come argomento del metodo. Ad esempio, per sottrarre due mesi dalla data corrente, chiamare il <xref:System.DateTime.AddMonths%28System.Int32%29> metodo con un valore compreso tra -2.  
  
 Se la data e l'ora dell'istanza corrente è precedente a `value`, il metodo restituisce un <xref:System.TimeSpan> oggetto che rappresenta un intervallo di tempo negativo. Ovvero, il valore di tutte le relative proprietà diverso da zero (ad esempio <xref:System.TimeSpan.Days%2A> o <xref:System.TimeSpan.Ticks%2A>) è un valore negativo.  
  
 Il <xref:System.DateTime.Subtract%28System.DateTime%29> metodo non prende in considerazione il valore di <xref:System.DateTime.Kind%2A> proprietà dei due <xref:System.DateTime> valori quando si esegue la sottrazione. Prima di sottrazione <xref:System.DateTime> oggetti, assicurarsi che gli oggetti rappresentano orari dello stesso fuso orario. In caso contrario, il risultato includerà la differenza tra fusi orari.  
  
> [!NOTE]
>  Il <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> metodo prende in considerazione la differenza tra fusi orari quando si esegue la sottrazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il risultato è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Intervallo di tempo da sottrarre.</param>
        <summary>Sottrae la durata specificata dall'istanza.</summary>
        <returns>Oggetto uguale alla data e all'ora rappresentate dall'istanza dalle quali è stato sottratto l'intervallo di tempo rappresentato da <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Subtract%28System.TimeSpan%29> metodo restituisce la data in cui una differenza di intervallo di tempo specificato dall'istanza corrente. Per determinare l'intervallo di tempo tra due date, chiamare il <xref:System.DateTime.Subtract%28System.DateTime%29> metodo. Per sottrarre un intervallo di tempo determinato dall'istanza corrente, chiamare il metodo che aggiunge tale intervallo di tempo per la data corrente, quindi specificare un valore negativo come argomento del metodo. Ad esempio, per sottrarre due mesi dalla data corrente, chiamare il <xref:System.DateTime.AddMonths%28System.Int32%29> metodo con un valore compreso tra -2.  
  
 Questo metodo non modifica il valore di questo <xref:System.DateTime>. Al contrario, restituisce un nuovo <xref:System.DateTime> il cui valore è il risultato di questa operazione.  
  
 In genere, il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo sottrae un <xref:System.TimeSpan> oggetto che rappresenta un intervallo di tempo positivo e restituisce un <xref:System.DateTime> valore precedente alla data e ora dell'istanza corrente. Tuttavia, se il <xref:System.TimeSpan> oggetto rappresenta un intervallo di tempo negativo, il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo restituisce un <xref:System.DateTime> valore successiva alla data e ora dell'istanza corrente.  
  
 Il <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> metodo consente di sottrarre un intervallo di tempo che è costituito da più di una unità di tempo, ad esempio (un numero specificato di ore) e un numero specificato di minuti. Da cui sottrarre una singola unità di tempo (ad esempio anni, mesi o giorni) il <xref:System.DateTime> istanza, può passare un valore numerico negativo come parametro a uno dei metodi seguenti:  
  
-   <xref:System.DateTime.AddYears%2A>, per sottrarre un numero specifico di anni dall'istanza corrente di data e ora.  
  
-   <xref:System.DateTime.AddMonths%2A>, per sottrarre un numero di mesi dall'istanza corrente di data e ora specifico.  
  
-   <xref:System.DateTime.AddDays%2A>, per sottrarre un numero specifico di giorni dall'istanza corrente di data e ora.  
  
-   <xref:System.DateTime.AddHours%2A>, per sottrarre un numero specifico di ore dall'istanza corrente di data e ora.  
  
-   <xref:System.DateTime.AddMinutes%2A>, per sottrarre un numero di minuti dall'istanza corrente di data e ora specifico.  
  
-   <xref:System.DateTime.AddSeconds%2A>, per sottrarre un numero specifico di secondi dall'istanza corrente di data e ora.  
  
-   <xref:System.DateTime.AddMilliseconds%2A>, per sottrarre un numero specifico di millisecondi dall'istanza corrente di data e ora.  
  
-   <xref:System.DateTime.AddTicks%2A>, per sottrarre un numero di tick dall'istanza corrente di data e ora specifico.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Subtract%2A> (metodo) e l'operatore di sottrazione.  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il risultato è minore di <see cref="F:System.DateTime.MinValue" /> o maggiore di <see cref="F:System.DateTime.MaxValue" />.</exception>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Restituisce l'attuale oggetto <see cref="T:System.DateTime" />.</summary>
        <returns>Oggetto corrente.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">Tipo desiderato.</param>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Converte l'oggetto <see cref="T:System.DateTime" /> corrente in un oggetto di un tipo specificato.</summary>
        <returns>Oggetto del tipo specificato dal parametro <paramref name="type" />, con un valore equivalente all'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Questa conversione non è supportata per il tipo <see cref="T:System.DateTime" />.</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che implementa l'interfaccia <see cref="T:System.IFormatProvider" />. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Questa conversione non è supportata. Il tentativo di usare questo metodo genera un'eccezione <see cref="T:System.InvalidCastException" />.</summary>
        <returns>Il valore restituito per questo membro non è usato.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">In tutti i casi.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto da popolare con i dati.</param>
        <param name="context">Destinazione per questa serializzazione. Questo parametro non viene usato; specificare <see langword="null" />.</param>
        <summary>Compila un oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con i dati necessari per serializzare l'oggetto <see cref="T:System.DateTime" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo consente di popolare il `info` parametro con il <xref:System.DateTime.Ticks%2A> e <xref:System.DateTime.Kind%2A> i valori delle proprietà.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero di tick che rappresentano data e ora dell'istanza.</summary>
        <value>Numero di tick che rappresentano data e ora dell'istanza. Valore è compreso tra <see langword="DateTime.MinValue.Ticks" /> e <see langword="DateTime.MaxValue.Ticks" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un singolo tick rappresenta 100 nanosecondi oppure un decimilionesimo di secondo. Sono presenti 10.000 i segni di graduazione di un millisecondo, o 10 milioni di segni di graduazione in un secondo.  
  
 Il valore di questa proprietà rappresenta il numero di intervalli da 100 nanosecondi trascorsi dalle ore 12:00:00, 1 gennaio 0001 (0: 00:00 UTC del 1 ° gennaio 0001 nel calendario gregoriano), che rappresenta <xref:System.DateTime.MinValue?displayProperty=nameWithType>. Non include il numero di segni di graduazione sono attribuibili a leap secondi.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Ticks%2A> proprietà per visualizzare il numero di tick trascorsi dall'inizio del ventunesimo secolo e per creare un'istanza di un <xref:System.TimeSpan> oggetto. Il <xref:System.TimeSpan> oggetto viene quindi utilizzato per visualizzare il tempo trascorso utilizzando altri intervalli di tempo.  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'ora del giorno per l'istanza.</summary>
        <value>Intervallo di tempo che rappresenta la frazione del giorno trascorsa a partire dalla mezzanotte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.DateTime.Date%2A> proprietà. che restituisce un <xref:System.DateTime> valore che rappresenta una data senza componente relativo all'ora, il <xref:System.DateTime.TimeOfDay%2A> proprietà restituisce un <xref:System.TimeSpan> valore che rappresenta un <xref:System.DateTime> componente ora del valore.  
  
 Se si desidera visualizzare l'ora del giorno o recuperare la rappresentazione di stringa dell'ora del giorno di un <xref:System.DateTime> valore, è invece possibile chiamare un overload di <xref:System.DateTime.ToString%2A> metodo che presenta un `format` parametro oppure utilizzare il [formattazione composita ](~/docs/standard/base-types/composite-formatting.md) funzionalità con la "t" o una stringa di formato standard "T".  
  
   
  
## Examples  
 L'esempio seguente mostra il valore di <xref:System.DateTime.TimeOfDay%2A> proprietà per una matrice di <xref:System.DateTime> valori. Anche il valore restituito in contrasto con la stringa restituita da una stringa di formato standard "t" in un'operazione di formattazione composita.  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serializza l'oggetto <see cref="T:System.DateTime" /> corrente in un valore binario a 64 bit che può essere quindi usato per ricreare l'oggetto <see cref="T:System.DateTime" />.</summary>
        <returns>Intero con segno a 64 bit che codifica le proprietà <see cref="P:System.DateTime.Kind" /> e <see cref="P:System.DateTime.Ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.DateTime.ToBinary%2A> metodo per convertire il valore dell'oggetto corrente <xref:System.DateTime> oggetto su un valore binario. Successivamente, utilizzare il valore binario e <xref:System.DateTime.FromBinary%2A> metodo ricreare originale <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In alcuni casi, il <xref:System.DateTime> valore restituito dal <xref:System.DateTime.FromBinary%2A> metodo non è identica all'originale <xref:System.DateTime> valore fornito per il <xref:System.DateTime.ToBinary%2A> metodo. Per ulteriori informazioni, vedere la sezione successiva, "Regolazione dell'ora locale".  
  
## <a name="local-time-adjustment"></a>Regolazione dell'ora locale  
 Un'ora locale, ovvero un tempo universale coordinato regolata in base al fuso orario locale, è rappresentata da un <xref:System.DateTime> struttura il cui <xref:System.DateTime.Kind%2A> proprietà ha un valore <xref:System.DateTimeKind.Local>. Quando si ripristina una locale <xref:System.DateTime> valore dalla rappresentazione binaria prodotta dal <xref:System.DateTime.ToBinary%2A> (metodo), il <xref:System.DateTime.FromBinary%2A> metodo potrebbe modificare il valore ricreato in modo che non è uguale al valore originale. Ciò può verificarsi nelle seguenti condizioni:  
  
-   Se una variabile locale <xref:System.DateTime> oggetto viene serializzato in un fuso orario per il <xref:System.DateTime.ToBinary%2A> (metodo) e deserializzato in un fuso orario diverso dal <xref:System.DateTime.FromBinary%2A> metodo, l'ora locale rappresentata dall'oggetto risultante <xref:System.DateTime> oggetto viene regolato automaticamente per il secondo fuso orario.  
  
     Si consideri ad esempio un <xref:System.DateTime> oggetto che rappresenta un'ora locale alle 15: 00 Un'applicazione che è in esecuzione negli Stati Uniti. Fuso orario Pacifico Usa il <xref:System.DateTime.ToBinary%2A> metodo per la conversione che <xref:System.DateTime> oggetto su un valore binario. Un'altra applicazione che è in esecuzione negli Stati Uniti. Fuso orario orientale il <xref:System.DateTime.FromBinary%2A> per convertire il valore binario a un nuovo <xref:System.DateTime> oggetto. Il valore del nuovo <xref:System.DateTime> oggetto è 6 ore, che rappresenta lo stesso punto nel tempo come l'originale di 3 ore valore, ma viene aggiornata all'ora locale del fuso orario orientale.  
  
-   Se la rappresentazione binaria di una variabile locale <xref:System.DateTime> valore rappresenta un'ora non valida nel fuso orario locale del sistema in cui <xref:System.DateTime.FromBinary%2A> viene chiamato, l'ora viene aggiornata in modo che sia valido.  
  
     Ad esempio, in cui si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario Pacifico 14 marzo 2010, alle ore 2:00, quando il tempo sposta in avanti di un'ora, alle 3:00. Questo intervallo di ore è un'ora non valida, vale a dire un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente mostra che quando un'ora che rientra in questo intervallo viene convertito in un valore binario con la <xref:System.DateTime.ToBinary%2A> metodo e viene quindi ripristinato dal <xref:System.DateTime.FromBinary%2A> (metodo), il valore originale è regolato per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetta a modifica passandolo al <xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> (metodo), come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>Considerazioni sulla versione  
 A partire da .NET Framework versione 2.0, un <xref:System.DateTime> struttura è costituita da un campo di tipo privato, che indica se il valore di ora specificato è basato sull'ora locale, Coordinated Universal Time (UTC) o nessuna delle due e un campo privato tick, che contiene il numero di tick di 100 nanosecondi che specificano una data e ora. Il campo segni di graduazione sono accessibili con il <xref:System.DateTime.Ticks%2A> proprietà e il campo tipo sono accessibili con il <xref:System.DateTime.Kind%2A> proprietà.  
  
 Prima di .NET Framework 2.0, se è stato serializzato un <xref:System.DateTime> oggetto manualmente anziché come un'interfaccia di serializzazione <xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>, è necessario solo serializzare i dati di segni di graduazione nel <xref:System.DateTime> struttura. A partire dalla versione 2.0, è anche necessario serializzare i dati di tipo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la data corrente.</summary>
        <value>Oggetto che è impostato sulla data corrente, con il componente ora impostato su 00.00.00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Local>.  
  
 Perché restituisce la data corrente senza l'ora corrente, il <xref:System.DateTime.Today%2A> proprietà è adatta per le applicazioni che utilizzano solo le date. Per informazioni dettagliate, vedere [scelta tra DateTime, DateTimeOffset, TimeSpan e TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md). Al contrario, il <xref:System.DateTime.TimeOfDay%2A> proprietà restituisce l'ora corrente senza specificare la data corrente e <xref:System.DateTime.Now%2A> proprietà restituisce la data corrente e l'ora corrente.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.Date%2A> proprietà per recuperare la data corrente. Viene inoltre illustrato come un <xref:System.DateTime> valore può essere formattato utilizzando alcune delle stringhe di formato di ora e data standard. Si noti che l'output prodotto dalla terza chiamata al metodo di <xref:System.DateTime.ToString%28System.String%29> metodo Usa l'identificatore di formato g per includere il componente della fase, ovvero zero.  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente in un'ora di un file di Windows.</summary>
        <returns>Valore dell'oggetto <see cref="T:System.DateTime" /> corrente espresso come un'ora di un file di Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli da 100 nanosecondi che sono trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Ora di un file utilizzato per registrare quando si crea un'applicazione, accede o scrive in un file.  
  
 Il <xref:System.DateTime.ToFileTime%2A> metodo utilizza il <xref:System.DateTime.Kind%2A> proprietà per determinare se l'oggetto corrente <xref:System.DateTime> oggetto è un'ora locale, un'ora UTC o un tipo non specificato di tempo che viene considerato come un'ora locale.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToFileTime%2A> metodo.  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L'ora del file risultante rappresenterebbe una data e un'ora antecedenti alle 0.00 UTC del 1° gennaio 1601. UTC.</exception>
        <block subset="none" type="usage">
          <para>In genere, il <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> metodo ripristini un <see cref="T:System.DateTime" /> valore che è stato salvato per il <see cref="M:System.DateTime.ToFileTime" /> (metodo). Tuttavia, i due valori possono differire nelle condizioni seguenti:  
  
-   Se la serializzazione e deserializzazione del <see cref="T:System.DateTime" /> verificarsi in fusi orari diversi. Ad esempio, se un <see cref="T:System.DateTime" /> valore con un tempo pari a 12:30 PM negli Stati Uniti. Fuso orientale è serializzato e deserializzato negli Stati Uniti. Fuso orario Pacifico, il valore originale di 12:30 PM vengono adattate alle 9.30 in modo da riflettere la differenza tra i due fusi orari.  
  
-   Se il <see cref="T:System.DateTime" /> valore serializzato rappresenta un'ora non valida nel fuso orario locale. In questo caso, il <see cref="M:System.DateTime.ToFileTime" /> metodo regola ripristinato <see cref="T:System.DateTime" /> valore in modo che rappresenti un'ora valida nel fuso orario locale.  
  
     Ad esempio, in cui si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario Pacifico 14 marzo 2010, alle ore 2:00, quando il tempo sposta in avanti di un'ora, alle 3:00. Questo intervallo di ore è un'ora non valida, vale a dire un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente mostra che quando un'ora che rientra in questo intervallo viene convertito in un valore long integer dal <see cref="M:System.DateTime.ToFileTime" /> metodo e viene quindi ripristinato dal <see cref="M:System.DateTime.FromFileTime(System.Int64)" /> (metodo), il valore originale è regolato per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetta a modifica passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> (metodo), come illustra l'esempio.  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente in un'ora di un file di Windows.</summary>
        <returns>Valore dell'oggetto <see cref="T:System.DateTime" /> corrente espresso come un'ora di un file di Windows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ora di un file di Windows è un valore a 64 bit che rappresenta il numero di intervalli da 100 nanosecondi che sono trascorsi dalla mezzanotte, 1 gennaio 1601 D.C. (C.E.) Coordinated Universal Time (UTC). Ora di un file utilizzato per registrare quando si crea un'applicazione, accede o scrive in un file.  
  
 Il <xref:System.DateTime.ToFileTimeUtc%2A> metodo utilizza il <xref:System.DateTime.Kind%2A> proprietà per determinare se l'oggetto corrente <xref:System.DateTime> oggetto è un'ora locale, un'ora UTC o un tipo non specificato di tempo che viene considerato come ora UTC. In caso di un'ora locale, converte l'ora in formato UTC prima di eseguire la conversione a un'ora di un file di Windows.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">L'ora del file risultante rappresenterebbe una data e un'ora antecedenti alle 0.00 UTC del 1° gennaio 1601. UTC.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToFileTimeUtc" /> metodo talvolta viene utilizzato per convertire un'ora locale in ora UTC e successivamente ripristinarlo chiamando il <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> metodo aggiungendo il <see cref="M:System.DateTime.ToLocalTime" /> (metodo). Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, i due valori di ora locale non sarà uguali. Per ulteriori informazioni, vedere il <see cref="M:System.DateTime.ToLocalTime" /> metodo.</para>
        </block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente in un'ora locale.</summary>
        <returns>Oggetto la cui proprietà <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Local" /> e il cui valore è l'ora locale equivalente al valore dell'oggetto corrente <see cref="T:System.DateTime" /> oppure <see cref="F:System.DateTime.MaxValue" /> se il valore convertito è troppo grande per essere rappresentato da un oggetto <see cref="T:System.DateTime" /> oppure <see cref="F:System.DateTime.MinValue" /> se il valore convertito è troppo piccolo per essere rappresentato come un oggetto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'ora locale è uguale all'ora Coordinated Universal Time (UTC) più l'offset UTC. Per ulteriori informazioni sull'offset dell'ora UTC, vedere <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversione tiene in considerazione anche la regola dell'ora legale che si applica all'ora rappresentate dall'oggetto corrente <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, il <xref:System.DateTime.ToLocalTime%2A> metodo riconosce solo la regola di rettifica corrente durante la conversione dall'ora UTC in ora locale. Di conseguenza, le conversioni per periodi precedenti la regola di rettifica corrente potrebbero non riflettere accuratamente la differenza tra l'ora UTC e l'ora locale.  
  
 A partire da .NET Framework versione 2.0, il valore restituito dal <xref:System.DateTime.ToLocalTime%2A> metodo varia a seconda di <xref:System.DateTime.Kind%2A> proprietà dell'oggetto corrente <xref:System.DateTime> oggetto. Nella tabella seguente descrive i possibili risultati.  
  
|Tipo|Risultati|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Questa istanza di <xref:System.DateTime> viene convertito nell'ora locale.|  
|<xref:System.DateTimeKind.Local>|Viene eseguita alcuna conversione.|  
|<xref:System.DateTimeKind.Unspecified>|Questa istanza di <xref:System.DateTime> si presuppone che sia un'ora UTC, e la conversione viene eseguita come se <xref:System.DateTime.Kind%2A> sono stati <xref:System.DateTimeKind.Utc>.|  
  
> [!NOTE]
>  Il <xref:System.DateTime.ToLocalTime%2A> metodo converte un <xref:System.DateTime> valore rispetto all'ora UTC in ora locale. Per convertire l'ora in un determinato fuso orario locale, utilizzare il <xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> metodo.  
  
 Il valore restituito per la conversione è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> proprietà restituisce sempre <xref:System.DateTimeKind.Local>. Di conseguenza, viene restituito un risultato valido anche se <xref:System.DateTime.ToLocalTime%2A> viene applicato più volte alla stessa <xref:System.DateTime>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLocalTime%2A> metodo. Tenere presente che l'output esatto dipende dalle impostazioni cultura correnti e il fuso orario locale del sistema in cui viene eseguito.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>È possibile utilizzare il <see cref="M:System.DateTime.ToLocalTime" /> metodo per il ripristino di un locale valore data e ora che è stato convertito in UTC tramite il <see cref="M:System.DateTime.ToUniversalTime" /> o <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> metodo. Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, non corrisponderà il valore ripristinato. Quando il <see cref="M:System.DateTime.ToLocalTime" /> metodo converte un'ora dall'ora UTC del fuso orario locale, regola anche il tempo in modo che sia valido nel fuso orario locale.  
  
 Ad esempio, in cui si verifica la transizione dall'ora solare all'ora legale negli Stati Uniti Fuso orario Pacifico 14 marzo 2010, alle ore 2:00, quando il tempo sposta in avanti di un'ora, alle 3:00. Questo intervallo di ore è un'ora non valida, vale a dire un intervallo di tempo che non esiste in questo fuso orario. L'esempio seguente mostra che quando un'ora che rientra in questo intervallo viene convertito in UTC tramite il <see cref="M:System.DateTime.ToUniversalTime" /> metodo e viene quindi ripristinato dal <see cref="M:System.DateTime.ToLocalTime" /> (metodo), il valore originale è regolato per diventare un'ora valida. È possibile determinare se un determinato valore data e ora può essere soggetta a modifica passandolo al <see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> (metodo), come illustra l'esempio.  
  
 [!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)]
 [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nell'equivalente rappresentazione di stringa della data estesa.</summary>
        <returns>Stringa che contiene la rappresentazione di stringa della data estesa dell'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato utilizzando il modello definito per il <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "D" [stringa in formato DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> metodo.  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToLongDateString%2A> metodo distinzione di impostazioni cultura. In quanto corrisponde al modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello di data estesa standard è "dddd, MMMMdd, yyyy"; per le impostazioni cultura de-DE, è "dddd, d. MMMMaaaa"; per le impostazioni cultura ja-JP, è "yyyy'? ' M'? ' d'? ' ". La stringa di formato specifico in un computer specifico può essere personalizzata anche in modo che si differenzia dalla stringa di formato standard di data estesa.  
  
 Per ulteriori informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per ulteriori informazioni sui caratteri di formato, i modelli di formato e l'output producono, vedere il [formattazione dei tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per ulteriori informazioni su come modificare il modello di formato associato a un carattere di formato, vedere la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLongDateString%2A> metodo.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nell'equivalente rappresentazione di stringa dell'ora estesa.</summary>
        <returns>Stringa che contiene la rappresentazione di stringa dell'ora estesa dell'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato utilizzando il modello definito per il <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "T" [stringa di formato di data e ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> metodo.  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToLongTimeString%2A> metodo distinzione di impostazioni cultura. In quanto corrisponde al modello definito dal <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> proprietà delle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello standard di molto tempo è "h:mm: ss tt"; per le impostazioni cultura de-DE, è "Hh"; per le impostazioni cultura ja-JP, è "H:mm: ss". Inoltre è possibile personalizzare la stringa di formato specifico in un computer specifico in modo che si differenzia dalla stringa di formato standard molto tempo.  
  
 Per ulteriori informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per ulteriori informazioni sui caratteri di formato, i modelli di formato e l'output producono, vedere il [formattazione dei tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per ulteriori informazioni su come modificare il modello di formato associato a un carattere di formato, vedere la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToLongTimeString%2A> metodo.  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'istanza nella data di automazione OLE equivalente.</summary>
        <returns>Numero a virgola mobile a precisione doppia che contiene una data di automazione OLE equivalente al valore dell'istanza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una data di automazione OLE viene implementata come numero a virgola mobile, il cui componente integrale è il numero di giorni prima o dopo la mezzanotte, 30 dicembre 1899, e il cui componente frazionario rappresenta l'ora del giorno corrente diviso per 24. Ad esempio, mezzanotte del 31 dicembre 1899 è rappresentato da 1.0; 6 AM, 1 gennaio 1900 è rappresentato da 2.25; mezzanotte del 29 dicembre 1899 è rappresentato da -1,0; e 6 AM, 29 dicembre 1899 è rappresentato da -1.25.  
  
 La data di automazione OLE viene eseguita a mezzanotte, 30 dicembre 1899. La data di automazione OLE minima è mezzanotte dell'1 gennaio 0100. Data di automazione OLE massima è identico <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, all'ultimo istante del 31 dicembre 9999.  
  
 Il <xref:System.DateTime.ToOADate%2A> metodo genera un <xref:System.OverflowException> se l'istanza corrente rappresenta una data successiva <xref:System.DateTime.MinValue> e precedente alla mezzanotte del 1 gennaio 0100. Tuttavia, se il valore dell'istanza corrente è <xref:System.DateTime.MinValue>, il metodo restituisce 0.  
  
 Per ulteriori informazioni sull'automazione OLE, vedere il [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Il valore dell'istanza non può essere rappresentato come una data di automazione OLE.</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nell'equivalente rappresentazione di stringa della data breve.</summary>
        <returns>Stringa che contiene la rappresentazione di stringa della data breve dell'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato utilizzando il modello definito per il <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "d" [stringa in formato DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> metodo.  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToShortDateString%2A> metodo distinzione di impostazioni cultura. In quanto corrisponde al modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, il modello di data breve standard è "G/aaaa"; per le impostazioni cultura de-DE, è "aaaa. MM.yyyy"; per le impostazioni cultura ja-JP, è "yyyy/M/d". La stringa di formato specifico in un computer specifico può essere personalizzata anche in modo che si differenzia dalla stringa di formato standard di data breve.  
  
 Per ulteriori informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> proprietà. Per ulteriori informazioni sui caratteri di formato, i modelli di formato e l'output producono, vedere il [formattazione dei tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per ulteriori informazioni su come modificare il modello di formato associato a un carattere di formato, vedere la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToShortDateString%2A> metodo. Viene inoltre illustrato che il risultato della chiamata di <xref:System.DateTime.ToShortDateString%2A> è identico alla chiamata al metodo di <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo con una "d" come parametro del formato.  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nell'equivalente rappresentazione di stringa dell'ora breve.</summary>
        <returns>Stringa che contiene la rappresentazione di stringa dell'ora breve dell'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato utilizzando il modello definito per il <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> proprietà associata alle impostazioni cultura del thread corrente. Il valore restituito è identico a quello restituito specificando "t" [stringa in formato DateTime standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) con il <xref:System.DateTime.ToString%28System.String%29> metodo.  
  
> [!IMPORTANT]
>  La stringa restituita dal <xref:System.DateTime.ToShortTimeString%2A> metodo distinzione di impostazioni cultura. In quanto corrisponde al modello definito dalle impostazioni cultura correnti <xref:System.Globalization.DateTimeFormatInfo> oggetto. Ad esempio, per le impostazioni cultura en-US, lo schema di ora breve standard è "h:mm tt"; per le impostazioni cultura de-DE, è "Hh: mm"; per le impostazioni cultura ja-JP, è "Hh". Inoltre è possibile personalizzare la stringa di formato specifico in un computer specifico in modo che si differenzia dalla stringa di formato standard di ora breve.  
  
 Per ulteriori informazioni sulle impostazioni cultura del thread corrente, vedere il <xref:System.Threading.Thread.CurrentCulture%2A> proprietà. Per ulteriori informazioni sui caratteri di formato, i modelli di formato e l'output producono, vedere il [formattazione dei tipi](~/docs/standard/base-types/formatting-types.md) argomento. Per ulteriori informazioni su come modificare il modello di formato associato a un carattere di formato, vedere la <xref:System.Globalization.DateTimeFormatInfo> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToShortTimeString%2A> metodo.  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nella rappresentazione di stringa equivalente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nella rappresentazione di stringa equivalente, usando le convenzioni di formattazione delle impostazioni cultura.</summary>
        <returns>Rappresentazione di stringa del valore dell'oggetto <see cref="T:System.DateTime" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato con il data generale e l'identificatore di formato di ora ("G"). Per formattare tramite una specifica data e l'identificatore di formato di ora, chiamare il <xref:System.DateTime.ToString%28System.String%29> metodo. Per formattare usando il data generale e l'identificatore di formato di ora ("G") per una lingua specifica, chiamare il <xref:System.DateTime.ToString%28System.IFormatProvider%29> metodo. Per formattare una data specifica e identificatore di formato di ora e le convenzioni delle impostazioni cultura specifiche, chiamare il <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> metodo.  
  
 Questo metodo Usa informazioni di formattazione derivate dalle impostazioni cultura correnti. In particolare, consente di combinare le stringhe di formato personalizzato restituite dal <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> e <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> le proprietà del <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal `Thread.CurrentThread.CurrentCulture.DateTimeFormat` proprietà. Per ulteriori informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>. Altri overload di <xref:System.DateTime.ToString%2A> (metodo) consentono di specificare le impostazioni cultura da utilizzare e per definire il modello di output di cui formattazione il <xref:System.DateTime> valore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come rappresentazione di stringa di un <xref:System.DateTime> valore restituito dal <xref:System.DateTime.ToString> metodo dipende dalle impostazioni cultura correnti del thread. Vengono modificate le impostazioni cultura del thread corrente da en-US a fr-FR al ja-JP. e in ogni caso chiama il <xref:System.DateTime.ToString> per restituire la rappresentazione di stringa di un valore di data e ora utilizzando le impostazioni cultura.  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La data e l'ora non sono comprese nell'intervallo di date supportato dal calendario usato dalle impostazioni cultura correnti.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString" /> restituisce la rappresentazione di stringa di data e ora di calendario utilizzato dalle impostazioni cultura correnti. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successivo a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che è compreso nell'intervallo del <see cref="T:System.Globalization.HijriCalendar" /> classe quando le impostazioni cultura correnti sono quelle arabe (Siria).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nella rappresentazione di stringa equivalente, usando le informazioni sul formato relative alle impostazioni cultura specificate.</summary>
        <returns>Rappresentazione di stringa del valore dell'oggetto <see cref="T:System.DateTime" /> corrente, come specificato da <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore dell'oggetto corrente <xref:System.DateTime> oggetto viene formattato con il data generale e l'identificatore di formato di ora ("G"), che formatta l'output utilizzando il modello di data breve e il modello di molto tempo.  
  
 Il formato della data breve e ora estesa è definito per il `provider` parametro. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura le cui convenzioni di formattazione riflesse nella stringa restituita. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione della stringa restituita.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato che implementa il <xref:System.IFormatProvider> interfaccia. Il relativo <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.DateTimeFormatInfo> viene utilizzato l'oggetto associato con le impostazioni cultura correnti. Per ulteriori informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente mostra la rappresentazione di stringa di una data e ora utilizzando <xref:System.Globalization.CultureInfo> gli oggetti che rappresentano i cinque diverse impostazioni cultura.  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La data e l'ora non sono comprese nell'intervallo di date supportato dal calendario utilizzato da <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> metodo restituisce la rappresentazione di stringa di data e ora nel calendario utilizzato dalle impostazioni cultura rappresentate dal <paramref name="provider" /> parametro. Il calendario è definito dal <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> proprietà. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successivo a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che è compreso nell'intervallo del <see cref="T:System.Globalization.JapaneseCalendar" /> classe.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Stringa di formato di data e ora standard o personalizzato.</param>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nella rappresentazione di stringa equivalente, usando il formato specificato e le convenzioni di formattazione delle impostazioni cultura.</summary>
        <returns>Rappresentazione di stringa del valore dell'oggetto <see cref="T:System.DateTime" /> corrente, come specificato da <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.ToString%28System.String%29> metodo restituisce la rappresentazione di stringa di un valore di data e ora in un formato specifico che utilizza le convenzioni di formattazione delle impostazioni cultura correnti; per ulteriori informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
 Il `format` parametro deve contenere un carattere identificatore di formato singolo (vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modello di formato personalizzato (vedere [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) ) che definisce il formato della stringa restituita. Se `format` è `null` o una stringa vuota, l'identificatore di formato generale "G", viene utilizzata.  
  
 Alcuni utilizzi di questo metodo includono:  
  
-   Ottiene una stringa che visualizza la data e l'ora in formato data breve le impostazioni cultura correnti e ora. A tale scopo, utilizzare l'identificatore di formato "G".  
  
-   Ottiene una stringa che contiene solo il mese e anno. A tale scopo, utilizzare la stringa di formato "MM/aaaa". La stringa di formato Usa separatore della data di impostazioni cultura correnti.  
  
-   Ottiene una stringa che contiene la data e l'ora in un formato specifico. Ad esempio, il "MM/GG/yyyyHH:mm" stringa di formato visualizza la stringa di data e ora in un formato fisso ad esempio "19 2013 / / 03 / / 18:06". Utilizza la stringa di formato "/" come separatore di data fissa indipendentemente dalle impostazioni cultura.  
  
-   Recupero di una data in formato ridotto che può essere utilizzato per la serializzazione di una stringa di Data. Ad esempio, la stringa di formato "aaaammgg" Visualizza un anno a quattro cifre seguito da un mese a due cifre e giorno a due cifre con nessun separatore della data.  
  
 L'esempio seguente Usa queste tre stringhe di formato per visualizzare un valore di data e ora usando le convenzioni delle impostazioni cultura en-US e fr-FR.  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 L'esempio seguente usa ognuna delle stringhe di formato di ora e data standard e selezione di date personalizzato e stringhe di formato di ora per visualizzare la rappresentazione di stringa di un <xref:System.DateTime> valore. Impostazioni cultura del thread corrente per l'esempio sono en-US.  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La lunghezza di <paramref name="format" /> è 1, che non è uno dei caratteri dell'indicatore di formato definiti per <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 oppure  
  
 <paramref name="format" /> non contiene un criterio di formato personalizzato valido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La data e l'ora non sono comprese nell'intervallo di date supportato dal calendario usato dalle impostazioni cultura correnti.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.String)" /> restituisce la rappresentazione di stringa di data e ora di calendario utilizzato dalle impostazioni cultura correnti. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successivo a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che è compreso nell'intervallo del <see cref="T:System.Globalization.HebrewCalendar" /> classe quando le impostazioni cultura correnti sono ebraico (Israele).  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Stringa di formato di data e ora standard o personalizzato.</param>
        <param name="provider">Oggetto che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nella rappresentazione di stringa equivalente, usando il formato specificato e le informazioni sul formato specifiche delle impostazioni cultura indicate.</summary>
        <returns>Rappresentazione di stringa del valore dell'oggetto <see cref="T:System.DateTime" /> corrente, specificata dai parametri <paramref name="format" /> e <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `format` parametro può contenere un carattere identificatore di formato singolo (vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) o un modello di formato personalizzato (vedere [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md)). Se `format` è `null` o una stringa vuota (""), l'identificatore di formato standard "G", viene utilizzato.  
  
 Il `provider` parametro definisce il modello che corrisponde agli identificatori di formato standard, nonché i simboli e i nomi dei componenti di data e ora. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura le cui convenzioni di formattazione riflesse nella stringa restituita. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione della stringa restituita.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato che implementa il <xref:System.IFormatProvider> interfaccia. Il relativo <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.DateTimeFormatInfo> associato all'oggetto corrente vengono utilizzate impostazioni cultura. Per ulteriori informazioni, vedere <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata ciascuna delle stringhe di formato di tempo standard data per visualizzare la rappresentazione di stringa di data e ora per quattro diverse impostazioni cultura.  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 L'esempio seguente illustra i diversi modi per formattare un <xref:System.DateTime> valore utilizzando invariante <xref:System.Globalization.DateTimeFormatInfo>.  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">La lunghezza di <paramref name="format" /> è 1, che non è uno dei caratteri dell'indicatore di formato definiti per <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 oppure  
  
 <paramref name="format" /> non contiene un criterio di formato personalizzato valido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">La data e l'ora non sono comprese nell'intervallo di date supportato dal calendario utilizzato da <paramref name="provider" />.</exception>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> restituisce la rappresentazione di stringa di data e ora di calendario utilizzato dal <paramref name="provider" /> parametro. Il calendario è definito dal <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> proprietà. Se il valore dell'oggetto corrente <see cref="T:System.DateTime" /> istanza è precedente a <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> o successivo a <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />, il metodo genera un <see cref="T:System.ArgumentOutOfRangeException" />. Nell'esempio seguente viene illustrato questo concetto. Tenta di formattare una data che è compreso nell'intervallo del <see cref="T:System.Globalization.UmAlQuraCalendar" /> classe.  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte il valore dell'oggetto <see cref="T:System.DateTime" /> corrente nell'ora UTC (Coordinated Universal Time).</summary>
        <returns>Oggetto la cui proprietà <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Utc" /> e il cui valore è l'ora UTC equivalente al valore dell'oggetto <see cref="T:System.DateTime" /> corrente oppure <see cref="F:System.DateTime.MaxValue" /> se il valore convertito è troppo grande per essere rappresentato da un oggetto <see cref="T:System.DateTime" /> oppure <see cref="F:System.DateTime.MinValue" /> se il valore convertito è troppo piccolo per essere rappresentato da un oggetto <see cref="T:System.DateTime" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tempo universale coordinato (UTC) è uguale all'ora locale meno l'offset UTC. Per ulteriori informazioni sull'offset dell'ora UTC, vedere <xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>. La conversione tiene in considerazione anche la regola dell'ora legale che si applica all'ora rappresentate dall'oggetto corrente <xref:System.DateTime> oggetto.  
  
> [!IMPORTANT]
>  In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, il <xref:System.DateTime.ToUniversalTime%2A> metodo riconosce solo la regola di rettifica corrente durante la conversione dall'ora locale in ora UTC. Di conseguenza, le conversioni per periodi precedenti la regola di rettifica corrente potrebbero non riflettere accuratamente la differenza tra ora locale e l'ora UTC.  
  
 A partire da .NET Framework versione 2.0, il valore restituito dal <xref:System.DateTime.ToUniversalTime%2A> metodo varia a seconda di <xref:System.DateTime.Kind%2A> proprietà dell'oggetto corrente <xref:System.DateTime> oggetto. Nella tabella seguente descrive i possibili risultati.  
  
|Tipo|Risultati|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|Viene eseguita alcuna conversione.|  
|<xref:System.DateTimeKind.Local>|Corrente <xref:System.DateTime> oggetto viene convertito in UTC.|  
|<xref:System.DateTimeKind.Unspecified>|Corrente <xref:System.DateTime> oggetto presuppone che sia un'ora locale e la conversione viene eseguita come se <xref:System.DateTime.Kind%2A> sono stati <xref:System.DateTimeKind.Local>.|  
  
> [!NOTE]
>  Il <xref:System.DateTime.ToUniversalTime%2A> metodo converte un <xref:System.DateTime> valore dall'ora locale in ora UTC. Per convertire l'ora di un fuso orario locale in ora UTC, utilizzare il <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodo. Per convertire un'ora è noto il cui offset dall'ora UTC, utilizzare il <xref:System.DateTimeOffset.ToUniversalTime%2A> metodo.  
  
 Se il valore data e ora dell'istanza è un'ora ambigua, questo metodo presuppone che sia un'ora solare. (Un'ora ambigua è possibile eseguire il mapping a un'ora solare o a un'ora legale del fuso orario locale) Se il valore data e ora dell'istanza è un'ora non valida, questo metodo sottrae semplicemente l'ora locale rispetto all'ora UTC del fuso orario locale offset per restituire l'ora UTC. (Un'ora non valida è che non esiste a causa dell'applicazione delle regole di regolazione dell'ora legale).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.ToUniversalTime%2A> metodo.  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Il <see cref="M:System.DateTime.ToUniversalTime" /> metodo talvolta viene utilizzato per convertire un'ora locale in ora UTC. Il <see cref="M:System.DateTime.ToLocalTime" /> viene quindi chiamato il metodo per ripristinare l'ora locale originale. Tuttavia, se l'ora originale rappresenta un'ora non valida nel fuso orario locale, i due valori di ora locale non sarà uguali. Per ulteriori informazioni e un esempio, vedere il <see cref="M:System.DateTime.ToLocalTime" /> metodo.  
  
 In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, il <see cref="M:System.DateTime.ToUniversalTime" /> metodo riconosce solo la regola di rettifica corrente per il fuso orario locale, che si applica a tutte le date, incluse le date di livello inferiore (ovvero, le date precedenti alla data di inizio della regolazione corrente regola). Applicazioni in esecuzione su [!INCLUDE[winxp](~/includes/winxp-md.md)] che richiedono sempre accurata data locale e i calcoli temporali devono risolvere il problema utilizzando il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare un <see cref="T:System.TimeZoneInfo" /> dell'oggetto che corrisponde al fuso orario locale e la chiamata il relativo <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> metodo.  
  
 Nell'esempio seguente viene illustrata la differenza tra il <see cref="M:System.DateTime.ToUniversalTime" /> e <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> metodi su un [!INCLUDE[winxp](~/includes/winxp-md.md)] sistema negli Stati Uniti. fuso orario Pacifico (Stati Uniti). Il primo due chiamate al metodo applicano la regola di regolazione fuso orario corrente (quale entrata in effetto nel 2007) per una data nel 2006. La regola di rettifica corrente fornisce la transizione all'ora legale della seconda domenica del mese di marzo. la regola precedente, che era attivo nel 2006, fornito per la transizione all'ora legale prima domenica di aprile. Solo la terza chiamata al metodo esegue in modo accurato il cronologiche conversione date e ore.  
  
 [!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)]
 [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte la rappresentazione di stringa specificata di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" /> e restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene data e ora da convertire.</param>
        <param name="result">Quando questo metodo viene restituito, contiene il valore <see cref="T:System.DateTime" /> equivalente alla data e all'ora contenute nel parametro <c>s</c>, se la conversione riesce; in caso contrario, viene restituito <see cref="F:System.DateTime.MinValue" />. La conversione non riesce se il parametro <c>s</c> è <see langword="null" />, è una stringa vuota ("") o non contiene una rappresentazione di stringa di una data e di un'ora valida. Questo parametro viene passato non inizializzato.</param>
        <summary>Converte la rappresentazione di stringa specificata di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" /> e restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="s" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> è simile al metodo di <xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> (metodo), con la differenza che il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> metodo genera un'eccezione se la conversione non riesce.  
  
 La stringa `s` viene analizzato utilizzando le informazioni di formattazione in corrente <xref:System.Globalization.DateTimeFormatInfo> oggetto, che viene fornito in modo implicito dalle impostazioni cultura del thread corrente.  
  
 Questo metodo tenta di ignorare i dati non riconosciuti, se possibile e mese, giorno, anno le informazioni mancanti e la data corrente viene compilato. Se `s` contiene solo la data e non l'ora, il metodo presuppone che il tempo è mezzanotte (12:00). Se `s` include un componente di data con anno a due cifre, viene convertito in un anno di calendario corrente di cultura correnti in base al valore del <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> proprietà. Qualsiasi, inner join, iniziali o finali spazi in `s` viene ignorato. Data e ora racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ('#', U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (U + 0000).  
  
 Poiché il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo tenta di analizzare la rappresentazione di stringa di una data e ora usando le regole di formattazione delle impostazioni cultura correnti, il tentativo di analizzare una particolare stringa attraverso impostazioni cultura diverse può avere esito negativo o restituire risultati diversi. Se un determinato formato di data e ora viene analizzati in impostazioni locali diverse, utilizzare il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo o uno degli overload di <xref:System.DateTime.TryParseExact%2A> metodo e fornire un identificatore di formato.  
  
 Se `s` è la rappresentazione di stringa di un giorno intercalare in un anno bisestile del calendario corrente, analizza il metodo `s` correttamente. Se `s` la rappresentazione di stringa di un giorno intercalare in un anno non bisestile calendario corrente di impostazioni cultura correnti, l'operazione di analisi ha esito negativo e il metodo restituisce `false`.  
  
 Se `s` non contiene alcuna informazione di fuso orario, `result` contiene un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> quando il metodo restituisce. Se la stringa da analizzare contiene informazioni sul fuso orario, `result` contiene un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> quando il metodo restituisce.  
  
   
  
## Examples  
 Nell'esempio seguente viene passato un numero di stringhe di data e ora per il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo.  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>La formattazione è influenzata dalle proprietà dell'oggetto corrente <see cref="T:System.Globalization.DateTimeFormatInfo" /> oggetto, che per impostazione predefinita sono derivati dal **internazionali e della lingua** nel Pannello di controllo. Il <see cref="Overload:System.DateTime.TryParse" /> metodo imprevista può non riuscire e restituire <see langword="False" /> se corrente <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> proprietà vengono impostate sullo stesso valore.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="styles">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene data e ora da convertire.</param>
        <param name="provider">Oggetto che offre informazioni di formattazione specifiche delle impostazioni cultura relative a <c>s</c>.</param>
        <param name="styles">Combinazione bit per bit dei valori di enumerazione che definisce il modo di interpretare la data analizzata in relazione al fuso orario o alla data corrente. Un valore tipico da specificare è <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quando questo metodo viene restituito, contiene il valore <see cref="T:System.DateTime" /> equivalente alla data e all'ora contenute nel parametro <c>s</c>, se la conversione riesce; in caso contrario, viene restituito <see cref="F:System.DateTime.MinValue" />. La conversione non riesce se il parametro <c>s</c> è <see langword="null" />, è una stringa vuota ("") o non contiene una rappresentazione di stringa di una data e di un'ora valida. Questo parametro viene passato non inizializzato.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" /> usando le informazioni sul formato specifico delle impostazioni cultura e lo stile di formattazione specifici, quindi restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="s" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza una stringa che può contenere informazioni sulla data, ora e fuso orario. È simile al <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (metodo), con la differenza che il <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo genera un'eccezione se la conversione non riesce.  
  
 Questo metodo tenta di ignorare i dati non riconosciuti e analisi `s` completamente. Se `s` contiene un'ora, ma nessuna data, il metodo sostituisce per impostazione predefinita la data corrente o se `styles` include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> flag sostituisce `DateTime.Date.MinValue`. Se `s` contiene una data ma non l'ora, 12:00, mezzanotte viene utilizzata come il tempo predefinito. Se è presente una data, ma il componente anno è costituito da solo due cifre, viene convertito in un anno nel `provider` calendario corrente del parametro in base al valore del <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> proprietà. Qualsiasi iniziali, interni o gli spazi vuoti finali `s` vengono ignorati. Data e ora racchiusi tra parentesi quadre con una coppia di caratteri cancelletto ('#', U + 0023) iniziali e finali e possono essere seguite da uno o più caratteri NULL (U + 0000).  
  
 I formati validi specifici per data e gli elementi di tempo, nonché i nomi e i simboli usati in date e ore, vengono definiti per il `provider` parametro, che può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura di cui formattazione viene utilizzata nel `s` parametro. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> proprietà definisce la formattazione usata in `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce la formattazione usata in `s`.  
  
-   Implementazione personalizzata di <xref:System.IFormatProvider>. Il relativo <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metodo restituisce un <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce la formattazione usata in `s`.  
  
 Se `provider` è `null`, verranno usate le impostazioni cultura correnti.  
  
 Se `s` è la rappresentazione di stringa di un giorno intercalare in un anno bisestile del calendario corrente, analizza il metodo `s` correttamente. Se `s` è la rappresentazione di stringa di un giorno intercalare in un anno non bisestile del calendario corrente di `provider`, l'operazione di analisi ha esito negativo e il metodo restituisce `false`.  
  
 Il `styles` parametro definisce l'interpretazione precisa della stringa analizzata e modalità di gestione, l'operazione di analisi. Può essere uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione, come descritto nella tabella seguente.  
  
|Membro di DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Anche se valido, questo valore viene ignorato. Spazio vuoto interno è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Anche se valido, questo valore viene ignorato. Lo spazio vuoto iniziale è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Anche se valido, questo valore viene ignorato. Lo spazio vuoto finale è consentito negli elementi di data e ora di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e gli spazi vuoti finali. Comportamento predefinito. Impossibile eseguire l'override fornendo più restrittivo <xref:System.Globalization.DateTimeStyles> il valore di enumerazione, ad esempio <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti l'ora UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.None>|Anche se valido, questo valore viene ignorato.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione di una stringa di data e ora in un <xref:System.DateTime> valore con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. In genere, tale stringa viene creata chiamando il <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> metodo utilizzando identificatori di formato standard "o", "r" o "u".|  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a meno che un `styles` flag indica in caso contrario. Se `s` include fuso orario o informazioni relative all'offset fuso orario, il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo esegue le conversioni di ora necessarie e restituisce uno dei seguenti:  
  
-   Oggetto <xref:System.DateTime> la cui data e ora rifletta l'ora locale e il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.  
  
-   Oppure, se `styles` include il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> flag un <xref:System.DateTime> la cui data e ora rifletta UTC e il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Questo comportamento può essere sottoposto a override utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag.  
  
## <a name="parsing-custom-cultures"></a>L'analisi delle impostazioni cultura personalizzate  
 Se si analizza una stringa di data e ora generata per una lingua personalizzata, utilizzare il <xref:System.DateTime.TryParseExact%2A> anziché il <xref:System.DateTime.TryParse%2A> metodo per aumentare le probabilità che l'operazione di analisi avrà esito positivo. Una stringa di data e ora di impostazioni cultura personalizzate può essere complessa e difficile da analizzare. Il <xref:System.DateTime.TryParse%2A> metodo tenta di analizzare una stringa con più criteri di analisi impliciti, ognuno dei quali potrebbe avere esito negativo. Al contrario, il <xref:System.DateTime.TryParseExact%2A> metodo è necessario definire in modo esplicito uno o più modelli di analisi che possono avranno esito positivo.  
  
 Per ulteriori informazioni sulle impostazioni cultura personalizzate, vedere la <xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo.  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> non è un valore valido di <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 oppure  
  
 il parametro <paramref name="styles" /> contiene una combinazione non valida di valori dell'oggetto <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la coppia <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" /> rappresenta impostazioni cultura non associate ad alcun paese e non può essere utilizzato in un'operazione di analisi.</exception>
        <block subset="none" type="usage">
          <para>La formattazione è influenzata dalle proprietà dell'oggetto corrente <see cref="T:System.Globalization.DateTimeFormatInfo" /> oggetto, che viene fornito dal <paramref name="provider" /> parametro. Il <see cref="Overload:System.DateTime.TryParse" /> metodo imprevista può non riuscire e restituire <see langword="False" /> se corrente <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> e <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> proprietà vengono impostate sullo stesso valore.</para>
        </block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'equivalente <see cref="T:System.DateTime" />. Il formato della rappresentazione di stringa deve corrispondere esattamente a un formato specificato. Il metodo restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="formats">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="style">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene data e ora da convertire.</param>
        <param name="format">Formato necessario di <c>s</c>.</param>
        <param name="provider">Oggetto che offre informazioni di formattazione specifiche delle impostazioni cultura relative a <c>s</c>.</param>
        <param name="style">Combinazione bit per bit di uno o più valori di enumerazione che indicano il formato consentito di <c>s</c>.</param>
        <param name="result">Quando questo metodo viene restituito, contiene il valore <see cref="T:System.DateTime" /> equivalente alla data e all'ora contenute nel parametro <c>s</c>, se la conversione riesce; in caso contrario, viene restituito <see cref="F:System.DateTime.MinValue" />. La conversione non riesce se il parametro <c>s</c> o il parametro <c>formato</c> è <see langword="null" />, è una stringa vuota o non contiene un valore di data e ora corrispondente al criterio specificato nel parametro <c>formato</c>. Questo parametro viene passato non inizializzato.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando il formato, le informazioni sul formato specifiche delle impostazioni cultura e lo stile specificati. Il formato della rappresentazione di stringa deve corrispondere esattamente al formato specificato. Il metodo restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <returns>
          <see langword="true" /> se <paramref name="s" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data, che deve essere nel formato definito per il `format` parametro. È simile al <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> (metodo), con la differenza che il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo genera un'eccezione se la conversione non riesce.  
  
 Il `s` parametro contiene la data e ora per analizzare e deve essere in un formato definito per il `format` parametro. Se gli elementi di tipo data, ora e fuso orario sono presenti in `s`, deve comparire anche nell'ordine specificato da `format`. Se `format` definisce una data senza alcun elemento ora e l'analisi operazione ha esito positivo, il valore risultante <xref:System.DateTime> valore ha a mezzanotte (00: 00:00). Se `format` definisce un'ora senza alcun elemento di data e l'analisi operazione ha esito positivo, il valore risultante <xref:System.DateTime> valore per impostazione predefinita è una data di `DateTime.Now.Date`, o la data di `DateTime.MinValue.Date` se `styles` include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag. Il `style` parametro determina se il `s` parametro può contenere spazi iniziali, interna e finale.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oppure utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag per non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `format` parametro contiene un modello che corrisponde al formato previsto del `s` parametro. Il modello nel `format` parametro è costituito da uno o più identificatori di formato personalizzati di [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Stringhe di formato di ora e data standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizzano i separatori di data o ora in un modello di formato personalizzato, utilizzare le impostazioni cultura invarianti per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel criterio di ricerca, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
> [!NOTE]
>  Anziché richiedere che `s` conformi a un singolo formato per l'operazione di analisi abbia esito positivo, è possibile chiamare il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> (metodo) e specificare più formati consentiti. In questo modo l'operazione di analisi più probabilmente avranno esito positivo.  
  
 Simboli di ora e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) utilizzate particolare data e `s` sono definiti dal `provider` parametro, come il formato del precisa `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.CultureInfo> viene utilizzato l'oggetto corrispondente alle impostazioni cultura correnti.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determinano se e in cui lo spazio vuoto non è definito da `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo.  
  
|Membro di DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi data singolo elemento o di ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` può apparire alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e non è definiti per gli spazi vuoti finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti l'ora UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni sulla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro viene analizzato utilizzando i valori predefiniti. Non spazio vuoto diverso da quello presente in `format` è consentita. Se `s` non dispone di un componente di data, la data dell'oggetto restituito <xref:System.DateTime> è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se informazioni sul fuso orario è presente in `s`, l'ora viene convertita nell'ora locale e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione in un <xref:System.DateTime> valore con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo. Si noti che la stringa "5/01/2009 8:30 AM" non può essere analizzata quando il `styles` parametro è uguale a <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> perché non sono consentiti gli spazi iniziali da `format`. Inoltre, la stringa "5/01/2009 09:00" non può essere analizzata con un `format` di "MM/GG/yyyyhh:mm" perché la stringa della data non precede il numero del mese con uno zero iniziale, come `format` richiede.  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> non è un valore valido di <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 oppure  
  
 il parametro <paramref name="styles" /> contiene una combinazione non valida di valori dell'oggetto <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la coppia <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> restituisce <see langword="false" /> se la stringa da analizzare contiene un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Stringa che contiene una data e un'ora da convertire.</param>
        <param name="formats">Matrice di formati consentiti di <c>s</c>.</param>
        <param name="provider">Oggetto che fornisce informazioni sul formato di <c>s</c> specifiche delle impostazioni cultura.</param>
        <param name="style">Combinazione bit per bit di valori di enumerazione che indica il formato consentito di <c>s</c>. Un valore tipico da specificare è <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
        <param name="result">Quando questo metodo viene restituito, contiene il valore <see cref="T:System.DateTime" /> equivalente alla data e all'ora contenute nel parametro <c>s</c>, se la conversione riesce; in caso contrario, viene restituito <see cref="F:System.DateTime.MinValue" />. La conversione non riesce se il parametro <c>s</c> o il parametro <c>formati</c> è <see langword="null" />, il parametro <c>s</c> o un elemento dei <c>formati</c> è una stringa vuota o il formato di <c>s</c> non è uguale a quello specificato da almeno uno dei modelli di formato indicati nel parametro <c>formati</c>. Questo parametro viene passato non inizializzato.</param>
        <summary>Converte una determinata rappresentazione di stringa di una data e di un'ora nell'oggetto <see cref="T:System.DateTime" /> equivalente usando la matrice di formati, le informazioni sul formato specifiche delle impostazioni cultura e lo stile specificati. Il formato della rappresentazione di stringa deve corrispondere esattamente ad almeno uno dei formati specificati. Il metodo restituisce un valore che indica se la conversione è stata eseguita correttamente.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="s" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo analizza la rappresentazione di stringa di una data che corrisponde a uno dei modelli assegnati al `formats` parametro. È ad esempio il <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> metodo, ad eccezione di <xref:System.DateTime.TryParseExact%2A> metodo genera un'eccezione se la conversione non riesce.  
  
 Il `s` parametro contiene la data e l'ora da analizzare. Se il `s` parametro contiene solo una volta e non viene utilizzata la data corrente a meno che il `style` parametro include il <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> flag, nel qual caso la data predefinita (`DateTime.Date.MinValue`) viene utilizzato. Se il `s` parametro non contiene solo una data l'ora e la mezzanotte (00: 00:00) viene utilizzato. Il `style` parametro determina inoltre se il `s` parametro può contenere iniziali, spazi vuoti interni o finali caratteri diversi da quelli consentiti da una delle stringhe di formato in `formats`.  
  
 Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, oppure utilizzando il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> e <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag, che restituisce un <xref:System.DateTime> il cui valore <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se s contiene informazioni sul fuso orario, l'ora viene convertita nell'ora locale, se necessario e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo comportamento può essere modificato utilizzando il <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> flag per non convertire Coordinated Universal Time (UTC) in un'ora locale e impostare il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
 Il `formats` parametro contiene una matrice di modelli, uno dei quali `s` deve corrispondere esattamente se l'operazione di analisi abbia esito positivo. I modelli nel `formats` parametro costituito da uno o più identificatori di formato personalizzati di [stringhe di formato di ora e data personalizzato](~/docs/standard/base-types/custom-date-and-time-format-strings.md) tabella o un identificatore di formato singolo standard, che identifica un criterio predefinito, dal [Stringhe di formato di ora e data standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) tabella.  
  
 Se non si utilizzano i separatori di data o ora in un modello di formato personalizzato, utilizzare le impostazioni cultura invarianti per il `provider` identificatore di formato di parametro e la forma più estesa di ogni personalizzata. Ad esempio, se si desidera specificare le ore nel criterio di ricerca, specificare la forma più estesa, "HH", anziché la forma più ristretta, "H".  
  
 Simboli di ora e stringhe (ad esempio i nomi dei giorni della settimana in un determinato linguaggio) utilizzate particolare data e `s` sono definiti dal `provider` parametro, come il formato del precisa `s` se `format` è un formato standard stringa dell'identificatore. Il `provider` parametro può essere uno dei seguenti:  
  
-   Oggetto <xref:System.Globalization.CultureInfo> oggetto che rappresenta le impostazioni cultura usate per interpretare `s`. Il <xref:System.Globalization.DateTimeFormatInfo> oggetto restituito dal relativo <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> proprietà definisce i simboli e la formattazione `s`.  
  
-   Oggetto <xref:System.Globalization.DateTimeFormatInfo> oggetto che definisce il formato di data e ora.  
  
-   Un oggetto personalizzato <xref:System.IFormatProvider> implementazione cui <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce il <xref:System.Globalization.CultureInfo> oggetto o <xref:System.Globalization.DateTimeFormatInfo> oggetto che fornisce informazioni di formattazione.  
  
 Se `provider` è `null`, <xref:System.Globalization.CultureInfo> viene utilizzato l'oggetto corrispondente alle impostazioni cultura correnti.  
  
 Il `styles` parametro include uno o più membri del <xref:System.Globalization.DateTimeStyles> enumerazione che determinano se e in cui lo spazio vuoto non è definito da `format` possono essere visualizzati in `s` e che controllano il comportamento preciso dell'operazione di analisi. La tabella seguente descrive come ogni membro del <xref:System.Globalization.DateTimeStyles> enumerazione influisce sul funzionamento del <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> metodo.  
  
|Membro di DateTimeStyles|Descrizione|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|Analizza `s` e, se necessario, lo converte in formato UTC. Se `s` include una differenza di fuso orario, o se `s` non contiene alcuna informazione di fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> flag, il metodo analizza la stringa, chiama <xref:System.DateTime.ToUniversalTime%2A> per convertire l'oggetto restituito <xref:System.DateTime> valore in formato UTC e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. Se `s` rappresenta il formato UTC, o se `s` non contiene informazioni sul fuso orario ma `styles` include il <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> flag, il metodo analizza la stringa, non esegue alcuna conversione del fuso orario su restituito <xref:System.DateTime> valore e imposta il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. In tutti gli altri casi, il flag non ha effetto.|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|Specifica che lo spazio vuoto non è definito da `format` possono apparire tra qualsiasi data singolo elemento o di ora.|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|Specifica che lo spazio vuoto non è definito da `format` possono essere visualizzati all'inizio di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|Specifica che lo spazio vuoto non è definito da `format` può apparire alla fine di `s`.|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|Specifica che `s` può contenere iniziali, interni e non è definiti per gli spazi vuoti finali `format`.|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti un'ora locale. A meno che il <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|Specifica che se `s` non contiene informazioni sul fuso orario, si presuppone che rappresenti l'ora UTC. A meno che non la <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> flag è presente, il metodo converte l'oggetto restituito <xref:System.DateTime> valore rispetto all'ora UTC per l'ora locale e imposta il relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|Se `s` contiene ora senza informazioni sulla data, la data del valore restituito è impostata su `DateTime.MinValue.Date`.|  
|<xref:System.Globalization.DateTimeStyles.None>|Il `s` parametro viene analizzato utilizzando i valori predefiniti. Non spazio vuoto diverso da quello presente in `format` è consentita. Se `s` non dispone di un componente di data, la data dell'oggetto restituito <xref:System.DateTime> è impostato su 1/1/0001. Se `s` non contiene alcuna informazione di fuso orario, il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se informazioni sul fuso orario è presente in `s`, l'ora viene convertita nell'ora locale e <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> oggetto è impostato su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>.|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|Per le stringhe che contengono informazioni sul fuso orario, tenta di impedire la conversione in un <xref:System.DateTime> valore con il relativo <xref:System.DateTime.Kind%2A> proprietà impostata su <xref:System.DateTimeKind.Local?displayProperty=nameWithType>. Questo flag principalmente impedisce la conversione dell'ora UTC in ora locale.|  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> metodo per garantire che una stringa in un numero di possibili formati può essere analizzata correttamente.  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> non è un valore valido di <see cref="T:System.Globalization.DateTimeStyles" />.  
  
 oppure  
  
 il parametro <paramref name="styles" /> contiene una combinazione non valida di valori dell'oggetto <see cref="T:System.Globalization.DateTimeStyles" />, quale ad esempio la coppia <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> e <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />.</exception>
        <block subset="none" type="usage">
          <para>Nel [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <see cref="Overload:System.DateTime.TryParseExact" /> restituisce <see langword="false" /> se la stringa da analizzare contiene un componente di ora e un indicatore AM/PM non presenti nel contratto. Nel [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] e versioni precedenti, l'indicatore AM/PM viene ignorato.</para>
        </block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.DateTime" /> impostato su data e ora correnti sul computer, espresso come ora UTC (Coordinated Universal Time).</summary>
        <value>Oggetto il cui valore corrisponde alla data e all'ora UTC correnti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La risoluzione di questa proprietà varia a seconda del timer di sistema, che dipende dal sistema operativo sottostante. Tende a essere compreso tra 0,5 e 15 millisecondi.

 A partire da .NET Framework versione 2.0, il valore restituito è un <xref:System.DateTime> cui <xref:System.DateTime.Kind%2A> restituisce proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.

 Un'alternativa all'utilizzo <xref:System.DateTime.UtcNow%2A> è <xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>. Mentre il primo indica che un valore di data e ora (UTC) Coordinated Universal Time assegnando <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> per relativo <xref:System.DateTime.Kind%2A> proprietà, quest'ultimo assegna la data e offset dell'ora UTC valore ora (uguale a <xref:System.TimeSpan.Zero?displayProperty=nameWithType>).
  
## Examples  
 L'esempio seguente usa il <xref:System.DateTime.SpecifyKind%2A> metodo per illustrare come <xref:System.DateTime.Kind%2A> influisce sulla proprietà di <xref:System.DateTime.ToLocalTime%2A> e <xref:System.DateTime.ToUniversalTime%2A> metodi di conversione.  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il componente dell'anno della data rappresentata dall'istanza.</summary>
        <value>Anno, compreso fra 1 e 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.DateTime.Year%2A> proprietà restituisce l'anno dell'istanza corrente del calendario gregoriano. Non viene restituito l'anno utilizzando il calendario predefinito delle impostazioni cultura correnti. Per recuperare l'anno in un determinato calendario, è possibile chiamare del calendario `GetYear` metodo, come illustrato nel codice seguente.  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.DateTime.Year%2A> proprietà.  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>