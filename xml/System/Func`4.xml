<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="60516-101">Tipo del primo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="60516-102">Tipo del secondo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="60516-103">Tipo del terzo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="60516-104">Tipo del valore restituito del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-104">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="60516-105">Primo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-105">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="60516-106">Secondo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-106">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="60516-107">Terzo parametro del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-107">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="60516-108">Incapsula un metodo che dispone di tre parametri e restituisce un valore del tipo specificato dal parametro <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="60516-108">Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="60516-109">Valore restituito del metodo incapsulato da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-109">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="60516-110">È possibile utilizzare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato.</span><span class="sxs-lookup"><span data-stu-id="60516-110">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="60516-111">Il metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-111">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="60516-112">Ciò significa che il metodo incapsulato deve avere tre parametri, ognuno dei quali è passato per valore, e deve restituire un valore.</span><span class="sxs-lookup"><span data-stu-id="60516-112">This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="60516-113">Per fare riferimento a un metodo che presenta tre parametri e restituisce `void` (o in Visual Basic, che è dichiarato come un `Sub` piuttosto che come un `Function`), utilizzare il metodo generico <xref:System.Action%603> delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-113">To reference a method that has three parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%603> delegate instead.</span></span>  
  
 <span data-ttu-id="60516-114">Quando si utilizza il <xref:System.Func%604> delegato, non è necessario definire in modo esplicito un delegato che incapsula un metodo con tre parametri.</span><span class="sxs-lookup"><span data-stu-id="60516-114">When you use the <xref:System.Func%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="60516-115">Ad esempio, il codice seguente dichiara in modo esplicito un delegato generico denominato `ParseNumber` e assegna un riferimento di <xref:System.Int32.Parse%2A> metodo all'istanza di delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-115">For example, the following code explicitly declares a generic delegate named `ParseNumber` and assigns a reference to the <xref:System.Int32.Parse%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="60516-116">Nell'esempio seguente viene semplificato questo codice creando il <xref:System.Func%604> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.</span><span class="sxs-lookup"><span data-stu-id="60516-116">The following example simplifies this code by instantiating the <xref:System.Func%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 <span data-ttu-id="60516-117">È possibile utilizzare il <xref:System.Func%604> delegato con i metodi anonimi in c#, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="60516-117">You can use the <xref:System.Func%604> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="60516-118">(Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="60516-118">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 <span data-ttu-id="60516-119">È inoltre possibile assegnare un'espressione lambda a un <xref:System.Func%604> delegare, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="60516-119">You can also assign a lambda expression to a <xref:System.Func%604> delegate, as the following example illustrates.</span></span> <span data-ttu-id="60516-120">(Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="60516-120">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="60516-121">Il tipo sottostante di un'espressione lambda è uno del tipo generico `Func` delegati.</span><span class="sxs-lookup"><span data-stu-id="60516-121">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="60516-122">Questo rende possibile passare un'espressione lambda come un parametro senza l'assegnazione in modo esplicito a un delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-122">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="60516-123">In particolare, poiché molti metodi di tipi nel <xref:System.Linq> dispone di spazio dei nomi `Func` parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un `Func` delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-123">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="60516-124">Nell'esempio riportato di seguito viene illustrato come dichiarare e utilizzare un <xref:System.Func%603> delegato.</span><span class="sxs-lookup"><span data-stu-id="60516-124">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="60516-125">In questo esempio dichiara un <xref:System.Func%603> variabile e assegna un'espressione lambda che accetta un <xref:System.String> valore e un <xref:System.Int32> valore come parametri.</span><span class="sxs-lookup"><span data-stu-id="60516-125">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="60516-126">L'espressione lambda restituisce `true` se la lunghezza del <xref:System.String> è uguale al valore del parametro di <xref:System.Int32> parametro.</span><span class="sxs-lookup"><span data-stu-id="60516-126">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="60516-127">Il delegato che incapsula questo metodo viene successivamente utilizzato in una query per filtrare le stringhe in una matrice di stringhe.</span><span class="sxs-lookup"><span data-stu-id="60516-127">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>