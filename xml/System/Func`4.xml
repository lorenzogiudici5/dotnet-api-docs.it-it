<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd085edeeabf8c8ef76fb93bfc82e40c5f61d73e" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46694972" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.</typeparam>
    <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che dispone di tre parametri e restituisce un valore del tipo specificato dal parametro <typeparamref name="TResult" />.</summary>
    <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato. Metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato. Ciò significa che il metodo incapsulato deve avere tre parametri, ognuno dei quali viene passato per valore, e che deve restituire un valore.  
  
> [!NOTE]
>  Per fare riferimento a un metodo che presenta tre parametri e restituisce `void` (o in Visual Basic, che è dichiarato come un `Sub` anziché come una `Function`), usare il tipo generico <xref:System.Action%603> delegato.  
  
 Quando si usa il <xref:System.Func%604> delegato, non è necessario definire in modo esplicito un delegato che incapsula un metodo con tre parametri. Ad esempio, il codice seguente dichiara in modo esplicito un delegato generico denominato `ParseNumber` e assegna un riferimento al <xref:System.Int32.Parse%2A> metodo all'istanza di delegato.  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 Nell'esempio seguente viene semplificato il codice creando il <xref:System.Func%604> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 È possibile usare il <xref:System.Func%604> delegare con i metodi anonimi nel linguaggio c#, come illustrato nell'esempio seguente. (Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 È anche possibile assegnare un'espressione lambda a un <xref:System.Func%604> delegato, come illustrato nell'esempio seguente. (Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 Il tipo sottostante di un'espressione lambda è uno del tipo generico `Func` delegati. Questo rende possibile passare un'espressione lambda come un parametro senza assegnazione esplicita di un delegato. In particolare, perché molti metodi dei tipi nel <xref:System.Linq> dello spazio dei nomi hanno `Func` parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un `Func` delegare.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come dichiarare e usare un <xref:System.Func%603> delegare. Questo esempio viene dichiarata una <xref:System.Func%603> variabile e lo assegna un'espressione lambda che accetta una <xref:System.String> valore e un <xref:System.Int32> valore come parametri. Restituisce l'espressione lambda `true` se la lunghezza del <xref:System.String> è uguale al valore di parametro di <xref:System.Int32> parametro. Delegato che incapsula il metodo utilizzato successivamente in una query per le stringhe di filtro in una matrice di stringhe.  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">Espressioni lambda (Guida per programmatori C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">Espressioni lambda</related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">Delegati (Guida per programmatori C#)</related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">Delegati in Visual Basic</related>
  </Docs>
</Type>