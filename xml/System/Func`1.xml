<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`1.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac532bfd87c717460eeca143861ae42f3f64042f133.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32bfd87c717460eeca143861ae42f3f64042f133</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">Tipo del valore restituito del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Func`1">
          <source>Encapsulates a method that has no parameters and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">Incapsula un metodo che non dispone di parametri e restituisce un valore del tipo specificato dal parametro <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Func`1">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">Valore restituito del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">È possibile utilizzare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">Il metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This means that the encapsulated method must have no parameters and must return a value.</source>
          <target state="translated">Ciò significa che il metodo incapsulato non deve avere parametri e deve restituire un valore.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>To reference a method that has no parameters and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the <ph id="ph4">&lt;xref:System.Action&gt;</ph> delegate instead.</source>
          <target state="translated">Per fare riferimento a un metodo che non presenta parametri e restituisce <ph id="ph1">`void`</ph> (o in Visual Basic, che è dichiarato come un <ph id="ph2">`Sub`</ph> piuttosto che come un <ph id="ph3">`Function`</ph>), utilizzare il <ph id="ph4">&lt;xref:System.Action&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</source>
          <target state="translated">Quando si utilizza il <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegato, non è necessario definire in modo esplicito un delegato che incapsula un metodo senza parametri.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`WriteMethod`</ph> and assigns a reference to the <ph id="ph2">`OutputTarget.SendToFile`</ph> instance method to its delegate instance.</source>
          <target state="translated">Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato <ph id="ph1">`WriteMethod`</ph> e assegna un riferimento di <ph id="ph2">`OutputTarget.SendToFile`</ph> metodo all'istanza di delegato di istanza.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">Nell'esempio seguente viene semplificato questo codice creando il <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can use the <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegato con i metodi anonimi in c#, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(Per un'introduzione ai metodi anonimi, vedere <bpt id="p1">[</bpt>metodi anonimi<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">È inoltre possibile assegnare un'espressione lambda a un <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegare, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(Per un'introduzione alle espressioni lambda, vedere <bpt id="p1">[</bpt>espressioni Lambda<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> e <bpt id="p2">[</bpt>espressioni Lambda<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">Il tipo sottostante di un'espressione lambda è uno del tipo generico <ph id="ph1">`Func`</ph> delegati.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">Questo rende possibile passare un'espressione lambda come un parametro senza l'assegnazione in modo esplicito a un delegato.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">`Func`</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">`Func`</ph> delegate.</source>
          <target state="translated">In particolare, poiché molti metodi di tipi nel <ph id="ph1">&lt;xref:System.Linq&gt;</ph> dispone di spazio dei nomi <ph id="ph2">`Func`</ph> parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un <ph id="ph3">`Func`</ph> delegato.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegate.</source>
          <target state="translated">Se si dispone di un'attività onerose di calcolo che si desidera eseguire solo se il risultato è effettivamente necessario, è possibile assegnare la funzione dispendiosa a un <ph id="ph1">&lt;xref:System.Func%601&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The execution of the function can then be delayed until a property that accesses the value is used in an expression.</source>
          <target state="translated">L'esecuzione della funzione può quindi essere posticipato fino a quando non viene utilizzata una proprietà che accede al valore in un'espressione.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The example in the next section demonstrates how to do this.</source>
          <target state="translated">L'esempio nella sezione successiva illustra come eseguire questa operazione.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The following example demonstrates how to use a delegate that takes no parameters.</source>
          <target state="translated">Nell'esempio seguente viene illustrato come utilizzare un delegato che non accetta parametri.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This code creates a generic class named <ph id="ph1">`LazyValue`</ph> that has a field of type <ph id="ph2">&lt;xref:System.Func%601&gt;</ph>.</source>
          <target state="translated">Questo codice crea una classe generica denominata <ph id="ph1">`LazyValue`</ph> che dispone di un campo di tipo <ph id="ph2">&lt;xref:System.Func%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the <ph id="ph1">`LazyValue`</ph> object.</source>
          <target state="translated">Questo campo delegato può archiviare un riferimento a qualsiasi funzione che restituisce un valore di tipo che corrisponde al parametro di tipo di <ph id="ph1">`LazyValue`</ph> oggetto.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The <ph id="ph1">`LazyValue`</ph> type also has a <ph id="ph2">`Value`</ph> property that executes the function (if it has not already been executed) and returns the resulting value.</source>
          <target state="translated">Il <ph id="ph1">`LazyValue`</ph> tipo dispone anche di un <ph id="ph2">`Value`</ph> proprietà che esegue la funzione (se non è già stata eseguita) e restituisce il valore risultante.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The example creates two methods and instantiates two <ph id="ph1">`LazyValue`</ph> objects with lambda expressions that call these methods.</source>
          <target state="translated">Nell'esempio vengono creati due metodi e un'istanza di due <ph id="ph1">`LazyValue`</ph> oggetti con le espressioni lambda che chiamano questi metodi.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>The lambda expressions do not take parameters because they just need to call a method.</source>
          <target state="translated">Le espressioni lambda non accettano parametri, poiché devono chiamare un metodo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`1">
          <source>As the output shows, the two methods are executed only when the value of each <ph id="ph1">`LazyValue`</ph> object is retrieved.</source>
          <target state="translated">Come illustrato nell'output, i due metodi vengono eseguiti solo quando il valore di ogni <ph id="ph1">`LazyValue`</ph> viene recuperato l'oggetto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>