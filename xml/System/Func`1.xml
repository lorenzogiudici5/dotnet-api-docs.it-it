<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69512d04d7ee64f191d1ea741c2ca953bc1c0e8a" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46630552" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="6eec2-101">Tipo del valore restituito del metodo incapsulato da questo delegato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-101">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="6eec2-102">Incapsula un metodo che non dispone di parametri e restituisce un valore del tipo specificato dal parametro <typeparamref name="TResult" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="6eec2-103">Valore restituito del metodo incapsulato da questo delegato.</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-103">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6eec2-104">È possibile usare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato.</span><span class="sxs-lookup"><span data-stu-id="6eec2-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="6eec2-105">Metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato.</span><span class="sxs-lookup"><span data-stu-id="6eec2-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="6eec2-106">Ciò significa che il metodo incapsulato non deve avere parametri e deve restituire un valore.</span><span class="sxs-lookup"><span data-stu-id="6eec2-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6eec2-107">Per fare riferimento a un metodo che non presenta parametri e restituisce `void` (o in Visual Basic, che è dichiarato come un `Sub` anziché come una `Function`), usare il <xref:System.Action> delegato.</span><span class="sxs-lookup"><span data-stu-id="6eec2-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="6eec2-108">Quando si usa il <xref:System.Func%601> delegato, non è necessario definire in modo esplicito un delegato che incapsula un metodo senza parametri.</span><span class="sxs-lookup"><span data-stu-id="6eec2-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="6eec2-109">Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato `WriteMethod` e assegna un riferimento al `OutputTarget.SendToFile` metodo all'istanza di delegato di istanza.</span><span class="sxs-lookup"><span data-stu-id="6eec2-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="6eec2-110">Nell'esempio seguente viene semplificato il codice creando il <xref:System.Func%601> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.</span><span class="sxs-lookup"><span data-stu-id="6eec2-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="6eec2-111">È possibile usare il <xref:System.Func%601> delegare con i metodi anonimi nel linguaggio c#, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="6eec2-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="6eec2-112">(Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="6eec2-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="6eec2-113">È anche possibile assegnare un'espressione lambda a un <xref:System.Func%602> delegato, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="6eec2-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="6eec2-114">(Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) e [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="6eec2-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="6eec2-115">Il tipo sottostante di un'espressione lambda è uno del tipo generico `Func` delegati.</span><span class="sxs-lookup"><span data-stu-id="6eec2-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="6eec2-116">Questo rende possibile passare un'espressione lambda come un parametro senza assegnazione esplicita di un delegato.</span><span class="sxs-lookup"><span data-stu-id="6eec2-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="6eec2-117">In particolare, perché molti metodi dei tipi nel <xref:System.Linq> dello spazio dei nomi hanno `Func` parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un `Func` delegare.</span><span class="sxs-lookup"><span data-stu-id="6eec2-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="6eec2-118">Se si dispone di un'attività onerose di calcolo che si vuole eseguire solo se il risultato è effettivamente necessario, è possibile assegnare la funzione costosa da un <xref:System.Func%601> delegare.</span><span class="sxs-lookup"><span data-stu-id="6eec2-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="6eec2-119">L'esecuzione della funzione può quindi essere ritardato fino a quando non viene utilizzata una proprietà che accede al valore in un'espressione.</span><span class="sxs-lookup"><span data-stu-id="6eec2-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="6eec2-120">L'esempio nella sezione successiva illustra come eseguire questa operazione.</span><span class="sxs-lookup"><span data-stu-id="6eec2-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6eec2-121">Nell'esempio seguente viene illustrato come utilizzare un delegato che non accetta parametri.</span><span class="sxs-lookup"><span data-stu-id="6eec2-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="6eec2-122">Questo codice crea una classe generica denominata `LazyValue` che ha un campo di tipo <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="6eec2-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="6eec2-123">Questo campo di delegato può archiviare un riferimento a qualsiasi funzione che restituisce un valore del tipo che corrisponde al parametro del tipo di `LazyValue` oggetto.</span><span class="sxs-lookup"><span data-stu-id="6eec2-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="6eec2-124">Il `LazyValue` tipo ha anche un `Value` proprietà che esegue la funzione (se non è già stata eseguita) e restituisce il valore risultante.</span><span class="sxs-lookup"><span data-stu-id="6eec2-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="6eec2-125">Nell'esempio vengono creati due metodi e un'istanza di due `LazyValue` oggetti con le espressioni lambda che chiamano questi metodi.</span><span class="sxs-lookup"><span data-stu-id="6eec2-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="6eec2-126">Le espressioni lambda non accettano parametri poiché devono semplicemente chiamare un metodo.</span><span class="sxs-lookup"><span data-stu-id="6eec2-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="6eec2-127">Come illustrato nell'output, i due metodi vengono eseguiti solo quando il valore della ognuno `LazyValue` oggetto viene recuperato.</span><span class="sxs-lookup"><span data-stu-id="6eec2-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md">
      <span data-ttu-id="6eec2-128">Espressioni lambda (Guida per programmatori C#)</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-128">Lambda Expressions (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md">
      <span data-ttu-id="6eec2-129">Espressioni lambda</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-129">Lambda Expressions</span>
      </span>
    </related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md">
      <span data-ttu-id="6eec2-130">Delegati (Guida per programmatori C#)</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-130">Delegates (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md">
      <span data-ttu-id="6eec2-131">Delegati in Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="6eec2-131">Delegates in Visual Basic</span>
      </span>
    </related>
  </Docs>
</Type>