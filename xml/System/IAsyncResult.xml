<Type Name="IAsyncResult" FullName="System.IAsyncResult">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9d682ea6cc15e08be504abd15046053e596c9a02" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39827850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IAsyncResult" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAsyncResult" />
  <TypeSignature Language="DocId" Value="T:System.IAsyncResult" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAsyncResult" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAsyncResult" />
  <TypeSignature Language="F#" Value="type IAsyncResult = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta lo stato di un'operazione asincrona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IAsyncResult> interfaccia viene implementata da classi che contengono metodi che possono operare in modo asincrono. Un'operazione asincrona viene iniziata dal tipo restituito dei metodi, ad esempio <xref:System.IO.FileStream.BeginRead%2A?displayProperty=nameWithType>, e viene passata ai metodi che concludono un'operazione asincrona, ad esempio <xref:System.IO.FileStream.EndRead%2A?displayProperty=nameWithType>. <xref:System.IAsyncResult> gli oggetti vengono passati anche ai metodi richiamati dal <xref:System.AsyncCallback> delega al termine dell'operazione asincrona.  
  
 Un oggetto che supporta il <xref:System.IAsyncResult> interfaccia archivia le informazioni sullo stato per un'operazione asincrona e fornisce un oggetto di sincronizzazione per consentire un thread venga segnalato al completamento dell'operazione.  
  
> [!NOTE]
>  Il <xref:System.Runtime.Remoting.Messaging.AsyncResult> classe è l'implementazione di <xref:System.IAsyncResult> restituito dal `BeginInvoke` metodo quando si usa un delegato per chiamare un metodo in modo asincrono.  
  
 Per una descrizione dettagliata del modo in cui il <xref:System.IAsyncResult> viene utilizzata l'interfaccia, vedere la [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md) argomento.  
  
   
  
## Examples  
 L'esempio seguente illustra come usare il <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle%2A> proprietà da ottenere un <xref:System.Threading.WaitHandle>e come in attesa di una chiamata asincrona su un delegato. L'oggetto <xref:System.Threading.WaitHandle> viene segnalato al completamento della chiamata asincrona ed è possibile attenderlo chiamando il metodo <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 L'esempio è costituito da due classi: classe che contiene il metodo che viene chiamato in modo asincrono e la classe che contiene il `Main` metodo che effettua la chiamata.  
  
 Per altre informazioni ed esempi di chiamate ai metodi in modo asincrono usando i delegati, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.IAsyncResult.AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto definito dall'utente che qualifica o contiene informazioni sull'operazione asincrona.</summary>
        <value>Oggetto definito dall'utente che qualifica o contiene informazioni sull'operazione asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce l'oggetto che è l'ultimo parametro del metodo che avvia un'operazione asincrona.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra come il <xref:System.Runtime.Remoting.Messaging.AsyncResult.AsyncState%2A> proprietà viene utilizzata per passare informazioni a un metodo di callback. L'ultimo parametro del `BeginInvoke` chiamata al metodo è una stringa di formato, che usa il metodo di callback per formattare un messaggio di output.  
  
 L'esempio è costituito da due classi: classe che contiene il metodo che viene chiamato in modo asincrono e la classe che contiene il `Main` metodo che effettua la chiamata.  
  
 Per altre informazioni sul funzionamento di questo esempio di callback e altri esempi di chiamate ai metodi in modo asincrono usando i delegati, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#5](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/callback.cpp#5)]
[!code-csharp[AsyncDelegateExamples#5](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/callback.cs#5)]
[!code-vb[AsyncDelegateExamples#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/callback.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Implementare questa proprietà per consentire al chiamante di un'operazione asincrona ottenere un oggetto definito dall'applicazione specificato all'inizio dell'operazione.</para>
        </block>
        <block subset="none" type="usage">
          <para>Questo oggetto può essere usato per passare le informazioni sullo stato per l'operazione asincrona per un <see cref="T:System.AsyncCallback" /> specificata dall'utente.</para>
        </block>
        <altmember cref="T:System.AsyncCallback" />
      </Docs>
    </Member>
    <Member MemberName="AsyncWaitHandle">
      <MemberSignature Language="C#" Value="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncWaitHandle As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::WaitHandle ^ AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncWaitHandle : System.Threading.WaitHandle" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un <see cref="T:System.Threading.WaitHandle" />, utilizzato per attendere il completamento di un'operazione asincrona.</summary>
        <value>
          <see cref="T:System.Threading.WaitHandle" /> utilizzato per attendere il completamento di un'operazione asincrona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito consente al client in attesa di un'operazione asincrona per il completamento anziché polling <xref:System.IAsyncResult.IsCompleted%2A> fino al termine dell'operazione. Il valore restituito può essere utilizzato per eseguire una <xref:System.Threading.WaitHandle.WaitOne%2A>, <xref:System.Threading.WaitHandle.WaitAny%2A>, o <xref:System.Threading.WaitHandle.WaitAll%2A> operazione.  
  
 Common language runtime fornisce una serie di oggetti awaitable, ad esempio <xref:System.Threading.ManualResetEvent>, <xref:System.Threading.AutoResetEvent>, e <xref:System.Threading.Mutex>, ognuno dei quali eseguire il mirroring di primitive di sincronizzazione Win32.  
  
   
  
## Examples  
 L'esempio seguente illustra come usare il <xref:System.IAsyncResult.AsyncWaitHandle%2A> proprietà da ottenere un <xref:System.Threading.WaitHandle>e come in attesa di una chiamata asincrona su un delegato. L'oggetto <xref:System.Threading.WaitHandle> viene segnalato al completamento della chiamata asincrona ed è possibile attenderlo chiamando il metodo <xref:System.Threading.WaitHandle.WaitOne%2A> .  
  
 L'esempio è costituito da due classi: classe che contiene il metodo che viene chiamato in modo asincrono e la classe che contiene il `Main` metodo che effettua la chiamata.  
  
 Per altre informazioni ed esempi di chiamate ai metodi in modo asincrono usando i delegati, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#3](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/waithandle.cpp#3)]
[!code-csharp[AsyncDelegateExamples#3](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/waithandle.cs#3)]
[!code-vb[AsyncDelegateExamples#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/WaitHandle.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Oggetto che implementa <see cref="T:System.IAsyncResult" /> non è necessario creare le <see cref="T:System.Threading.WaitHandle" /> fino a quando non la <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> lettura della proprietà. Si tratta della scelta del <see cref="T:System.IAsyncResult" /> responsabile dell'implementazione. Tuttavia, se viene creata l'implementatore <see cref="P:System.IAsyncResult.AsyncWaitHandle" />, è responsabilità dell'implementatore per segnalare il <see cref="T:System.Threading.WaitHandle" /> che verrà interrotta l'attesa nel momento appropriato. Ad esempio, <see cref="T:System.Runtime.Remoting.Messaging.AsyncResult" /> termina l'attesa per conto del chiamante quando viene restituito un metodo asincrono richiamato. Una volta creata, <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> devono essere mantenuti attivi fino a quando l'utente chiama il metodo che si conclude l'operazione asincrona. A quel punto l'oggetto sottostante <see cref="P:System.IAsyncResult.AsyncWaitHandle" /> possono essere ignorate.</para>
        </block>
        <block subset="none" type="usage">
          <para>I client che attendono che l'operazione venga completata (invece di polling) usano questa proprietà per ottenere un oggetto di sincronizzazione per restare in attesa.  <block subset="none" type="note"><para> Quando si usa la <see langword="BeginInvoke" /> metodo di un delegato da chiamare in modo asincrono un metodo e ottenere un handle di attesa da risultante <see cref="T:System.IAsyncResult" />, si consiglia di chiudere l'handle di attesa, non appena si è terminato, chiamando il <see cref="M:System.Threading.WaitHandle.Close" /> (metodo). Se si rilasciano semplicemente tutti i riferimenti all'handle di attesa, le risorse di sistema vengono liberate quando garbage collection recupera l'handle di attesa, ma l'operazione di garbage collection funziona in modo più efficiente quando gli oggetti eliminabili chiuse o eliminati in modo esplicito. Per altre informazioni, vedere il <see cref="P:System.Runtime.Remoting.Messaging.AsyncResult.AsyncWaitHandle" /> proprietà.  </para></block></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompletedSynchronously">
      <MemberSignature Language="C#" Value="public bool CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompletedSynchronously As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedSynchronously : bool" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Valore che indica se l'operazione asincrona. è stata completata in modo sincrono</summary>
        <value>
          <see langword="true" /> se l'operazione asincrona è stata completata in modo sincrono. In caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se viene rilevato il completamento della chiamata sincrono di <xref:System.AsyncCallback> delegato, è probabile che il thread che ha avviato l'operazione asincrona è il thread corrente.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>La maggior parte dei responsabili dell'implementazione di <see cref="T:System.IAsyncResult" /> interfaccia non utilizzerà questa proprietà e deve restituire <see langword="false" />. A partire da [!INCLUDE[net_v45](~/includes/net-v45-md.md)], un'attività creata con il metodo <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)" /> non verrà completata se questa proprietà non viene implementata correttamente. Visualizzare [compatibilità delle applicazioni in 4.5](~/docs/framework/migration-guide/application-compatibility-in-the-net-framework-4-5.md).</para>
        </block>
        <block subset="none" type="usage">
          <para>Utilizzare questa proprietà per determinare se l'operazione asincrona è stata completata in modo sincrono. Ad esempio, questa proprietà può restituire <see langword="true" /> per un'operazione dei / o asincrona se la richiesta dei / o è piccola.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.IAsyncResult.IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica l'eventuale completamento dell'operazione asincrona.</summary>
        <value>
          <see langword="true" /> se l'operazione viene completata, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando questa proprietà è `true`, si può presupporre è consigliabile rimuovere tutte le risorse allocate per l'utilizzo dall'operazione asincrona.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.IAsyncResult.IsCompleted%2A> proprietà del <xref:System.IAsyncResult> per rilevare quando viene completata una chiamata asincrona. In questo caso, viene effettuata la chiamata asincrona usando il `BeginInvoke` metodo di un delegato. È possibile usare il <xref:System.IAsyncResult.IsCompleted%2A> proprietà per eseguire il polling del completamento quando si effettua la chiamata asincrona da un thread che serve l'interfaccia utente. Il polling del completamento consente al thread chiamante di continuare l'esecuzione mentre viene eseguita la chiamata asincrona su un thread <xref:System.Threading.ThreadPool> .  
  
 L'esempio è costituito da due classi: classe che contiene il metodo che viene chiamato in modo asincrono e la classe che contiene il `Main` metodo che effettua la chiamata.  
  
 Per altre informazioni ed esempi di chiamate ai metodi in modo asincrono usando i delegati, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 [!code-cpp[AsyncDelegateExamples#1](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/TestMethod.cpp#1)]
 [!code-csharp[AsyncDelegateExamples#1](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/TestMethod.cs#1)]
 [!code-vb[AsyncDelegateExamples#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/TestMethod.vb#1)]  
[!code-cpp[AsyncDelegateExamples#4](~/samples/snippets/cpp/VS_Snippets_CLR/AsyncDelegateExamples/cpp/polling.cpp#4)]
[!code-csharp[AsyncDelegateExamples#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDelegateExamples/CS/polling.cs#4)]
[!code-vb[AsyncDelegateExamples#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDelegateExamples/VB/polling.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>I responsabili dell'implementazione in genere restituisce il valore di un campo privato o interno test come il valore di questa proprietà.</para>
        </block>
        <block subset="none" type="usage">
          <para>I client che eseguono il polling dello stato dell'operazione (e non in attesa di un oggetto di sincronizzazione) usano questa proprietà per determinare lo stato dell'operazione.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>