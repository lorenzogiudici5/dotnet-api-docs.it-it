<Type Name="IComparable" FullName="System.IComparable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="204519a433353f750a9b8f4cd673d693827bb73c" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37480239" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable" />
  <TypeSignature Language="DocId" Value="T:System.IComparable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparable" />
  <TypeSignature Language="F#" Value="type IComparable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce un metodo di confronto generalizzato specifico del tipo che viene implementato da un tipo di valore o da una classe per l'ordinamento delle istanze.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa interfaccia viene implementata dai tipi i cui valori possono essere ordinati o ordinati. Richiede che i tipi di implementazione definiscono un singolo metodo, <xref:System.IComparable.CompareTo%28System.Object%29>, che indica se la posizione dell'istanza corrente nella sequenza di ordinamento è precedente, dopo o uguale come un secondo oggetto dello stesso tipo. L'istanza <xref:System.IComparable> implementazione viene chiamata automaticamente dai metodi, ad esempio <xref:System.Array.Sort%2A?displayProperty=nameWithType> e <xref:System.Collections.ArrayList.Sort%2A?displayProperty=nameWithType>.  
  
 L'implementazione del <xref:System.IComparable.CompareTo%28System.Object%29> metodo deve restituire un <xref:System.Int32> che presenta uno dei tre valori, come illustrato nella tabella seguente.  
  
|Valore|Significato|  
|-----------|-------------|  
|Minore di zero|L'istanza corrente precede l'oggetto specificato da di <xref:System.IComparable.CompareTo%2A> metodo nell'ordinamento.|  
|Zero|Questa istanza corrente si trova nella stessa posizione nell'ordinamento dell'oggetto specificato da di <xref:System.IComparable.CompareTo%2A> (metodo).|  
|Maggiore di zero|L'istanza corrente segue l'oggetto specificato da di <xref:System.IComparable.CompareTo%2A> metodo nell'ordinamento.|  
  
 Tutti i tipi numerici (ad esempio <xref:System.Int32> e <xref:System.Double>) implementare <xref:System.IComparable>, come le <xref:System.String>, <xref:System.Char>, e <xref:System.DateTime>. Tipi personalizzati devono anche fornire la propria implementazione di <xref:System.IComparable> per abilitare le istanze di oggetto deve essere ordinato o ordinato.  
  
   
  
## Examples  
 L'esempio seguente illustra l'implementazione di <xref:System.IComparable> individuati e <xref:System.IComparable.CompareTo%2A> (metodo).  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int" Usage="iComparable.CompareTo obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto da confrontare con l'istanza.</param>
        <summary>Confronta l'istanza corrente con un altro oggetto dello stesso tipo e restituisce un intero che indica se l'istanza corrente precede, segue o si trova nella stessa posizione dell'altro oggetto all'interno dell'ordinamento.</summary>
        <returns>Valore che indica l'ordine relativo degli oggetti confrontati. Il valore restituito ha i significati seguenti:  <list type="table"><listheader><term> Valore  </term><description> Significato  </description></listheader><item><term> Minore di zero  </term><description> Questa istanza precede <paramref name="obj" />  all'interno dell'ordinamento.  </description></item><item><term> Zero  </term><description> Questa istanza si presenta nella stessa posizione di <paramref name="obj" /> all'interno dell'ordinamento.  </description></item><item><term> Maggiore di zero  </term><description>Questa istanza segue <paramref name="obj" /> nei criteri di ordinamento.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IComparable.CompareTo%2A> metodo viene implementato dai tipi i cui valori possono essere ordinati. Viene chiamato automaticamente dai metodi di oggetti della raccolta non generica, ad esempio <xref:System.Array.Sort%2A?displayProperty=nameWithType>, per ordinare ogni membro della matrice. Se una classe personalizzata o una struttura non implementa <xref:System.IComparable>, i relativi membri non possono essere ordinati e l'operazione di ordinamento può generare un <xref:System.InvalidOperationException>.  
  
 Questo metodo è solo una definizione e deve essere implementato da un tipo specifico di classe o valore abbia effetto. Il significato dei confronti specificati nel valore restituito sezione ("precede", "si verifica nella stessa posizione come" e "seguente") dipende dall'implementazione specifica.  
  
 Per definizione, qualsiasi oggetto risulta maggiore (o segue) `null`, e due riferimenti null risultano uguali tra loro.  
  
 Il parametro `obj`, deve essere dello stesso tipo della classe o del valore di tipo che implementa questa interfaccia; in caso contrario, un <xref:System.ArgumentException> viene generata un'eccezione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.IComparable.CompareTo%2A> per confrontare una `Temperature` che implementa l'oggetto <xref:System.IComparable> con un altro oggetto. Il `Temperature` dell'oggetto implementi <xref:System.IComparable.CompareTo%2A> eseguendo semplicemente il wrapping di una chiamata al <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> (metodo).  
  
 [!code-cpp[IComparable Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable Example/CS/source.cs#1)]
 [!code-vb[IComparable Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> non ha lo stesso tipo di questa istanza.</exception>
        <block subset="none" type="overrides">
          <para>Per gli oggetti A, B e C, le condizioni seguenti devono essere true: <c>A.CompareTo(A)</c> devono restituire zero.  Se <c>CompareTo (b)</c> restituisce zero, quindi <c>B.CompareTo(A)</c> devono restituire zero.  Se <c>CompareTo (b)</c> restituisce zero e <c>B.CompareTo(C)</c> restituisce zero, quindi <c>CompareTo (c)</c> devono restituire zero.  Se <c>CompareTo (b)</c> restituisce un valore diverso da zero, quindi <c>B.CompareTo(A)</c> deve restituire un valore di segno opposto.  Se <c>CompareTo (b)</c> restituisce un valore <paramref name="x" /> diverso da zero, e <c>B.CompareTo(C)</c> restituisce un valore <paramref name="y" /> dello stesso segno <paramref name="x" />, quindi <c>A. CompareTo(C)</c> deve restituire un valore dello stesso segno <paramref name="x" /> e <paramref name="y" />.</para>
        </block>
        <block subset="none" type="usage">
          <para>Usare il <see cref="M:System.IComparable.CompareTo(System.Object)" /> metodo per determinare l'ordinamento delle istanze di una classe.</para>
        </block>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
  </Members>
</Type>