<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="661db-101">Supporta lo scorrimento su un oggetto <see cref="T:System.String" /> e la lettura dei singoli caratteri.</span><span class="sxs-lookup"><span data-stu-id="661db-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="661db-102">Questa classe non può essere ereditata.</span><span class="sxs-lookup"><span data-stu-id="661db-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-103">Oggetto <xref:System.CharEnumerator> fornisce l'accesso in sola lettura per i caratteri in un riferimento <xref:System.String> oggetto.</span><span class="sxs-lookup"><span data-stu-id="661db-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="661db-104">Ad esempio, il `foreach` istruzione dei linguaggi di programmazione Microsoft Visual Basic e c#, che consente di scorrere gli elementi di una raccolta, recupera un <xref:System.CharEnumerator> da un <xref:System.String> oggetto per scorrere i caratteri che oggetto.</span><span class="sxs-lookup"><span data-stu-id="661db-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="661db-105">È presente alcun costruttore pubblico per <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="661db-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="661db-106">Chiamare invece un <xref:System.String> dell'oggetto <xref:System.String.GetEnumerator%2A> per ottenere un <xref:System.CharEnumerator> inizializzato per fare riferimento alla stringa.</span><span class="sxs-lookup"><span data-stu-id="661db-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="661db-107">Oggetto <xref:System.CharEnumerator> mantiene un indice interno per i caratteri nella stringa di <xref:System.CharEnumerator> riferimenti.</span><span class="sxs-lookup"><span data-stu-id="661db-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="661db-108">Lo stato dell'indice è non valido quando fa riferimento a una posizione di carattere logicamente prima del carattere prima o dopo l'ultimo carattere nella stringa e valido quando fa riferimento a un carattere all'interno della stringa.</span><span class="sxs-lookup"><span data-stu-id="661db-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="661db-109">L'indice viene inizializzato in una posizione logicamente prima del primo carattere e viene impostato su una posizione dopo l'ultimo carattere, quando l'iterazione è stata completata.</span><span class="sxs-lookup"><span data-stu-id="661db-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="661db-110">Se si tenta di accedere a un carattere mentre l'indice non è valido, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="661db-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="661db-111">Il <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno, in modo da accedere a sua volta i caratteri prima e quelli successivi.</span><span class="sxs-lookup"><span data-stu-id="661db-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="661db-112">Il <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice in una posizione logicamente prima del primo carattere.</span><span class="sxs-lookup"><span data-stu-id="661db-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="661db-113">Il <xref:System.CharEnumerator.Current%2A> proprietà recupera il carattere di indice fa attualmente riferimento.</span><span class="sxs-lookup"><span data-stu-id="661db-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="661db-114">Il <xref:System.CharEnumerator.Clone%2A> metodo crea una copia del <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="661db-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="661db-115">Diverse istanze indipendenti di <xref:System.CharEnumerator> in uno o più thread può avere accesso a una singola istanza di <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="661db-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="661db-116">Questa classe è implementata per supportare il <xref:System.Collections.IEnumerator> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="661db-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="661db-117">Per ulteriori informazioni sull'utilizzo di un enumeratore, vedere il <xref:System.Collections.IEnumerator> argomento.</span><span class="sxs-lookup"><span data-stu-id="661db-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="661db-118">Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa.</span><span class="sxs-lookup"><span data-stu-id="661db-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="661db-119">Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="661db-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="661db-120">Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.</span><span class="sxs-lookup"><span data-stu-id="661db-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661db-121">Crea una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="661db-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="661db-122">Oggetto <see cref="T:System.Object" /> che rappresenta una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="661db-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-123">Il valore restituito è una copia di questa istanza di <xref:System.CharEnumerator> e lo stato corrente.</span><span class="sxs-lookup"><span data-stu-id="661db-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="661db-124">Ciò è utile per salvare lo stato quando si scorre un <xref:System.String> oggetto.</span><span class="sxs-lookup"><span data-stu-id="661db-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="661db-125">Si supponga ad esempio l'applicazione utilizza un'istanza originale di <xref:System.CharEnumerator> per scorrere ogni carattere in un <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="661db-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="661db-126">Quando viene rilevato un carattere univoco, l'applicazione sospende l'elaborazione e richiama il <xref:System.CharEnumerator.Clone%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="661db-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="661db-127">In effetti, ciò consente di risparmiare il <xref:System.CharEnumerator> indice dell'oggetto di <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="661db-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="661db-128">L'applicazione utilizza il clone per passare a un'altra parte di `String` per eseguire alcune operazioni di elaborazione ausiliario.</span><span class="sxs-lookup"><span data-stu-id="661db-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="661db-129">L'effetto collaterale di navigazione è che il clone perde traccia della posizione in cui si è interrotta l'elaborazione.</span><span class="sxs-lookup"><span data-stu-id="661db-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="661db-130">Tuttavia, una volta completato l'elaborazione ausiliario, l'applicazione elimina la copia e utilizza originale <xref:System.CharEnumerator> istanza per riprendere il lavoro sul <xref:System.String> in cui è stata interrotta l'elaborazione originale.</span><span class="sxs-lookup"><span data-stu-id="661db-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="661db-131">Questo metodo viene implementato per supportare il <xref:System.ICloneable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="661db-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661db-132">Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="661db-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="661db-133">Carattere Unicode a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="661db-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-134">Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.Current%2A> proprietà restituisce il carattere di cui fa attualmente riferimento l'indice.</span><span class="sxs-lookup"><span data-stu-id="661db-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="661db-135">Questa proprietà deve essere richiamata solo quando l'indice è valido. in caso contrario, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="661db-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="661db-136">L'indice è sempre valido per una stringa vuota ("").</span><span class="sxs-lookup"><span data-stu-id="661db-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="661db-137">L'indice è non valido dopo il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> o <xref:System.CharEnumerator.Reset%2A> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="661db-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="661db-138">Dopo che viene chiamato uno di questi metodi, richiamare il <xref:System.CharEnumerator.MoveNext%2A> metodo per modificare l'indice per il primo carattere nella stringa enumerata.</span><span class="sxs-lookup"><span data-stu-id="661db-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="661db-139">L'indice è valida ogni volta che il <xref:System.CharEnumerator.MoveNext%2A> restituisce `true`.</span><span class="sxs-lookup"><span data-stu-id="661db-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="661db-140"><xref:System.CharEnumerator.Current%2A> non spostare l'indice e le chiamate successive a <xref:System.CharEnumerator.Current%2A> restituiscono lo stesso carattere fino a <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="661db-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="661db-141">Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa.</span><span class="sxs-lookup"><span data-stu-id="661db-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="661db-142">Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="661db-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="661db-143">Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.</span><span class="sxs-lookup"><span data-stu-id="661db-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="661db-144">L'indice non è valido, ovvero precede il primo carattere o segue l'ultimo carattere della stringa enumerata.</span><span class="sxs-lookup"><span data-stu-id="661db-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661db-145">Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="661db-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-146">Chiamare il metodo <xref:System.CharEnumerator.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="661db-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="661db-147">Il metodo <xref:System.CharEnumerator.Dispose%2A> lascia l'oggetto <xref:System.CharEnumerator> in una condizione di inutilizzabilità.</span><span class="sxs-lookup"><span data-stu-id="661db-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="661db-148">Dopo la chiamata <xref:System.CharEnumerator.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.CharEnumerator> in modo che il garbage collector può recuperare la memoria che di <xref:System.CharEnumerator> occupata.</span><span class="sxs-lookup"><span data-stu-id="661db-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="661db-149">Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="661db-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="661db-150">Chiamare sempre il metodo <xref:System.CharEnumerator.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="661db-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="661db-151">In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.CharEnumerator> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.</span><span class="sxs-lookup"><span data-stu-id="661db-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661db-152">Incrementa l'indice interno dell'oggetto <see cref="T:System.CharEnumerator" /> corrente sul carattere successivo della stringa enumerata.</span><span class="sxs-lookup"><span data-stu-id="661db-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns>
          <span data-ttu-id="661db-153"><see langword="true" /> se l'indice viene incrementato correttamente e all'interno della stringa enumerata; in caso contrario <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="661db-153"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-154">Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno.</span><span class="sxs-lookup"><span data-stu-id="661db-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="661db-155">Chiamare <xref:System.CharEnumerator.MoveNext%2A> dopo la chiamata <xref:System.String.GetEnumerator%2A> o <xref:System.CharEnumerator.Reset%2A> per incrementare la posizione di carattere corrente al primo carattere nella stringa enumerata.</span><span class="sxs-lookup"><span data-stu-id="661db-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="661db-156">Verificare che il valore restituito è `true` per determinare che la posizione di carattere corrente è valida.</span><span class="sxs-lookup"><span data-stu-id="661db-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="661db-157">Se l'indice è già oltre l'ultimo carattere della stringa enumerata, l'indice non viene modificato e `false` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="661db-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="661db-158">Si noti che se la stringa enumerata è vuota (""), stato del <xref:System.CharEnumerator> è sempre valido.</span><span class="sxs-lookup"><span data-stu-id="661db-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="661db-159">In questo modo l'indice interno per il <xref:System.CharEnumerator> inizialmente prima del primo carattere della stringa enumerata e pertanto non è valido.</span><span class="sxs-lookup"><span data-stu-id="661db-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="661db-160"><xref:System.CharEnumerator.MoveNext%2A> Imposta in modo logico l'indice dopo l'ultimo carattere (inesistente) della stringa enumerata anche che non è valida.</span><span class="sxs-lookup"><span data-stu-id="661db-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="661db-161">Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa.</span><span class="sxs-lookup"><span data-stu-id="661db-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="661db-162">Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="661db-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="661db-163">Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.</span><span class="sxs-lookup"><span data-stu-id="661db-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="661db-164">Inizializza l'indice in una posizione logicamente precedente al primo carattere della stringa enumerata.</span><span class="sxs-lookup"><span data-stu-id="661db-164">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-165">Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice di stato non valido.</span><span class="sxs-lookup"><span data-stu-id="661db-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="661db-166">Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="661db-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="661db-167">Per una descrizione di questo membro, vedere <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="661db-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="661db-168">Carattere Unicode con boxing a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="661db-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="661db-169">Questo membro è un’implementazione esplicita di un membro di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="661db-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="661db-170">Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.CharEnumerator> a un'interfaccia <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="661db-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="661db-171">Enumerazione non avviata.</span><span class="sxs-lookup"><span data-stu-id="661db-171">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="661db-172">oppure</span><span class="sxs-lookup"><span data-stu-id="661db-172">-or-</span></span>  
  
 <span data-ttu-id="661db-173">L'enumerazione è stata terminata.</span><span class="sxs-lookup"><span data-stu-id="661db-173">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>