<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0570f4e2dd53178598e0e6fbf7b325d2cd252378" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728375" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Supporta lo scorrimento su un oggetto <see cref="T:System.String" /> e la lettura dei singoli caratteri. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.CharEnumerator> fornisce l'accesso in sola lettura per i caratteri in un riferimento <xref:System.String> oggetto. Ad esempio, il `foreach` istruzione dei linguaggi di programmazione Microsoft Visual Basic e c#, che consente di scorrere gli elementi di una raccolta, recupera un <xref:System.CharEnumerator> da un <xref:System.String> oggetto per scorrere i caratteri che oggetto.  
  
 È presente alcun costruttore pubblico per <xref:System.CharEnumerator>. Chiamare invece un <xref:System.String> dell'oggetto <xref:System.String.GetEnumerator%2A> per ottenere un <xref:System.CharEnumerator> inizializzato per fare riferimento alla stringa.  
  
 Oggetto <xref:System.CharEnumerator> mantiene un indice interno per i caratteri nella stringa di <xref:System.CharEnumerator> riferimenti. Lo stato dell'indice è non valido quando fa riferimento a una posizione di carattere logicamente prima del carattere prima o dopo l'ultimo carattere nella stringa e valido quando fa riferimento a un carattere all'interno della stringa. L'indice viene inizializzato in una posizione logicamente prima del primo carattere e viene impostato su una posizione dopo l'ultimo carattere, quando l'iterazione è stata completata. Se si tenta di accedere a un carattere mentre l'indice non è valido, viene generata un'eccezione.  
  
 Il <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno, in modo da accedere a sua volta i caratteri prima e quelli successivi. Il <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice in una posizione logicamente prima del primo carattere. Il <xref:System.CharEnumerator.Current%2A> proprietà recupera il carattere di indice fa attualmente riferimento. Il <xref:System.CharEnumerator.Clone%2A> metodo crea una copia del <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Diverse istanze indipendenti di <xref:System.CharEnumerator> in uno o più thread può avere accesso a una singola istanza di <xref:System.String>. Questa classe è implementata per supportare il <xref:System.Collections.IEnumerator> interfaccia. Per ulteriori informazioni sull'utilizzo di un enumeratore, vedere il <xref:System.Collections.IEnumerator> argomento.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> che rappresenta una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito è una copia di questa istanza di <xref:System.CharEnumerator> e lo stato corrente. Ciò è utile per salvare lo stato quando si scorre un <xref:System.String> oggetto.  
  
 Si supponga ad esempio l'applicazione utilizza un'istanza originale di <xref:System.CharEnumerator> per scorrere ogni carattere in un <xref:System.String>. Quando viene rilevato un carattere univoco, l'applicazione sospende l'elaborazione e richiama il <xref:System.CharEnumerator.Clone%2A> metodo. In effetti, ciò consente di risparmiare il <xref:System.CharEnumerator> indice dell'oggetto di <xref:System.String>.  
  
 L'applicazione utilizza il clone per passare a un'altra parte di `String` per eseguire alcune operazioni di elaborazione ausiliario. L'effetto collaterale di navigazione è che il clone perde traccia della posizione in cui si è interrotta l'elaborazione. Tuttavia, una volta completato l'elaborazione ausiliario, l'applicazione elimina la copia e utilizza originale <xref:System.CharEnumerator> istanza per riprendere il lavoro sul <xref:System.String> in cui è stata interrotta l'elaborazione originale.  
  
> [!NOTE]
>  Questo metodo viene implementato per supportare il <xref:System.ICloneable> interfaccia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />.</summary>
        <value>Carattere Unicode a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.Current%2A> proprietà restituisce il carattere di cui fa attualmente riferimento l'indice. Questa proprietà deve essere richiamata solo quando l'indice è valido. in caso contrario, viene generata un'eccezione.  
  
 L'indice è sempre valido per una stringa vuota (""). L'indice è non valido dopo il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> o <xref:System.CharEnumerator.Reset%2A> metodo viene chiamato. Dopo che viene chiamato uno di questi metodi, richiamare il <xref:System.CharEnumerator.MoveNext%2A> metodo per modificare l'indice per il primo carattere nella stringa enumerata. L'indice è valida ogni volta che il <xref:System.CharEnumerator.MoveNext%2A> restituisce `true`.  
  
 <xref:System.CharEnumerator.Current%2A> non spostare l'indice e le chiamate successive a <xref:System.CharEnumerator.Current%2A> restituiscono lo stesso carattere fino a <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> viene chiamato.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'indice non è valido, ovvero precede il primo carattere o segue l'ultimo carattere della stringa enumerata.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.CharEnumerator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.CharEnumerator.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.CharEnumerator>. Il metodo <xref:System.CharEnumerator.Dispose%2A> lascia l'oggetto <xref:System.CharEnumerator> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.CharEnumerator.Dispose%2A>, è necessario rilasciare tutti i riferimenti al <xref:System.CharEnumerator> in modo che il garbage collector può recuperare la memoria che di <xref:System.CharEnumerator> occupata.  
  
 Per ulteriori informazioni, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.CharEnumerator.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.CharEnumerator>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.CharEnumerator> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Incrementa l'indice interno dell'oggetto <see cref="T:System.CharEnumerator" /> corrente sul carattere successivo della stringa enumerata.</summary>
        <returns>
          <see langword="true" /> se l'indice viene incrementato correttamente e all'interno della stringa enumerata; in caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno. Chiamare <xref:System.CharEnumerator.MoveNext%2A> dopo la chiamata <xref:System.String.GetEnumerator%2A> o <xref:System.CharEnumerator.Reset%2A> per incrementare la posizione di carattere corrente al primo carattere nella stringa enumerata. Verificare che il valore restituito è `true` per determinare che la posizione di carattere corrente è valida.  
  
 Se l'indice è già oltre l'ultimo carattere della stringa enumerata, l'indice non viene modificato e `false` viene restituito.  
  
 Si noti che se la stringa enumerata è vuota (""), stato del <xref:System.CharEnumerator> è sempre valido. In questo modo l'indice interno per il <xref:System.CharEnumerator> inizialmente prima del primo carattere della stringa enumerata e pertanto non è valido. <xref:System.CharEnumerator.MoveNext%2A> Imposta in modo logico l'indice dopo l'ultimo carattere (inesistente) della stringa enumerata anche che non è valida.  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzata la <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> (metodo) e visualizza il carattere corrente per il recupero del valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita in modo leggermente più intuitivo utilizzando `foreach` (in c#) o `For Each` (in Visual Basic), come nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inizializza l'indice in una posizione logicamente precedente al primo carattere della stringa enumerata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno alla stringa enumerata e <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice di stato non valido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />. Per una descrizione di questo membro, vedere <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>Carattere Unicode con boxing a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.CharEnumerator> a un'interfaccia <xref:System.Collections.IEnumerator>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Enumerazione non avviata.  
  
 oppure  
  
 L'enumerazione è stata terminata.</exception>
      </Docs>
    </Member>
  </Members>
</Type>