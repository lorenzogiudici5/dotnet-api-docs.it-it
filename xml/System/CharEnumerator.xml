<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="456588b2dbb51a1da2076e0f5cbd651151770d7d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48616349" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Supporta lo scorrimento su un oggetto <see cref="T:System.String" /> e la lettura dei singoli caratteri. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto <xref:System.CharEnumerator> fornisce l'accesso di sola lettura per i caratteri in un riferimento <xref:System.String> oggetto. Ad esempio, il `foreach` istruzione dei linguaggi di programmazione Microsoft Visual Basic e c#, che scorre gli elementi di una raccolta, consente di recuperare una <xref:System.CharEnumerator> da un <xref:System.String> oggetto per scorrere i caratteri in cui oggetto.  

> [!IMPORTANT]
> Il `CharEnumerator` classe enumera singoli 16 bit <xref:System.Char> istanze. Non considera grafema (vale a dire, un carattere seguito da uno o più caratteri combiding) o (vale a dire, i caratteri di fuori di Unicode Basic Multilingual Plane) di coppie di surrogati come singoli caratteri. Per un enumeratore che gestisce questi tipi di caratteri come singola unità, usare il <xref:System.Globalization.StringInfo> classe.

 Non vi è alcun costruttore pubblico per <xref:System.CharEnumerator>. Viene invece chiamato un <xref:System.String> dell'oggetto <xref:System.String.GetEnumerator%2A> metodo per ottenere un <xref:System.CharEnumerator> inizializzato per fare riferimento alla stringa.  
  
 Oggetto <xref:System.CharEnumerator> gestisce un indice interno per i caratteri nella stringa di <xref:System.CharEnumerator> riferimenti. Lo stato dell'indice è non valido quando si fa riferimento a una posizione del carattere in modo logico prima del primo carattere o dopo l'ultimo carattere nella stringa e valido quando si fa riferimento a un carattere all'interno della stringa. L'indice viene inizializzato in una posizione logicamente precedente al primo carattere e viene impostato su una posizione dopo l'ultimo carattere, una volta completata l'iterazione. Se si tenta di accedere a un carattere mentre l'indice non è valido, viene generata un'eccezione.  
  
 Il <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno, in modo che i caratteri prima e successive sono accessibili a sua volta. Il <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice in una posizione logicamente precedente al primo carattere. Il <xref:System.CharEnumerator.Current%2A> proprietà recupera il carattere di indice fa attualmente riferimento. Il <xref:System.CharEnumerator.Clone%2A> metodo crea una copia del <xref:System.CharEnumerator>.  
  
> [!NOTE]
>  Diverse istanze indipendenti di <xref:System.CharEnumerator> attraverso uno o più thread possono avere accesso a una singola istanza di <xref:System.String>. Questa classe viene implementata per supportare il <xref:System.Collections.IEnumerator> interfaccia. Per altre informazioni sull'uso di un enumeratore, vedere il <xref:System.Collections.IEnumerator> argomento.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> metodo e visualizza il carattere corrente recuperando il valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita con un po' più intuitivo usando `foreach` (in c#) o `For Each` (in Visual Basic), come illustrato nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</summary>
        <returns>Oggetto <see cref="T:System.Object" /> che rappresenta una copia dell'oggetto <see cref="T:System.CharEnumerator" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito è una copia di questa istanza di <xref:System.CharEnumerator> e del relativo stato corrente. Ciò è utile per salvare lo stato quando si esegue l'iterazione attraverso un <xref:System.String> oggetto.  
  
 Ad esempio, si supponga che l'applicazione usa un'istanza originale di <xref:System.CharEnumerator> per scorrere ogni carattere in un <xref:System.String>. Quando viene rilevato un carattere univoco, l'applicazione sospende l'elaborazione e richiama il <xref:System.CharEnumerator.Clone%2A> (metodo). In effetti, ciò consente di risparmiare il <xref:System.CharEnumerator> indice dell'oggetto nel <xref:System.String>.  
  
 L'applicazione utilizza il clone per passare a un'altra parte del `String` per eseguire alcune operazioni di elaborazione ausiliario. L'effetto collaterale di questo spostamento è che il clone perde traccia della posizione in cui si è interrotta l'elaborazione. Tuttavia, una volta completata l'elaborazione ausiliario, l'applicazione elimina il clone e utilizza originale <xref:System.CharEnumerator> istanza a lavorare al <xref:System.String> in cui arrestata l'elaborazione originale.  
  
> [!NOTE]
>  Questo metodo viene implementato per supportare il <xref:System.ICloneable> interfaccia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />.</summary>
        <value>Carattere Unicode a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno sulla stringa enumerata e il <xref:System.CharEnumerator.Current%2A> proprietà restituisce il carattere che fa riferimento l'indice. Questa proprietà deve essere richiamata solo quando l'indice è valida. in caso contrario, viene generata un'eccezione.  
  
 L'indice è sempre valido per una stringa vuota (""). L'indice non è valido dopo anche il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> o <xref:System.CharEnumerator.Reset%2A> viene chiamato il metodo. Dopo che viene chiamato uno di questi metodi, richiamare il <xref:System.CharEnumerator.MoveNext%2A> metodo per modificare l'indice al primo carattere nella stringa enumerata. L'indice non è valida ogni volta che il <xref:System.CharEnumerator.MoveNext%2A> restituzione del metodo `true`.  
  
 <xref:System.CharEnumerator.Current%2A> non spostare l'indice le chiamate successive a <xref:System.CharEnumerator.Current%2A> restituiscono lo stesso carattere fino <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, o <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> viene chiamato.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> metodo e visualizza il carattere corrente recuperando il valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita con un po' più intuitivo usando `foreach` (in c#) o `For Each` (in Visual Basic), come illustrato nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">L'indice non è valido, ovvero precede il primo carattere o segue l'ultimo carattere della stringa enumerata.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.CharEnumerator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il metodo <xref:System.CharEnumerator.Dispose%2A> dopo aver terminato di utilizzare l'oggetto <xref:System.CharEnumerator>. Il metodo <xref:System.CharEnumerator.Dispose%2A> lascia l'oggetto <xref:System.CharEnumerator> in una condizione di inutilizzabilità. Dopo la chiamata <xref:System.CharEnumerator.Dispose%2A>, è necessario rilasciare tutti i riferimenti per il <xref:System.CharEnumerator> in modo che il garbage collector di recuperare la memoria che il <xref:System.CharEnumerator> occupata.  
  
 Per altre informazioni, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Chiamare sempre il metodo <xref:System.CharEnumerator.Dispose%2A> prima di rilasciare l'ultimo riferimento a <xref:System.CharEnumerator>. In caso contrario, le risorse utilizzate non verranno liberate finché il metodo <xref:System.CharEnumerator> dell'oggetto `Finalize` non viene richiamato dal Garbage Collector.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Incrementa l'indice interno dell'oggetto <see cref="T:System.CharEnumerator" /> corrente sul carattere successivo della stringa enumerata.</summary>
        <returns>
          <see langword="true" /> se l'indice viene incrementato correttamente e all'interno della stringa enumerata; in caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno sulla stringa enumerata e il <xref:System.CharEnumerator.MoveNext%2A> metodo incrementa l'indice di uno. Chiamare <xref:System.CharEnumerator.MoveNext%2A> dopo aver chiamato <xref:System.String.GetEnumerator%2A> o <xref:System.CharEnumerator.Reset%2A> per incrementare la posizione corrente del carattere al primo carattere nella stringa enumerata. Verificare che il valore restituito è `true` determinare che la posizione del carattere corrente è valida.  
  
 Se l'indice è già oltre l'ultimo carattere della stringa enumerata, l'indice non viene modificata e `false` viene restituito.  
  
 Si noti che se la stringa enumerata è vuota (""), la stato del <xref:System.CharEnumerator> è sempre valido. Infatti, l'indice interno per il <xref:System.CharEnumerator> è inizialmente prima del primo carattere della stringa enumerata e pertanto non è valido. <xref:System.CharEnumerator.MoveNext%2A> Imposta in modo logico l'indice dopo l'ultimo carattere (inesistente) della stringa enumerata che inoltre non è valida.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.CharEnumerator> classe per enumerare i singoli caratteri in una stringa. Crea un'istanza di un <xref:System.CharEnumerator> oggetto chiamando il <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> passa da un carattere (metodo), al successivo chiamando il <xref:System.CharEnumerator.MoveNext%2A> metodo e visualizza il carattere corrente recuperando il valore del <xref:System.CharEnumerator.Current%2A> proprietà.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 Si noti tuttavia che la stessa operazione può essere eseguita con un po' più intuitivo usando `foreach` (in c#) o `For Each` (in Visual Basic), come illustrato nell'esempio seguente viene illustrato.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inizializza l'indice in una posizione logicamente precedente al primo carattere della stringa enumerata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.CharEnumerator> classe mantiene un indice interno sulla stringa enumerata e il <xref:System.CharEnumerator.Reset%2A> metodo imposta l'indice allo stato non valido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il carattere a cui fa attualmente riferimento nella stringa enumerata questo oggetto <see cref="T:System.CharEnumerator" />. Per una descrizione di questo membro, vedere <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
        <value>Carattere Unicode con boxing a cui fa attualmente riferimento questo oggetto <see cref="T:System.CharEnumerator" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.CharEnumerator> a un'interfaccia <xref:System.Collections.IEnumerator>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Enumerazione non avviata.  
  
oppure 
L'enumerazione è stata terminata.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>