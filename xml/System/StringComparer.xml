<Type Name="StringComparer" FullName="System.StringComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ced8061de4befeb24104a02f855267ba0a712033" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39809507" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <TypeSignature Language="F#" Value="type StringComparer = class&#xA;    interface IComparer&#xA;    interface IEqualityComparer&#xA;    interface IComparer&lt;string&gt;&#xA;    interface IEqualityComparer&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un'operazione di confronto tra stringhe che usa regole specifiche di confronto basate sull'uso di maiuscole e minuscole e specifiche delle impostazioni cultura o per ordinale.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oggetto derivato dal <xref:System.StringComparer> classe incorpora la stringa in base al confronto, uguaglianza e operazioni di codice hash che prendono in considerazione le regole di confronto maiuscole e minuscole e specifiche delle impostazioni cultura. È possibile usare il <xref:System.StringComparer> classe per creare un confronto di tipo specifico per ordinare gli elementi in una raccolta generica. Le classi quali <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, e <xref:System.Collections.Generic.SortedList%602> usano il <xref:System.StringComparer> classe ai fini dell'ordinamento.  
  
 Un'operazione di confronto che è rappresentata dal <xref:System.StringComparer> classe è definita per essere con distinzione maiuscole/minuscole o maiuscole e minuscole e usare delle parole (dipendenti dalle impostazioni cultura) o le regole di confronto ordinale (indipendente dalla lingua). Per altre informazioni sulle regole di confronto ordinale e word, vedere <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.  
  
## <a name="implemented-properties"></a>Proprietà implementate  
 Potrebbero non essere certi su come usare il <xref:System.StringComparer> proprietà della classe a causa di una contraddizione creare. Il <xref:System.StringComparer> classe viene dichiarata `abstract` (`MustInherit` in Visual Basic), ovvero i relativi membri può essere richiamato solo su un oggetto di una classe derivata dal <xref:System.StringComparer> classe. Il contraddizione è che ogni proprietà del <xref:System.StringComparer> classe viene dichiarata `static` (`Shared` in Visual Basic), che significa che la proprietà può essere richiamato senza dover prima creare una classe derivata.  
  
 È possibile chiamare una <xref:System.StringComparer> proprietà direttamente perché ogni proprietà effettivamente restituisce un'istanza di una classe anonima che è derivata dal <xref:System.StringComparer> classe. Di conseguenza, il tipo di ogni valore della proprietà è <xref:System.StringComparer>, che non è la classe di base della classe anonima, il tipo di anonimo classe stessa. Ciascuna <xref:System.StringComparer> classe di proprietà restituisce un <xref:System.StringComparer> oggetto che supporta le regole di confronto e case predefinite.  
  
   
  
## Examples  
 L'esempio seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.StringComparer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Confronta due oggetti o stringhe e restituisce un'indicazione del relativo ordinamento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int&#xA;override this.Compare : obj * obj -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Oggetto da confrontare con <c>y</c>.</param>
        <param name="y">Oggetto da confrontare con <c>x</c>.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, confronta due oggetti e restituisce un'indicazione del relativo ordinamento.</summary>
        <returns>Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore </term><description> Significato </description></listheader><item><term> Minore di zero </term><description><paramref name="x" /> precede <paramref name="y" /> nell'ordinamento. -oppure- <paramref name="x" /> è <see langword="null" /> e <paramref name="y" /> non è <see langword="null" />.  </description></item><item><term> Zero </term><description><paramref name="x" /> è uguale a <paramref name="y" />. -oppure- <paramref name="x" /> e <paramref name="y" /> sono entrambi <see langword="null" />.  </description></item><item><term> Maggiore di zero </term><description><paramref name="x" /> segue <paramref name="y" /> nell'ordinamento. -oppure- <paramref name="y" /> è <see langword="null" /> e <paramref name="x" /> non è <see langword="null" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> metodo è leggermente più efficiente il <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metodo perché alcuna conversione del `x` e `y` argomenti è necessario per eseguire il confronto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Né <paramref name="x" /> né <paramref name="y" /> è un oggetto <see cref="T:System.String" /> e né <paramref name="x" /> né <paramref name="y" /> implementa l'interfaccia <see cref="T:System.IComparable" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : string * string -&gt; int" Usage="stringComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">Stringa da confrontare con <c>y</c>.</param>
        <param name="y">Stringa da confrontare con <c>x</c>.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, confronta due stringhe e restituisce un'indicazione del relativo ordinamento.</summary>
        <returns>Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.  
  
 <list type="table"><listheader><term> Valore </term><description> Significato </description></listheader><item><term> Minore di zero </term><description><paramref name="x" /> precede <paramref name="y" /> nell'ordinamento. -oppure- <paramref name="x" /> è <see langword="null" /> e <paramref name="y" /> non è <see langword="null" />.  </description></item><item><term> Zero </term><description><paramref name="x" /> è uguale a <paramref name="y" />. -oppure- <paramref name="x" /> e <paramref name="y" /> sono entrambi <see langword="null" />.  </description></item><item><term> Maggiore di zero </term><description><paramref name="x" /> segue <paramref name="y" /> nell'ordinamento. -oppure- <paramref name="y" /> è <see langword="null" /> e <paramref name="x" /> non è <see langword="null" />. </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> metodo è leggermente più efficiente il <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metodo perché alcuna conversione del `x` e `y` argomenti è necessario per eseguire il confronto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * bool -&gt; StringComparer" Usage="System.StringComparer.Create (culture, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">impostazioni cultura le cui regole sono usate per eseguire un confronto tra stringhe.</param>
        <param name="ignoreCase">
          <see langword="true" /> per specificare che le operazioni di confronto non devono fare distinzione tra maiuscole e minuscole; <see langword="false" /> per specificare che le operazioni di confronto devono fare distinzione tra maiuscole e minuscole.</param>
        <summary>Crea un oggetto <see cref="T:System.StringComparer" /> che confronta le stringhe secondo le regole delle impostazioni cultura specificate.</summary>
        <returns>Nuovo oggetto <see cref="T:System.StringComparer" /> che esegue confronti tra stringhe in base alle regole di confronto usate dal parametro <paramref name="culture" /> e alla regola di distinzione tra maiuscole e minuscole specificata dal parametro <paramref name="ignoreCase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio di codice seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="culture" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Create : System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; StringComparer" Usage="System.StringComparer.Create (culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : StringComparer" Usage="System.StringComparer.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola delle impostazioni cultura correnti.</summary>
        <value>Nuovo oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.CurrentCulture%2A> proprietà può essere utilizzata quando le stringhe sono linguisticamente rilevanti. Ad esempio, se le stringhe vengono visualizzate all'utente, o se le stringhe sono il risultato dell'interazione dell'utente, confronto tra stringhe con distinzione delle impostazioni cultura da utilizzare per ordinare i dati della stringa.  
  
 Le impostazioni cultura correnti è il <xref:System.Globalization.CultureInfo> oggetto associato al thread corrente.  
  
 Il <xref:System.StringComparer.CurrentCulture%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
 Ogni chiamata ai <xref:System.StringComparer.CurrentCulture%2A> proprietà `get` funzione di accesso restituisce un nuovo <xref:System.StringComparer> oggetto, come illustrato nel codice seguente.  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 Per migliorare le prestazioni, è possibile archiviare il <xref:System.StringComparer> dell'oggetto in una variabile locale, anziché recuperare il valore della <xref:System.StringComparer.CurrentCulture%2A> proprietà più volte.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCultureIgnoreCase : StringComparer" Usage="System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola delle impostazioni cultura correnti.</summary>
        <value>Nuovo oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le impostazioni cultura correnti è il <xref:System.Globalization.CultureInfo> oggetto associato al thread corrente.  
  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà può essere utilizzata quando le stringhe sono linguisticamente rilevanti non maiuscole. Ad esempio, se le stringhe vengono visualizzate all'utente, ma i casi sono irrilevante, con distinzione delle impostazioni cultura, confronto tra stringhe con distinzione tra maiuscole e usare per ordinare i dati della stringa.  
  
 Il <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
 Ogni chiamata ai <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà `get` funzione di accesso restituisce un nuovo <xref:System.StringComparer> oggetto, come illustrato nel codice seguente.  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 Per migliorare le prestazioni, è possibile archiviare il <xref:System.StringComparer> dell'oggetto in una variabile locale, anziché recuperare il valore della <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà più volte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, indica se due oggetti o stringhe sono uguali.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj * obj -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Oggetto da confrontare con <c>y</c>.</param>
        <param name="y">Oggetto da confrontare con <c>x</c>.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, indica se due oggetti sono uguali.</summary>
        <returns>
          <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> fanno riferimento allo stesso oggetto o <paramref name="x" /> e <paramref name="y" /> sono entrambi dello stesso tipo di oggetto e tali oggetti sono uguali oppure sia <paramref name="x" /> che <paramref name="y" /> sono <see langword="null" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Perché il runtime non è necessario eseguire la conversione unboxing `x` o `y` se sono tipi di valore oppure provare a eseguire il downcast `x` o `y` in stringhe se sono tipi riferimento, il <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metodo può essere leggermente più efficiente il <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * string -&gt; bool" Usage="stringComparer.Equals (x, y)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">Stringa da confrontare con <c>y</c>.</param>
        <param name="y">Stringa da confrontare con <c>x</c>.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, indica se due stringhe sono uguali.</summary>
        <returns>
          <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> fanno riferimento allo stesso oggetto o <paramref name="x" /> e <paramref name="y" /> sono uguali oppure <paramref name="x" /> e <paramref name="y" /> sono <see langword="null" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Perché il runtime non è necessario eseguire la conversione unboxing `x` o `y` se sono tipi di valore oppure provare a eseguire il downcast `x` o `y` in stringhe se sono tipi riferimento, il <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metodo può essere leggermente più efficiente il <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> (metodo).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member FromComparison : StringComparison -&gt; StringComparer" Usage="System.StringComparer.FromComparison comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per l'oggetto <see cref="T:System.StringComparer" /> corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : obj -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per l'oggetto specificato.</summary>
        <returns>Codice hash con segno a 32 bit calcolato dal valore del parametro <paramref name="obj" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo è più efficiente il <xref:System.StringComparer.GetHashCode%2A> metodo perché il `obj` parametro non deve essere eseguita la conversione unboxing per eseguire l'operazione.  
  
 Il <xref:System.StringComparer.GetHashCode%28System.Object%29> metodo alloca una quantità di memoria è proporzionale alla dimensione del `obj` per la quale calcolare il codice hash di `obj`. Nel caso di stringhe di grandi dimensioni, il tentativo di recuperare il codice hash può generare un <xref:System.ArgumentException>. In alternativa, è possibile usare un algoritmo alternativo che alloca una quantità fissa di memoria durante il calcolo dei codici hash. Per usare questo algoritmo, aggiungere il [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento per il [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sezione del file di configurazione dell'applicazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> è <see langword="null" />.</exception>
        <exception cref="  &#xA;            T:System.ArgumentException">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : string -&gt; int" Usage="stringComparer.GetHashCode obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj">Stringa.</param>
        <summary>Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per la stringa specificata.</summary>
        <returns>Codice hash con segno a 32 bit calcolato dal valore del parametro <paramref name="obj" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo è più efficiente il <xref:System.StringComparer.GetHashCode%28System.Object%29> metodo perché il `obj` parametro non deve essere eseguita la conversione unboxing per eseguire l'operazione.  
  
 Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo alloca una quantità di memoria è proporzionale alla dimensione del `obj` per la quale calcolare il codice hash di `obj`. Nel caso di stringhe di grandi dimensioni, il tentativo di recuperare il codice hash può generare un <xref:System.ArgumentException>. In alternativa, è possibile usare un algoritmo alternativo che alloca una quantità fissa di memoria durante il calcolo dei codici hash. Per usare questo algoritmo, aggiungere il [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento per il [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sezione del file di configurazione dell'applicazione.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> è <see langword="null" />.</exception>
        <exception cref="  &#xA;            T:System.ArgumentException">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : StringComparer" Usage="System.StringComparer.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola della lingua inglese.</summary>
        <value>Nuovo oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.InvariantCulture%2A> proprietà le stringhe vengono confrontate in un modo linguisticamente rilevante, ma non è adatto per la visualizzazione in una qualsiasi impostazione cultura. L'applicazione principale consiste nel stringhe ordine in modo che siano identici nelle impostazioni cultura.  
  
 La lingua inglese è la <xref:System.Globalization.CultureInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà.  
  
 Il <xref:System.StringComparer.InvariantCulture%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCultureIgnoreCase : StringComparer" Usage="System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe senza distinzione tra maiuscole e minuscole usando le regole di confronto per parola della lingua inglese.</summary>
        <value>Nuovo oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> proprietà le stringhe vengono confrontate in un modo linguisticamente rilevante Ignora maiuscole e minuscole, ma non è adatto per la visualizzazione in una qualsiasi impostazione cultura. L'applicazione principale consiste nel stringhe ordine in modo che siano identici nelle impostazioni cultura.  
  
 La lingua inglese è la <xref:System.Globalization.CultureInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà.  
  
 Il <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Ordinal : StringComparer" Usage="System.StringComparer.Ordinal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto ordinale tra stringhe con distinzione tra maiuscole e minuscole.</summary>
        <value>Un oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.Ordinal%2A> proprietà consente di eseguire un semplice confronto tra byte indipendente dalla lingua. Questo è più appropriato quando il confronto di stringhe che vengono generati a livello di programmazione o quando il confronto tra maiuscole e minuscole delle risorse, ad esempio le password.  
  
 Il <xref:System.StringComparer.Ordinal%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrdinalIgnoreCase : StringComparer" Usage="System.StringComparer.OrdinalIgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto ordinale tra stringhe senza distinzione tra maiuscole e minuscole.</summary>
        <value>Un oggetto <see cref="T:System.StringComparer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.OrdinalIgnoreCase%2A> considera i caratteri nelle stringhe da confrontare come se sono stati convertiti in caratteri maiuscoli mediante le convenzioni delle impostazioni cultura invarianti, proprietà e quindi esegue un semplice confronto tra byte indipendente da lingua. Questo è più appropriato quando il confronto di stringhe che vengono generati a livello di programmazione o quando il confronto tra maiuscole e minuscole delle risorse, ad esempio i percorsi e nomi di file.  
  
 Il <xref:System.StringComparer.OrdinalIgnoreCase%2A> proprietà effettivamente restituisce un'istanza di una classe anonima derivata dal <xref:System.StringComparer> classe.  
  
   
  
## Examples  
 L'esempio di codice seguente illustra le proprietà e il <xref:System.StringComparer.Create%2A> metodo di <xref:System.StringComparer> classe. Nell'esempio viene illustrato come i vari <xref:System.StringComparer> alfabeto oggetti ordinamento tre versioni dell'alfabeto latino.  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>