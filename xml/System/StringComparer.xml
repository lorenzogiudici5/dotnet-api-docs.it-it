<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="2733e-101">Rappresenta un'operazione di confronto tra stringhe che usa regole specifiche di confronto basate sull'uso di maiuscole e minuscole e specifiche delle impostazioni cultura o per ordinale.</span><span class="sxs-lookup"><span data-stu-id="2733e-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-102">Un oggetto derivato dalla <xref:System.StringComparer> classe incorpora le operazioni di codice hash che prendono in considerazione le regole di confronto di maiuscole e minuscole e specifiche delle impostazioni cultura, di uguaglianza e confronto basato su stringa.</span><span class="sxs-lookup"><span data-stu-id="2733e-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="2733e-103">È possibile utilizzare la <xref:System.StringComparer> classe per creare un confronto specifico del tipo per ordinare gli elementi in una raccolta generica.</span><span class="sxs-lookup"><span data-stu-id="2733e-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="2733e-104">Le classi quali <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, e <xref:System.Collections.Generic.SortedList%602> utilizzare la <xref:System.StringComparer> classe ai fini dell'ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="2733e-105">Un'operazione di confronto è rappresentata dalla <xref:System.StringComparer> classe è definita per essere tra maiuscole e minuscole o maiuscole/minuscole e utilizzare una parola (specifiche delle impostazioni cultura) o le regole di confronto ordinale (senza distinzione delle impostazioni cultura).</span><span class="sxs-lookup"><span data-stu-id="2733e-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="2733e-106">Per ulteriori informazioni sui word e sulle regole di confronto ordinale, vedere <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="2733e-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="2733e-107">Proprietà implementate</span><span class="sxs-lookup"><span data-stu-id="2733e-107">Implemented Properties</span></span>  
 <span data-ttu-id="2733e-108">Potrebbe essere chiaro come utilizzare il <xref:System.StringComparer> a causa di una contraddizione creare proprietà della classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="2733e-109">Il <xref:System.StringComparer> classe viene dichiarata `abstract` (`MustInherit` in Visual Basic), ovvero i relativi membri può essere richiamato solo su un oggetto di una classe derivata dalla <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-110">La contraddizione consiste nel fatto che ogni proprietà del <xref:System.StringComparer> classe viene dichiarata `static` (`Shared` in Visual Basic), che significa che la proprietà può essere richiamato senza prima creare una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="2733e-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="2733e-111">È possibile chiamare un <xref:System.StringComparer> proprietà direttamente perché ogni proprietà restituisce un'istanza di una classe anonima derivato dalla <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-112">Di conseguenza, il tipo di ogni valore della proprietà è <xref:System.StringComparer>, che non è la classe base di classe anonima, il tipo anonimo classe stessa.</span><span class="sxs-lookup"><span data-stu-id="2733e-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="2733e-113">Ogni <xref:System.StringComparer> classe restituisce un <xref:System.StringComparer> oggetto che supporta le regole di confronto e case predefinite.</span><span class="sxs-lookup"><span data-stu-id="2733e-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2733e-114">L'esempio seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-115">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2733e-116">Inizializza una nuova istanza della classe <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2733e-117">Confronta due oggetti o stringhe e restituisce un'indicazione del relativo ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2733e-118">Oggetto da confrontare con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="2733e-119">Oggetto da confrontare con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="2733e-120">Quando ne viene eseguito l'override in una classe derivata, confronta due oggetti e restituisce un'indicazione del relativo ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="2733e-121">Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.</span><span class="sxs-lookup"><span data-stu-id="2733e-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="2733e-122"><list type="table"><listheader><term> Valore</span><span class="sxs-lookup"><span data-stu-id="2733e-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="2733e-123"></term><description> Significato</span><span class="sxs-lookup"><span data-stu-id="2733e-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="2733e-124"></description></listheader><item><term> Minore di zero</span><span class="sxs-lookup"><span data-stu-id="2733e-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="2733e-125"></term><description><paramref name="x" /> precede <paramref name="y" /> nell'ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="2733e-126">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-126">-or-</span></span>  
  
 <span data-ttu-id="2733e-127"><paramref name="x" /> è <see langword="null" /> e <paramref name="y" /> non è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="2733e-128"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="2733e-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="2733e-129"></term><description><paramref name="x" /> è uguale a <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="2733e-130">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-130">-or-</span></span>  
  
 <span data-ttu-id="2733e-131"><paramref name="x" /> e <paramref name="y" /> sono entrambi <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="2733e-132"></description></item><item><term> Maggiore di zero</span><span class="sxs-lookup"><span data-stu-id="2733e-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="2733e-133"></term><description><paramref name="x" /> segue <paramref name="y" /> nell'ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="2733e-134">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-134">-or-</span></span>  
  
 <span data-ttu-id="2733e-135"><paramref name="y" /> è <see langword="null" /> e <paramref name="x" /> non è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-136">Il <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> metodo è leggermente più efficiente il <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metodo perché alcuna conversione del `x` e `y` argomenti è necessario per eseguire il confronto.</span><span class="sxs-lookup"><span data-stu-id="2733e-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2733e-137">Né <paramref name="x" /> né <paramref name="y" /> è un oggetto <see cref="T:System.String" /> e né <paramref name="x" /> né <paramref name="y" /> implementa l'interfaccia <see cref="T:System.IComparable" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2733e-138">Stringa da confrontare con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="2733e-139">Stringa da confrontare con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="2733e-140">Quando ne viene eseguito l'override in una classe derivata, confronta due stringhe e restituisce un'indicazione del relativo ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="2733e-141">Intero con segno che indica i valori relativi di <paramref name="x" /> e <paramref name="y" />, come illustrato nella tabella seguente.</span><span class="sxs-lookup"><span data-stu-id="2733e-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="2733e-142"><list type="table"><listheader><term> Valore</span><span class="sxs-lookup"><span data-stu-id="2733e-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="2733e-143"></term><description> Significato</span><span class="sxs-lookup"><span data-stu-id="2733e-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="2733e-144"></description></listheader><item><term> Minore di zero</span><span class="sxs-lookup"><span data-stu-id="2733e-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="2733e-145"></term><description><paramref name="x" /> precede <paramref name="y" /> nell'ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="2733e-146">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-146">-or-</span></span>  
  
 <span data-ttu-id="2733e-147"><paramref name="x" /> è <see langword="null" /> e <paramref name="y" /> non è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="2733e-148"></description></item><item><term> Zero</span><span class="sxs-lookup"><span data-stu-id="2733e-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="2733e-149"></term><description><paramref name="x" /> è uguale a <paramref name="y" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="2733e-150">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-150">-or-</span></span>  
  
 <span data-ttu-id="2733e-151"><paramref name="x" /> e <paramref name="y" /> sono entrambi <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="2733e-152"></description></item><item><term> Maggiore di zero</span><span class="sxs-lookup"><span data-stu-id="2733e-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="2733e-153"></term><description><paramref name="x" /> segue <paramref name="y" /> nell'ordinamento.</span><span class="sxs-lookup"><span data-stu-id="2733e-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="2733e-154">oppure</span><span class="sxs-lookup"><span data-stu-id="2733e-154">-or-</span></span>  
  
 <span data-ttu-id="2733e-155"><paramref name="y" /> è <see langword="null" /> e <paramref name="x" /> non è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-156">Il <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> metodo è leggermente più efficiente il <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> metodo perché alcuna conversione del `x` e `y` argomenti è necessario per eseguire il confronto.</span><span class="sxs-lookup"><span data-stu-id="2733e-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="2733e-157">impostazioni cultura le cui regole sono usate per eseguire un confronto tra stringhe.</span><span class="sxs-lookup"><span data-stu-id="2733e-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="2733e-158"><see langword="true" /> per specificare che le operazioni di confronto non devono fare distinzione tra maiuscole e minuscole; <see langword="false" /> per specificare che le operazioni di confronto devono fare distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="2733e-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="2733e-159">Crea un oggetto <see cref="T:System.StringComparer" /> che confronta le stringhe secondo le regole delle impostazioni cultura specificate.</span><span class="sxs-lookup"><span data-stu-id="2733e-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="2733e-160">Nuovo oggetto <see cref="T:System.StringComparer" /> che esegue confronti tra stringhe in base alle regole di confronto usate dal parametro <paramref name="culture" /> e alla regola di distinzione tra maiuscole e minuscole specificata dal parametro <paramref name="ignoreCase" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="2733e-161">L'esempio di codice seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-162">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2733e-163"><paramref name="culture" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-164">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola delle impostazioni cultura correnti.</span><span class="sxs-lookup"><span data-stu-id="2733e-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="2733e-165">Nuovo oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-166">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.CurrentCulture%2A> proprietà può essere utilizzata quando le stringhe sono linguisticamente rilevanti.</span><span class="sxs-lookup"><span data-stu-id="2733e-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="2733e-167">Ad esempio, se all'utente vengono visualizzate le stringhe o stringhe sono il risultato dell'interazione dell'utente, confronto tra stringhe con distinzione delle impostazioni cultura deve essere utilizzato per ordinare i dati di stringa.</span><span class="sxs-lookup"><span data-stu-id="2733e-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="2733e-168">Le impostazioni cultura correnti sono il <xref:System.Globalization.CultureInfo> oggetto associato al thread corrente.</span><span class="sxs-lookup"><span data-stu-id="2733e-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="2733e-169">Il <xref:System.StringComparer.CurrentCulture%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="2733e-170">Ogni chiamata al <xref:System.StringComparer.CurrentCulture%2A> proprietà `get` restituisce una nuova funzione di accesso <xref:System.StringComparer> oggetto, come illustrato nel codice seguente.</span><span class="sxs-lookup"><span data-stu-id="2733e-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="2733e-171">Per migliorare le prestazioni, è possibile archiviare il <xref:System.StringComparer> dell'oggetto in una variabile locale, anziché recuperare il valore della <xref:System.StringComparer.CurrentCulture%2A> proprietà più volte.</span><span class="sxs-lookup"><span data-stu-id="2733e-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2733e-172">L'esempio di codice seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-173">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-174">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola delle impostazioni cultura correnti.</span><span class="sxs-lookup"><span data-stu-id="2733e-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="2733e-175">Nuovo oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-176">Le impostazioni cultura correnti sono il <xref:System.Globalization.CultureInfo> oggetto associato al thread corrente.</span><span class="sxs-lookup"><span data-stu-id="2733e-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="2733e-177">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà può essere utilizzata quando le stringhe sono rilevanti, ma i case non.</span><span class="sxs-lookup"><span data-stu-id="2733e-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="2733e-178">Ad esempio, se le stringhe vengono visualizzate all'utente, ma è irrilevante, con distinzione delle impostazioni cultura, confronto tra stringhe con distinzione tra maiuscole e deve essere utilizzato per ordinare i dati di stringa.</span><span class="sxs-lookup"><span data-stu-id="2733e-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="2733e-179">Il <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="2733e-180">Ogni chiamata al <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà `get` restituisce una nuova funzione di accesso <xref:System.StringComparer> oggetto, come illustrato nel codice seguente.</span><span class="sxs-lookup"><span data-stu-id="2733e-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="2733e-181">Per migliorare le prestazioni, è possibile archiviare il <xref:System.StringComparer> dell'oggetto in una variabile locale, anziché recuperare il valore della <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> proprietà più volte.</span><span class="sxs-lookup"><span data-stu-id="2733e-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2733e-182">Quando ne viene eseguito l'override in una classe derivata, indica se due oggetti o stringhe sono uguali.</span><span class="sxs-lookup"><span data-stu-id="2733e-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2733e-183">Oggetto da confrontare con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="2733e-184">Oggetto da confrontare con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="2733e-185">Quando ne viene eseguito l'override in una classe derivata, indica se due oggetti sono uguali.</span><span class="sxs-lookup"><span data-stu-id="2733e-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="2733e-186"><see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> fanno riferimento allo stesso oggetto o <paramref name="x" /> e <paramref name="y" /> sono entrambi dello stesso tipo di oggetto e tali oggetti sono uguali oppure sia <paramref name="x" /> che <paramref name="y" /> sono <see langword="null" />; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-187">Poiché il runtime non è necessario eseguire la conversione unboxing `x` o `y` se sono tipi di valore o provare a eseguire il downcast `x` o `y` in stringhe se sono tipi di riferimento, il <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metodo potrebbe essere leggermente più efficiente il <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="2733e-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="2733e-188">Stringa da confrontare con <c>y</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="2733e-189">Stringa da confrontare con <c>x</c>.</span><span class="sxs-lookup"><span data-stu-id="2733e-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="2733e-190">Quando ne viene eseguito l'override in una classe derivata, indica se due stringhe sono uguali.</span><span class="sxs-lookup"><span data-stu-id="2733e-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="2733e-191"><see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> fanno riferimento allo stesso oggetto o <paramref name="x" /> e <paramref name="y" /> sono uguali oppure <paramref name="x" /> e <paramref name="y" /> sono <see langword="null" />; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-192">Poiché il runtime non è necessario eseguire la conversione unboxing `x` o `y` se sono tipi di valore o provare a eseguire il downcast `x` o `y` in stringhe se sono tipi di riferimento, il <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> metodo potrebbe essere leggermente più efficiente il <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="2733e-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2733e-193">Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per l'oggetto <see cref="T:System.StringComparer" /> corrente.</span><span class="sxs-lookup"><span data-stu-id="2733e-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2733e-194">Oggetto.</span><span class="sxs-lookup"><span data-stu-id="2733e-194">An object.</span></span></param>
        <summary><span data-ttu-id="2733e-195">Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per l'oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="2733e-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="2733e-196">Codice hash con segno a 32 bit calcolato dal valore del parametro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-197">Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo è più efficiente il <xref:System.StringComparer.GetHashCode%2A> metodo perché il `obj` parametro non deve essere unboxed per eseguire l'operazione.</span><span class="sxs-lookup"><span data-stu-id="2733e-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="2733e-198">Il <xref:System.StringComparer.GetHashCode%28System.Object%29> metodo alloca una quantità di memoria è proporzionale alle dimensioni di `obj` per calcolare il codice hash di `obj`.</span><span class="sxs-lookup"><span data-stu-id="2733e-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="2733e-199">Nel caso di stringhe di grandi dimensioni, il tentativo di recuperare il codice hash può generare un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="2733e-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="2733e-200">In alternativa, è possibile utilizzare un algoritmo alternativo che alloca una quantità fissa di memoria durante il calcolo di codici hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="2733e-201">Per utilizzare questo algoritmo, aggiungere il [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento per il [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sezione del file di configurazione dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="2733e-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2733e-202">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2733e-203"><paramref name="obj" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="2733e-204">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="2733e-205">Una stringa.</span><span class="sxs-lookup"><span data-stu-id="2733e-205">A string.</span></span></param>
        <summary><span data-ttu-id="2733e-206">Quando ne viene eseguito l'override in una classe derivata, ottiene il codice hash per la stringa specificata.</span><span class="sxs-lookup"><span data-stu-id="2733e-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="2733e-207">Codice hash con segno a 32 bit calcolato dal valore del parametro <paramref name="obj" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-208">Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo è più efficiente il <xref:System.StringComparer.GetHashCode%28System.Object%29> metodo perché il `obj` parametro non deve essere unboxed per eseguire l'operazione.</span><span class="sxs-lookup"><span data-stu-id="2733e-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="2733e-209">Il <xref:System.StringComparer.GetHashCode%28System.String%29> metodo alloca una quantità di memoria è proporzionale alle dimensioni di `obj` per calcolare il codice hash di `obj`.</span><span class="sxs-lookup"><span data-stu-id="2733e-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="2733e-210">Nel caso di stringhe di grandi dimensioni, il tentativo di recuperare il codice hash può generare un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="2733e-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="2733e-211">In alternativa, è possibile utilizzare un algoritmo alternativo che alloca una quantità fissa di memoria durante il calcolo di codici hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="2733e-212">Per utilizzare questo algoritmo, aggiungere il [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) elemento per il [ \<runtime >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) sezione del file di configurazione dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="2733e-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2733e-213">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2733e-214"><paramref name="obj" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="2733e-215">Memoria insufficiente per allocare il buffer necessario per calcolare il codice hash.</span><span class="sxs-lookup"><span data-stu-id="2733e-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-216">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe con distinzione tra maiuscole e minuscole usando le regole di confronto per parola della lingua inglese.</span><span class="sxs-lookup"><span data-stu-id="2733e-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="2733e-217">Nuovo oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-218">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.InvariantCulture%2A> proprietà confronta le stringhe in un modo linguisticamente rilevante, ma non è adatto per la visualizzazione in una qualsiasi impostazione cultura.</span><span class="sxs-lookup"><span data-stu-id="2733e-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="2733e-219">L'applicazione principale è in stringhe ordine in modo che siano identiche nelle impostazioni cultura.</span><span class="sxs-lookup"><span data-stu-id="2733e-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="2733e-220">La lingua inglese è la <xref:System.Globalization.CultureInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="2733e-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="2733e-221">Il <xref:System.StringComparer.InvariantCulture%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2733e-222">L'esempio di codice seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-223">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-224">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto tra stringhe senza distinzione tra maiuscole e minuscole usando le regole di confronto per parola della lingua inglese.</span><span class="sxs-lookup"><span data-stu-id="2733e-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="2733e-225">Nuovo oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-226">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> proprietà confronta le stringhe in modo che ignori tale distinzione linguisticamente rilevante, ma non è adatto per la visualizzazione in una qualsiasi impostazione cultura.</span><span class="sxs-lookup"><span data-stu-id="2733e-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="2733e-227">L'applicazione principale è in stringhe ordine in modo che siano identiche nelle impostazioni cultura.</span><span class="sxs-lookup"><span data-stu-id="2733e-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="2733e-228">La lingua inglese è la <xref:System.Globalization.CultureInfo> oggetto restituito dal <xref:System.Globalization.CultureInfo.InvariantCulture%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="2733e-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="2733e-229">Il <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-230">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto ordinale tra stringhe con distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="2733e-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="2733e-231">Un oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-232">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.Ordinal%2A> proprietà esegue un semplice confronto tra byte indipendente dalla lingua.</span><span class="sxs-lookup"><span data-stu-id="2733e-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="2733e-233">Questo è più appropriato quando il confronto di stringhe che vengono generati a livello di codice o quando il confronto tra maiuscole e minuscole risorse, ad esempio le password.</span><span class="sxs-lookup"><span data-stu-id="2733e-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="2733e-234">Il <xref:System.StringComparer.Ordinal%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2733e-235">L'esempio di codice seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-236">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2733e-237">Ottiene un oggetto <see cref="T:System.StringComparer" /> che esegue un confronto ordinale tra stringhe senza distinzione tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="2733e-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="2733e-238">Un oggetto <see cref="T:System.StringComparer" />.</span><span class="sxs-lookup"><span data-stu-id="2733e-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2733e-239">Il <xref:System.StringComparer> restituito dal <xref:System.StringComparer.OrdinalIgnoreCase%2A> proprietà considera i caratteri nelle stringhe da confrontare come se fossero convertiti in caratteri maiuscoli mediante le convenzioni delle impostazioni cultura invarianti e quindi esegue un semplice confronto tra byte indipendente lingua.</span><span class="sxs-lookup"><span data-stu-id="2733e-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="2733e-240">Questo è più appropriato quando il confronto di stringhe che vengono generati a livello di codice o quando il confronto tra maiuscole e minuscole risorse, ad esempio i percorsi e nomi di file.</span><span class="sxs-lookup"><span data-stu-id="2733e-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="2733e-241">Il <xref:System.StringComparer.OrdinalIgnoreCase%2A> restituisce un'istanza di una classe anonima derivata dalla proprietà di <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2733e-242">L'esempio di codice seguente illustra le proprietà e <xref:System.StringComparer.Create%2A> metodo la <xref:System.StringComparer> classe.</span><span class="sxs-lookup"><span data-stu-id="2733e-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="2733e-243">Nell'esempio viene illustrato come i diversi <xref:System.StringComparer> oggetti ordinamento e tre le versioni delle latine alfabeto.</span><span class="sxs-lookup"><span data-stu-id="2733e-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>