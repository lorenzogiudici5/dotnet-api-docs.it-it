<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa411050e839a877b80d93acdac19b913a6e8a46" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39854295" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="45e68-101">Rappresenta un delegato, ossia la struttura di dati che fa riferimento a un metodo static o a un'istanza di classe e un metodo di istanza di quella classe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="45e68-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-102">Il <xref:System.Delegate> classe è la classe base per i tipi delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="45e68-103">Tuttavia, solo il sistema e i compilatori possono derivare in modo esplicito il <xref:System.Delegate> classe o dal <xref:System.MulticastDelegate> classe.</span><span class="sxs-lookup"><span data-stu-id="45e68-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="45e68-104">Non è inoltre possibile derivare un nuovo tipo da un tipo delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="45e68-105">Il <xref:System.Delegate> classe non viene considerata un tipo delegato, ovvero una classe utilizzata per derivare i tipi delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="45e68-106">Implementano la maggior parte dei linguaggi una `delegate` parola chiave e i compilatori di tali linguaggi sono in grado di derivare dal <xref:System.MulticastDelegate> classe; pertanto, gli utenti devono usare il `delegate` parola chiave del linguaggio.</span><span class="sxs-lookup"><span data-stu-id="45e68-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-107">Common language runtime fornisce un `Invoke` metodo per ogni tipo di delegato, con la stessa firma del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="45e68-108">Non è necessario chiamare questo metodo in modo esplicito dal codice c#, Visual Basic o Visual C++, perché i compilatori chiamano automaticamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="45e68-109">Il `Invoke` metodo è utile negli [reflection](~/docs/framework/reflection-and-codedom/reflection.md) quando si desidera trovare la firma del tipo delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="45e68-110">Common language runtime fornisce ogni tipo di delegato con `BeginInvoke` e `EndInvoke` nei metodi per abilitare la chiamata asincrona del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="45e68-111">Per altre informazioni su questi metodi, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span><span class="sxs-lookup"><span data-stu-id="45e68-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="45e68-112">La dichiarazione di un tipo delegato stabilisce un contratto che specifica la firma di uno o più metodi.</span><span class="sxs-lookup"><span data-stu-id="45e68-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="45e68-113">Un delegato è un'istanza di un tipo delegato che contiene riferimenti a:</span><span class="sxs-lookup"><span data-stu-id="45e68-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="45e68-114">Un metodo di istanza di un tipo e un oggetto di destinazione può essere assegnato a tale tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="45e68-115">Un metodo di istanza di un tipo, con nascosto `this` parametro esposto nell'elenco di parametri formali.</span><span class="sxs-lookup"><span data-stu-id="45e68-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="45e68-116">Il delegato è associato a un'istanza aperta di delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="45e68-117">Un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-117">A static method.</span></span>  
  
-   <span data-ttu-id="45e68-118">Un metodo statico e un oggetto di destinazione può essere assegnato al primo parametro del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="45e68-119">Il delegato per essere chiuso al primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="45e68-120">Per ulteriori informazioni sull'associazione di delegati, vedere il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-121">Nelle versioni 1.0 e 1.1 di .NET Framework, un delegato può rappresentare un metodo solo se la firma del metodo corrisponde esattamente alla firma specificata dal tipo di delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="45e68-122">Di conseguenza, è supportato solo il primo e il terzo punto dell'elenco precedente, e al primo punto richiede una corrispondenza di tipo esatto.</span><span class="sxs-lookup"><span data-stu-id="45e68-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="45e68-123">Quando un delegato rappresenta un metodo di istanza chiuso al primo argomento (il caso più comune), viene archiviato un riferimento al punto di ingresso del metodo e un riferimento a un oggetto, denominato destinazione, che è un tipo assegnabile al tipo di cui è definito il metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="45e68-124">Quando un delegato rappresenta un metodo di istanza aperta, archivia un riferimento al punto di ingresso del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="45e68-125">La firma del delegato deve includere nascosto `this` parametro nel relativo elenco di parametri formali; in questo caso, il delegato non è un riferimento a un oggetto di destinazione, e un oggetto di destinazione deve essere specificato quando viene richiamato il delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="45e68-126">Quando un delegato rappresenta un metodo statico, il delegato archivia un riferimento al punto di ingresso del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="45e68-127">Quando un delegato rappresenta un metodo statico chiuso al primo argomento, il delegato archivia un riferimento al punto di ingresso del metodo e un riferimento a un oggetto di destinazione può essere assegnato al tipo del primo argomento del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="45e68-128">Quando il delegato viene richiamato, il primo argomento del metodo statico riceve l'oggetto di destinazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="45e68-129">L'elenco chiamate di un delegato è un set ordinato di delegati in cui ogni elemento dell'elenco richiama esattamente uno dei metodi rappresentati dal delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="45e68-130">Un elenco di chiamate può contenere metodi duplicati.</span><span class="sxs-lookup"><span data-stu-id="45e68-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="45e68-131">Durante una chiamata, i metodi vengono richiamati nell'ordine in cui vengono visualizzati nell'elenco chiamate.</span><span class="sxs-lookup"><span data-stu-id="45e68-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="45e68-132">Un delegato tenta di richiamare ogni metodo nell'elenco chiamate; una volta per ogni volta che vengono visualizzati nell'elenco chiamate, vengono richiamati i duplicati.</span><span class="sxs-lookup"><span data-stu-id="45e68-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="45e68-133">I delegati sono immutabili. una volta creato, non modifica l'elenco chiamate di un delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="45e68-134">I delegati vengono definiti come multicast o combinabile, perché un delegato può richiamare uno o più metodi e può essere usato in combinazione di operazioni.</span><span class="sxs-lookup"><span data-stu-id="45e68-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="45e68-135">La combinazione di operazioni, ad esempio <xref:System.Delegate.Combine%2A> e <xref:System.Delegate.Remove%2A>, delegati esistenti non verranno modificati.</span><span class="sxs-lookup"><span data-stu-id="45e68-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="45e68-136">Al contrario, questa operazione restituisce un nuovo delegato che contiene i risultati dell'operazione, un delegato invariato o `null`.</span><span class="sxs-lookup"><span data-stu-id="45e68-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="45e68-137">Restituisce un'operazione di combinazione `null` quando il risultato dell'operazione è un delegato che non fa riferimento ad almeno un metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="45e68-138">Un'operazione di combinazione restituisce un delegato invariato durante l'operazione richiesta non ha alcun effetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-139">Linguaggi gestiti utilizzano le <xref:System.Delegate.Combine%2A> e <xref:System.Delegate.Remove%2A> metodi per implementare le operazioni di delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="45e68-140">Gli esempi includono la `AddHandler` e `RemoveHandler` istruzioni in Visual Basic e gli operatori + = e -= in tipi delegati in c#.</span><span class="sxs-lookup"><span data-stu-id="45e68-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="45e68-141">A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], tipi delegati generici possono avere parametri di tipo variante.</span><span class="sxs-lookup"><span data-stu-id="45e68-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="45e68-142">Parametri di tipo controvariante possono essere utilizzati come tipi di parametro del delegato e un parametro di tipo covariante può essere utilizzato come tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="45e68-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="45e68-143">Questa funzionalità consente di delegato generico tipi costruiti dalla stessa definizione di tipo generico per essere compatibili con l'assegnazione se i relativi argomenti di tipo sono tipi di riferimento con una relazione di ereditarietà, come spiegato in [covarianza e La controvarianza](~/docs/standard/generics/covariance-and-contravariance.md).</span><span class="sxs-lookup"><span data-stu-id="45e68-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-144">I delegati generici che sono compatibili con l'assegnazione a causa della varianza non sono necessariamente combinabili.</span><span class="sxs-lookup"><span data-stu-id="45e68-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45e68-145">Per essere combinabili, i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45e68-146">Ad esempio, si supponga che una classe denominata `Derived` deriva da una classe denominata `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45e68-147">Un delegato del tipo `Action<Base>` (`Action(Of Base)` in Visual Basic) può essere assegnato a una variabile di tipo `Action<Derived>`, ma non è possibile combinare le due delegati perché i tipi non corrispondono esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45e68-148">Se un metodo richiamato genera un'eccezione, il metodo viene arrestata l'esecuzione, l'eccezione viene passata al chiamante del delegato e non vengono richiamati i metodi rimanenti nell'elenco chiamate.</span><span class="sxs-lookup"><span data-stu-id="45e68-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="45e68-149">Rilevare l'eccezione nel chiamante non modificare questo comportamento.</span><span class="sxs-lookup"><span data-stu-id="45e68-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="45e68-150">Quando la firma dei metodi richiamati da un delegato include un valore restituito, il delegato restituisce il valore restituito dell'ultimo elemento nell'elenco chiamate.</span><span class="sxs-lookup"><span data-stu-id="45e68-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="45e68-151">Quando la firma include un parametro che viene passato per riferimento, il valore finale del parametro è il risultato di ogni metodo nell'elenco chiamate in esecuzione in modo sequenziale e aggiornare il valore del parametro.</span><span class="sxs-lookup"><span data-stu-id="45e68-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="45e68-152">L'equivalente più vicino di un delegato in C o C++ è un puntatore a funzione.</span><span class="sxs-lookup"><span data-stu-id="45e68-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="45e68-153">Un delegato può rappresentare un metodo statico o un metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="45e68-154">Quando il delegato rappresenta un metodo di istanza, il delegato archivia non solo un riferimento al punto di ingresso del metodo, ma anche un riferimento all'istanza della classe.</span><span class="sxs-lookup"><span data-stu-id="45e68-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="45e68-155">A differenza dei puntatori a funzione, i delegati sono orientate a oggetti e indipendente dai tipi.</span><span class="sxs-lookup"><span data-stu-id="45e68-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-156">Nell'esempio seguente viene illustrato come definire un delegato denominato `myMethodDelegate`.</span><span class="sxs-lookup"><span data-stu-id="45e68-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="45e68-157">Vengono create istanze di questo delegato per un metodo di istanza e un metodo statico di annidata `mySampleClass` classe.</span><span class="sxs-lookup"><span data-stu-id="45e68-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="45e68-158">Il delegato per il metodo di istanza richiede un'istanza di `mySampleClass`.</span><span class="sxs-lookup"><span data-stu-id="45e68-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="45e68-159">Il `mySampleClass` istanza viene salvata in una variabile denominata `mySC`.</span><span class="sxs-lookup"><span data-stu-id="45e68-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45e68-160">Inizializza un nuovo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="45e68-161">Istanza di classe sulla quale viene richiamato il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-162">Nome del metodo di istanza rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-163">Inizializza un delegato che richiama il metodo di istanza specificato nell'istanza di classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-164">Questo costruttore non può essere utilizzato nel codice dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="45e68-165">Per creare un delegato che specifica il nome di un metodo di istanza, usare un overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specifica un nome di metodo e un oggetto di destinazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="45e68-166">Ad esempio, il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> overload del metodo crea un delegato per un metodo di istanza con un nome specificato.</span><span class="sxs-lookup"><span data-stu-id="45e68-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="45e68-167">Questo costruttore crea i delegati, ad esempio solo i metodi.</span><span class="sxs-lookup"><span data-stu-id="45e68-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="45e68-168">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-169">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-170">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-170">-or-</span>
          </span>
          <span data-ttu-id="45e68-171">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-171">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-172">Si è verificato un errore durante l'associazione al metodo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-172">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-173">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-173">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-174">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-174">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="45e68-175">Classe <see cref="T:System.Type" /> che rappresenta la classe che definisce il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-175">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-176">Nome del metodo statico rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-176">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-177">Inizializza un delegato tramite cui viene richiamato il metodo statico specificato dalla classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-177">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-178">Questo costruttore non può essere utilizzato nel codice dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-178">This constructor cannot be used in application code.</span></span> <span data-ttu-id="45e68-179">Per creare un delegato che specifica il nome di un metodo statico, usare un overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specifica un nome di metodo, ma non specifica un oggetto di destinazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-179">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="45e68-180">Ad esempio, il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> overload del metodo crea un delegato per un metodo statico con un nome specificato.</span><span class="sxs-lookup"><span data-stu-id="45e68-180">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="45e68-181">Questo costruttore crea i delegati per solo i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-181">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="45e68-182">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-182">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-183">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-183">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-184">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-184">-or-</span>
          </span>
          <span data-ttu-id="45e68-185">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-185">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-186">
            <paramref name="target" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-186">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-187">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-187">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-188">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-188">-or-</span>
          </span>
          <span data-ttu-id="45e68-189">
            <paramref name="target" /> rappresenta un tipo generico aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-189">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-190">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-191">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e68-192">Crea una copia superficiale del delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-192">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-193">Copia superficiale del delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-193">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-194">La clonazione presenta lo stesso <xref:System.Type>, elenco di destinazione, metodo e nella chiamata del delegato dell'originale.</span><span class="sxs-lookup"><span data-stu-id="45e68-194">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="45e68-195">Una copia superficiale crea una nuova istanza dello stesso tipo dell'oggetto originale e copia quindi i campi non statici dell'oggetto originale.</span><span class="sxs-lookup"><span data-stu-id="45e68-195">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="45e68-196">Se il campo è un tipo di valore, viene eseguita una copia bit per bit del campo.</span><span class="sxs-lookup"><span data-stu-id="45e68-196">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="45e68-197">Se il campo è un tipo riferimento, il riferimento è copiato ma l'oggetto di cui viene fatto riferimento non; Pertanto, il riferimento nell'oggetto originale e il riferimento nel clone puntare allo stesso oggetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-197">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="45e68-198">Al contrario, una copia completa di un oggetto consente di duplicare tutti gli elementi direttamente o indirettamente fa riferimento i campi nell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-198">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-199">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-199">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-200">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-200">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45e68-201">Esegue la concatenazione dell'elenco chiamate dei delegati multicast, o combinabili, specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-201">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="45e68-202">Matrice di delegati da combinare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-202">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-203">Esegue la concatenazione degli elenchi chiamate di una matrice di delegati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-203">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-204">Nuovo delegato con un elenco chiamate in cui vengono concatenati gli elenchi chiamate dei delegati nella matrice <paramref name="delegates" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-204">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="45e68-205">Restituisce <see langword="null" /> se <paramref name="delegates" /> è <see langword="null" />, se <paramref name="delegates" /> contiene zero elementi o se ogni voce in <paramref name="delegates" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-205">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-206">Se il `delegates` matrice contiene voci che sono `null`, tali voci vengono ignorate.</span><span class="sxs-lookup"><span data-stu-id="45e68-206">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="45e68-207">L'elenco chiamate può contenere le voci duplicate; vale a dire, le voci che fanno riferimento al metodo di stesso sullo stesso oggetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-207">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-208">I delegati generici che sono compatibili con l'assegnazione a causa della varianza non sono necessariamente combinabili.</span><span class="sxs-lookup"><span data-stu-id="45e68-208">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45e68-209">Per essere combinabili, i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-209">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45e68-210">Ad esempio, si supponga che una classe denominata `Derived` deriva da una classe denominata `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-210">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45e68-211">Un delegato del tipo `Action<Base>` (`Action(Of Base)` in Visual Basic) può essere assegnato a una variabile di tipo `Action<Derived>`, come illustrato in [covarianza e controvarianza](~/docs/standard/generics/covariance-and-contravariance.md), ma i due delegati non possono essere combinati in quanto i tipi non corrispondono esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-211">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45e68-212"><xref:System.Delegate.Combine%2A> è utile per la creazione di gestori di eventi che si verifica più metodi ogni volta un evento di chiamata.</span><span class="sxs-lookup"><span data-stu-id="45e68-212"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-213">Non tutte le voci non null in <paramref name="delegates" /> sono istanze dello stesso tipo di delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-213">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-214">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-214">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-215">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-215">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="45e68-216">Delegato il cui elenco chiamate viene considerato per primo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-216">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="45e68-217">Delegato il cui elenco chiamate viene considerato per ultimo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-217">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-218">Esegue la concatenazione degli elenchi chiamate di due delegati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-218">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-219">Nuovo delegato con un elenco chiamate in cui vengono concatenati gli elenchi chiamate di <paramref name="a" /> e <paramref name="b" /> (in quell'ordine).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-219">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="45e68-220">Restituisce <paramref name="a" /> se <paramref name="b" /> è <see langword="null" />, restituisce <paramref name="b" /> se <paramref name="a" /> è un riferimento Null e restituisce un riferimento Null se <paramref name="a" /> e <paramref name="b" /> sono entrambi riferimenti Null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-220">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-221">L'elenco chiamate può contenere le voci duplicate; vale a dire, le voci che fanno riferimento al metodo di stesso sullo stesso oggetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-221">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-222">I delegati generici che sono compatibili con l'assegnazione a causa della varianza non sono necessariamente combinabili.</span><span class="sxs-lookup"><span data-stu-id="45e68-222">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="45e68-223">Per essere combinabili, i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-223">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="45e68-224">Ad esempio, si supponga che una classe denominata `Derived` deriva da una classe denominata `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-224">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="45e68-225">Un delegato del tipo `Action<Base>` (`Action(Of Base)` in Visual Basic) può essere assegnato a una variabile di tipo `Action<Derived>`, come illustrato in [covarianza e controvarianza](~/docs/standard/generics/covariance-and-contravariance.md), ma i due delegati non possono essere combinati in quanto i tipi non corrispondono esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-225">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="45e68-226"><xref:System.Delegate.Combine%2A> è utile per la creazione di gestori di eventi che si verifica più metodi ogni volta un evento di chiamata.</span><span class="sxs-lookup"><span data-stu-id="45e68-226"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-227">Né <paramref name="a" /> e <paramref name="b" /> sono <see langword="null" /> e né <paramref name="a" /> né <paramref name="b" /> sono istanze dello stesso tipo delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-227">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-228">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-229">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="45e68-230">Delegato multicast, o combinabile, il cui elenco chiamate va aggiunto alla fine dell'elenco chiamate del delegato multicast o combinabile corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-230">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-231">Esegue la concatenazione degli elenchi chiamate dei delegati multicast o combinabili specificati e del delegato multicast o combinabile corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-231">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-232">Nuovo delegato multicast o combinabile nel cui elenco chiamate vengono concatenati l'elenco chiamate del delegato multicast o combinabile corrente e l'elenco chiamate di <paramref name="d" />; in alternativa, se <paramref name="d" /> è <see langword="null" />, verrà restituito il delegato multicast o combinabile corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-232">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-233">Questo metodo si applica solo se il delegato corrente è multicast, o combinabile.</span><span class="sxs-lookup"><span data-stu-id="45e68-233">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="45e68-234">L'implementazione corrente genera semplicemente un <xref:System.MulticastNotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="45e68-234">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="45e68-235">L'elenco chiamate può contenere le voci duplicate; vale a dire, le voci che fanno riferimento al metodo di stesso sullo stesso oggetto.</span><span class="sxs-lookup"><span data-stu-id="45e68-235">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="45e68-236">Sempre generato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-236">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-237">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-238">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="45e68-239">Crea un delegato del tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-239">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-240">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-240">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-241">
            <see cref="T:System.Reflection.MethodInfo" /> che descrive il metodo statico o il metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-241">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="45e68-242">Nelle versioni 1.0 e 1.1 di .NET Framework sono supportati solo i metodi statici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-242">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-243">Crea un delegato del tipo specificato che rappresenta il metodo statico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-243">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-244">Delegato del tipo specificato che rappresenta il metodo statico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-244">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-245">In .NET Framework versioni 1.0 e 1.1, questo overload del metodo consente di creare i delegati per solo i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-245">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="45e68-246">In .NET Framework versione 2.0, questo overload del metodo anche può creare Apri istanza metodo i delegati; metodi di istanza, ovvero i delegati che forniscono in modo esplicito il primo argomento di nascosto.</span><span class="sxs-lookup"><span data-stu-id="45e68-246">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="45e68-247">Per informazioni dettagliate, vedere il metodo più generico <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> overload del metodo, che consente di creare tutte le combinazioni dei delegati chiusi o aperti per l'istanza o metodi statici e, facoltativamente, specificare un primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-247">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-248">Questo overload del metodo deve essere utilizzato quando il delegato non viene chiusa al primo argomento, perché in tal caso è leggermente più veloce.</span><span class="sxs-lookup"><span data-stu-id="45e68-248">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="45e68-249">Questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo e specificando `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-249">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-250">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-251">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-251">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-252">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-252">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45e68-253">I tipi di parametro compatibili e il tipo restituito</span><span class="sxs-lookup"><span data-stu-id="45e68-253">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45e68-254">In .NET Framework versione 2.0, i tipi di parametro e tipo restituito del delegato creato usando questo overload del metodo deve essere compatibile con i tipi di parametro e tipo restituito del metodo rappresentato dal delegato. i tipi non è in modo che corrispondano esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-254">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="45e68-255">Rappresenta un minore rigidità del comportamento di associazione in .NET Framework versioni 1.0 e 1.1, in cui i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-255">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="45e68-256">Un parametro di un delegato è compatibile con il parametro di un metodo corrispondente se il tipo del parametro del delegato è più restrittivo rispetto al tipo del parametro del metodo. In questo modo si garantisce che un argomento passato al delegato possa essere passato in modo sicuro al metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-256">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45e68-257">Analogamente, il tipo restituito di un delegato è compatibile con il tipo restituito di un metodo se il tipo restituito del metodo è più restrittivo rispetto al tipo restituito del delegato. In questo modo si garantisce la possibilità di eseguire in modo sicuro il cast del valore restituito del metodo nel tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-257">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-258">Ad esempio, un delegato con un parametro di tipo <xref:System.Collections.Hashtable> e un tipo restituito <xref:System.Object> può rappresentare un metodo con un parametro di tipo <xref:System.Object> e un valore restituito di tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="45e68-258">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-259">In questa sezione sono riportati due esempi di codice.</span><span class="sxs-lookup"><span data-stu-id="45e68-259">This section contains two code examples.</span></span> <span data-ttu-id="45e68-260">Nel primo esempio illustra i due tipi di delegati che possono essere creati con questo overload del metodo: aprire tramite un metodo di istanza e su un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-260">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="45e68-261">Il secondo esempio di codice vengono illustrati i tipi di parametro compatibili e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-261">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45e68-262">**Esempio 1**</span><span class="sxs-lookup"><span data-stu-id="45e68-262">**Example 1**</span></span>  
  
 <span data-ttu-id="45e68-263">Esempio di codice seguente illustra le due modalità un delegato può essere creato usando questo overload del metodo di <xref:System.Delegate.CreateDelegate%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="45e68-263">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-264">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano un <xref:System.Reflection.MethodInfo> ma non è un primo argomento; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-264">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-265">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-265">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-266">Nell'esempio viene dichiarata una classe `C` con un metodo statico `M2` e un metodo di istanza `M1`, e due tipi di delegato: `D1` accetta un'istanza di `C` e una stringa, e `D2` accetta una stringa.</span><span class="sxs-lookup"><span data-stu-id="45e68-266">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="45e68-267">Una seconda classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-267">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-268">Un delegato del tipo `D1`, che rappresenta un metodo di istanza aperta, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-268">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-269">Un'istanza deve essere passata quando viene richiamato il delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-269">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-270">Un delegato del tipo `D2`, che rappresenta un metodo statico aperto, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-270">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45e68-271">**Esempio 2**</span><span class="sxs-lookup"><span data-stu-id="45e68-271">**Example 2**</span></span>  
  
 <span data-ttu-id="45e68-272">Esempio di codice seguente illustra la compatibilità dei tipi di parametro e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-272">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="45e68-273">L'esempio di codice definisce una classe base denominata `Base` e una classe denominata `Derived` che deriva da `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-273">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45e68-274">La classe derivata ha un `static` (`Shared` in Visual Basic) metodo denominato `MyMethod` con un parametro di tipo `Base` e un tipo restituito di `Derived`.</span><span class="sxs-lookup"><span data-stu-id="45e68-274">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45e68-275">L'esempio di codice definisce anche un delegato denominato `Example` che ha un parametro di tipo `Derived` e un tipo restituito di `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-275">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45e68-276">L'esempio di codice viene illustrato che il delegato denominato `Example` può essere utilizzato per rappresentare il metodo `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-276">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45e68-277">Il metodo può essere associato al delegato perché:</span><span class="sxs-lookup"><span data-stu-id="45e68-277">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45e68-278">Il tipo di parametro del delegato (`Derived`) è più restrittivo rispetto al tipo di parametro del `MyMethod` (`Base`), in modo che sia sempre possibile passare l'argomento del delegato da `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-278">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45e68-279">Il tipo restituito del `MyMethod` (`Derived`) è più restrittivo rispetto al tipo di parametro del delegato (`Base`), in modo che sia sempre possibile eseguire il cast di tipo restituito del metodo per il tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-279">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-280">L'esempio di codice non genera alcun output.</span><span class="sxs-lookup"><span data-stu-id="45e68-280">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-281">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-281">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-282">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-282">-or-</span>
          </span>
          <span data-ttu-id="45e68-283">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-283">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-284">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-284">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-285">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-285">-or-</span>
          </span>
          <span data-ttu-id="45e68-286">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-286">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-287">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-287">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-288">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-288">-or-</span>
          </span>
          <span data-ttu-id="45e68-289">
            <paramref name="method" /> non è un metodo statico e la versione di .NET Framework è 1.0 o 1.1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-289">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="45e68-290">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-290">-or-</span>
          </span>
          <span data-ttu-id="45e68-291">
            <paramref name="method" /> non può essere associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-291">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="45e68-292">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-292">-or-</span>
          </span>
          <span data-ttu-id="45e68-293">
            <paramref name="method" /> non è un oggetto <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-293">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45e68-294">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-294">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-295">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-295">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-296">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-296">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-297">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-297">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-298">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-298">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-299">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-299">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="45e68-300">Oggetto a cui il delegato è associato oppure <see langword="null" /> per trattare <c>method</c> come <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-300">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-301">
            <see cref="T:System.Reflection.MethodInfo" /> che descrive il metodo statico o il metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-301">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-302">Crea un delegato del tipo specificato che rappresenta il metodo statico o il metodo di istanza indicato, con il primo argomento specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-302">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-303">Delegato del tipo specificato che rappresenta il metodo statico o di istanza specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-303">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-304">Chiamare questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo e specificando `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-304">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="45e68-305">Questi due overload forniscono il modo più flessibile per creare i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-305">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="45e68-306">È possibile usarli per creare i delegati per statici o metodi di istanza e, facoltativamente, specificare il primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-306">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-307">Se non si fornisce un primo argomento, usare il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> overload del metodo per ottenere prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="45e68-307">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="45e68-308">Il tipo delegato e il metodo deve avere tipi restituiti compatibili.</span><span class="sxs-lookup"><span data-stu-id="45e68-308">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="45e68-309">Vale a dire, il tipo restituito del `method` deve essere assegnabile al tipo restituito di `type`.</span><span class="sxs-lookup"><span data-stu-id="45e68-309">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="45e68-310">Se `firstArgument` viene fornito, viene passata a `method` ogni volta che viene richiamato il delegato; `firstArgument` viene definito da associare al delegato e il delegato per essere chiuso al primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-310">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="45e68-311">Se `method` viene `static` (`Shared` in Visual Basic), l'elenco argomenti fornito quando si richiama il delegato include tutti i parametri tranne il primo; se `method` è un metodo di istanza, quindi `firstArgument` viene passato all'istanza nascosta parametro (rappresentato da `this` in c# o da `Me` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="45e68-311">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="45e68-312">Se `firstArgument` viene fornito, il primo parametro di `method` deve essere un tipo riferimento, e `firstArgument` deve essere compatibile con tale tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-312">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45e68-313">Se `method` viene `static` (`Shared` in Visual Basic) e il primo parametro è di tipo <xref:System.Object> oppure <xref:System.ValueType>, quindi `firstArgument` può essere un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="45e68-313">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="45e68-314">In questo caso `firstArgument` automaticamente viene sottoposto a boxing.</span><span class="sxs-lookup"><span data-stu-id="45e68-314">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="45e68-315">Conversione boxing automatico non avviene per altri argomenti, come in una funzione c# o Visual Basic che chiamasse.</span><span class="sxs-lookup"><span data-stu-id="45e68-315">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="45e68-316">Se `firstArgument` è un riferimento null e `method` è un metodo di istanza, il risultato dipende dalle firme del tipo delegato `type` e di `method`:</span><span class="sxs-lookup"><span data-stu-id="45e68-316">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45e68-317">Se la firma dei `type` includa in modo esplicito il primo parametro nascosto di `method`, il delegato rappresenta un metodo di istanza aperta.</span><span class="sxs-lookup"><span data-stu-id="45e68-317">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="45e68-318">Quando il delegato viene richiamato, il primo argomento nell'elenco di argomenti viene passato al parametro instance nascosta di `method`.</span><span class="sxs-lookup"><span data-stu-id="45e68-318">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="45e68-319">Se le firme dei `method` e `type` corrispondenza (vale a dire, tutti i tipi di parametro compatibili), il delegato è associato in modo rigido un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-319">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45e68-320">Richiamare il delegato è simile a chiamata al metodo di istanza in un'istanza null, che non è un'operazione particolarmente utile da eseguire.</span><span class="sxs-lookup"><span data-stu-id="45e68-320">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="45e68-321">Se `firstArgument` è un riferimento null e `method` è statica, il risultato dipende dalle firme del tipo delegato `type` e di `method`:</span><span class="sxs-lookup"><span data-stu-id="45e68-321">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45e68-322">Se la firma dei `method` e `type` corrispondenza (vale a dire, tutti i tipi di parametro compatibili), il delegato rappresenta un metodo statico open.</span><span class="sxs-lookup"><span data-stu-id="45e68-322">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="45e68-323">Questo è il caso più comune per i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-323">This is the most common case for static methods.</span></span> <span data-ttu-id="45e68-324">In questo caso, è possibile ottenere prestazioni leggermente migliori usando il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-324">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="45e68-325">Se la firma dei `type` inizia con il secondo parametro di `method` e il resto dei tipi di parametro compatibili, quindi il delegato per essere chiuso un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-325">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45e68-326">Quando il delegato viene richiamato, viene passato un riferimento null per il primo parametro di `method`.</span><span class="sxs-lookup"><span data-stu-id="45e68-326">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-327">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-327">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-328">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-328">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-329">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-329">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45e68-330">I tipi di parametro compatibili e il tipo restituito</span><span class="sxs-lookup"><span data-stu-id="45e68-330">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45e68-331">I tipi di parametro e tipo restituito del delegato deve essere compatibile con i tipi di parametro e tipo restituito del metodo rappresentato dal delegato. i tipi non è in modo che corrispondano esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-331">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-332">In .NET Framework versioni 1.0 e 1.1, i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-332">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="45e68-333">Un parametro di un delegato è compatibile con il parametro di un metodo corrispondente se il tipo del parametro del delegato è più restrittivo rispetto al tipo del parametro del metodo. In questo modo si garantisce che un argomento passato al delegato possa essere passato in modo sicuro al metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-333">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45e68-334">Analogamente, il tipo restituito di un delegato è compatibile con il tipo restituito di un metodo se il tipo restituito del metodo è più restrittivo rispetto al tipo restituito del delegato. In questo modo si garantisce la possibilità di eseguire in modo sicuro il cast del valore restituito del metodo nel tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-334">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-335">Ad esempio, un delegato con un parametro di tipo <xref:System.Collections.Hashtable> e un tipo restituito <xref:System.Object> può rappresentare un metodo con un parametro di tipo <xref:System.Object> e un valore restituito di tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="45e68-335">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="45e68-336">Determinazione dei metodi che può rappresentare un delegato</span><span class="sxs-lookup"><span data-stu-id="45e68-336">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="45e68-337">Un altro modo utile pensare alla flessibilità offerta da questo overload del metodo <xref:System.Delegate.CreateDelegate%2A> è che qualsiasi delegato specificato possa rappresentare quattro diverse combinazioni di firma del metodo e il tipo di metodo (statico o istanza).</span><span class="sxs-lookup"><span data-stu-id="45e68-337">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="45e68-338">Si consideri un tipo delegato `D` con un solo argomento di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-338">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45e68-339">Di seguito vengono descritti i metodi `D` può rappresentare, ignorando il tipo restituito poiché deve corrispondere in tutti i casi:</span><span class="sxs-lookup"><span data-stu-id="45e68-339">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="45e68-340">`D` può rappresentare qualsiasi metodo di istanza che dispone di esattamente un argomento di tipo `C`, indipendentemente dal tipo a cui appartiene il metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-340">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="45e68-341">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato `firstArgument` è un'istanza del tipo `method` appartiene, e il delegato risultante viene definito per essere chiuso in quell'istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="45e68-342">(In modo rigido `D` può inoltre essere associato un riferimento null se `firstArgument` è un riferimento null.)</span><span class="sxs-lookup"><span data-stu-id="45e68-342">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="45e68-343">`D` può rappresentare un metodo di istanza di `C` che non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-343">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="45e68-344">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato, `firstArgument` è un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-344">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45e68-345">Il delegato risultante rappresenta un metodo di istanza aperta e un'istanza di `C` è necessario specificare ogni volta che viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="45e68-345">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-346">`D` può rappresentare un metodo statico che accetta un argomento di tipo `C`, e che può appartenere a qualsiasi tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-346">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="45e68-347">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato, `firstArgument` è un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-347">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45e68-348">Il delegato risultante rappresenta un metodo statico aperto e un'istanza di `C` è necessario specificare ogni volta che viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="45e68-348">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-349">`D` può rappresentare un metodo statico che appartiene al tipo `F` e dispone di due argomenti, di tipo `F` e il tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-349">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="45e68-350">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato `firstArgument` è un'istanza di `F`.</span><span class="sxs-lookup"><span data-stu-id="45e68-350">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="45e68-351">Il delegato risultante rappresenta un metodo statico che viene chiuso in quell'istanza di `F`.</span><span class="sxs-lookup"><span data-stu-id="45e68-351">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="45e68-352">Si noti che nel caso in cui `F` e `C` sono dello stesso tipo, il metodo statico dispone di due argomenti di quel tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-352">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="45e68-353">(In questo caso `D` viene chiuso un riferimento null se `firstArgument` è un riferimento null.)</span><span class="sxs-lookup"><span data-stu-id="45e68-353">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-354">In questa sezione contiene tre esempi di codice.</span><span class="sxs-lookup"><span data-stu-id="45e68-354">This section contains three code examples.</span></span> <span data-ttu-id="45e68-355">Nel primo esempio illustra i quattro tipi di delegati che possono essere creati: rigido a un metodo di istanza, aprire tramite un metodo di istanza, aprire tramite un metodo statico e chiusa tramite un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-355">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="45e68-356">Il secondo esempio di codice vengono illustrati i tipi di parametro compatibili e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-356">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45e68-357">Mostra tutti i metodi che il tipo delegato possono rappresentare il terzo esempio di codice definisce un tipo di delegato unico.</span><span class="sxs-lookup"><span data-stu-id="45e68-357">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="45e68-358">**Esempio 1**</span><span class="sxs-lookup"><span data-stu-id="45e68-358">**Example 1**</span></span>  
  
 <span data-ttu-id="45e68-359">Esempio di codice seguente illustra i quattro modi un delegato può essere creato usando l'overload del <xref:System.Delegate.CreateDelegate%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="45e68-359">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-360">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano `firstArgument` e un <xref:System.Reflection.MethodInfo>; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-360">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-361">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-361">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-362">Nell'esempio viene dichiarata una classe `C` con un metodo statico `M2` e un metodo di istanza `M1`, e tre i tipi di delegato: `D1` accetta un'istanza di `C` e una stringa, `D2` accetta una stringa e `D3`non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-362">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="45e68-363">Una seconda classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-363">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-364">Un delegato del tipo `D2`, chiuso su un'istanza di `C`, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-364">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-365">Viene richiamato con stringhe diverse, a indicare che l'istanza associata di `C` viene sempre usato.</span><span class="sxs-lookup"><span data-stu-id="45e68-365">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="45e68-366">Un delegato del tipo `D1`, che rappresenta un metodo di istanza aperta, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-366">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-367">Un'istanza deve essere passata quando viene richiamato il delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-367">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-368">Un delegato del tipo `D2`, che rappresenta un metodo statico aperto, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-368">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="45e68-369">Infine, un delegato del tipo `D3`, chiuso in una stringa, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-369">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="45e68-370">Il metodo viene richiamato per mostrare che usa la stringa associata.</span><span class="sxs-lookup"><span data-stu-id="45e68-370">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45e68-371">**Esempio 2**</span><span class="sxs-lookup"><span data-stu-id="45e68-371">**Example 2**</span></span>  
  
 <span data-ttu-id="45e68-372">Esempio di codice seguente illustra la compatibilità dei tipi di parametro e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-372">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-373">Questo esempio di codice Usa il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-373">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45e68-374">L'utilizzo di altri overload che accettano <xref:System.Reflection.MethodInfo> è simile.</span><span class="sxs-lookup"><span data-stu-id="45e68-374">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45e68-375">L'esempio di codice definisce una classe base denominata `Base` e una classe denominata `Derived` che deriva da `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-375">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45e68-376">La classe derivata ha un `static` (`Shared` in Visual Basic) metodo denominato `MyMethod` con un parametro di tipo `Base` e un tipo restituito di `Derived`.</span><span class="sxs-lookup"><span data-stu-id="45e68-376">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45e68-377">L'esempio di codice definisce anche un delegato denominato `Example` che ha un parametro di tipo `Derived` e un tipo restituito di `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-377">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45e68-378">L'esempio di codice viene illustrato che il delegato denominato `Example` può essere utilizzato per rappresentare il metodo `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-378">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45e68-379">Il metodo può essere associato al delegato perché:</span><span class="sxs-lookup"><span data-stu-id="45e68-379">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45e68-380">Il tipo di parametro del delegato (`Derived`) è più restrittivo rispetto al tipo di parametro del `MyMethod` (`Base`), in modo che sia sempre possibile passare l'argomento del delegato da `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-380">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45e68-381">Il tipo restituito del `MyMethod` (`Derived`) è più restrittivo rispetto al tipo di parametro del delegato (`Base`), in modo che sia sempre possibile eseguire il cast di tipo restituito del metodo per il tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-381">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-382">L'esempio di codice non genera alcun output.</span><span class="sxs-lookup"><span data-stu-id="45e68-382">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="45e68-383">**Esempio 3**</span><span class="sxs-lookup"><span data-stu-id="45e68-383">**Example 3**</span></span>  
  
 <span data-ttu-id="45e68-384">Esempio di codice seguente illustra tutti i metodi rappresenta un singolo tipo delegato, usando il <xref:System.Delegate.CreateDelegate%2A> metodo per creare i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-384">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-385">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano `firstArgument` e un <xref:System.Reflection.MethodInfo>; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-385">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-386">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-386">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-387">L'esempio di codice definisce due classi `C` e `F`e un tipo delegato `D` con un solo argomento di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-387">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45e68-388">Le classi corrispondenti statici e metodi di istanza `M1`, `M3`, e `M4`e la classe `C` include inoltre un metodo di istanza `M2` che non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-388">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="45e68-389">Una terza classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-389">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-390">I delegati vengono creati il metodo, ad esempio `M1` di tipo `C` e il tipo `F`; ognuna viene chiuso su un'istanza del rispettivo tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-390">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="45e68-391">Metodo `M1` typu `C` consente di visualizzare il `ID` le proprietà dell'istanza associata e dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-391">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="45e68-392">Viene creato un delegato per il metodo `M2` di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-392">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="45e68-393">Si tratta di un delegato di istanza aperta, in cui l'argomento del delegato rappresenta il primo argomento nascosto sul metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-393">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="45e68-394">Il metodo non dispone di altri argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-394">The method has no other arguments.</span></span> <span data-ttu-id="45e68-395">Viene chiamato come se fosse un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-395">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="45e68-396">I delegati vengono creati per il metodo statico `M3` typu `C` e il tipo `F`; questi sono aperti i delegati statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-396">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="45e68-397">Infine, i delegati vengono creati per il metodo statico `M4` typu `C` e il tipo `F`; ogni metodo presenta il tipo dichiarante come primo argomento e viene fornita un'istanza del tipo, in modo che i delegati vengono chiusi relativi primi argomenti .</span><span class="sxs-lookup"><span data-stu-id="45e68-397">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="45e68-398">Metodo `M4` typu `C` consente di visualizzare il `ID` le proprietà dell'istanza associata e dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-398">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-399">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-399">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-400">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-400">-or-</span>
          </span>
          <span data-ttu-id="45e68-401">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-401">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-402">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-402">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-403">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-403">-or-</span>
          </span>
          <span data-ttu-id="45e68-404">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-404">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-405">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-405">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-406">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-406">-or-</span>
          </span>
          <span data-ttu-id="45e68-407">
            <paramref name="method" /> non può essere associato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-407">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="45e68-408">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-408">-or-</span>
          </span>
          <span data-ttu-id="45e68-409">
            <paramref name="method" /> non è un oggetto <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-409">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45e68-410">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-411">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-411">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-412">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-412">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-413">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-413">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-414">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-414">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-415">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-415">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-416">Istanza di classe per la quale viene richiamato il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-416">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-417">Nome del metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-417">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-418">Crea un delegato del tipo specificato che rappresenta il metodo di istanza specificato per il richiamo dell'istanza di classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-418">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-419">Delegato del tipo specificato che rappresenta il metodo di istanza specificato per il richiamo dell'istanza di classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-419">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-420">Questo metodo crea i delegati, ad esempio solo i metodi.</span><span class="sxs-lookup"><span data-stu-id="45e68-420">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45e68-421">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-421">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45e68-422">Questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo, specificando `false` per `ignoreCase` e `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-422">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-423">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-424">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-425">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-426">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-426">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-427">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-427">-or-</span>
          </span>
          <span data-ttu-id="45e68-428">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-428">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-429">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-429">-or-</span>
          </span>
          <span data-ttu-id="45e68-430">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-430">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-431">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-431">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-432">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-432">-or-</span>
          </span>
          <span data-ttu-id="45e68-433">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-433">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-434">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-434">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-435">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-435">-or-</span>
          </span>
          <span data-ttu-id="45e68-436">
            <paramref name="method" /> non è un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-436">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45e68-437">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-437">-or-</span>
          </span>
          <span data-ttu-id="45e68-438">Non possibile associare <paramref name="method" />, ad esempio perché non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-438">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-439">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-439">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-440">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-440">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-441">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-441">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-442">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-443">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-443">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-444">
            <see cref="T:System.Reflection.MethodInfo" /> che descrive il metodo statico o il metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-444">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45e68-445">
            <see langword="true" /> per generare un'eccezione se non è possibile associare il parametro<c>method</c>; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-445">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-446">Crea un delegato del tipo indicato per rappresentare il metodo statico specificato, in cui viene indicato anche il funzionamento in caso di errore di associazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-446">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-447">Delegato del tipo specificato che rappresenta il metodo statico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-447">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-448">Questo overload del metodo è possibile creare delegati del metodo statico open e aprire i delegati del metodo di istanza, vale a dire, i delegati che espongono il primo argomento nascosto dei metodi di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-448">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="45e68-449">Per informazioni dettagliate, vedere il metodo più generico <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo che consente di creare, ad esempio tutte le combinazioni dei delegati aperte o chiuse o i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-449">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-450">Questo overload del metodo deve essere utilizzato quando il delegato non viene chiusa al primo argomento, perché in tal caso è leggermente più veloce.</span><span class="sxs-lookup"><span data-stu-id="45e68-450">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-451">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-451">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-452">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-452">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-453">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-453">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45e68-454">I tipi di parametro compatibili e il tipo restituito</span><span class="sxs-lookup"><span data-stu-id="45e68-454">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45e68-455">I tipi di parametro e tipo restituito del delegato deve essere compatibile con i tipi di parametro e tipo restituito del metodo rappresentato dal delegato. i tipi non è in modo che corrispondano esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-455">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-456">In .NET Framework versioni 1.0 e 1.1, i tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-456">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="45e68-457">Un parametro di un delegato è compatibile con il parametro di un metodo corrispondente se il tipo del parametro del delegato è più restrittivo rispetto al tipo del parametro del metodo. In questo modo si garantisce che un argomento passato al delegato possa essere passato in modo sicuro al metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-457">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45e68-458">Analogamente, il tipo restituito di un delegato è compatibile con il tipo restituito di un metodo se il tipo restituito del metodo è più restrittivo rispetto al tipo restituito del delegato. In questo modo si garantisce la possibilità di eseguire in modo sicuro il cast del valore restituito del metodo nel tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-458">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-459">Ad esempio, un delegato con un parametro di tipo <xref:System.Collections.Hashtable> e un tipo restituito <xref:System.Object> può rappresentare un metodo con un parametro di tipo <xref:System.Object> e un valore restituito di tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="45e68-459">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-460">In questa sezione sono riportati due esempi di codice.</span><span class="sxs-lookup"><span data-stu-id="45e68-460">This section contains two code examples.</span></span> <span data-ttu-id="45e68-461">Nel primo esempio illustra i due tipi di delegati che possono essere creati con questo overload del metodo: aprire tramite un metodo di istanza e su un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-461">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="45e68-462">Il secondo esempio di codice vengono illustrati i tipi di parametro compatibili e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-462">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45e68-463">**Esempio 1**</span><span class="sxs-lookup"><span data-stu-id="45e68-463">**Example 1**</span></span>  
  
 <span data-ttu-id="45e68-464">Esempio di codice seguente illustra le due modalità un delegato può essere creato usando questo overload del metodo di <xref:System.Delegate.CreateDelegate%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="45e68-464">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-465">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano un <xref:System.Reflection.MethodInfo> ma non è un primo argomento; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-465">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-466">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-466">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-467">Nell'esempio viene dichiarata una classe `C` con un metodo statico `M2` e un metodo di istanza `M1`, e due tipi di delegato: `D1` accetta un'istanza di `C` e una stringa, e `D2` accetta una stringa.</span><span class="sxs-lookup"><span data-stu-id="45e68-467">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="45e68-468">Una seconda classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-468">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-469">Un delegato del tipo `D1`, che rappresenta un metodo di istanza aperta, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-469">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-470">Un'istanza deve essere passata quando viene richiamato il delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-470">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-471">Un delegato del tipo `D2`, che rappresenta un metodo statico aperto, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-471">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45e68-472">**Esempio 2**</span><span class="sxs-lookup"><span data-stu-id="45e68-472">**Example 2**</span></span>  
  
 <span data-ttu-id="45e68-473">Esempio di codice seguente illustra la compatibilità dei tipi di parametro e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-473">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-474">Questo esempio di codice Usa il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-474">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45e68-475">L'utilizzo di altri overload che accettano <xref:System.Reflection.MethodInfo> è simile.</span><span class="sxs-lookup"><span data-stu-id="45e68-475">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45e68-476">L'esempio di codice definisce una classe base denominata `Base` e una classe denominata `Derived` che deriva da `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-476">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45e68-477">La classe derivata ha un `static` (`Shared` in Visual Basic) metodo denominato `MyMethod` con un parametro di tipo `Base` e un tipo restituito di `Derived`.</span><span class="sxs-lookup"><span data-stu-id="45e68-477">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45e68-478">L'esempio di codice definisce anche un delegato denominato `Example` che ha un parametro di tipo `Derived` e un tipo restituito di `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-478">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45e68-479">L'esempio di codice viene illustrato che il delegato denominato `Example` può essere utilizzato per rappresentare il metodo `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-479">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45e68-480">Il metodo può essere associato al delegato perché:</span><span class="sxs-lookup"><span data-stu-id="45e68-480">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45e68-481">Il tipo di parametro del delegato (`Derived`) è più restrittivo rispetto al tipo di parametro del `MyMethod` (`Base`), in modo che sia sempre possibile passare l'argomento del delegato da `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-481">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45e68-482">Il tipo restituito del `MyMethod` (`Derived`) è più restrittivo rispetto al tipo di parametro del delegato (`Base`), in modo che sia sempre possibile eseguire il cast di tipo restituito del metodo per il tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-482">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-483">L'esempio di codice non genera alcun output.</span><span class="sxs-lookup"><span data-stu-id="45e68-483">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-484">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-484">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-485">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-485">-or-</span>
          </span>
          <span data-ttu-id="45e68-486">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-486">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-487">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-487">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-488">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-488">-or-</span>
          </span>
          <span data-ttu-id="45e68-489">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-489">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-490">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-490">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-491">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-491">-or-</span>
          </span>
          <span data-ttu-id="45e68-492">
            <paramref name="method" /> non può essere associato e <paramref name="throwOnBindFailure" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-492">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45e68-493">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-493">-or-</span>
          </span>
          <span data-ttu-id="45e68-494">
            <paramref name="method" /> non è un oggetto <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-494">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45e68-495">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-496">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-496">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-497">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-497">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-498">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-499">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-500">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-500">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-501">Classe <see cref="T:System.Type" /> che rappresenta la classe che implementa il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-501">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-502">Nome del metodo statico che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-502">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-503">Crea un delegato del tipo specificato che rappresenta il metodo statico specificato della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-503">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-504">Delegato del tipo specificato che rappresenta il metodo statico specificato della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-504">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-505">Questo metodo crea i delegati per solo i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-505">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45e68-506">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-506">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45e68-507">Questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo, specificando `false` per `ignoreCase` e `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-507">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-508">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-508">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-509">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-509">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-510">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-510">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-511">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-511">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-512">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-512">-or-</span>
          </span>
          <span data-ttu-id="45e68-513">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-513">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-514">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-514">-or-</span>
          </span>
          <span data-ttu-id="45e68-515">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-515">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-516">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-516">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-517">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-517">-or-</span>
          </span>
          <span data-ttu-id="45e68-518">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-518">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-519">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-519">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-520">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-520">-or-</span>
          </span>
          <span data-ttu-id="45e68-521">
            <paramref name="target" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-521">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-522">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-522">-or-</span>
          </span>
          <span data-ttu-id="45e68-523">
            <paramref name="target" /> è un tipo generico aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-523">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45e68-524">Ciò significa che la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-524">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45e68-525">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-525">-or-</span>
          </span>
          <span data-ttu-id="45e68-526">
            <paramref name="method" /> non è un metodo <see langword="static" /> (metodo <see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-526">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45e68-527">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-527">-or-</span>
          </span>
          <span data-ttu-id="45e68-528">Non è possibile associare <paramref name="method" />, ad esempio perché non è stato trovato, e <paramref name="throwOnBindFailure" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-528">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-529">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-529">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-530">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-530">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-531">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-532">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-533">
            <see cref="T:System.Type" /> che rappresenta il tipo di delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-533">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="45e68-534">
            <see cref="T:System.Object" /> che rappresenta il primo argomento del metodo rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-534">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="45e68-535">Per i metodi di istanza, tale oggetto deve essere compatibile con il tipo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-535">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-536">
            <see cref="T:System.Reflection.MethodInfo" /> che descrive il metodo statico o il metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-536">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45e68-537">
            <see langword="true" /> per generare un'eccezione se non è possibile associare il parametro<c>method</c>; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-537">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-538">Crea un delegato del tipo specificato che rappresenta il metodo statico o il metodo di istanza indicato, con il primo argomento specificato e il funzionamento indicato in caso di errore di associazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-538">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-539">Delegato del tipo specificato che rappresenta il metodo statico o di istanza specificato oppure <see langword="null" /> se <paramref name="throwOnBindFailure" /> è <see langword="false" /> e non è possibile associare il delegato a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-539">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-540">Questo overload del metodo e <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> overload del metodo che genera sempre un'eccezione in caso di errore da associare, specificare il modo più flessibile per creare i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-540">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="45e68-541">È possibile utilizzarli per creare i delegati per statici o metodi di istanza, con o senza un primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-541">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-542">Se non si fornisce un primo argomento, usare il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo per ottenere prestazioni migliori.</span><span class="sxs-lookup"><span data-stu-id="45e68-542">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="45e68-543">Il tipo delegato e il metodo deve avere tipi restituiti compatibili.</span><span class="sxs-lookup"><span data-stu-id="45e68-543">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="45e68-544">Vale a dire, il tipo restituito del `method` deve essere assegnabile al tipo restituito di `type`.</span><span class="sxs-lookup"><span data-stu-id="45e68-544">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="45e68-545">Se `firstArgument` viene fornito, viene passata a `method` ogni volta che viene richiamato il delegato; `firstArgument` viene definito da associare al delegato e il delegato per essere chiuso al primo argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-545">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="45e68-546">Se `method` viene `static` (`Shared` in Visual Basic), l'elenco argomenti fornito quando si richiama il delegato include tutti i parametri tranne il primo; se `method` è un metodo di istanza, quindi `firstArgument` viene passato all'istanza nascosta parametro (rappresentato da `this` in c# o da `Me` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="45e68-546">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="45e68-547">Se `firstArgument` viene fornito, il primo parametro di `method` deve essere un tipo riferimento, e `firstArgument` deve essere compatibile con tale tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-547">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45e68-548">Se `method` viene `static` (`Shared` in Visual Basic) e il primo parametro è di tipo <xref:System.Object> oppure <xref:System.ValueType>, quindi `firstArgument` può essere un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="45e68-548">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="45e68-549">In questo caso `firstArgument` automaticamente viene sottoposto a boxing.</span><span class="sxs-lookup"><span data-stu-id="45e68-549">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="45e68-550">Conversione boxing automatico non avviene per altri argomenti, come in una funzione c# o Visual Basic che chiamasse.</span><span class="sxs-lookup"><span data-stu-id="45e68-550">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="45e68-551">Se `firstArgument` è un riferimento null e `method` è un metodo di istanza, il risultato dipende dalle firme del tipo delegato `type` e di `method`:</span><span class="sxs-lookup"><span data-stu-id="45e68-551">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45e68-552">Se la firma dei `type` includa in modo esplicito il primo parametro nascosto di `method`, il delegato rappresenta un metodo di istanza aperta.</span><span class="sxs-lookup"><span data-stu-id="45e68-552">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="45e68-553">Quando il delegato viene richiamato, il primo argomento nell'elenco di argomenti viene passato al parametro instance nascosta di `method`.</span><span class="sxs-lookup"><span data-stu-id="45e68-553">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="45e68-554">Se le firme dei `method` e `type` corrispondenza (vale a dire, tutti i tipi di parametro compatibili), il delegato è associato in modo rigido un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-554">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45e68-555">Richiamare il delegato è simile a chiamata al metodo di istanza in un'istanza null, che non è un'operazione particolarmente utile da eseguire.</span><span class="sxs-lookup"><span data-stu-id="45e68-555">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="45e68-556">Se `firstArgument` è un riferimento null e `method` è statica, il risultato dipende dalle firme del tipo delegato `type` e di `method`:</span><span class="sxs-lookup"><span data-stu-id="45e68-556">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="45e68-557">Se la firma dei `method` e `type` corrispondenza (vale a dire, tutti i tipi di parametro compatibili), il delegato rappresenta un metodo statico open.</span><span class="sxs-lookup"><span data-stu-id="45e68-557">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="45e68-558">Questo è il caso più comune per i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-558">This is the most common case for static methods.</span></span> <span data-ttu-id="45e68-559">In questo caso, è possibile ottenere prestazioni leggermente migliori usando il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-559">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="45e68-560">Se la firma dei `type` inizia con il secondo parametro di `method` e il resto dei tipi di parametro compatibili, quindi il delegato per essere chiuso un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-560">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="45e68-561">Quando il delegato viene richiamato, viene passato un riferimento null per il primo parametro di `method`.</span><span class="sxs-lookup"><span data-stu-id="45e68-561">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-562">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-562">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-563">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-563">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-564">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-564">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="45e68-565">I tipi di parametro compatibili e il tipo restituito</span><span class="sxs-lookup"><span data-stu-id="45e68-565">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="45e68-566">I tipi di parametro e tipo restituito del delegato deve essere compatibile con i tipi di parametro e tipo restituito del metodo rappresentato dal delegato. i tipi non è in modo che corrispondano esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-566">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-567">In .NET Framework versione 1.0 e 1.1 di tipi devono corrispondere esattamente.</span><span class="sxs-lookup"><span data-stu-id="45e68-567">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="45e68-568">Un parametro di un delegato è compatibile con il parametro di un metodo corrispondente se il tipo del parametro del delegato è più restrittivo rispetto al tipo del parametro del metodo. In questo modo si garantisce che un argomento passato al delegato possa essere passato in modo sicuro al metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-568">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="45e68-569">Analogamente, il tipo restituito di un delegato è compatibile con il tipo restituito di un metodo se il tipo restituito del metodo è più restrittivo rispetto al tipo restituito del delegato. In questo modo si garantisce la possibilità di eseguire in modo sicuro il cast del valore restituito del metodo nel tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-569">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-570">Ad esempio, un delegato con un parametro di tipo <xref:System.Collections.Hashtable> e un tipo restituito <xref:System.Object> può rappresentare un metodo con un parametro di tipo <xref:System.Object> e un valore restituito di tipo <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="45e68-570">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="45e68-571">Determinazione dei metodi che può rappresentare un delegato</span><span class="sxs-lookup"><span data-stu-id="45e68-571">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="45e68-572">Un altro modo utile pensare alla flessibilità offerta da questo overload del metodo <xref:System.Delegate.CreateDelegate%2A> è che qualsiasi delegato specificato possa rappresentare quattro diverse combinazioni di firma del metodo e il tipo di metodo (statico o istanza).</span><span class="sxs-lookup"><span data-stu-id="45e68-572">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="45e68-573">Si consideri un tipo delegato `D` con un solo argomento di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-573">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45e68-574">Di seguito vengono descritti i metodi `D` può rappresentare, ignorando il tipo restituito poiché deve corrispondere in tutti i casi:</span><span class="sxs-lookup"><span data-stu-id="45e68-574">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="45e68-575">`D` può rappresentare qualsiasi metodo di istanza che dispone di esattamente un argomento di tipo `C`, indipendentemente dal tipo a cui appartiene il metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-575">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="45e68-576">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato `firstArgument` è un'istanza del tipo `method` appartiene, e il delegato risultante viene definito per essere chiuso in quell'istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-576">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="45e68-577">(In modo rigido `D` può inoltre essere associato un riferimento null se `firstArgument` è `null`.)</span><span class="sxs-lookup"><span data-stu-id="45e68-577">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="45e68-578">`D` può rappresentare un metodo di istanza di `C` che non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-578">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="45e68-579">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato, `firstArgument` è un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-579">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45e68-580">Il delegato risultante rappresenta un metodo di istanza aperta e un'istanza di `C` è necessario specificare ogni volta che viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="45e68-580">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-581">`D` può rappresentare un metodo statico che accetta un argomento di tipo `C`, e che può appartenere a qualsiasi tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-581">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="45e68-582">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato, `firstArgument` è un riferimento null.</span><span class="sxs-lookup"><span data-stu-id="45e68-582">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="45e68-583">Il delegato risultante rappresenta un metodo statico aperto e un'istanza di `C` è necessario specificare ogni volta che viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="45e68-583">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-584">`D` può rappresentare un metodo statico che appartiene al tipo `F` e dispone di due argomenti, di tipo `F` e il tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-584">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="45e68-585">Quando <xref:System.Delegate.CreateDelegate%2A> viene chiamato `firstArgument` è un'istanza di `F`.</span><span class="sxs-lookup"><span data-stu-id="45e68-585">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="45e68-586">Il delegato risultante rappresenta un metodo statico che viene chiuso in quell'istanza di `F`.</span><span class="sxs-lookup"><span data-stu-id="45e68-586">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="45e68-587">Si noti che nel caso in cui `F` e `C` sono dello stesso tipo, il metodo statico dispone di due argomenti di quel tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-587">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="45e68-588">(In questo caso `D` viene chiuso un riferimento null se `firstArgument` è `null`.)</span><span class="sxs-lookup"><span data-stu-id="45e68-588">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-589">In questa sezione contiene tre esempi di codice.</span><span class="sxs-lookup"><span data-stu-id="45e68-589">This section contains three code examples.</span></span> <span data-ttu-id="45e68-590">Nel primo esempio illustra i quattro tipi di delegati che possono essere creati: rigido a un metodo di istanza, aprire tramite un metodo di istanza, aprire tramite un metodo statico e chiusa tramite un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-590">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="45e68-591">Il secondo esempio di codice vengono illustrati i tipi di parametro compatibili e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-591">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="45e68-592">Mostra tutti i metodi che il tipo delegato possono rappresentare il terzo esempio di codice definisce un tipo di delegato unico.</span><span class="sxs-lookup"><span data-stu-id="45e68-592">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="45e68-593">**Esempio 1**</span><span class="sxs-lookup"><span data-stu-id="45e68-593">**Example 1**</span></span>  
  
 <span data-ttu-id="45e68-594">Esempio di codice seguente illustra i quattro modi un delegato può essere creato usando l'overload del <xref:System.Delegate.CreateDelegate%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="45e68-594">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-595">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano `firstArgument` e un <xref:System.Reflection.MethodInfo>; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-595">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-596">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-596">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-597">Nell'esempio viene dichiarata una classe `C` con un metodo statico `M2` e un metodo di istanza `M1`, e tre i tipi di delegato: `D1` accetta un'istanza di `C` e una stringa, `D2` accetta una stringa e `D3`non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-597">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="45e68-598">Una seconda classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-598">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-599">Un delegato del tipo `D2`, chiuso su un'istanza di `C`, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-599">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-600">Viene richiamato con stringhe diverse, a indicare che l'istanza associata di `C` viene sempre usato.</span><span class="sxs-lookup"><span data-stu-id="45e68-600">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="45e68-601">Un delegato del tipo `D1`, che rappresenta un metodo di istanza aperta, viene creato per il metodo di istanza `M1`.</span><span class="sxs-lookup"><span data-stu-id="45e68-601">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="45e68-602">Un'istanza deve essere passata quando viene richiamato il delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-602">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="45e68-603">Un delegato del tipo `D2`, che rappresenta un metodo statico aperto, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-603">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="45e68-604">Infine, un delegato del tipo `D3`, chiuso in una stringa, viene creato per il metodo statico `M2`.</span><span class="sxs-lookup"><span data-stu-id="45e68-604">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="45e68-605">Il metodo viene richiamato per mostrare che usa la stringa associata.</span><span class="sxs-lookup"><span data-stu-id="45e68-605">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="45e68-606">**Esempio 2**</span><span class="sxs-lookup"><span data-stu-id="45e68-606">**Example 2**</span></span>  
  
 <span data-ttu-id="45e68-607">Esempio di codice seguente illustra la compatibilità dei tipi di parametro e i tipi restituiti.</span><span class="sxs-lookup"><span data-stu-id="45e68-607">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-608">Questo esempio di codice Usa il <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-608">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="45e68-609">L'utilizzo di altri overload che accettano <xref:System.Reflection.MethodInfo> è simile.</span><span class="sxs-lookup"><span data-stu-id="45e68-609">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="45e68-610">L'esempio di codice definisce una classe base denominata `Base` e una classe denominata `Derived` che deriva da `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-610">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="45e68-611">La classe derivata ha un `static` (`Shared` in Visual Basic) metodo denominato `MyMethod` con un parametro di tipo `Base` e un tipo restituito di `Derived`.</span><span class="sxs-lookup"><span data-stu-id="45e68-611">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="45e68-612">L'esempio di codice definisce anche un delegato denominato `Example` che ha un parametro di tipo `Derived` e un tipo restituito di `Base`.</span><span class="sxs-lookup"><span data-stu-id="45e68-612">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="45e68-613">L'esempio di codice viene illustrato che il delegato denominato `Example` può essere utilizzato per rappresentare il metodo `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-613">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="45e68-614">Il metodo può essere associato al delegato perché:</span><span class="sxs-lookup"><span data-stu-id="45e68-614">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="45e68-615">Il tipo di parametro del delegato (`Derived`) è più restrittivo rispetto al tipo di parametro del `MyMethod` (`Base`), in modo che sia sempre possibile passare l'argomento del delegato da `MyMethod`.</span><span class="sxs-lookup"><span data-stu-id="45e68-615">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="45e68-616">Il tipo restituito del `MyMethod` (`Derived`) è più restrittivo rispetto al tipo di parametro del delegato (`Base`), in modo che sia sempre possibile eseguire il cast di tipo restituito del metodo per il tipo restituito del delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-616">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="45e68-617">L'esempio di codice non genera alcun output.</span><span class="sxs-lookup"><span data-stu-id="45e68-617">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="45e68-618">**Esempio 3**</span><span class="sxs-lookup"><span data-stu-id="45e68-618">**Example 3**</span></span>  
  
 <span data-ttu-id="45e68-619">Esempio di codice seguente illustra tutti i metodi che può rappresentare un singolo tipo delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-619">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-620">Esistono due overload del <xref:System.Delegate.CreateDelegate%2A> metodo che specificano `firstArgument` e un <xref:System.Reflection.MethodInfo>; le relative funzionalità è uguale ad eccezione del fatto che uno consente di specificare se si desidera generare un errore di associazione e l'altra genera sempre un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="45e68-620">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="45e68-621">Questo esempio di codice Usa entrambi gli overload.</span><span class="sxs-lookup"><span data-stu-id="45e68-621">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="45e68-622">L'esempio di codice definisce due classi `C` e `F`e un tipo delegato `D` con un solo argomento di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-622">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="45e68-623">Le classi corrispondenti statici e metodi di istanza `M1`, `M3`, e `M4`e la classe `C` include inoltre un metodo di istanza `M2` che non dispone di argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-623">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="45e68-624">Una terza classe denominata `Example` contiene il codice che crea i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-624">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="45e68-625">I delegati vengono creati il metodo, ad esempio `M1` di tipo `C` e il tipo `F`; ognuna viene chiuso su un'istanza del rispettivo tipo.</span><span class="sxs-lookup"><span data-stu-id="45e68-625">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="45e68-626">Metodo `M1` typu `C` consente di visualizzare il `ID` le proprietà dell'istanza associata e dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-626">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="45e68-627">Viene creato un delegato per il metodo `M2` di tipo `C`.</span><span class="sxs-lookup"><span data-stu-id="45e68-627">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="45e68-628">Si tratta di un delegato di istanza aperta, in cui l'argomento del delegato rappresenta il primo argomento nascosto sul metodo di istanza.</span><span class="sxs-lookup"><span data-stu-id="45e68-628">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="45e68-629">Il metodo non dispone di altri argomenti.</span><span class="sxs-lookup"><span data-stu-id="45e68-629">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="45e68-630">I delegati vengono creati per il metodo statico `M3` typu `C` e il tipo `F`; questi sono aperti i delegati statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-630">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="45e68-631">Infine, i delegati vengono creati per il metodo statico `M4` typu `C` e il tipo `F`; ogni metodo presenta il tipo dichiarante come primo argomento e viene fornita un'istanza del tipo, in modo che i delegati vengono chiusi relativi primi argomenti .</span><span class="sxs-lookup"><span data-stu-id="45e68-631">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="45e68-632">Metodo `M4` typu `C` consente di visualizzare il `ID` le proprietà dell'istanza associata e dell'argomento.</span><span class="sxs-lookup"><span data-stu-id="45e68-632">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-633">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-633">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-634">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-634">-or-</span>
          </span>
          <span data-ttu-id="45e68-635">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-635">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-636">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-636">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-637">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-637">-or-</span>
          </span>
          <span data-ttu-id="45e68-638">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-638">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-639">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-639">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-640">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-640">-or-</span>
          </span>
          <span data-ttu-id="45e68-641">
            <paramref name="method" /> non può essere associato e <paramref name="throwOnBindFailure" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-641">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45e68-642">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-642">-or-</span>
          </span>
          <span data-ttu-id="45e68-643">
            <paramref name="method" /> non è un oggetto <see langword="RuntimeMethodInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-643">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="45e68-644">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-645">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-645">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-646">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-646">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-647">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-647">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-648">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-648">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-649">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-649">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-650">Istanza di classe per la quale viene richiamato il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-650">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-651">Nome del metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-651">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45e68-652">Valore booleano che indica se ignorare o meno la distinzione tra maiuscole e minuscole al momento di confrontare il nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-652">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-653">Crea un delegato del tipo specificato che rappresenta il metodo di istanza specificato, per il richiamo dell'istanza di classe specificata, con la distinzione tra maiuscole e minuscole specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-653">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-654">Delegato del tipo specificato che rappresenta il metodo di istanza specificato per il richiamo dell'istanza di classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-654">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-655">Questo metodo crea i delegati, ad esempio solo i metodi.</span><span class="sxs-lookup"><span data-stu-id="45e68-655">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45e68-656">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-656">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45e68-657">Questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo, specificando `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-657">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-658">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-658">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-659">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-659">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-660">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-660">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-661">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-661">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-662">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-662">-or-</span>
          </span>
          <span data-ttu-id="45e68-663">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-663">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-664">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-664">-or-</span>
          </span>
          <span data-ttu-id="45e68-665">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-665">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-666">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-666">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-667">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-667">-or-</span>
          </span>
          <span data-ttu-id="45e68-668">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-668">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-669">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-669">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-670">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-670">-or-</span>
          </span>
          <span data-ttu-id="45e68-671">
            <paramref name="method" /> non è un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-671">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45e68-672">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-672">-or-</span>
          </span>
          <span data-ttu-id="45e68-673">Non possibile associare <paramref name="method" />, ad esempio perché non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-673">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-674">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-674">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-675">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-675">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-676">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-676">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-677">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-677">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-678">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-678">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-679">Classe <see cref="T:System.Type" /> che rappresenta la classe che implementa il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-679">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-680">Nome del metodo statico che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-680">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45e68-681">Valore booleano che indica se ignorare o meno la distinzione tra maiuscole e minuscole al momento di confrontare il nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-681">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-682">Crea un delegato del tipo indicato che rappresenta il metodo statico specificato della classe indicata, con la distinzione tra maiuscole e minuscole specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-682">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-683">Delegato del tipo specificato che rappresenta il metodo statico specificato della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-683">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-684">Questo metodo crea i delegati per solo i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-684">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45e68-685">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-685">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45e68-686">Questo overload del metodo è equivalente alla chiamata di <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo, specificando `true` per `throwOnBindFailure`.</span><span class="sxs-lookup"><span data-stu-id="45e68-686">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-687">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-687">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-688">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-688">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-689">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-689">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-690">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-690">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-691">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-691">-or-</span>
          </span>
          <span data-ttu-id="45e68-692">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-692">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-693">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-693">-or-</span>
          </span>
          <span data-ttu-id="45e68-694">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-695">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-695">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-696">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-696">-or-</span>
          </span>
          <span data-ttu-id="45e68-697">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-697">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-698">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-698">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-699">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-699">-or-</span>
          </span>
          <span data-ttu-id="45e68-700">
            <paramref name="target" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-700">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-701">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-701">-or-</span>
          </span>
          <span data-ttu-id="45e68-702">
            <paramref name="target" /> è un tipo generico aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-702">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45e68-703">Ciò significa che la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-703">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45e68-704">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-704">-or-</span>
          </span>
          <span data-ttu-id="45e68-705">
            <paramref name="method" /> non è un metodo <see langword="static" /> (metodo <see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-705">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45e68-706">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-706">-or-</span>
          </span>
          <span data-ttu-id="45e68-707">Non possibile associare <paramref name="method" />, ad esempio perché non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-707">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-708">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-708">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-709">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-709">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-710">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-710">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-711">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-711">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-712">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-712">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-713">Istanza di classe per la quale viene richiamato il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-713">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-714">Nome del metodo di istanza che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-714">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45e68-715">Valore booleano che indica se ignorare o meno la distinzione tra maiuscole e minuscole al momento di confrontare il nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-715">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45e68-716">
            <see langword="true" /> per generare un'eccezione se non è possibile associare il parametro<c>method</c>; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-716">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-717">Crea un delegato del tipo specificato che rappresenta il metodo di istanza specificato, per il richiamo dell'istanza di classe specificata, con la distinzione tra maiuscole e minuscole specificata e il funzionamento specificato in caso di errore di associazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-717">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-718">Delegato del tipo specificato che rappresenta il metodo di istanza specificato per il richiamo dell'istanza di classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-718">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-719">Questo metodo crea i delegati, ad esempio solo i metodi.</span><span class="sxs-lookup"><span data-stu-id="45e68-719">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="45e68-720">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-720">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-721">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-721">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-722">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-722">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-723">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-723">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-724">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-724">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-725">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-725">-or-</span>
          </span>
          <span data-ttu-id="45e68-726">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-726">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-727">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-727">-or-</span>
          </span>
          <span data-ttu-id="45e68-728">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-728">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-729">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-729">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-730">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-730">-or-</span>
          </span>
          <span data-ttu-id="45e68-731">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-731">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-732">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-732">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-733">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-733">-or-</span>
          </span>
          <span data-ttu-id="45e68-734">
            <paramref name="method" /> non è un metodo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-734">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="45e68-735">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-735">-or-</span>
          </span>
          <span data-ttu-id="45e68-736">Non è possibile associare <paramref name="method" />, ad esempio perché non è stato trovato, e <paramref name="throwOnBindFailure" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-736">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-737">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-737">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-738">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-738">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-739">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-739">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-740">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-740">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="45e68-741">
            <see cref="T:System.Type" /> del delegato da creare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-741">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="45e68-742">Classe <see cref="T:System.Type" /> che rappresenta la classe che implementa il parametro <c>method</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-742">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="45e68-743">Nome del metodo statico che deve essere rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-743">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="45e68-744">Valore booleano che indica se ignorare o meno la distinzione tra maiuscole e minuscole al momento di confrontare il nome del metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-744">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="45e68-745">
            <see langword="true" /> per generare un'eccezione se non è possibile associare il parametro<c>method</c>; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-745">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-746">Crea un delegato del tipo specificato che rappresenta il metodo statico indicato della classe specificata, con la distinzione tra maiuscole e minuscole indicata e il funzionamento specificato in caso di errore di associazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-746">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-747">Delegato del tipo specificato che rappresenta il metodo statico specificato della classe specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-747">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-748">Questo metodo crea i delegati per solo i metodi statici.</span><span class="sxs-lookup"><span data-stu-id="45e68-748">This method creates delegates for static methods only.</span></span> <span data-ttu-id="45e68-749">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-749">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="45e68-750">Inizia con la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a metodi non pubblici se il chiamante sia stata concessa <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag, se il set di concessioni dei metodi non pubblici è limitato al chiamante concedere set, oppure un subset della stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-750">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="45e68-751">(Vedere [considerazioni sulla sicurezza per Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="45e68-751">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="45e68-752">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="45e68-752">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="45e68-753">
            <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-753">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-754">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-754">-or-</span>
          </span>
          <span data-ttu-id="45e68-755">
            <paramref name="target" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-755">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-756">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-756">-or-</span>
          </span>
          <span data-ttu-id="45e68-757">
            <paramref name="method" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-757">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-758">
            <paramref name="type" /> non eredita <see cref="T:System.MulticastDelegate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-758">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="45e68-759">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-759">-or-</span>
          </span>
          <span data-ttu-id="45e68-760">
            <paramref name="type" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-760">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-761">Vedere [Tipi di runtime nella reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-761">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="45e68-762">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-762">-or-</span>
          </span>
          <span data-ttu-id="45e68-763">
            <paramref name="target" /> non è un oggetto <see langword="RuntimeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-763">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="45e68-764">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-764">-or-</span>
          </span>
          <span data-ttu-id="45e68-765">
            <paramref name="target" /> è un tipo generico aperto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-765">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="45e68-766">Ciò significa che la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-766">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="45e68-767">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-767">-or-</span>
          </span>
          <span data-ttu-id="45e68-768">
            <paramref name="method" /> non è un metodo <see langword="static" /> (metodo <see langword="Shared" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-768">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="45e68-769">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-769">-or-</span>
          </span>
          <span data-ttu-id="45e68-770">Non è possibile associare <paramref name="method" />, ad esempio perché non è stato trovato, e <paramref name="throwOnBindFailure" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-770">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="45e68-771">Non è possibile trovare il metodo <see langword="Invoke" /> di <paramref name="type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-771">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="45e68-772">Il chiamante non ha le autorizzazioni necessarie per accedere a <paramref name="method" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-772">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-773">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-773">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-774">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-774">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="45e68-775">Una matrice di oggetti che sono argomenti da passare al metodo rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-775">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="45e68-776">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-776">-or-</span>
          </span>
          <span data-ttu-id="45e68-777">
            <see langword="null" />, qualora il metodo rappresentato dal delegato corrente non richieda argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-777">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-778">Richiama dinamicamente, ovvero ad associazione tardiva, il metodo rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-778">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-779">Oggetto restituito dal metodo rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-779">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-780">Questo metodo chiama il metodo <xref:System.Delegate.DynamicInvokeImpl%2A>.</span><span class="sxs-lookup"><span data-stu-id="45e68-780">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-781">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-781">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="45e68-782">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-782">-or-</span>
          </span>
          <span data-ttu-id="45e68-783">Il numero, l'ordine o il tipo di parametro elencato in <paramref name="args" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-783">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-784">Il metodo rappresentato dal delegato viene richiamato su un oggetto o classe che non lo supporta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-784">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="45e68-785">Il metodo rappresentato dal delegato è un metodo di istanza e l'oggetto di destinazione è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-785">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-786">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-786">-or-</span>
          </span>
          <span data-ttu-id="45e68-787">Uno dei metodi incapsulati genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-787">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-788">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-788">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-789">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-789">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="45e68-790">Una matrice di oggetti che sono argomenti da passare al metodo rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-790">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="45e68-791">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-791">-or-</span>
          </span>
          <span data-ttu-id="45e68-792">
            <see langword="null" />, qualora il metodo rappresentato dal delegato corrente non richieda argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-792">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-793">Richiama dinamicamente, ovvero ad associazione tardiva, il metodo rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-793">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-794">Oggetto restituito dal metodo rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-794">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-795">Questo metodo implementa il metodo <xref:System.Delegate.DynamicInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="45e68-795">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-796">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-796">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="45e68-797">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-797">-or-</span>
          </span>
          <span data-ttu-id="45e68-798">Il numero, l'ordine o il tipo di parametro elencato in <paramref name="args" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-798">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-799">Il metodo rappresentato dal delegato viene richiamato su un oggetto o classe che non lo supporta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-799">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="45e68-800">Il metodo rappresentato dal delegato è un metodo di istanza e l'oggetto di destinazione è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-800">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="45e68-801">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-801">-or-</span>
          </span>
          <span data-ttu-id="45e68-802">Uno dei metodi incapsulati genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-802">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-803">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-803">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-804">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-804">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="45e68-805">Oggetto da confrontare con il delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-805">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-806">Determina se l'oggetto specificato e il delegato corrente sono dello stesso tipo e condividono gli stessi metodi e destinazioni e lo stesso elenco chiamate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-806">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-807">
            <see langword="true" /> se <paramref name="obj" /> e il delegato corrente condividono le stesse destinazioni, gli stessi metodi e lo stesso elenco di chiamate; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-807">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-808">Se i due delegati non sono dello stesso tipo, non sono considerati uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45e68-809">In .NET Framework versioni 1.0 e 1.1, due delegati sono stati considerati uguali se le destinazioni, metodi ed elenco di chiamate, anche se sono stati i delegati di tipo diverso.</span><span class="sxs-lookup"><span data-stu-id="45e68-809">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45e68-810">I metodi e le destinazioni vengono confrontate per verificarne l'uguaglianza come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="45e68-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45e68-811">Se i due metodi da confrontare sono statici e non il metodo di stesso nella stessa classe, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-812">Se i due metodi da confrontare sono metodi di istanza e lo stesso metodo di stesso oggetto, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-813">In caso contrario, i metodi non sono considerati uguali e le destinazioni sono inoltre non considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45e68-814">Due elenchi chiamate verranno considerati identici solo se hanno lo stesso ordine e gli elementi corrispondenti dagli elenchi di due rappresentano il metodo di stesso e destinazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-814">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-815">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-815">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-816">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-817">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e68-818">Restituisce il codice hash per il delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-818">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-819">Codice hash per il delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-819">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-820">Il valore restituito di questo metodo non deve essere persistente per due motivi.</span><span class="sxs-lookup"><span data-stu-id="45e68-820">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="45e68-821">In primo luogo, la funzione hash di una classe può essere modificata per generare una migliore distribuzione, il rendering di tutti i valori da funzione hash precedente diventa inutilizzabile.</span><span class="sxs-lookup"><span data-stu-id="45e68-821">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="45e68-822">In secondo luogo, l'implementazione predefinita di questa classe non garantisce che lo stesso valore verrà restituito da istanze diverse.</span><span class="sxs-lookup"><span data-stu-id="45e68-822">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-823">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-823">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-824">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-824">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e68-825">Restituisce l'elenco chiamate del delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-825">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-826">Matrice di delegati che rappresentano l'elenco chiamate del delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-826">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-827">Ogni delegato nella matrice rappresenta esattamente un metodo.</span><span class="sxs-lookup"><span data-stu-id="45e68-827">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="45e68-828">L'ordine dei delegati nella matrice è lo stesso ordine in cui il delegato corrente richiama i metodi che rappresentano i delegati.</span><span class="sxs-lookup"><span data-stu-id="45e68-828">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="45e68-829">L'esempio seguente assegna tre metodi a un delegato.</span><span class="sxs-lookup"><span data-stu-id="45e68-829">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="45e68-830">Chiama quindi il <xref:System.Delegate.GetInvocationList%2A> metodo per ottenere un conteggio totale dei metodi assegnato al delegato, eseguire i delegati in ordine inverso di esecuzione dei metodi il cui nome non includono la sottostringa "File".</span><span class="sxs-lookup"><span data-stu-id="45e68-830">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-831">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-831">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-832">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-832">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="45e68-833">Ottiene il metodo static rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-833">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-834">
            <see cref="T:System.Reflection.MethodInfo" /> che descrive il metodo static rappresentato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-834">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-835">Questo metodo si applica solo se il delegato corrente rappresenta un metodo statico.</span><span class="sxs-lookup"><span data-stu-id="45e68-835">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-836">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-836">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-837">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-837">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-838">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-838">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="45e68-839">Non supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-839">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="45e68-840">Non supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-840">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-841">Non supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-841">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="45e68-842">Questo metodo non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-842">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="45e68-843">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-843">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="45e68-844">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-844">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45e68-845">Ottiene il metodo rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-845">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45e68-846">
            <see cref="T:System.Reflection.MethodInfo" /> in cui è descritto il metodo rappresentato dal delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-846">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-847">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-847">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-848">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-848">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-849">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-849">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="45e68-850">Primo delegato da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-850">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="45e68-851">Secondo delegato da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-851">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-852">Determina se i delegati specificati sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-852">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-853">
            <see langword="true" /> se <paramref name="d1" /> è uguale a <paramref name="d2" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-853">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-854">Due delegati dello stesso tipo con le stesse destinazioni, metodi e degli elenchi chiamate sono considerati uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-854">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="45e68-855">Se i due delegati non sono dello stesso tipo, non sono considerati uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-855">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45e68-856">In .NET Framework versioni 1.0 e 1.1, due delegati sono stati considerati uguali se le destinazioni, metodi ed elenco di chiamate, anche se sono stati i delegati di tipo diverso.</span><span class="sxs-lookup"><span data-stu-id="45e68-856">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45e68-857">I metodi e le destinazioni vengono confrontate per verificarne l'uguaglianza come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="45e68-857">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45e68-858">Se i due metodi da confrontare sono statici e non il metodo di stesso nella stessa classe, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-858">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-859">Se i due metodi da confrontare sono metodi di istanza e lo stesso metodo di stesso oggetto, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-859">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-860">In caso contrario, i metodi non sono considerati uguali e le destinazioni sono inoltre non considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-860">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45e68-861">Due elenchi chiamate verranno considerati identici se hanno lo stesso ordine e gli elementi corrispondenti dagli elenchi di due rappresentano il metodo di stesso e destinazione.</span><span class="sxs-lookup"><span data-stu-id="45e68-861">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="45e68-862">È il metodo equivalente per l'operatore <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="45e68-862">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-863">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-863">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-864">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-864">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="45e68-865">Primo delegato da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-865">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="45e68-866">Secondo delegato da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-866">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-867">Determina se i delegati specificati non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-867">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-868">
            <see langword="true" /> se <paramref name="d1" /> non è uguale a <paramref name="d2" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-868">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-869">Due delegati non sono uguali se sono di tipi diversi, oppure dispone di diversi metodi, destinazioni diverse o diversi elenchi chiamate.</span><span class="sxs-lookup"><span data-stu-id="45e68-869">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="45e68-870">Se i due delegati non sono dello stesso tipo, non sono considerati uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-870">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="45e68-871">In .NET Framework versioni 1.0 e 1.1, due delegati vengono considerati uguali se le destinazioni, metodi ed elenco di chiamate, anche se sono stati i delegati di tipo diverso.</span><span class="sxs-lookup"><span data-stu-id="45e68-871">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="45e68-872">I metodi e le destinazioni vengono confrontate per verificarne l'uguaglianza come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="45e68-872">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="45e68-873">Se i due metodi da confrontare sono statici e non il metodo di stesso nella stessa classe, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-873">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-874">Se i due metodi da confrontare sono metodi di istanza e lo stesso metodo di stesso oggetto, i metodi sono considerati uguali e anche le destinazioni sono considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-874">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="45e68-875">In caso contrario, i metodi non sono considerati uguali e le destinazioni sono inoltre non considerate uguali.</span><span class="sxs-lookup"><span data-stu-id="45e68-875">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="45e68-876">Due elenchi chiamate non sono uguali se hanno dimensioni diverse, se sono ordinati in modo diverso, o se almeno un elemento da un elenco rappresenta un metodo o destinazione che è diverso da quello rappresentato dall'elemento corrispondente in altro elenco.</span><span class="sxs-lookup"><span data-stu-id="45e68-876">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="45e68-877">È il metodo equivalente per l'operatore <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="45e68-877">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-878">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-878">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-879">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-879">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="45e68-880">Delegato dal quale rimuovere l'elenco di chiamate di <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-880">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45e68-881">Delegato che specifica l'elenco di chiamate da rimuovere dall'elenco di chiamate di <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-881">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-882">Rimuove l'ultima occorrenza dell'elenco chiamate di un delegato dall'elenco chiamate di un altro delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-882">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-883">Nuovo delegato con un elenco chiamate formato partendo dall'elenco chiamate di <paramref name="source" /> e rimuovendo l'ultima occorrenza dell'elenco chiamate di <paramref name="value" />, se l'elenco chiamate di <paramref name="value" /> si trova all'interno dell'elenco chiamate di <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-883">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45e68-884">Restituisce <paramref name="source" /> se <paramref name="value" /> è <see langword="null" /> o se l'elenco chiamate di <paramref name="value" /> non viene trovato all'interno dell'elenco chiamate di <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-884">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45e68-885">Restituisce un riferimento null se l'elenco chiamate di <paramref name="value" /> è uguale all'elenco chiamate di <paramref name="source" /> o se <paramref name="source" /> è un riferimento null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-885">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-886">Se l'elenco chiamate di `value` corrisponde a un set di elementi nell'elenco chiamate di contiguo `source`, quindi l'elenco chiamate di `value` ha luogo all'interno dell'elenco chiamate di `source`.</span><span class="sxs-lookup"><span data-stu-id="45e68-886">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="45e68-887">Se l'elenco chiamate di `value` si verifica più volte nell'elenco chiamate di `source`, viene rimossa l'ultima occorrenza.</span><span class="sxs-lookup"><span data-stu-id="45e68-887">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-888">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-888">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-889">I tipi dei delegati non corrispondono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-889">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-890">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-890">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-891">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-891">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="45e68-892">Delegato dal quale rimuovere l'elenco di chiamate di <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-892">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="45e68-893">Delegato che specifica l'elenco di chiamate da rimuovere dall'elenco di chiamate di <c>source</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-893">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-894">Rimuove tutte le occorrenze dell'elenco chiamate di un delegato dall'elenco chiamate di un altro delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-894">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-895">Nuovo delegato con un elenco chiamate formato partendo dall'elenco chiamate di <paramref name="source" /> e rimuovendo tutte le occorrenze dell'elenco chiamate di <paramref name="value" />, se l'elenco chiamate di <paramref name="value" /> si trova all'interno dell'elenco chiamate di <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-895">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45e68-896">Restituisce <paramref name="source" /> se <paramref name="value" /> è <see langword="null" /> o se l'elenco chiamate di <paramref name="value" /> non viene trovato all'interno dell'elenco chiamate di <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-896">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="45e68-897">Restituisce un riferimento null se l'elenco chiamate di <paramref name="value" /> è uguale all'elenco chiamate di <paramref name="source" />, se <paramref name="source" /> contiene solo una serie di elenchi chiamate uguali all'elenco chiamate di <paramref name="value" /> o se <paramref name="source" /> è un riferimento null.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-897">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-898">Se l'elenco chiamate di `value` corrisponde a un set di elementi nell'elenco chiamate di contiguo `source`, quindi l'elenco chiamate di `value` ha luogo all'interno dell'elenco chiamate di `source`.</span><span class="sxs-lookup"><span data-stu-id="45e68-898">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="45e68-899">Se l'elenco chiamate di `value` si verifica più volte nell'elenco chiamate di `source`, vengono rimosse tutte le occorrenze.</span><span class="sxs-lookup"><span data-stu-id="45e68-899">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-900">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-900">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="45e68-901">I tipi dei delegati non corrispondono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-901">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-902">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-902">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-903">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-903">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="45e68-904">Delegato che fornisce l'elenco chiamate da rimuovere dall'elenco chiamate del delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-904">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="45e68-905">Rimuove l'elenco chiamate di un delegato dall'elenco chiamate di un altro delegato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-905">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="45e68-906">Nuovo delegato con un elenco chiamate formato partendo dall'elenco chiamate del delegato corrente e rimuovendo l'elenco chiamate di <paramref name="value" />, qualora l'elenco chiamate di <paramref name="value" /> venga trovato all'interno dell'elenco chiamate del delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-906">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="45e68-907">Restituisce il delegato corrente se <paramref name="value" /> è <see langword="null" /> o se l'elenco chiamate di <paramref name="value" /> non viene trovato all'interno dell'elenco chiamate del delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-907">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="45e68-908">Restituisce <see langword="null" /> se l'elenco chiamate di <paramref name="value" /> è uguale all'elenco chiamate del delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-908">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-909">Se l'elenco chiamate di `value` corrisponde a un insieme di elementi nell'elenco chiamate del delegato corrente, quindi l'elenco chiamate di `value` ha luogo all'interno di elenco chiamate del delegato corrente.</span><span class="sxs-lookup"><span data-stu-id="45e68-909">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="45e68-910">Se l'elenco chiamate di `value` presente più volte nell'elenco chiamate del delegato corrente, viene rimossa l'ultima occorrenza.</span><span class="sxs-lookup"><span data-stu-id="45e68-910">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="45e68-911">Il chiamante non ha accesso al metodo rappresentato dal delegato, ad esempio se il metodo è privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-911">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-912">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-912">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-913">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-913">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="45e68-914">Ottiene l'istanza di classe sulla quale il metodo di istanza viene richiamato dal delegato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-914">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="45e68-915">Oggetto sul quale il metodo di istanza viene richiamato dal delegato corrente, se il delegato rappresenta un metodo di istanza; <see langword="null" /> se il delegato rappresenta un metodo statico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-915">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="45e68-916">Un metodo di istanza è un metodo che è associato a un'istanza di una classe. un metodo statico è un metodo che è associato alla classe stessa.</span><span class="sxs-lookup"><span data-stu-id="45e68-916">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="45e68-917">Se uno o più metodi di istanza viene richiamato il delegato, questa proprietà restituisce la destinazione di quest'ultimo metodo di istanza nell'elenco chiamate.</span><span class="sxs-lookup"><span data-stu-id="45e68-917">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="45e68-918">Quando viene richiamato con associazione tardiva mediante meccanismi come <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-918">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="45e68-919">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="45e68-919">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>