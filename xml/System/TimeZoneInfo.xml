<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eac7efc9b74e4b2e6ff96479a1c5a294be852c3c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30731115" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un qualsiasi fuso orario nel mondo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fuso orario è un'area geografica nella quale si usa la stessa ora.  
  
 Il <xref:System.TimeZoneInfo> classe offre miglioramenti significativi rispetto di <xref:System.TimeZone> (classe), che fornisce solo funzionalità limitate.  
  
 La <xref:System.TimeZone> classe riconosce solo il fuso orario locale e può convertire tra ora Coordinated Universal Time (UTC) e l'ora locale. Oggetto <xref:System.TimeZoneInfo> oggetto può rappresentare qualsiasi fuso orario e metodi del <xref:System.TimeZoneInfo> classe può essere utilizzata per convertire l'ora di un fuso orario per l'ora corrispondente in qualsiasi altro fuso orario. I membri del <xref:System.TimeZoneInfo> classe supportano le operazioni seguenti:  
  
-   Recupero di un fuso orario che è già definito dal sistema operativo.  
  
-   L'enumerazione dei fusi orari disponibili in un sistema.  
  
-   Conversione degli orari tra fusi orari diversi.  
  
-   Creazione di un nuovo fuso orario non è già stato definito dal sistema operativo.  
  
-   La serializzazione di un fuso orario per il successivo recupero.  
  
> [!NOTE]
>  Un'istanza di <xref:System.TimeZoneInfo> classe non è modificabile. Dopo un oggetto è stata creata un'istanza, i relativi valori non possono essere modificati.  
  
 Non è possibile creare un <xref:System.TimeZoneInfo> utilizzando il `new` (parola chiave). In alternativa, è necessario chiamare uno dei membri statici del <xref:System.TimeZoneInfo> classe illustrata nella tabella seguente.  
  
|Nome del membro statico|Descrizione|  
|------------------------|-----------------|  
|Metodo <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Crea un fuso orario personalizzato dai dati fornita dall'applicazione.|  
|Metodo <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Crea un'istanza di un fuso orario definito nel Registro di sistema in base all'identificatore della zona.|  
|Metodo <xref:System.TimeZoneInfo.FromSerializedString%2A>|Deserializza un valore stringa per ricreare un precedentemente serializzato <xref:System.TimeZoneInfo> oggetto.|  
|Metodo <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Restituisce un enumerabile <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> di <xref:System.TimeZoneInfo> gli oggetti che rappresentano tutti i fusi orari disponibili nel sistema locale.|  
|Proprietà <xref:System.TimeZoneInfo.Local%2A>|Crea un'istanza di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale.|  
|Proprietà <xref:System.TimeZoneInfo.Utc%2A>|Crea un'istanza di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso UTC.|  
  
 È possibile utilizzare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo per creare un fuso orario non definito nel Registro di sistema locale. È quindi possibile utilizzare il <xref:System.TimeZoneInfo.ToSerializedString%2A> proprietà per salvare le informazioni di fuso orario dell'oggetto come stringa, che può essere archiviata in un formato che è possibile accedere all'applicazione. È possibile utilizzare il <xref:System.TimeZoneInfo.FromSerializedString%2A> eseguire il metodo per convertire una stringa serializzata in un <xref:System.TimeZoneInfo> oggetto.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la differenza tra l'ora solare del fuso orario corrente e l'ora UTC (Coordinated Universal Time).</summary>
        <value>Oggetto che indica la differenza tra l'ora solare del fuso orario corrente e l'ora UTC (Coordinated Universal Time).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà è compreso tra 14 ore (per un fuso orario è di 14 ore rispetto all'ora UTC (Coordinated Universal Time)) e-14 ore (per un fuso orario è di 14 ore rispetto all'ora UTC). Fusi orari avanti rispetto all'ora UTC hanno un offset positivo; fusi orari rispetto all'ora UTC hanno un offset negativo.  
  
 Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valore viene rappresentato come un numero intero di minuti. Non può includere un numero di minuti frazionario.  
  
> [!NOTE]
>  Poiché <xref:System.TimeZoneInfo.BaseUtcOffset%2A> è una proprietà del <xref:System.TimeZoneInfo> oggetto anziché il <xref:System.TimeZoneInfo.AdjustmentRule> oggetto, la <xref:System.TimeZoneInfo> classe viene applicata solo un offset dall'ora UTC per tutte le regolazioni del fuso orario di. Per riflettere un fuso orario che ha modificato l'offset dall'ora UTC, è necessario creare un nuovo fuso orario utilizzando i <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà è diverso dal <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo nei modi seguenti:  
  
-   Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà restituisce la differenza tra l'ora UTC e l'ora solare del fuso orario; il <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo restituisce la differenza tra l'ora UTC e del fuso orario in un particolare punto nel tempo.  
  
-   Il <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo riflette l'applicazione di tutte le regole di regolazione per il fuso orario corrente; il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> non proprietà.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà per visualizzare la differenza tra l'ora locale e il tempo universale coordinato (UTC).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancella i dati del fuso orario memorizzati nella cache.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dati del fuso orario memorizzati nella cache includono i dati su qualsiasi fuso orario che vengono recuperate tramite metodi, ad esempio, l'orario Coordinated Universal Time (UTC) e il fuso orario locale <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> e <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 È possibile chiamare il <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo per ridurre la memoria dedicata alla cache dell'applicazione di informazioni sul fuso orario o in modo da riflettere il fatto che è stato modificato fuso orario del sistema locale.  
  
 Non è consigliabile archiviare i riferimenti ai locale e fuso orario UTC. Dopo la chiamata al <xref:System.TimeZoneInfo.ClearCachedData%2A> (metodo), queste variabili oggetto saranno non definite <xref:System.TimeZoneInfo> gli oggetti che non sono più riferimenti a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Ad esempio, nel codice seguente, la seconda chiamata al <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodo genera un <xref:System.ArgumentException> perché il `local` variabile non è più considerata uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte un'ora nell'ora di un particolare fuso orario.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <param name="destinationTimeZone">Fuso orario in cui convertire <c>dateTime</c>.</param>
        <summary>Converte un'ora nell'ora di un particolare fuso orario.</summary>
        <returns>Data e ora nel fuso orario di destinazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Questo overload del metodo di <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metodo determina il fuso orario di origine dal valore del `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà, come illustrato nella tabella seguente.  
  
|Valore della proprietà Kind|Fuso orario di origine|Comportamento del metodo|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte l'ora locale nell'ora di `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte l'ora in Coordinated Universal Time (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone che sia <xref:System.TimeZoneInfo.Local%2A>.|Converte l'ora locale nell'ora di `destinationTimeZone`.|  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|L'elemento `destinationTimeZone` è <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|L'elemento `destinationTimeZone` è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Tutti gli altri valori di data e ora e fuso orario di destinazione.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora locale ambigua, viene interpretato come ora solare. Se il `dateTime` parametro non è un'ora locale non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 È anche possibile convertire a o dall'ora UTC chiamando il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente converte una matrice di valori di data e ora a volte fuso orientale di Stati Uniti e Canada. Mostra che il fuso orario di origine dipende il <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> proprietà dell'origine <xref:System.DateTime> valore. Viene inoltre illustrato che il <xref:System.TimeZoneInfo.ConvertTime%2A> accetta regolazioni del fuso orario in considerazione, perché viene eseguita una regolazione del fuso orario nel fuso orario di origine e di destinazione alle 2:00. 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore del parametro <paramref name="dateTime" /> rappresenta un'ora non valida.</exception>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="destinationTimeZone" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo riconosce solo la regola di rettifica corrente quando si esegue la conversione se <paramref name="dateTime" /> viene considerato come un'ora locale o se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data e ora da convertire.</param>
        <param name="destinationTimeZone">Fuso orario in cui convertire <c>dateTime</c>.</param>
        <summary>Converte un'ora nell'ora di un particolare fuso orario.</summary>
        <returns>Data e ora nel fuso orario di destinazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Questo overload differisce dagli altri overload di <xref:System.TimeZoneInfo.ConvertTime%2A> metodo accettando un <xref:System.DateTimeOffset> valore come primo parametro. Identifica la data e l'ora come offset dall'ora Coordinated Universal Time (UTC) anziché come data e ora in un particolare fuso orario. Di conseguenza, il `dateTimeOffset` parametro non può rappresentare un'ora ambigua o un'ora non valida.  
  
 La conversione di `dateTimeOffset` valore con l'ora nel fuso orario di destinazione, questo metodo prende in considerazione tutte le regole di regolazione attiva fuso orario di destinazione.  
  
 Se la conversione di `dateTimeOffset` restituisce un valore di data e ora precedente a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente converte una matrice di <xref:System.DateTimeOffset> valori a volte il fuso orario orientale degli Stati Uniti e Canada. Viene illustrato che il <xref:System.TimeZoneInfo.ConvertTime%2A> accetta regolazioni del fuso orario in considerazione, perché viene eseguita una regolazione del fuso orario nel fuso orario di origine e di destinazione alle 2:00. 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="destinationTimeZone" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="dateTimeOffset" /> viene considerato come un'ora locale o se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <param name="sourceTimeZone">Fuso orario di <c>dateTime</c>.</param>
        <param name="destinationTimeZone">Fuso orario in cui convertire <c>dateTime</c>.</param>
        <summary>Converte un'ora da un fuso orario a un altro.</summary>
        <returns>Data e ora nel fuso orario di destinazione corrispondente al parametro <paramref name="dateTime" /> nel fuso orario di origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro deve corrispondere al `sourceTimeZone` parametro, come illustrato nella tabella seguente.  
  
|Valore DateTime. Kind|valore sourceTimeZone|Comportamento del metodo|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|È uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non è uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|È uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Non è uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualsiasi.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
  
 È anche possibile convertire a o da Coordinated Universal Time (UTC) chiamando il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodi.  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|Il valore dell'argomento `destinationTimeZone` è <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Il valore dell'argomento `destinationTimeZone` è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Tutti gli altri data e i valori di ora, fuso orario di origine e fusi orari di destinazione.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora ambigua nel fuso orario di origine, viene interpretato come ora solare. Se il `dateTime` parametro non è un'ora non valida nel fuso orario di origine, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 Il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metodo genera un <xref:System.ArgumentException> eccezione se il <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> proprietà del `dateTime` argomento <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ma la `sourceTimeZone` argomento non è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Per determinare se il fuso orario di origine è il fuso orario locale o universal fuso orario, il metodo verifica l'uguaglianza dei riferimenti anziché eseguire il test di uguaglianza con il <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodo. Si noti che <xref:System.TimeZoneInfo> gli oggetti che rappresentano il fuso orario locale e che vengono recuperati chiamando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (metodo) non dispone dei riferimenti con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Inoltre, <xref:System.TimeZoneInfo> gli oggetti che rappresentano il locale o un fuso orario universal e che vengono recuperati tramite l'iterazione della raccolta restituita dal <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> (metodo) non dispone dei riferimenti con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. In alternativa, è possibile chiamare il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metodo per la conversione dall'ora solare Hawaii all'ora locale.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.DateTime.Kind" /> del parametro <paramref name="dateTime" /> è <see cref="F:System.DateTimeKind.Local" />, ma il parametro <paramref name="sourceTimeZone" /> non è uguale a <see cref="F:System.DateTimeKind.Local" />.  
  
 oppure  
  
 La proprietà <see cref="P:System.DateTime.Kind" /> del parametro <paramref name="dateTime" /> è <see cref="F:System.DateTimeKind.Utc" />, ma il parametro <paramref name="sourceTimeZone" /> non è uguale a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 oppure  
  
 Il parametro <paramref name="dateTime" /> rappresenta un'ora non valida (ovvero rappresenta un'ora che non esiste a causa delle regole di rettifica del fuso orario).</exception>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="sourceTimeZone" /> è <see langword="null" />.  
  
 oppure  
  
 Il valore del parametro <paramref name="destinationTimeZone" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente quando si esegue la conversione se <paramref name="dateTime" /> viene considerata come un'ora locale, se <paramref name="sourceTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />, o se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte un'ora nell'ora di un fuso orario diverso in base a un identificatore del fuso orario.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <param name="destinationTimeZoneId">Identificatore del fuso orario di destinazione.</param>
        <summary>Converte un'ora nell'ora di un fuso orario diverso in base all'identificatore del fuso orario.</summary>
        <returns>Data e ora nel fuso orario di destinazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Questo overload è in gran parte identico alla chiamata di <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metodo, ad eccezione del fatto che consente di specificare il fuso orario di destinazione tramite il relativo identificatore anziché tramite un riferimento all'oggetto. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita standard o l'ora legale.  
  
 Il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> metodo determina il fuso orario di origine dal valore della `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà, come illustrato nella tabella seguente.  
  
|Valore della proprietà Kind|Fuso orario di origine|Comportamento del metodo|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte l'ora locale nell'ora di `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte l'ora in Coordinated Universal Time (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone che sia <xref:System.TimeZoneInfo.Local%2A>.|Converte l'ora locale nell'ora di `destinationTimeZone`.|  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|L'elemento `destinationTimeZone` è `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Qualsiasi altro `destinationTimeZone` valore.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora locale ambigua, viene interpretato come ora solare. Se il `dateTime` parametro non è un'ora locale non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 Questo metodo recupera il fuso orario, il cui identificatore è specificato per il `destinationTimeZoneId` parametro dal Registro di sistema. Non è possibile recuperare un oggetto fuso orario che viene creato utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Il `destinationTimeZoneId` parametro deve corrispondere esattamente alla chiave di registro di sistema del fuso orario in lunghezza, ma non nel caso, per trovare una corrispondenza ha esito positivo si verifichi; vale a dire, il confronto di `destinationTimeZoneId` con fuso orario è tra maiuscole e minuscole degli identificatori.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L'identificatore del fuso orario è stato trovato, ma i dati del Registro di sistema sono danneggiati.</exception>
        <exception cref="T:System.Security.SecurityException">Il processo non ha le autorizzazioni necessarie per leggere dalla chiave del Registro di sistema che contiene le informazioni sul fuso orario.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Identificatore <paramref name="destinationTimeZoneId" /> non trovato nel sistema locale.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data e ora da convertire.</param>
        <param name="destinationTimeZoneId">Identificatore del fuso orario di destinazione.</param>
        <summary>Converte un'ora nell'ora di un fuso orario diverso in base all'identificatore del fuso orario.</summary>
        <returns>Data e ora nel fuso orario di destinazione.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Questo overload è identico alla chiamata di <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metodo, ad eccezione del fatto che consente di specificare il fuso orario di destinazione tramite il relativo identificatore anziché tramite un riferimento all'oggetto. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita standard o l'ora legale.  
  
 Poiché il `dateTimeOffset` rappresenta una data e dall'ora Coordinated Universal Time (UTC) di offset dell'ora, insieme a quel momento, non può rappresentare un'ora ambigua o un'ora non valida.  
  
 Questo metodo recupera il fuso orario, il cui identificatore è specificato per il `destinationTimeZoneId` parametro dal Registro di sistema. Non è possibile recuperare un oggetto fuso orario che viene creato utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Il `destinationTimeZoneId` parametro deve corrispondere esattamente alla chiave di registro di sistema del fuso orario in lunghezza, ma non nel caso, per trovare una corrispondenza ha esito positivo si verifichi; vale a dire, il confronto di `destinationTimeZoneId` con fuso orario è tra maiuscole e minuscole degli identificatori.  
  
 La conversione di `dateTimeOffset` valore con l'ora nel fuso orario di destinazione, il metodo prende in considerazione tutte le regole di regolazione attiva fuso orario di destinazione.  
  
 Se la conversione di `dateTimeOffset` restituisce un valore di data e ora precedente a <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L'identificatore del fuso orario è stato trovato, ma i dati del Registro di sistema sono danneggiati.</exception>
        <exception cref="T:System.Security.SecurityException">Il processo non ha le autorizzazioni necessarie per leggere dalla chiave del Registro di sistema che contiene le informazioni sul fuso orario.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Identificatore <paramref name="destinationTimeZoneId" /> non trovato nel sistema locale.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <param name="sourceTimeZoneId">Identificatore del fuso orario di origine.</param>
        <param name="destinationTimeZoneId">Identificatore del fuso orario di destinazione.</param>
        <summary>Converte un'ora da un fuso orario a un altro in base agli identificatori dei fusi orari.</summary>
        <returns>Data e ora nel fuso orario di destinazione corrispondente al parametro <paramref name="dateTime" /> nel fuso orario di origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Sebbene sia simile al <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> (metodo), è possibile utilizzare <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> per specificare il fuso orario di origine e di destinazione utilizzando i rispettivi identificatori anziché i relativi <xref:System.TimeZoneInfo> oggetti. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita standard o l'ora legale.  
  
 Questo metodo recupera i fusi orari con gli identificatori sono il `sourceTimeZoneId` e `destinationTimeZoneId` parametri dal Registro di sistema. Non è possibile recuperare gli oggetti fuso orario che vengono creati utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro deve corrispondere al `sourceTimeZoneId` parametro, come illustrato nella tabella seguente.  
  
|Valore DateTime. Kind|valore sourceTimeZone|Comportamento del metodo|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|È uguale a `TimeZoneInfo.Utc.Id`.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non è uguale a `TimeZoneInfo.Utc.Id`.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|È uguale a `TimeZoneInfo.Local.Id`.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Non è uguale a `TimeZoneInfo.Local.Id`.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualsiasi.|Converte `dateTime` all'ora del fuso orario di destinazione.|  
  
 Perché si basa sulle chiamate per il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (metodo), il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo esegue una ricerca tra maiuscole e minuscole per individuare i fusi orari che corrispondono a `sourceTimeZoneId` e `destinationTimeZoneId`.  
  
 Se il valore di `dateTime` parametro è un'ora ambigua nel fuso orario di origine, viene interpretato come ora solare. Se il `dateTime` parametro non è un'ora non valida nel fuso orario di origine, questo metodo genera un <xref:System.ArgumentException>.  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> a meno che il fuso orario di destinazione sia Coordinated Universal Time (UTC), nel qual caso è impostata su <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> metodo per visualizzare l'ora che corrisponde all'ora di sistema locale in otto città del mondo.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.DateTime.Kind" /> del parametro <paramref name="dateTime" /> non corrisponde al fuso orario di origine.  
  
 oppure  
  
 <paramref name="dateTime" /> è un'ora non valida nel fuso orario di origine.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> è <see langword="null" />.  
  
 oppure  
  
 <paramref name="destinationTimeZoneId" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Gli identificatori del fuso orario sono stati trovati, ma i dati del Registro di sistema sono danneggiati.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha le autorizzazioni necessarie per leggere le chiavi del Registro di sistema che contengono i dati del fuso orario.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Identificatore <paramref name="sourceTimeZoneId" /> non trovato nel sistema locale.  
  
 oppure  
  
 Identificatore <paramref name="destinationTimeZoneId" /> non trovato nel sistema locale.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Ora UTC (Coordinated Universal Time).</param>
        <param name="destinationTimeZone">Fuso orario in cui convertire <c>dateTime</c>.</param>
        <summary>Converte l'ora UTC (Coordinated Universal Time) nell'ora di un fuso orario specificato.</summary>
        <returns>Data e ora nel fuso orario di destinazione. La proprietà <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Utc" /> se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Utc" />; in caso contrario, la proprietà <see cref="P:System.DateTime.Kind" /> è <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Il comportamento preciso di questo metodo dipende dal valore del <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Conversione|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte da ora UTC (Coordinated Universal Time).|  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successivo a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente converte Coordinated Universal Time (UTC) fuso cen.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.DateTime.Kind" /> di <paramref name="dateTime" /> è <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converte una data e un'ora in ora UTC (Coordinated Universal Time).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <summary>Converte la data e l'ora specificate in ora UTC (Coordinated Universal Time).</summary>
        <returns>Ora UTC (Coordinated Universal Time) corrispondente al parametro <paramref name="dateTime" />. La proprietà <see cref="P:System.DateTime.Kind" /> del valore <see cref="T:System.DateTime" /> è sempre impostata su <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifico di conversione eseguita dipende dal valore del <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Conversione|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Converte l'ora locale in ora Coordinated Universal Time (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone `dateTime` ora locale e converte l'ora locale in ora UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Restituisce `dateTime` subisce modifiche.|  
  
 Se `dateTime` corrisponde a un'ora ambigua locale, questo metodo presuppone che sia standard ora locale. Se `dateTime` corrisponde a un'ora locale non valida, il metodo genera un <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Se il computer corrente locale del fuso orario include più regole di regolazione, questo overload di <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodo può restituire risultati diversi dal <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> e <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> metodi. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> applica sempre la regola di rettifica corrente per la conversione del fuso orario, o meno `dateTime` si trova all'interno di un intervallo di date relative. E quando si esegue in [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> si applica anche la regola di rettifica corrente per la conversione del fuso orario, o meno `dateTime` si trova all'interno di un intervallo di date relative.  
  
 Se l'ora UTC equivalente di `dateTime` è precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o versioni successive che <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la conversione di valori di ora la cui proprietà <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, e <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, rispettivamente. Illustra anche la conversione dell'ora ambigua e non validi.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> restituisce <see langword="true" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora da convertire.</param>
        <param name="sourceTimeZone">Fuso orario di <c>dateTime</c>.</param>
        <summary>Converte l'ora di un fuso orario specificato in ora UTC (Coordinated Universal Time).</summary>
        <returns>Ora UTC (Coordinated Universal Time) corrispondente al parametro <paramref name="dateTime" />. La proprietà <see cref="P:System.DateTime.Kind" /> dell'oggetto <see cref="T:System.DateTime" /> è sempre impostata su <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro è uguale a <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> e `sourceTimeZone` parametro è uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, questo metodo restituisce `dateTime` senza eseguire alcuna conversione.  
  
 Se `dateTime` corrisponde a un'ora ambigua, questo metodo presuppone che sia l'ora solare del fuso orario di origine. Se `dateTime` corrisponde a un'ora non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se l'equivalente di Coordinated Universal Time (UTC) di `dateTime` è precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o versioni successive che <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente recupera la data corrente del sistema locale e convertirla in Coordinated Universal Time (ora UTC), quindi lo converte per ora solare Tokyo e infine riconvertita dall'ora solare Tokyo in UTC. Si noti che le due ore UTC siano identiche.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> è <see cref="F:System.DateTimeKind.Utc" /> e <paramref name="sourceTimeZone" /> non è uguale a <see cref="P:System.TimeZoneInfo.Utc" />.  
  
 oppure  
  
 <paramref name="dateTime" /><see langword=".Kind" /> è <see cref="F:System.DateTimeKind.Local" /> e <paramref name="sourceTimeZone" /> non è uguale a <see cref="P:System.TimeZoneInfo.Local" />.  
  
 oppure  
  
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> restituisce <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> è <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, il metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="sourceTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Definisce un fuso orario non trovato nel computer locale.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identificatore del fuso orario.</param>
        <param name="baseUtcOffset">Oggetto che rappresenta la differenza di ora tra questo fuso orario e l'ora UTC (Coordinated Universal Time).</param>
        <param name="displayName">Nome visualizzato del nuovo fuso orario.</param>
        <param name="standardDisplayName">Nome dell'ora solare del nuovo fuso orario.</param>
        <summary>Crea un fuso orario personalizzato con un identificatore specificato, un offset dall'ora UTC (Coordinated Universal Time), un nome visualizzato e un nome visualizzato dell'ora solare.</summary>
        <returns>Nuovo fuso orario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> metodo è adatto per la creazione di un fuso orario senza regole di regolazione (vale a dire un fuso orario che non supporta l'ora legale). Per definire un fuso orario che include le modifiche all'ora legale, utilizzare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> (metodo) e le proprietà del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Proprietà TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario, o di uno o più città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 L'esempio seguente crea un fuso orario personalizzato per le aree di Mawson e Holme Bay dell'Antartide. Viene quindi visualizzato il risultato della conversione dell'ora locale nell'ora di nuovo fuso orario.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="id" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="id" /> è una stringa vuota ("").  
  
 oppure  
  
 Il parametro <paramref name="baseUtcOffset" /> non rappresenta un numero intero di minuti.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="baseUtcOffset" /> è maggiore di 14 ore o minore di -14 ore.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">Identificatore del fuso orario.</param>
        <param name="baseUtcOffset">Oggetto che rappresenta la differenza di ora tra questo fuso orario e l'ora UTC (Coordinated Universal Time).</param>
        <param name="displayName">Nome visualizzato del nuovo fuso orario.</param>
        <param name="standardDisplayName">Nome dell'ora solare del nuovo fuso orario.</param>
        <param name="daylightDisplayName">Nome dell'ora legale del nuovo fuso orario.</param>
        <param name="adjustmentRules">Matrice che aumenta l'offset UTC di base per un determinato periodo.</param>
        <summary>Crea un fuso orario personalizzato con un identificatore specificato, un offset dall'ora UTC (Coordinated Universal Time), un nome visualizzato, un nome dell'ora solare, un nome dell'ora legale e regole di applicazione per l'ora legale.</summary>
        <returns>Oggetto <see cref="T:System.TimeZoneInfo" /> che rappresenta il nuovo fuso orario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo è adatto per la creazione di un fuso orario che supporta l'ora legale. Per definire un fuso orario che non supporta l'ora legale, utilizzare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo e i membri del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Membro TimeZoneInfo|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Matrice di <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo.|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario, o di uno o più città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Il `baseUtcOffset` parametro definisce l'offset del fuso orario personalizzato da Coordinated Universal Time (UTC) per tutte le regole di regolazione del fuso orario. In altre parole, il <xref:System.TimeZoneInfo> modello a oggetti presume offset del fuso orario dall'ora UTC costante per tutta la durata del fuso orario che sia presente indipendentemente da particolari regole di regolazione. Per riflettere un fuso orario che è stato modificato all'offset dall'ora UTC, è necessario creare un nuovo oggetto fuso orario.  
  
 Regole di regolazione del fuso orario sono definite nel modo seguente:  
  
1.  Una chiamata di <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodo per definire le iniziali e finali di tempo di transizione per ogni regola di rettifica.  
  
2.  La chiamata di <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metodo per ogni regola di rettifica.  
  
3.  Le regole di regolazione assegnando a una matrice che può essere passato come il `adjustmentRules` parametro.  
  
   
  
## Examples  
 L'esempio seguente crea un fuso orario personalizzato per la stazione Palmer e isola Anvers ore. Quindi, converte l'ora locale del nuovo fuso orario e viene visualizzato il risultato.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="id" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="id" /> è una stringa vuota ("").  
  
 oppure  
  
 Il parametro <paramref name="baseUtcOffset" /> non rappresenta un numero intero di minuti.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="baseUtcOffset" /> è maggiore di 14 ore o minore di -14 ore.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Le regole di regolazione specificate nel parametro <paramref name="adjustmentRules" /> si sovrappongono.  
  
 oppure  
  
 Le regole di regolazione specificate nel parametro <paramref name="adjustmentRules" /> non sono in ordine cronologico.  
  
 oppure  
  
 Uno o più elementi in <paramref name="adjustmentRules" /> sono <see langword="null" />.  
  
 oppure  
  
 A una data possono essere applicate più regole di regolazione.  
  
 oppure  
  
 La somma del parametro <paramref name="baseUtcOffset" /> e del valore <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> di uno o più oggetti nella matrice <paramref name="adjustmentRules" /> è maggiore di 14 ore o minore di -14 ore.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">Identificatore del fuso orario.</param>
        <param name="baseUtcOffset">Oggetto <see cref="T:System.TimeSpan" /> che rappresenta la differenza di ora tra questo fuso orario e l'ora UTC (Coordinated Universal Time).</param>
        <param name="displayName">Nome visualizzato del nuovo fuso orario.</param>
        <param name="standardDisplayName">Nome dell'ora solare del nuovo fuso orario.</param>
        <param name="daylightDisplayName">Nome dell'ora legale del nuovo fuso orario.</param>
        <param name="adjustmentRules">Matrice di oggetti <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> che aumentano l'offset UTC di base per un determinato periodo.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" /> per rimuovere le informazioni relative all'ora legale presenti in <c>adjustmentRules</c> con il nuovo oggetto, in caso contrario <see langword="false" />.</param>
        <summary>Crea un fuso orario personalizzato con un identificatore specificato, un offset dall'ora UTC (Coordinated Universal Time), un nome visualizzato, un nome dell'ora solare, un nome dell'ora legale, regole di applicazione per l'ora legale e un valore che indica se l'oggetto restituito riflette o meno le informazioni sull'ora legale.</summary>
        <returns>Nuovo fuso orario. Se il parametro <paramref name="disableDaylightSavingTime" /> è <see langword="true" />, l'oggetto restituito non include dati sull'ora legale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo per creare un fuso orario personalizzato con supporto per l'ora legale può essere determinato tramite condizioni in fase di esecuzione.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo e i membri del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Proprietà TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Se `disableDaylightSavingTime` è `false`; <xref:System.String.Empty?displayProperty=nameWithType> se `disableDaylightSavingTime` è `true`.|  
|`adjustmentRules`|Una matrice di <xref:System.TimeZoneInfo.AdjustmentRule> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo se `disableDaylightSavingTime` è `false`; una matrice vuota restituita dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo se `disableDaylightSavingTime` è `true`.|  
|`disableDaylightSavingTime`|Non <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario, o di uno o più città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Regole di regolazione del fuso orario sono definite nel modo seguente:  
  
1.  Una chiamata di <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodo per definire gli iniziale e finale delle regole di transizione per ogni regola di rettifica.  
  
2.  La chiamata di <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metodo per ogni regola di rettifica.  
  
3.  Le regole di regolazione assegnando a una matrice che può essere passato come il `adjustmentRules` parametro.  
  
 Se `disableDaylightSavingTime` parametro `false`, l'operazione di questo metodo è identico al <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> rapporto di overload. Se `disableDaylightSavingTime` è `true`, l'oggetto restituito non include alcuna regola di regolazione e un <xref:System.TimeZoneInfo.DaylightName%2A> proprietà il cui valore è una stringa vuota.  
  
   
  
## Examples  
 L'esempio seguente crea un fuso orario personalizzato per la stazione Palmer e isola Anvers ore. Imposta il `disableDaylightSavingTime` parametro nella chiamata al <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo `true`. Viene quindi visualizzato come nome dell'ora legale del nuovo fuso orario, se presente e il numero di regole di regolazione per verificare che il nuovo fuso orario non abbia alcuna informazioni sull'ora legale.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="id" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="id" /> è una stringa vuota ("").  
  
 oppure  
  
 Il parametro <paramref name="baseUtcOffset" /> non rappresenta un numero intero di minuti.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="baseUtcOffset" /> è maggiore di 14 ore o minore di -14 ore.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Le regole di regolazione specificate nel parametro <paramref name="adjustmentRules" /> si sovrappongono.  
  
 oppure  
  
 Le regole di regolazione specificate nel parametro <paramref name="adjustmentRules" /> non sono in ordine cronologico.  
  
 oppure  
  
 Uno o più elementi in <paramref name="adjustmentRules" /> sono <see langword="null" />.  
  
 oppure  
  
 A una data possono essere applicate più regole di regolazione.  
  
 oppure  
  
 La somma del parametro <paramref name="baseUtcOffset" /> e del valore <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> di uno o più oggetti nella matrice <paramref name="adjustmentRules" /> è maggiore di 14 ore o minore di -14 ore.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome visualizzato per l'ora legale del fuso orario corrente.</summary>
        <value>Nome visualizzato per l'ora legale del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 Oggetto <xref:System.TimeZoneInfo.DaylightName%2A> proprietà il cui valore non è <xref:System.String.Empty?displayProperty=nameWithType> o `null` non indica necessariamente che il fuso orario supporta l'ora legale. Per determinare se il fuso orario supporta l'ora legale, controllare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 Nella maggior parte dei casi, il <xref:System.TimeZoneInfo.DaylightName%2A> proprietà dei fusi orari definiti nel Registro di sistema non è <xref:System.String.Empty?displayProperty=nameWithType> o `null`. Tuttavia, il <xref:System.TimeZoneInfo.DaylightName%2A> dei fusi orari personalizzati può essere impostata su <xref:System.String.Empty?displayProperty=nameWithType>. Questo errore si verifica quando fusi orari personalizzati vengono creati dal <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> overload e `disableDaylightSavingTime` parametro `true`. Pertanto, il codice non deve mai presupporre che il valore di <xref:System.TimeZoneInfo.DaylightName%2A> proprietà non è `null` o vuoto.  
  
 Il <xref:System.TimeZoneInfo.DaylightName%2A> è equivalente alla proprietà di <xref:System.TimeZone.DaylightName%2A> proprietà del <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome visualizzato generale che rappresenta il fuso orario.</summary>
        <value>Nome visualizzato generale del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 I nomi visualizzati per i fusi orari di sistema Windows seguono un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. Per l'ora UTC, l'acronimo GMT senza offset è racchiuso tra parentesi.  È seguito da una stringa che identifica il fuso orario o di uno o più città, aree o paesi nel fuso orario. Ad esempio:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale. L'output viene visualizzato per un sistema negli Stati Uniti. Ora solare del Pacifico (Stati Uniti).  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se due oggetti <see cref="T:System.TimeZoneInfo" /> sono uguali.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Secondo oggetto da confrontare con l'oggetto corrente.</param>
        <summary>Determina se l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente e un altro oggetto sono uguali.</summary>
        <returns>
          <see langword="true" /> se l'oggetto <paramref name="obj" /> è un oggetto <see cref="T:System.TimeZoneInfo" /> uguale all'istanza corrente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo converte o esegue il cast `obj` per un <xref:System.TimeZoneInfo> dell'oggetto e lo confronta con l'istanza corrente. Il test di uguaglianza è basato su un confronto di valori. Corrente <xref:System.TimeZoneInfo> istanza e `obj` sono considerati uguali nelle condizioni seguenti:  
  
-   Il tipo in fase di esecuzione di `obj` è <xref:System.TimeZoneInfo>.  
  
-   I due oggetti hanno lo stesso <xref:System.TimeZoneInfo.Id%2A> valore della proprietà.  
  
-   I due oggetti hanno le stesse regole di regolazione.  
  
 Se `obj` è `null`, questo metodo restituisce `false`.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.Equals%28System.Object%29> metodo per determinare se il fuso orario locale è Pacifico o fuso orientale.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Secondo oggetto da confrontare con l'oggetto corrente.</param>
        <summary>Determina se l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente e un altro oggetto <see cref="T:System.TimeZoneInfo" /> sono uguali.</summary>
        <returns>
          <see langword="true" /> se i due oggetti <see cref="T:System.TimeZoneInfo" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uguaglianza si basa su un confronto di valori. Due <xref:System.TimeZoneInfo> gli oggetti sono considerati uguali nelle condizioni seguenti:  
  
-   Il valore della loro <xref:System.TimeZoneInfo.Id%2A> proprietà è lo stesso.  
  
-   Hanno le stesse regole di regolazione.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Restituisce il valore booleano risultante dalla valutazione dell'espressione seguente:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Se il `other` parametro è un valore non inizializzato <xref:System.TimeZoneInfo> dell'oggetto, questo metodo restituisce `false`.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodo per determinare se il fuso orario locale è Pacifico o fuso orientale.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identificatore del fuso orario, corrispondente alla proprietà <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Recupera un oggetto <see cref="T:System.TimeZoneInfo" /> dal Registro di sistema in base al relativo identificatore.</summary>
        <returns>Oggetto il cui identificatore è il valore del parametro <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `id` parametro deve corrispondere esattamente alla chiave di registro di sistema del fuso orario in lunghezza, ma non nel caso, per trovare una corrispondenza ha esito positivo si verifichi; vale a dire, il confronto di `id` con fuso orario è tra maiuscole e minuscole degli identificatori. Se si desidera recuperare oggetti fuso orario in base alle corrispondenze parziali, è possibile scrivere procedure personalizzate che funzionano con la raccolta di sola lettura di <xref:System.TimeZoneInfo> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metodo.  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> tenta di far corrispondere `id` per i nomi delle sottochiavi del ramo HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del Registro di sistema in Windows XP e Windows Vista. Questo ramo non contiene necessariamente un elenco completo di identificatori del fuso orario. Se richiesto da un'applicazione, è possibile creare un particolare fuso orario chiamando uno degli overload del <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo oppure chiamando <xref:System.TimeZoneInfo.FromSerializedString%2A> per deserializzare un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario necessario. Tuttavia, i fusi orari creati tramite le chiamate ai metodi non sono inclusi nel Registro di sistema e non può essere recuperati tramite il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo. Questi fusi orari personalizzati sono accessibili solo tramite il riferimento all'oggetto restituito dal <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> o <xref:System.TimeZoneInfo.FromSerializedString%2A> chiamata al metodo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo per recuperare il fuso ora solare Tokyo. Questo <xref:System.TimeZoneInfo> oggetto viene quindi utilizzato per convertire l'ora locale all'ora di Tokyo e per determinare se è Tokyo o l'ora legale Tokyo.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Il sistema non ha memoria sufficiente per contenere le informazioni sul fuso orario.</exception>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="id" /> è <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Impossibile trovare l'identificatore del fuso orario specificato da <paramref name="id" />. Ciò significa che non esiste una chiave del Registro di sistema il cui nome corrisponda a <paramref name="id" />, oppure che la chiave esiste ma non contiene dati sul fuso orario.</exception>
        <exception cref="T:System.Security.SecurityException">Il processo non ha le autorizzazioni necessarie per leggere dalla chiave del Registro di sistema che contiene le informazioni sul fuso orario.</exception>
        <exception cref="T:System.InvalidTimeZoneException">L'identificatore del fuso orario è stato trovato, ma i dati del Registro di sistema sono danneggiati.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Rappresentazione di stringa dell'oggetto <see cref="T:System.TimeZoneInfo" /> serializzato.</param>
        <summary>Deserializza una stringa per ricreare un oggetto <see cref="T:System.TimeZoneInfo" /> serializzato originale.</summary>
        <returns>Oggetto serializzato originale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È un'alternativa alla fornitura di tutto il codice necessario per creare un fuso orario non trovato nel Registro di sistema. È possibile definire un fuso orario personalizzato e utilizzare il <xref:System.TimeZoneInfo.ToSerializedString%2A> metodo in un file eseguibile autonomo oppure utilizzare il programma di installazione di un'applicazione per salvare il fuso orario sotto forma di stringa. L'applicazione può quindi recuperare tale stringa dal percorso di archiviazione e crearne un'istanza utilizzando il <xref:System.TimeZoneInfo.FromSerializedString%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente tenta di recuperare il polo sud Antartide fuso orario del sistema locale. In caso contrario, il codice tenta di recuperare informazioni sul fuso orario da un file di testo nella directory dell'applicazione. Se questo tentativo non riesce, il codice crea il fuso orario e scrive le informazioni sul fuso orario per il file di testo.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore del parametro <paramref name="source" /> è <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="source" /> è una stringa null.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Il parametro di origine non può essere nuovamente deserializzato in un oggetto <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una matrice di oggetti <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> che vengono applicati all'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
        <returns>Matrice di oggetti per questo fuso orario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo recupera una matrice di <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> oggetti. Ogni oggetto nella matrice definisce la data di inizio e di fine validità di tale regolazione del fuso orario, nonché il relativo delta (la quantità esatta di regolazione che provoca il cambiamento di ora). Inoltre, due proprietà restituiscono <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> oggetti che definiscono quando si verifica ogni transizione annuale da e dall'ora solare.  
  
 Se un fuso orario dispone di più regole di regolazione, vengono in genere ordinati dal più recente (in corrispondenza dell'indice 0) alla versione più recente (in corrispondenza dell'indice <xref:System.Array.Length%2A> -1).  
  
 Se non dispone di un fuso orario regole di regolazione di <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> il metodo restituisce una matrice vuota (una matrice i cui <xref:System.Array.Length%2A> è uguale a zero).  
  
 Modifiche agli elementi della matrice restituita dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> (metodo) non vengono riflesse nelle regole di regolazione appartenenti a un particolare fuso orario. Per modificare le regole di regolazione del fuso orario (ad esempio per riflettere la transizione cronologica da e verso l'ora legale) è necessario creare un nuovo fuso orario con le regole di regolazione appropriato, anziché modificare quella esistente.  
  
   
  
## Examples  
 L'esempio seguente recupera tutti i fusi orari definiti nelle informazioni complete di sistema e di visualizzare locale sulle regole di regolazione nella console.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">La memoria del sistema non è sufficiente per creare una copia in memoria delle regole di rettifica.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce le informazioni sulle possibili date e ore alle quali possono essere mappate una data e un'ora ambigue.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora.</param>
        <summary>Restituisce le informazioni sulle possibili date e ore alle quali possono essere mappate una data e un'ora ambigue.</summary>
        <returns>Matrice di oggetti che rappresenta possibili offset UTC (Coordinated Universal Time) a cui è possibile mappare una data e un'ora particolari.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento preciso di questo metodo dipende dalla relazione tra il <xref:System.DateTime.Kind%2A> proprietà e <xref:System.TimeZoneInfo> oggetto, come illustrato nella tabella seguente.  
  
|Tipo oggetto TimeZoneInfo|Valore della proprietà Kind|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Ora ambigua restituisce gli offset per `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` in ora locale e quindi restituisce ora ambigua degli offset per tale intervallo di tempo.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Qualsiasi valore.|Genera un <xref:System.ArgumentException>.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Local> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` per il fuso orario specificato e determina quindi se tale ora è ambigua.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` è ambiguo nel fuso orario specificato.|  
  
 L'ordine di <xref:System.TimeSpan> oggetti nella matrice restituita da questo metodo non è definito. Tuttavia, è possibile determinare quale elemento rappresenta un offset dall'ora solare del fuso orario confrontando il valore con il fuso orario <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà. Per eseguire il mapping di un'ora ambigua all'ora solare del fuso orario, vedere [procedura: risolvere orari ambigui](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `ShowPossibleUtcTimes` che utilizza il <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> metodo per eseguire il mapping di un'ora ambigua alle possibili ore UTC (Coordinated Universal Coordinated Time) corrispondente.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Il metodo può quindi essere chiamato utilizzando codice analogo al seguente:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> non è un'ora ambigua.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente per determinare se <paramref name="dateTime" /> è ambiguo se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare con precisione gli offset ora ambigua per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data e ora.</param>
        <summary>Restituisce le informazioni sulle possibili date e ore alle quali possono essere mappate una data e un'ora ambigue.</summary>
        <returns>Matrice di oggetti che rappresenta possibili offset UTC (Coordinated Universal Time) a cui è possibile mappare una data e un'ora particolari.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento preciso di questo metodo dipende dalla relazione tra il <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro e il <xref:System.TimeZoneInfo> oggetto. Se il valore di <xref:System.DateTimeOffset.Offset%2A> proprietà corrisponde alle possibili offset del fuso orario corrente dal Coordinated Universal Time (UTC) per data e ora, il metodo restituisce gli offset possibili. In caso contrario, viene convertito `dateTimeOffset` per il tempo in cui il fuso orario corrente e restituisce i possibili offset di tale data e ora.  
  
 L'ordine di <xref:System.TimeSpan> oggetti nella matrice restituita da questo metodo non è definito. Tuttavia, è possibile determinare quale elemento rappresenta un offset dall'ora solare del fuso orario confrontando il valore con il fuso orario <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà. Per eseguire il mapping di un'ora ambigua all'ora solare del fuso orario, vedere [procedura: risolvere orari ambigui](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> non è un'ora ambigua.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente per determinare se <paramref name="dateTimeOffset" /> è ambiguo se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare con precisione gli offset ora ambigua per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usato come funzione hash per algoritmi di hash e strutture dei dati, ad esempio tabelle hash.</summary>
        <returns>Intero con segno a 32 bit usato come codice hash per l'oggetto <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori dettagli sul <xref:System.TimeZoneInfo.GetHashCode%2A> metodo, vedere <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce una raccolta ordinata di tutti i fusi orari per i quali sono disponibili informazioni nel sistema locale.</summary>
        <returns>Raccolta di sola lettura di oggetti <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> che consente di recuperare tutte le informazioni disponibili fuso orario dalle sottochiavi della chiave HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del Registro di sistema. Se non è in grado di recuperare e analizzare i valori per le proprietà di stringa specifico di singoli correttamente <xref:System.TimeZoneInfo> oggetti, questo metodo imposta il valore su una stringa vuota ("").  
  
> [!IMPORTANT]
>  Il <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> il metodo restituisce una raccolta di <xref:System.TimeZoneInfo> oggetti solo per i fusi orari definiti nel Registro di sistema. Non include creati utilizzando l'overload del fuso orario di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Questi sono accessibili solo tramite il riferimento all'oggetto restituito dal metodo di creazione del fuso orario.  
  
 La raccolta restituita da questo metodo verrà ordinata in base all'offset UTC e, per i fusi orari che hanno lo stesso offset UTC, il nome visualizzato utilizzando le impostazioni cultura correnti. Per informazioni sul nome visualizzato, vedere <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Il <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> oggetto restituito da questo metodo supporta il <xref:System.Collections.Generic.IEnumerable%601> interfaccia, il che significa che può essere iterato utilizzando il `foreach` (in c#) o `For Each…Next` (in Visual Basic) le istruzioni. Ogni iterazione del ciclo fornisce successivo <xref:System.TimeZoneInfo> oggetto nella raccolta.  
  
 La raccolta di <xref:System.TimeZoneInfo> oggetti rappresenta fusi orari definiti nel computer locale, non necessariamente fornisce informazioni complete per tutti i fusi orari durante tutti i periodi di tempo. Se l'applicazione richiede fusi orari non trovati nel computer locale, è possibile creare fusi orari personalizzati utilizzando l'overload di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Per ulteriori informazioni, vedere [procedura: creare fusi orari senza regole di regolazione](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) e [procedura: creare fusi orari con regole di regolazione](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 È inoltre possibile determinare se un singolo fuso orario è definito nel computer locale chiamando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (metodo) e fornendo l'identificatore del fuso orario da recuperare come parametro.  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperata una raccolta di oggetti fuso orario che rappresentano i fusi orari definiti in un computer e scrive le relative informazioni in un file di testo.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">La memoria è insufficiente per archiviare tutte le informazioni sul fuso orario.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non dispone dell'autorizzazione per leggere le chiavi del Registro di sistema che contengono informazioni sul fuso orario.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calcola l'offset o differenza tra l'ora in questo fuso orario e l'ora UTC (Coordinated Universal Time) per una particolare data e ora.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Data e ora per la quale determinare l'offset.</param>
        <summary>Calcola l'offset o differenza tra l'ora in questo fuso orario e l'ora UTC (Coordinated Universal Time) per una particolare data e ora.</summary>
        <returns>Oggetto che indica la differenza di ora tra i due fusi orari.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito include le eventuali differenze a causa l'applicazione delle regole di adeguamento del fuso orario corrente. Si differenzia dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà, che restituisce la differenza tra Coordinated Universal Time (UTC) e l'ora solare del fuso orario e, pertanto, non considerare le regole di regolazione.  
  
 Se il `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà non corrisponde all'oggetto fuso orario, questo metodo esegue la conversione necessaria prima di restituire un risultato. Ad esempio, ciò può verificarsi se il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ma l'oggetto fuso orario non è il fuso orario locale. Se `dateTime` è ambiguo, o se l'ora convertita è ambigua, questo metodo interpreta l'ora ambigua come ora solare. Se `dateTime` non è valido, questo metodo restituisce un <xref:System.TimeSpan> che riflette la differenza tra l'ora UTC e l'ora solare del fuso orario.  
  
 Il <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> è in maniera analoga al metodo di <xref:System.TimeZone.GetUtcOffset%2A> metodo la <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> metodo con fusi orari diversi e con valori di data con diversi <xref:System.DateTime.Kind%2A> i valori delle proprietà.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente quando si calcola l'offset dall'ora UTC, se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non calcolare con precisione la differenza tra l'ora locale e l'ora UTC in <paramref name="dateTime" />. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data e ora per la quale determinare l'offset.</param>
        <summary>Calcola l'offset o differenza tra l'ora in questo fuso orario e l'ora UTC (Coordinated Universal Time) per una particolare data e ora.</summary>
        <returns>Oggetto che indica la differenza di ora tra l'ora UTC (Coordinated Universal Time) e il fuso orario corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito include le eventuali differenze a causa l'applicazione delle regole di adeguamento del fuso orario corrente. Si differenzia dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà, che restituisce la differenza tra Coordinated Universal Time (UTC) e l'ora solare del fuso orario e, pertanto, non considerare le regole di regolazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente quando si calcola l'offset dall'ora UTC, se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non calcolare con precisione la differenza tra l'ora locale e l'ora UTC in <paramref name="dateTimeOffset" />. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">Secondo oggetto da confrontare con l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</param>
        <summary>Indica se l'oggetto corrente e un altro oggetto <see cref="T:System.TimeZoneInfo" /> hanno le stesse regole di regolazione.</summary>
        <returns>
          <see langword="true" /> se i due fusi orari hanno regole di regolazione identiche e un offset di base identico; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ad esempio il <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> (metodo), il <xref:System.TimeZoneInfo.HasSameRules%2A> metodo indica se i due fusi orari hanno lo stesso offset di base (come definito dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà) e le stesse regole di regolazione. A differenza di <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> (metodo), <xref:System.TimeZoneInfo.HasSameRules%2A> confronta gli identificatori di fuso orario (come definito dal <xref:System.TimeZoneInfo.Id%2A> proprietà).  
  
   
  
## Examples  
 In genere, un numero di fusi orari definiti nel Registro di sistema hanno lo stesso offset dall'ora di Greenwich (UTC) e le stesse regole di regolazione. Nell'esempio seguente visualizza un elenco di questi fusi orari nella console.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="other" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore del fuso orario.</summary>
        <value>Identificatore del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificatore del fuso orario è una stringa chiave che identifica in modo univoco un particolare fuso orario. In Windows XP e Windows Vista, corrisponde il sottochiavi del ramo HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zone del Registro di sistema. Può essere passato come parametro per il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo per recuperare un particolare fuso orario dal Registro di sistema.  
  
> [!IMPORTANT]
>  Anche se il nome di una chiave del Registro di sistema può contenere un massimo di 255 caratteri, è consigliabile che un identificatore assegnato a un fuso orario personalizzato 32 caratteri o meno. Più è lunga l'identificatore di, maggiore è la probabilità che un nome di chiave non corretto verrà fornita al momento del suo recupero.  
  
 Il valore di <xref:System.TimeZoneInfo.Id%2A> proprietà viene in genere, ma non sempre, identico a quello della <xref:System.TimeZoneInfo.StandardName%2A> proprietà. L'identificatore del fuso orario universale coordinato è UTC.  
  
   
  
## Examples  
 Nell'esempio seguente vengono elencati gli identificatori di ciascuno dei fusi orari definiti nel computer locale.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determina se una data e un'ora particolari in un fuso orario specifico sono ambigue o meno e se possono essere mappate a due o più ore UTC (Coordinated Universal Time).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valore di data e ora.</param>
        <summary>Determina se una data e un'ora particolari in un fuso orario specifico sono ambigue o meno e se possono essere mappate a due o più ore UTC (Coordinated Universal Time).</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="dateTime" /> è ambiguo; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora ambigua rientra in un intervallo di tempo per il fuso orario corrente. Ciò significa che può essere ora solare o un'ora risultante dall'applicazione di una regola di regolazione. In genere, le ore ambigue risultano quando l'orologio è impostato per restituire all'ora solare dall'ora legale. Vedere la sezione di esempio per un'illustrazione.  
  
 Tempo universale coordinato (UTC) non ha ore ambigue; per i fusi orari che non supportano ora legale. Di conseguenza, questi fusi orari non hanno regole di regolazione e le chiamate al <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> metodo restituiscono sempre `false`.  
  
 Per i fusi orari che osservano l'ora legale, il comportamento preciso di questo metodo dipende dalla relazione tra il <xref:System.DateTime.Kind%2A> proprietà e <xref:System.TimeZoneInfo> oggetto, come illustrato nella tabella seguente.  
  
|Tipo oggetto TimeZoneInfo|Valore della proprietà Kind|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se il `dateTime` parametro è ambiguo.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` all'ora locale e determina quindi se tale ora è ambigua.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Restituisce `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Se `dateTime` è ambiguo, presuppone che sia un'ora solare, lo converte in formato UTC e restituisce `false`.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` sull'ora nel fuso orario specificato e determina quindi se tale ora è ambigua.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` è ambiguo.|  
  
   
  
## Examples  
 Nel fuso orario del Pacifico, ora legale termina alle ore 2:00. il 4 novembre 2007. Nell'esempio seguente viene passata l'ora di intervalli di un minuto dalle ore 12:59 il 4 novembre 2007 per 2.01. il 4 novembre 2007, per il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metodo di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario del Pacifico. L'output della console indica che tutte le volte da 01:00. il 4 novembre 2007 a 01:59. il 4 novembre 2007, sono ambigue.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.DateTime.Kind" /> del valore <paramref name="dateTime" /> è <see cref="F:System.DateTimeKind.Local" /> e <paramref name="dateTime" /> rappresenta un'ora non valida.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora ambigua per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Data e ora.</param>
        <summary>Determina se una data e un'ora particolari in un fuso orario specifico sono ambigue o meno e se possono essere mappate a due o più ore UTC (Coordinated Universal Time).</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="dateTimeOffset" /> è ambiguo nel fuso orario corrente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora ambigua rientra in un intervallo di tempo per il fuso orario corrente. Ciò significa che può essere ora solare o un'ora risultante dall'applicazione di una regola di regolazione. In genere, le ore ambigue risultano quando l'orologio è impostato per restituire all'ora solare dall'ora legale. Tempo universale coordinato (UTC) non ha ore ambigue; per i fusi orari che non supportano ora legale.  
  
 Il comportamento preciso del metodo dipende dalla relazione tra il <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro e il fuso orario corrente. Se il valore di <xref:System.DateTimeOffset.Offset%2A> proprietà è un possibile offset dall'ora UTC del fuso orario corrente, il metodo determina se data e l'ora è ambiguo. In caso contrario, viene convertito `dateTimeOffset` sull'ora nel fuso orario corrente e determina quindi se data e l'ora è ambiguo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTimeOffset" /> è un'ora ambigua per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica se una data e un'ora specificate rientrano nell'intervallo dell'ora legale per il fuso orario dell'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valore di data e ora.</param>
        <summary>Indica se una data e un'ora specificate rientrano nell'intervallo dell'ora legale per il fuso orario dell'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="dateTime" /> è un'ora legale; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito di <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> è interessato dalla relazione tra il fuso orario rappresentato dal <xref:System.TimeZoneInfo> oggetto e <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Oggetto TimeZoneInfo|Proprietà DateTime. Kind|Risultato|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determina se `dateTime` è l'ora legale.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Converte `dateTime` da Coordinated Universal Time (UTC) in un'ora locale e determina se è l'ora legale.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Si presuppone che `dateTime` rappresenta l'ora locale e determina se è l'ora legale.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`o `DateTimeKind.Utc`|Restituisce `false` (ora UTC non supporta l'ora legale).|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Local`|Converte l'ora locale equivalente del <xref:System.TimeZoneInfo> dell'oggetto e determina quindi se quest'ultimo è l'ora legale.|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Utc`|Converte l'ora equivalente dell'ora UTC di <xref:System.TimeZoneInfo> dell'oggetto e determina quindi se quest'ultimo è l'ora legale.|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Unspecified`|Determina se `dateTime` è l'ora legale.|  
  
 Se il fuso orario è rappresentato dal <xref:System.TimeZoneInfo> oggetto non supporta l'ora legale, il metodo restituisce sempre `false`. Un numero di fusi orari, incluso <xref:System.TimeZoneInfo.Utc%2A>, non osservano l'ora legale.  Per determinare se un fuso orario supporta l'ora legale, recuperare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 Se il `dateTime` parametro specifica un'ora ambigua nel fuso orario dell'oggetto corrente e il <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo interpreta `dateTime` come ora solare e restituisce `false` se relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, questo metodo selezionerà l'ora ambigua corretta e indicare se si tratta di un'ora legale.  
  
 Poiché il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> metodo può restituire `false` per una data e un'ora ambigue (ovvero, data e ora che può rappresentare un'ora solare o un'ora legale in un particolare fuso orario), il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> metodo può essere associato con il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se un'ora può essere un'ora legale. Poiché un'ora ambigua è una classe che può essere sia un'ora legale e un'ora solare, il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metodo può essere chiamato prima per determinare se una data e ora può essere un'ora legale. Se il metodo restituisce `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo può essere chiamato per determinare se il <xref:System.DateTime> valore è un'ora legale. L'esempio seguente illustra questa tecnica.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Se il `dateTime` parametro specifica un'ora non valida, la chiamata al metodo genera un <xref:System.ArgumentException> se il valore della `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; in caso contrario, il metodo restituisce `false`.  
  
 Chiamare il <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo per determinare se utilizzare un fuso orario <xref:System.TimeZoneInfo.StandardName%2A> valore o il relativo <xref:System.TimeZoneInfo.DaylightName%2A> valore quando si visualizza il nome del fuso orario. Vedere la sezione di esempio per un'illustrazione.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.DateTime.Kind" /> del valore <paramref name="dateTime" /> è <see cref="F:System.DateTimeKind.Local" /> e <paramref name="dateTime" /> rappresenta un'ora non valida.</exception>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora legale per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Valore di data e ora.</param>
        <summary>Indica se una data e un'ora specificate rientrano nell'intervallo dell'ora legale per il fuso orario dell'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
        <returns>
          <see langword="true" /> se il parametro <paramref name="dateTimeOffset" /> è un'ora legale; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito di <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> è interessato dalla relazione tra il fuso orario rappresentato dal <xref:System.TimeZoneInfo> oggetto e <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro. Se `dateTimeOffset` non corrisponde all'offset del fuso orario corrente dal Coordinated Universal Time (UTC), il metodo converte l'ora nell'ora nel fuso orario corrente. Quindi, determina se la data e l'ora è un'ora legale.  
  
 Se il fuso orario è rappresentato dal <xref:System.TimeZoneInfo> oggetto non supporta l'ora legale, il metodo restituisce sempre `false`. Per determinare se un fuso orario supporta l'ora legale, recuperare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTimeOffset" /> è un'ora legale per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">Valore di data e ora.</param>
        <summary>Indica se una data e un'ora particolari non sono valide.</summary>
        <returns>
          <see langword="true" /> se <paramref name="dateTime" /> non è valido; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora non valida rientra in un intervallo di tempo per il fuso orario corrente che non può essere mappato a Coordinated Universal Time (UTC) a causa dell'applicazione di una regola di rettifica. In genere, le ore non valide verificano quando il tempo viene spostata in avanti all'ora legale. Vedere la sezione di esempio per un'illustrazione.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro ha effetto sulla se `dateTime` rappresenta un'ora non valida, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Oggetto TimeZoneInfo (se applicabile)|Comportamento|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determina se l'ora non è valido.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> o un fuso orario locale.|Converte `dateTime` all'ora del <xref:System.TimeZoneInfo> oggetto e restituisce `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Non applicabile.|Si presuppone `dateTime` è il tempo del <xref:System.TimeZoneInfo> dell'oggetto e determina se è valido.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non applicabile.|Restituisce `false`.|  
  
   
  
## Examples  
 Nel fuso orario del Pacifico, ora legale inizia alle 2:00. 2 aprile 2006. Il codice seguente l'ora viene passata a intervalli di un minuto da 01:59. 2 aprile 2006 alle 3:01. 2 aprile 2006, per il <xref:System.TimeZoneInfo.IsInvalidTime%2A> metodo di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario del Pacifico. L'output della console indica che tutte le volte dalle 2:00 2 aprile 2006, in ore 2 aprile 2006, non sono validi.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [!INCLUDE[winxp](~/includes/winxp-md.md)] sistemi, questo metodo si applica la regola di rettifica se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora non valida per periodi precedenti la regola di rettifica corrente. Per ulteriori informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.TimeZoneInfo" /> che rappresenta il fuso orario locale.</summary>
        <value>Oggetto che rappresenta il fuso orario locale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il fuso orario locale è il fuso orario del computer in cui è in esecuzione il codice.  
  
> [!IMPORTANT]
>  È necessario accedere sempre il fuso orario locale tramite la <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà anziché assegnare l'ora locale della zona per una <xref:System.TimeZoneInfo> variabile oggetto. In questo modo il <xref:System.TimeZoneInfo> variabile oggetto venga invalidata da una chiamata al <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo> oggetto restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà riflette l'impostazione del **imposta automaticamente per salvare le modifiche l'ora legale** casella di controllo o **imposta automaticamente il legale Tempo** casella di controllo nel Pannello di controllo **data e ora** dell'applicazione per Windows XP e Windows Vista, rispettivamente. Se la casella di controllo è deselezionata, la copia memorizzata nella cache del fuso orario locale non contiene l'ora legale informazioni. Vale a dire che:  
  
-   Il fuso orario locale <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo restituisce una matrice la cui lunghezza è pari a zero.  
  
-   Il fuso orario locale <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> restituisce proprietà `false`.  
  
-   Il fuso orario locale non ha non validi o ambigui ore (tutte le chiamate a <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> o <xref:System.TimeZoneInfo.IsInvalidTime%2A> restituire `false`).  
  
-   Tutte le chiamate a <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> con singole ore locali restituiscono false.  
  
 Ciò non è possibile, tuttavia, se un riferimento al fuso orario locale verrà recuperato utilizzando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo.Local%2A> proprietà corrisponde al <xref:System.TimeZone.CurrentTimeZone%2A> proprietà la <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>La conversione di date e ore, [!INCLUDE[winxp](~/includes/winxp-md.md)] riconosce solo la regola di regolazione corrente, che si applica a tutte le date, incluse le date di livello inferiore (ovvero, le date precedenti alla data di inizio della regola di regolazione corrente). In [!INCLUDE[winxp](~/includes/winxp-md.md)], per evitare di data e ora fornite dal <see cref="P:System.TimeZoneInfo.Local" /> oggetto divergente dalle informazioni di data e ora visualizzate nella barra delle applicazioni, il <see cref="T:System.TimeZoneInfo" /> oggetto restituito dal <see cref="P:System.TimeZoneInfo.Local" /> proprietà si applica anche il regola di rettifica corrente per le date di livello inferiore. Applicazioni in esecuzione su [!INCLUDE[winxp](~/includes/winxp-md.md)] che richiedono sempre accurata data locale e i calcoli temporali devono risolvere il problema utilizzando il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare un <see cref="T:System.TimeZoneInfo" /> oggetto che corrisponde al fuso orario locale.  
  
 Nell'esempio seguente viene illustrato questo concetto per un [!INCLUDE[winxp](~/includes/winxp-md.md)] sistema negli Stati Uniti. fuso orario Pacifico (Stati Uniti). Poiché i primi tre chiamate al metodo tutti utilizzare il fuso orario locale restituito dal <see cref="P:System.TimeZoneInfo.Local" /> proprietà si applica la regola di regolazione fuso orario corrente (quale entrata in effetto nel 2007) a una data nel 2006. La regola di rettifica corrente fornisce la transizione all'ora legale della seconda domenica del mese di marzo. la regola precedente, che era attivo nel 2006, fornito per la transizione all'ora legale prima domenica di aprile. Solo la quarta chiamata al metodo, che utilizza il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare il fuso orario locale, esegue in modo accurato il cronologiche conversione date e ore.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il nome visualizzato per l'ora solare del fuso orario.</summary>
        <value>Nome visualizzato dell'ora solare del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 Il <xref:System.TimeZoneInfo.StandardName%2A> è identica al <xref:System.TimeZone.StandardName%2A> proprietà la <xref:System.TimeZone> classe.  
  
 Se la lingua del sistema operativo è inglese, il valore di <xref:System.TimeZoneInfo.StandardName%2A> proprietà viene in genere, ma non sempre, identico a quello della <xref:System.TimeZoneInfo.Id%2A> proprietà.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il fuso orario include o meno regole di applicazione dell'ora legale.</summary>
        <value>
          <see langword="true" /> se il fuso orario supporta l'ora legale; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà per il fuso orario locale restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà riflette l'impostazione del Pannello di controllo **data e ora** casella di controllo dell'applicazione che definisce se il sistema automaticamente regola per l'ora legale. Se è deselezionata, o se viene visualizzata alcuna casella per un fuso orario, il valore di questa proprietà è `false`.  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperata una raccolta di tutti i fusi orari disponibili in un sistema locale e vengono visualizzati i nomi di quelli che non supportano ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Oggetto che ha avviato il callback. La funzionalità di questo parametro non è attualmente implementata.</param>
        <summary>Viene eseguito quando la deserializzazione di un oggetto è stata completata.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Oggetto <see cref="T:System.TimeZoneInfo" /> che contiene dati non validi o danneggiati.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da popolare con i dati.</param>
        <param name="context">Destinazione della serializzazione (vedere <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Compila un oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con i dati necessari per serializzare l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="info" /> è <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">richiede l'attendibilità totale per il chiamante immediato. Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente in una stringa serializzata.</summary>
        <returns>Stringa che rappresenta l'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Applicazioni che si basano sui fusi orari che non sono in genere definiti nel Registro di sistema dei sistemi Windows è possono utilizzare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo per creare un'istanza dei fusi orari necessari come <xref:System.TimeZoneInfo> oggetti. L'applicazione può quindi chiamare il <xref:System.TimeZoneInfo.ToSerializedString%2A> metodo per convertire l'oggetto fuso orario in una stringa.  
  
 Il <xref:System.TimeZoneInfo> oggetto deve inoltre essere archiviato in una posizione in cui l'applicazione può recuperare in caso di necessità. I possibili percorsi includono:  
  
-   Il Registro di sistema.  
  
-   Un file di risorse dell'applicazione.  
  
-   Un file esterno, ad esempio un file di testo.  
  
   
  
## Examples  
 Nell'esempio seguente tenta di recuperare il polo sud Antartide fuso orario del sistema locale. In caso contrario, il codice tenta di recuperare informazioni sul fuso orario da un file di testo nella directory dell'applicazione. Se questo tentativo non riesce, il codice crea il fuso orario e scrive le informazioni nel file di testo.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce il nome visualizzato dell'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</summary>
        <returns>Valore della proprietà <see cref="P:System.TimeZoneInfo.DisplayName" /> dell'oggetto <see cref="T:System.TimeZoneInfo" /> corrente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando l'assegnazione di una raccolta che contiene <xref:System.TimeZoneInfo> oggetti a un controllo elenco, ad esempio il <xref:System.Windows.Forms.ListBox> (controllo), il controllo chiama automaticamente il <xref:System.TimeZoneInfo.ToString%2A> metodo per estrarre una stringa che descrive ogni oggetto da rappresentare nell'elenco. Di conseguenza, non è necessario archiviare una descrizione significativa dell'oggetto sotto forma di stringa e l'utente non è necessario utilizzare tale stringa per estrarre l'oggetto dalla raccolta. Vedere [procedura: enumerare i fusi orari presenti in un Computer](~/docs/standard/datetime/enumerate-time-zones.md) per ulteriori dettagli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un oggetto <see cref="T:System.TimeZoneInfo" /> che rappresenta il fuso UTC (Coordinated Universal Time).</summary>
        <value>Oggetto che rappresenta il fuso UTC (Coordinated Universal Time).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo è un oggetto incorporato. informazioni su questo <xref:System.TimeZoneInfo> oggetto non viene recuperato dal Registro di sistema.  
  
> [!IMPORTANT]
>  È necessario accedere sempre l'orario Coordinated Universal Time (UTC) tramite il <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> proprietà anziché il fuso orario UTC per assegnare un <xref:System.TimeZoneInfo> variabile oggetto. In questo modo il <xref:System.TimeZoneInfo> variabile oggetto venga invalidata da una chiamata al <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo.  
  
 Ora di Greenwich era noto in precedenza come ora di Greenwich (GMT).  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta il tempo universale coordinato (UTC) e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>