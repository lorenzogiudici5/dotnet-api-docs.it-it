<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3190022f4f0c8167570d4dfa17fea05691d4aa2b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429348" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents any time zone in the world.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un fuso orario è un'area geografica nella quale si usa la stessa ora.  
  
 Il <xref:System.TimeZoneInfo> classe offre miglioramenti significativi rispetto il <xref:System.TimeZone> (classe), che fornisce solo funzionalità limitate.  
  
 Il <xref:System.TimeZone> classe riconosce solo il fuso orario locale e può convertire le ore tra l'ora UTC (Coordinated Universal Time) e l'ora locale. Un <xref:System.TimeZoneInfo> oggetto può rappresentare qualsiasi fuso orario e i metodi del <xref:System.TimeZoneInfo> classe può essere utilizzata per convertire l'ora di un fuso orario per l'ora corrispondente in qualsiasi altro fuso orario. I membri del <xref:System.TimeZoneInfo> classe supportano le operazioni seguenti:  
  
-   Recupero di un fuso orario che è già definito dal sistema operativo.  
  
-   L'enumerazione dei fusi orari disponibili in un sistema.  
  
-   Conversione degli orari tra fusi orari diversi.  
  
-   Creazione di un nuovo fuso orario non è già stato definito dal sistema operativo.  
  
-   La serializzazione di un fuso orario per il successivo recupero.  
  
> [!NOTE]
>  Un'istanza di <xref:System.TimeZoneInfo> classe non è modificabile. Dopo un oggetto è stata creata un'istanza, i relativi valori non possono essere modificati.  
  
 Non è possibile creare una <xref:System.TimeZoneInfo> dell'oggetto utilizzando il `new` (parola chiave). Al contrario, è necessario chiamare uno dei membri statici del <xref:System.TimeZoneInfo> classe illustrata nella tabella seguente.  
  
|Nome del membro statico|Descrizione|  
|------------------------|-----------------|  
|Metodo <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Crea un fuso orario personalizzato dai dati forniti dall'applicazione.|  
|Metodo <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Crea un'istanza di un fuso orario definito nel Registro di sistema in base all'identificatore della zona.|  
|Metodo <xref:System.TimeZoneInfo.FromSerializedString%2A>|Deserializza un valore stringa per ricreare un precedentemente serializzato <xref:System.TimeZoneInfo> oggetto.|  
|Metodo <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Restituisce un enumerabile <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> di <xref:System.TimeZoneInfo> gli oggetti che rappresentano tutti i fusi orari disponibili nel sistema locale.|  
|Proprietà <xref:System.TimeZoneInfo.Local%2A>|Crea un'istanza di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale.|  
|Proprietà <xref:System.TimeZoneInfo.Utc%2A>|Crea un'istanza di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso UTC.|  
  
 È possibile utilizzare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> i metodi per creare un fuso orario non definito nel Registro di sistema locale. È quindi possibile usare il <xref:System.TimeZoneInfo.ToSerializedString%2A> proprietà per salvare le informazioni dell'oggetto fuso orario sotto forma di stringa, che può essere archiviato in diversi formati che sono possibile accedere all'applicazione. È possibile usare il <xref:System.TimeZoneInfo.FromSerializedString%2A> eseguire il metodo per convertire una stringa serializzata in un <xref:System.TimeZoneInfo> oggetto.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</summary>
        <value>Oggetto che indica la differenza tra l'ora solare del fuso orario corrente e l'ora UTC (Coordinated Universal Time).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà è compreso tra 14 ore (per un fuso orario è di 14 ore rispetto all'ora UTC (Coordinated Universal Time)) e (per un fuso orario è di 14 ore rispetto all'ora UTC) di-14 ore. Fusi orari in anticipo UTC hanno un offset positivo; fusi orari cui sono rispetto all'ora UTC hanno un offset negativo.  
  
 Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> valore viene rappresentato come un numero intero di minuti. Non può includere un numero di minuti frazionario.  
  
> [!NOTE]
>  Poiché <xref:System.TimeZoneInfo.BaseUtcOffset%2A> è una proprietà del <xref:System.TimeZoneInfo> oggetto anziché il <xref:System.TimeZoneInfo.AdjustmentRule> oggetto, il <xref:System.TimeZoneInfo> classe viene applicata solo un offset dall'ora UTC tutte le regolazioni del fuso orario di. Per riflettere un fuso orario che ha modificato l'offset rispetto a UTC, è necessario creare un nuovo fuso orario utilizzando i <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> rispetto alla proprietà di <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo nei modi seguenti:  
  
-   Il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà restituisce la differenza tra l'ora UTC e l'ora solare del fuso orario; il <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo restituisce la differenza tra l'ora UTC e del fuso orario in un particolare punto nel tempo.  
  
-   Il <xref:System.TimeZoneInfo.GetUtcOffset%2A> metodo riflette l'applicazione di tutte le regole di regolazione fuso orario corrente; il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà non lo è.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà per visualizzare la differenza tra l'ora locale e l'ora UTC (Coordinated Universal Time).  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears cached time zone data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fuso orario memorizzati nella cache dati includono dati sul fuso orario locale, il fuso ora UTC (Coordinated Universal Time) e tutti i fusi orari vengono recuperati tramite metodi, ad esempio <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> e <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>.  
  
 È possibile chiamare il <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo per ridurre la memoria dedicato alla cache dell'applicazione di informazioni sul fuso orario o in modo da riflettere il fatto che è stato modificato fuso orario del sistema locale.  
  
 L'archiviazione di riferimenti al fuso orario UTC e locali non è consigliata. Dopo la chiamata ai <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo, queste variabili oggetto saranno non definite <xref:System.TimeZoneInfo> oggetti che non sono più riferimenti a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Ad esempio, nel codice seguente, la seconda chiamata ai <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodo genera un <xref:System.ArgumentException> perché il `local` variabile non è più considerata uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in a particular time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Questo overload del <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> metodo determina il fuso orario di origine dal valore della `dateTime` parametro <xref:System.DateTime.Kind%2A> proprietà, come illustrato nella tabella seguente.  
  
|Valore della proprietà Kind|Fuso orario di origine|Comportamento del metodo|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte l'ora locale nell'ora `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte l'ora UTC (Coordinated Universal Time) nell'ora `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone che sia <xref:System.TimeZoneInfo.Local%2A>.|Converte l'ora locale nell'ora `destinationTimeZone`.|  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|L'elemento `destinationTimeZone` è <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|L'elemento `destinationTimeZone` è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Tutti gli altri valori di data e ora e fusi orari di destinazione.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora locale ambigua, viene interpretato come un'ora solare. Se il `dateTime` parametro è un'ora locale non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora che è anteriore <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 È anche possibile convertire a o dall'ora UTC chiamando il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente converte una matrice di valori data e ora a volte il fuso orario orientale di Stati Uniti e Canada. Viene illustrato che il fuso orario di origine dipende il <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> proprietà dell'origine <xref:System.DateTime> valore. Viene inoltre illustrato che il <xref:System.TimeZoneInfo.ConvertTime%2A> metodo accetta regolazioni del fuso orario in considerazione, perché si verifica una regolazione del fuso orario nel fuso orario di origine e di destinazione a 2 ore 1.00 del mattino 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The value of the <paramref name="dateTime" /> parameter represents an invalid time.</exception>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo riconosce solo la regola di rettifica corrente quando si esegue la conversione se <paramref name="dateTime" /> viene trattato come un'ora locale o se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time to the time in a particular time zone.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Questo overload differisce dagli altri overload del <xref:System.TimeZoneInfo.ConvertTime%2A> metodo accettando un <xref:System.DateTimeOffset> valore come primo parametro. Identifica la data e l'ora come offset dall'ora Coordinated Universal Time (UTC) anziché come data e ora in un particolare fuso orario. Di conseguenza, il `dateTimeOffset` parametro non può rappresentare un'ora ambigua o un'ora non valida.  
  
 Nella conversione di `dateTimeOffset` valore con l'ora nel fuso orario di destinazione, questo metodo prende in considerazione tutte le regole di regolazione attiva nel fuso orario di destinazione.  
  
 Se la conversione di `dateTimeOffset` restituisce un valore di data e ora che è anteriore <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente converte una matrice di <xref:System.DateTimeOffset> valori a volte il fuso orario orientale degli Stati Uniti e Canada. Viene illustrato che il <xref:System.TimeZoneInfo.ConvertTime%2A> metodo accetta regolazioni del fuso orario in considerazione, perché si verifica una regolazione del fuso orario nel fuso orario di origine e di destinazione a 2 ore 1.00 del mattino 7 novembre 2010.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The value of the <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="dateTimeOffset" /> viene trattato come un'ora locale o se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a time from one time zone to another.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTime%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro deve corrispondere al `sourceTimeZone` parametro, come illustrato nella tabella seguente.  
  
|Valore DateTime. Kind|valore sourceTimeZone|Comportamento del metodo|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|È uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Converte `dateTime` per orario la destinazione del fuso.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non è uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|È uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Converte `dateTime` per orario la destinazione del fuso.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Non è uguale a <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualsiasi.|Converte `dateTime` per orario la destinazione del fuso.|  
  
 È anche possibile convertire a o da Coordinated Universal Time (UTC) chiamando il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> e <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodi.  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|Il valore dell'argomento `destinationTimeZone` è <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Il valore dell'argomento `destinationTimeZone` è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Tutte le altre data e i valori di ora, fuso orario di origine e fusi orari di destinazione.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora ambigua nel fuso orario di origine, viene interpretato come un'ora solare. Se il `dateTime` parametro è un'ora non valida nel fuso orario di origine, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora che è anteriore <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 Il <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metodo genera un <xref:System.ArgumentException> eccezione se il <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> proprietà del `dateTime` argomento è <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ma la `sourceTimeZone` argomento non è <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Per determinare se il fuso orario di origine è il fuso orario locale o il fuso orario universal, il metodo verifica l'uguaglianza dei riferimenti anziché test per l'uguaglianza di valori con il <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodo. Si noti che <xref:System.TimeZoneInfo> gli oggetti che rappresentano il fuso orario locale e che vengono recuperati chiamando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (metodo) non sono dotati di uguaglianza referenziale con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Inoltre, <xref:System.TimeZoneInfo> gli oggetti che rappresentano i locale o un fuso orario universal e che vengono recuperati scorrendo la raccolta restituita dal <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> (metodo) non sono dotati di uguaglianza referenziale con <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. In alternativa, è possibile chiamare il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> metodo per la conversione da Hawaii ora solare all'ora locale.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Local" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="F:System.DateTimeKind.Local" />.  -or-  The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter is <see cref="F:System.DateTimeKind.Utc" />, but the <paramref name="sourceTimeZone" /> parameter does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  The <paramref name="dateTime" /> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="sourceTimeZone" /> parameter is <see langword="null" />.  -or-  The <paramref name="destinationTimeZone" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente quando si esegue la conversione se <paramref name="dateTime" /> viene considerato come un'ora locale, se <paramref name="sourceTimeZone" /> viene <see cref="P:System.TimeZoneInfo.Local" />, oppure se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a time to the time in another time zone based on a time zone identifier.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Questo overload è in gran parte identico alla chiamata di <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> (metodo), ad eccezione del fatto che consente di specificare il fuso orario di destinazione dal rispettivo identificatore piuttosto che da un riferimento all'oggetto. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza doverli recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita è standard o l'ora legale.  
  
 Il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> metodo determina il fuso orario di origine dal valore della `dateTime` parametro <xref:System.DateTime.Kind%2A> proprietà, come illustrato nella tabella seguente.  
  
|Valore della proprietà Kind|Fuso orario di origine|Comportamento del metodo|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Converte l'ora locale nell'ora `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Converte l'ora UTC (Coordinated Universal Time) nell'ora `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone che sia <xref:System.TimeZoneInfo.Local%2A>.|Converte l'ora locale nell'ora `destinationTimeZone`.|  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore viene impostato come illustrato nella tabella seguente.  
  
|Condizione|Ha restituito il valore della proprietà Kind|  
|---------------|----------------------------------|  
|L'elemento `destinationTimeZone` è `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Qualsiasi altro `destinationTimeZone` valore.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Se il valore di `dateTime` parametro è un'ora locale ambigua, viene interpretato come un'ora solare. Se il `dateTime` parametro è un'ora locale non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora che è anteriore <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 Questo metodo recupera il fuso orario cui identificatore viene specificato per il `destinationTimeZoneId` parametro dal Registro di sistema. Non è possibile recuperare un oggetto fuso orario che viene creato utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Il `destinationTimeZoneId` parametro deve corrispondere esattamente alla chiave del Registro di sistema del fuso orario di lunghezza, ma non nel caso, per una corrispondenza corretta a verificarsi; vale a dire, il confronto di `destinationTimeZoneId` con fuso orario è tra maiuscole e minuscole degli identificatori.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to convert.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time to the time in another time zone based on the time zone's identifier.</summary>
        <returns>The date and time in the destination time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Questo overload è identico alla chiamata di <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> (metodo), ad eccezione del fatto che consente di specificare il fuso orario di destinazione dal rispettivo identificatore piuttosto che da un riferimento all'oggetto. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza doverli recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita è standard o l'ora legale.  
  
 Poiché il `dateTimeOffset` rappresenta una data e dall'ora Coordinated Universal Time (UTC) di offset dell'ora insieme a quel momento, non può rappresentare un'ora ambigua o un'ora non valida.  
  
 Questo metodo recupera il fuso orario cui identificatore viene specificato per il `destinationTimeZoneId` parametro dal Registro di sistema. Non è possibile recuperare un oggetto fuso orario che viene creato utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Il `destinationTimeZoneId` parametro deve corrispondere esattamente alla chiave del Registro di sistema del fuso orario di lunghezza, ma non nel caso, per una corrispondenza corretta a verificarsi; vale a dire, il confronto di `destinationTimeZoneId` con fuso orario è tra maiuscole e minuscole degli identificatori.  
  
 Nella conversione di `dateTimeOffset` valore con l'ora nel fuso orario di destinazione, il metodo prende in considerazione tutte le regole di regolazione attiva nel fuso orario di destinazione.  
  
 Se la conversione di `dateTimeOffset` restituisce un valore di data e ora che è anteriore <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> o <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZoneId">The identifier of the source time zone.</param>
        <param name="destinationTimeZoneId">The identifier of the destination time zone.</param>
        <summary>Converts a time from one time zone to another based on time zone identifiers.</summary>
        <returns>The date and time in the destination time zone that corresponds to the <paramref name="dateTime" /> parameter in the source time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZoneId` fuso orario.  
  
 Anche se è simile ai <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> metodo, è possibile utilizzare <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> per specificare i fusi orari di origine e di destinazione utilizzando i rispettivi identificatori anziché i relativi <xref:System.TimeZoneInfo> oggetti. Questo metodo è particolarmente utile quando è necessario convertire un'ora senza doverli recuperare l'oggetto fuso orario che corrisponde a tale e non è necessario sapere se l'ora convertita è standard o l'ora legale.  
  
 Questo metodo recupera i fusi orari con gli identificatori sono il `sourceTimeZoneId` e `destinationTimeZoneId` parametri dal Registro di sistema. Non è possibile recuperare gli oggetti fuso orario che vengono creati utilizzando il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro deve corrispondere al `sourceTimeZoneId` parametro, come illustrato nella tabella seguente.  
  
|Valore DateTime. Kind|valore sourceTimeZone|Comportamento del metodo|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|È uguale a `TimeZoneInfo.Utc.Id`.|Converte `dateTime` per orario la destinazione del fuso.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non è uguale a `TimeZoneInfo.Utc.Id`.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|È uguale a `TimeZoneInfo.Local.Id`.|Converte `dateTime` per orario la destinazione del fuso.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Non è uguale a `TimeZoneInfo.Local.Id`.|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Qualsiasi.|Converte `dateTime` per orario la destinazione del fuso.|  
  
 Poiché si basa sulle chiamate per il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo, il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> metodo esegue una ricerca tra maiuscole e minuscole per individuare i fusi orari che corrispondono ai `sourceTimeZoneId` e `destinationTimeZoneId`.  
  
 Se il valore di `dateTime` parametro è un'ora ambigua nel fuso orario di origine, viene interpretato come un'ora solare. Se il `dateTime` parametro è un'ora non valida nel fuso orario di origine, questo metodo genera un <xref:System.ArgumentException>.  
  
 Il <xref:System.DateTime.Kind%2A> proprietà dell'oggetto restituito <xref:System.DateTime> valore è impostato su <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> , a meno che il fuso orario di destinazione è ora UTC (Coordinated Universal Time), nel qual caso è impostata su <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> metodo per visualizzare l'ora che corrisponde all'ora di sistema locale in otto città del mondo.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> parameter does not correspond to the source time zone.  -or-  <paramref name="dateTime" /> is an invalid time in the source time zone.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZoneId" /> is <see langword="null" />.  -or-  <paramref name="destinationTimeZoneId" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifiers were found, but the registry data is corrupted.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry keys that hold time zone data.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The <paramref name="sourceTimeZoneId" /> identifier was not found on the local system.  -or-  The <paramref name="destinationTimeZoneId" /> identifier was not found on the local system.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The Coordinated Universal Time (UTC).</param>
        <param name="destinationTimeZone">The time zone to convert <c>dateTime</c> to.</param>
        <summary>Converts a Coordinated Universal Time (UTC) to the time in a specified time zone.</summary>
        <returns>The date and time in the destination time zone. Its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Utc" /> if <paramref name="destinationTimeZone" /> is <see cref="P:System.TimeZoneInfo.Utc" />; otherwise, its <see cref="P:System.DateTime.Kind" /> property is <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si esegue la conversione, il <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> metodo si applica a tutte le regole di regolazione attiva nel `destinationTimeZone` fuso orario.  
  
 Il comportamento preciso di questo metodo dipende dal valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Conversione|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Genera un <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Conversione dall'ora UTC (Coordinated Universal Time).|  
  
 Se la conversione di `dateTime` restituisce un valore di data e ora che è anteriore <xref:System.DateTime.MinValue?displayProperty=nameWithType> o successiva a <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue?displayProperty=nameWithType> o <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente converte l'ora UTC (Coordinated Universal Time) fuso centrale.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of <paramref name="dateTime" /> is <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="destinationTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Converts a date and time to Coordinated Universal Time (UTC).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <summary>Converts the specified date and time to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> value's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifico di conversione eseguita dipende dal valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Conversione|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Converte l'ora locale in Coordinated Universal Time (UTC).|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Si presuppone `dateTime` ora locale e converte l'ora locale in ora UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Restituisce `dateTime` subisce modifiche.|  
  
 Se `dateTime` corrisponde a un'ora ambigua locale, questo metodo presuppone che sia standard ora locale. Se `dateTime` corrisponde a un'ora locale non valida, il metodo genera un <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Se il computer corrente locale del fuso orario include più regole di regolazione, questo overload del <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> metodo può restituire risultati diversi dai <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> e <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> metodi. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> applica sempre la regola di rettifica corrente per la conversione di fuso orario, o meno `dateTime` rientri nell'intervallo di date relative. E quando si esegue in [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> si applica anche la regola di rettifica corrente per la conversione di fuso orario, o meno `dateTime` rientri nell'intervallo di date relative.  
  
 Se l'ora UTC equivalente della `dateTime` è precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o versioni successive che <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la conversione di valori di ora la cui proprietà <xref:System.DateTime.Kind%2A> proprietà è <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, e <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, rispettivamente. Illustra anche la conversione dell'ora validi e non ambiguo.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> returns <see langword="true" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to convert.</param>
        <param name="sourceTimeZone">The time zone of <c>dateTime</c>.</param>
        <summary>Converts the time in a specified time zone to Coordinated Universal Time (UTC).</summary>
        <returns>The Coordinated Universal Time (UTC) that corresponds to the <paramref name="dateTime" /> parameter. The <see cref="T:System.DateTime" /> object's <see cref="P:System.DateTime.Kind" /> property is always set to <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro uguale <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> e il `sourceTimeZone` parametro è uguale a <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, questo metodo restituisce `dateTime` senza eseguire alcuna conversione.  
  
 Se `dateTime` corrisponde a un'ora ambigua, questo metodo presuppone che sia l'ora solare del fuso orario di origine. Se `dateTime` corrisponde a un'ora non valida, questo metodo genera un <xref:System.ArgumentException>.  
  
 Se l'equivalente di ora UTC (Coordinated Universal Time) di `dateTime` è precedente a <xref:System.DateTime.MinValue?displayProperty=nameWithType> o versioni successive che <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, questo metodo restituisce <xref:System.DateTime.MinValue> o <xref:System.DateTime.MaxValue>, rispettivamente.  
  
   
  
## Examples  
 Nell'esempio seguente recupera la data corrente dal sistema locale e lo converte in Coordinated Universal Time (UTC), quindi lo converte per ora solare Tokyo e infine riconvertita dall'ora solare Tokyo in UTC. Si noti che le due ore UTC siano identiche.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" />
          <see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Utc" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Utc" />.  -or-  <paramref name="dateTime" /><see langword=".Kind" /> is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="sourceTimeZone" /> does not equal <see cref="P:System.TimeZoneInfo.Local" />.  -or-  <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> returns <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sourceTimeZone" /> is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], il metodo si applica solo alla regola di rettifica corrente per la conversione del fuso orario se <paramref name="sourceTimeZone" /> è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo non può in modo accurato convertire volte per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Defines a time zone that is not found on the local computer.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The name of the new time zone's standard time.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, and a standard time display name.</summary>
        <returns>The new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> metodo è adatto per la creazione di un fuso orario senza rettifiche (vale a dire un fuso orario che non supporta l'ora legale). Per definire un fuso orario che include le regolazioni dell'ora legale, usare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo e le proprietà del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Proprietà TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario se stesso, o di uno o più delle città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Nell'esempio seguente crea un fuso orario personalizzato per le aree Mawson e Holme Bay dell'Antartide. Viene quindi visualizzato il risultato della conversione dell'ora locale per l'ora nel fuso orario di nuovo.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">An object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The new time zone's standard time name.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array that augments the base UTC offset for a particular period.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, and daylight saving time rules.</summary>
        <returns>A <see cref="T:System.TimeZoneInfo" /> object that represents the new time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo è adatto per la creazione di un fuso orario che supporta l'ora legale. Per definire un fuso orario che non supporta l'ora legale, usare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> o <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo e i membri del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Membro TimeZoneInfo|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Una matrice di <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo.|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario se stesso, o di uno o più delle città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Il `baseUtcOffset` parametro definisce l'offset del fuso orario personalizzato da Coordinated Universal Time (UTC) per tutte le regole di regolazione del fuso orario. In altre parole, il <xref:System.TimeZoneInfo> modello a oggetti si presuppone che offset del fuso orario dall'ora UTC costante per tutta la durata del fuso orario ed esiste indipendenti particolari regole di regolazione. Per riflettere un fuso orario che è stato modificato all'offset dall'ora UTC, è necessario creare un nuovo oggetto fuso orario.  
  
 Regole di regolazione del fuso orario sono definite come segue:  
  
1.  Una chiamata ai <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodo per definire l'inizio e fine ora di transizione per ogni regola di rettifica.  
  
2.  La chiamata di <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metodo per ogni regola di rettifica.  
  
3.  Le regole di regolazione assegnazione a una matrice che può essere passato come il `adjustmentRules` parametro.  
  
   
  
## Examples  
 Nell'esempio seguente crea un fuso orario personalizzato per la stazione Palmer e isola Anvers ore. Quindi, converte l'ora locale nell'ora il nuovo fuso orario e viene visualizzato il risultato.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="standardDisplayName" Type="System.String" />
        <Parameter Name="daylightDisplayName" Type="System.String" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="id">The time zone's identifier.</param>
        <param name="baseUtcOffset">A <see cref="T:System.TimeSpan" /> object that represents the time difference between this time zone and Coordinated Universal Time (UTC).</param>
        <param name="displayName">The display name of the new time zone.</param>
        <param name="standardDisplayName">The standard time name of the new time zone.</param>
        <param name="daylightDisplayName">The daylight saving time name of the new time zone.</param>
        <param name="adjustmentRules">An array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that augment the base UTC offset for a particular period.</param>
        <param name="disableDaylightSavingTime">
          <see langword="true" /> to discard any daylight saving time-related information present in <c>adjustmentRules</c> with the new object; otherwise, <see langword="false" />.</param>
        <summary>Creates a custom time zone with a specified identifier, an offset from Coordinated Universal Time (UTC), a display name, a standard time name, a daylight saving time name, daylight saving time rules, and a value that indicates whether the returned object reflects daylight saving time information.</summary>
        <returns>The new time zone. If the <paramref name="disableDaylightSavingTime" /> parameter is <see langword="true" />, the returned object has no daylight saving time data.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo overload del metodo di <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> i metodi per creare un fuso orario personalizzato con supporto per l'ora legale può essere determinato tramite condizioni in fase di esecuzione.  
  
 Nella tabella seguente viene illustrata la relazione tra i parametri forniti per il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo e i membri del <xref:System.TimeZoneInfo> oggetto restituiti dalla chiamata al metodo.  
  
|Parametro CreateCustomTimeZone|Proprietà TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Se `disableDaylightSavingTime` è `false`; <xref:System.String.Empty?displayProperty=nameWithType> se `disableDaylightSavingTime` è `true`.|  
|`adjustmentRules`|Una matrice di <xref:System.TimeZoneInfo.AdjustmentRule> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo se `disableDaylightSavingTime` viene `false`; una matrice vuota restituita dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> (metodo) se `disableDaylightSavingTime` è `true`.|  
|`disableDaylightSavingTime`|Non <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Nome dell'ora solare del fuso orario e il relativo identificatore sono in genere, gli stessi. Tuttavia, la lunghezza dell'identificatore del fuso orario non deve superare i 32 caratteri. La stringa passata al `displayName` parametro segue un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. È seguito da una stringa che identifica il fuso orario se stesso, o di uno o più delle città, aree o paesi nel fuso orario o entrambi. Ad esempio:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Regole di regolazione del fuso orario sono definite come segue:  
  
1.  Una chiamata ai <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> o <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> metodo per definire gli iniziale e finale delle regole di transizione per ogni regola di rettifica.  
  
2.  La chiamata di <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> metodo per ogni regola di rettifica.  
  
3.  Le regole di regolazione assegnazione a una matrice che può essere passato come il `adjustmentRules` parametro.  
  
 Se `disableDaylightSavingTime` parametro `false`, l'operazione di questo metodo è identico al <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> rapporto di overload. Se `disableDaylightSavingTime` viene `true`, l'oggetto restituito non include alcuna regola di rettifica e <xref:System.TimeZoneInfo.DaylightName%2A> proprietà il cui valore è una stringa vuota.  
  
   
  
## Examples  
 Nell'esempio seguente crea un fuso orario personalizzato per la stazione Palmer e isola Anvers ore. Imposta il `disableDaylightSavingTime` parametro nella chiamata ai <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> metodo `true`. Viene quindi visualizzato il nome nuovo fuso orario dell'ora legale, se ne è presente e il numero di regole di regolazione per verificare che il nuovo fuso orario non abbia Nessuna informazione dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="id" /> parameter is an empty string ("").  -or-  The <paramref name="baseUtcOffset" /> parameter does not represent a whole number of minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="baseUtcOffset" /> parameter is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter overlap.  -or-  The adjustment rules specified in the <paramref name="adjustmentRules" /> parameter are not in chronological order.  -or-  One or more elements in <paramref name="adjustmentRules" /> are <see langword="null" />.  -or-  A date can have multiple adjustment rules applied to it.  -or-  The sum of the <paramref name="baseUtcOffset" /> parameter and the <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> value of one or more objects in the <paramref name="adjustmentRules" /> array is greater than 14 hours or less than -14 hours.</exception>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the current time zone's daylight saving time.</summary>
        <value>Nome visualizzato per l'ora legale del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 Un <xref:System.TimeZoneInfo.DaylightName%2A> proprietà il cui valore non è <xref:System.String.Empty?displayProperty=nameWithType> o `null` non indica necessariamente che il fuso orario supporta l'ora legale. Per determinare se il fuso orario supporta l'ora legale, controllare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 Nella maggior parte dei casi, il <xref:System.TimeZoneInfo.DaylightName%2A> proprietà di fusi orari definiti nel Registro di sistema non è <xref:System.String.Empty?displayProperty=nameWithType> o `null`. Tuttavia, il <xref:System.TimeZoneInfo.DaylightName%2A> fusi orari personalizzati può essere impostata su <xref:System.String.Empty?displayProperty=nameWithType>. Ciò si verifica quando fusi orari personalizzati creati tramite il <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> o il <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> overload e il `disableDaylightSavingTime` parametro è `true`. Pertanto, il codice non deve mai presupporre che il valore di <xref:System.TimeZoneInfo.DaylightName%2A> proprietà non è `null` o vuoto.  
  
 Il <xref:System.TimeZoneInfo.DaylightName%2A> proprietà è equivalente al <xref:System.TimeZone.DaylightName%2A> proprietà del <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the general display name that represents the time zone.</summary>
        <value>Nome visualizzato generale del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 I nomi visualizzati di fuso orario per fusi orari di sistema Windows seguono un formato pressoché standard. La prima parte del nome visualizzato è l'offset di base del fuso orario dall'ora UTC, indicata dall'acronimo GMT (Greenwich Mean Time), racchiuso tra parentesi. Di Coordinated Universal Time, l'acronimo GMT senza offset è racchiuso tra parentesi.  È seguito da una stringa che identifica il fuso orario o uno o più città, aree o paesi nel fuso orario. Ad esempio:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale. L'output viene visualizzato per un sistema negli Stati Uniti Ora solare del Pacifico (Stati Uniti).  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether two <see cref="T:System.TimeZoneInfo" /> objects are equal.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another object are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.TimeZoneInfo" /> object that is equal to the current instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue la conversione o esegue il cast `obj` a un <xref:System.TimeZoneInfo> dell'oggetto e lo confronta con l'istanza corrente. Il test di uguaglianza si basa su un confronto di valori. L'oggetto corrente <xref:System.TimeZoneInfo> istanza e `obj` sono considerati uguali nelle condizioni seguenti:  
  
-   Il tipo di runtime del `obj` è <xref:System.TimeZoneInfo>.  
  
-   I due oggetti hanno lo stesso <xref:System.TimeZoneInfo.Id%2A> valore della proprietà.  
  
-   I due oggetti hanno le stesse regole di regolazione.  
  
 Se `obj` è `null`, questo metodo restituisce `false`.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.Equals%28System.Object%29> metodo per determinare se il fuso orario locale è Pacifico o fuso orientale.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uguaglianza si basa su un confronto di valori. Due <xref:System.TimeZoneInfo> gli oggetti sono considerati uguali nelle condizioni seguenti:  
  
-   Il valore della loro <xref:System.TimeZoneInfo.Id%2A> proprietà è lo stesso.  
  
-   Hanno le stesse regole di regolazione.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Restituisce il valore booleano risultante dalla valutazione dell'espressione seguente:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Se il `other` parametro è un valore non inizializzato <xref:System.TimeZoneInfo> dell'oggetto, questo metodo restituisce `false`.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> metodo per determinare se il fuso orario locale è Pacifico o fuso orientale.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">The time zone identifier, which corresponds to the <see cref="P:System.TimeZoneInfo.Id" /> property.</param>
        <summary>Retrieves a <see cref="T:System.TimeZoneInfo" /> object from the registry based on its identifier.</summary>
        <returns>An object whose identifier is the value of the <paramref name="id" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `id` parametro deve corrispondere esattamente alla chiave del Registro di sistema del fuso orario di lunghezza, ma non nel caso, per una corrispondenza corretta a verificarsi; vale a dire, il confronto di `id` con fuso orario è tra maiuscole e minuscole degli identificatori. Se si desidera recuperare oggetti fuso orario in base alle corrispondenze parziali, è possibile scrivere procedure personalizzate che funzionano con la raccolta di sola lettura <xref:System.TimeZoneInfo> gli oggetti restituiti dal <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metodo.  
  
 <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> tenta di far corrispondere `id` per i nomi delle sottochiavi del ramo HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del Registro di sistema in Windows XP e Windows Vista. Questo ramo non contiene necessariamente un elenco completo di identificatori del fuso orario. Se richiesto da un'applicazione, è possibile creare un particolare fuso orario chiamando uno degli overload del <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo o chiamando <xref:System.TimeZoneInfo.FromSerializedString%2A> per deserializzare un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario necessario. Tuttavia, fusi orari creati tramite le chiamate ai metodi non sono inclusi nel Registro di sistema e non può essere recuperati tramite il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo. Questi fusi orari personalizzati sono accessibili solo tramite il riferimento all'oggetto restituito dal <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> o <xref:System.TimeZoneInfo.FromSerializedString%2A> chiamata al metodo.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo per recuperare il fuso ora solare Tokyo. Ciò <xref:System.TimeZoneInfo> oggetto viene quindi utilizzato per convertire l'ora locale all'ora di Tokyo e per determinare se è Tokyo o l'ora legale Tokyo.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to hold information about the time zone.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="id" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">The time zone identifier specified by <paramref name="id" /> was not found. This means that a registry key whose name matches <paramref name="id" /> does not exist, or that the key exists but does not contain any time zone data.</exception>
        <exception cref="T:System.Security.SecurityException">The process does not have the permissions required to read from the registry key that contains the time zone information.</exception>
        <exception cref="T:System.InvalidTimeZoneException">The time zone identifier was found, but the registry data is corrupted.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The string representation of the serialized <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Deserializes a string to re-create an original serialized <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>The original serialized object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È tutto il codice necessario per creare un fuso orario che non viene trovato nel Registro di sistema di fornire. È possibile definire un fuso orario personalizzato e utilizzare il <xref:System.TimeZoneInfo.ToSerializedString%2A> metodo in un file eseguibile autonomo oppure utilizzare il programma di installazione dell'applicazione per salvare il fuso orario sotto forma di stringa. L'applicazione può quindi recuperare tale stringa dal percorso di archiviazione e crearne un'istanza utilizzando il <xref:System.TimeZoneInfo.FromSerializedString%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente tenta di recuperare il polo sud Antartide fuso orario di sistema locale. In caso contrario, il codice tenta di recuperare informazioni sul fuso orario da un file di testo nella directory dell'applicazione. Se questo tentativo non riesce, il codice crea il fuso orario e scrive le informazioni sul fuso orario per il file di testo.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="source" /> parameter is <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is a null string.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The source parameter cannot be deserialized back into a <see cref="T:System.TimeZoneInfo" /> object.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves an array of <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects that apply to the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>An array of objects for this time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo recupera una matrice di <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> oggetti. Ogni oggetto nella matrice definisce la data di inizio e di fine validità di tale regolazione del fuso orario, nonché il relativo delta (la quantità esatta che provoca il tempo necessario per modificare la regolazione). Inoltre, due proprietà restituiscono <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> oggetti che definiscono quando si verifica ogni transizione annuale per e dall'ora solare.  
  
 Se un fuso orario dispone di più regole di regolazione, vengono in genere ordinati dal meno recente (in corrispondenza dell'indice 0) alla versione più recente (in corrispondenza dell'indice <xref:System.Array.Length%2A> – 1).  
  
 Se non dispone di un fuso orario regole di regolazione, i <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo restituisce una matrice vuota (una matrice il cui <xref:System.Array.Length%2A> è uguale a zero).  
  
 Tutte le modifiche agli elementi della matrice restituita dal <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> (metodo) non vengono riflesse nelle regole di regolazione che appartengono a un particolare fuso orario. Per modificare le regole di regolazione del fuso orario (ad esempio per riflettere la transizione cronologica da e verso l'ora legale) è necessario creare un nuovo fuso orario con le regole di regolazione appropriato, anziché modificare quella esistente.  
  
   
  
## Examples  
 L'esempio seguente recupera tutti i fusi orari definiti nelle informazioni complete di sistema e consente di visualizzare locale sulle regole di regolazione nella console.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">The system does not have enough memory to make an in-memory copy of the adjustment rules.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento preciso di questo metodo dipende dalla relazione tra i <xref:System.DateTime.Kind%2A> proprietà e il <xref:System.TimeZoneInfo> oggetto, come illustrato nella tabella seguente.  
  
|Tipo di oggetto TimeZoneInfo|Valore della proprietà Kind|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Ora ambigua restituisce gli offset per `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` in ora locale e quindi restituisce ora ambigua viene eseguito l'offset per tale intervallo di tempo.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Qualsiasi valore.|Genera un <xref:System.ArgumentException>.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Local> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` per il fuso orario specificato e determina quindi se tale orario cade ambiguo.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` è ambiguo nel fuso orario specificato.|  
  
 L'ordine delle <xref:System.TimeSpan> oggetti nella matrice restituita da questo metodo non è definito. Tuttavia, è possibile determinare quale elemento rappresenta un offset dall'ora solare del fuso orario confrontandone il valore con il fuso orario <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà. Per eseguire il mapping di un'ora ambigua all'ora solare del fuso orario, vedere [procedura: risolvere orari ambigui](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `ShowPossibleUtcTimes` che utilizza il <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> metodo per eseguire il mapping di un'ora ambigua alle possibili ore UTC (Coordinated Universal Coordinated Time) corrispondente.  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Il metodo può quindi essere chiamato utilizzando codice analogo al seguente:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente quando si determina se <paramref name="dateTime" /> è ambiguo se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare con precisione gli offset ora ambigua per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</summary>
        <returns>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il comportamento preciso di questo metodo dipende dalla relazione tra i <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro e il <xref:System.TimeZoneInfo> oggetto. Se il valore di <xref:System.DateTimeOffset.Offset%2A> proprietà corrisponde alle possibili offset del fuso orario corrente dal Coordinated Universal Time (UTC) per la data e ora, il metodo restituisce gli offset possibili. In caso contrario, verrà convertito `dateTimeOffset` per il tempo nel fuso orario corrente e restituisce i possibili offset di tale data e un'ora.  
  
 L'ordine delle <xref:System.TimeSpan> oggetti nella matrice restituita da questo metodo non è definito. Tuttavia, è possibile determinare quale elemento rappresenta un offset dall'ora solare del fuso orario confrontandone il valore con il fuso orario <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà. Per eseguire il mapping di un'ora ambigua all'ora solare del fuso orario, vedere [procedura: risolvere orari ambigui](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTimeOffset" /> is not an ambiguous time.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente quando si determina se <paramref name="dateTimeOffset" /> è ambiguo se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare con precisione gli offset ora ambigua per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
        <returns>A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori dettagli sul <xref:System.TimeZoneInfo.GetHashCode%2A> metodo, vedere <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a sorted collection of all the time zones about which information is available on the local system.</summary>
        <returns>A read-only collection of <see cref="T:System.TimeZoneInfo" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> che consente di recuperare tutte le informazioni disponibili fuso orario dalle sottochiavi della chiave HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones del Registro di sistema. Se non è in grado di recuperare e analizzare i valori per le proprietà della stringa specifico di singoli correttamente <xref:System.TimeZoneInfo> oggetti, questo metodo imposta il valore su una stringa vuota ("").  
  
> [!IMPORTANT]
>  Il <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> metodo restituisce una raccolta di <xref:System.TimeZoneInfo> oggetti solo per i fusi orari definiti nel Registro di sistema. Non include fusi orari creati utilizzando gli overload del <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Questi sono accessibili solo tramite il riferimento all'oggetto restituito dal metodo di creazione del fuso orario.  
  
 La raccolta restituita da questo metodo verrà ordinata in base all'offset UTC e, per i fusi orari che hanno lo stesso offset UTC, il nome visualizzato utilizzando le impostazioni cultura correnti. Per informazioni sul nome visualizzato, vedere <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 Il <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> oggetto restituito da questo metodo supporta il <xref:System.Collections.Generic.IEnumerable%601> interfaccia, il che significa che può essere iterato utilizzando il `foreach` (in c#) o `For Each…Next` (in Visual Basic) le istruzioni. Ogni iterazione del ciclo fornisce successivo <xref:System.TimeZoneInfo> oggetto nella raccolta.  
  
 La raccolta di <xref:System.TimeZoneInfo> oggetti rappresenta fusi orari definiti nel computer locale, non necessariamente fornisce informazioni complete per tutti i fusi orari durante tutti i periodi di tempo. Se l'applicazione richiede fusi orari non trovati nel computer locale, è possibile creare fusi orari personalizzati utilizzando l'overload del <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo. Per altre informazioni, vedere [procedura: creare fusi orari senza regole di regolazione](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) e [procedura: creare fusi orari con regole di regolazione](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 È inoltre possibile determinare se un singolo fuso orario è definito nel computer locale chiamando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> (metodo) e fornendo l'identificatore del fuso orario da recuperare come parametro.  
  
   
  
## Examples  
 Nell'esempio seguente recupera una raccolta di oggetti fuso orario che rappresentano i fusi orari definiti in un computer e scrive informazioni su di essi in un file di testo.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">There is insufficient memory to store all time zone information.</exception>
        <exception cref="T:System.Security.SecurityException">The user does not have permission to read from the registry keys that contain time zone information.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between the two time zones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito include le eventuali differenze a causa l'applicazione delle regole di adeguamento del fuso orario corrente. Differisce dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà, che restituisce la differenza tra ora UTC (Coordinated Universal Time) e l'ora solare del fuso orario e, pertanto, non considerare le regole di regolazione.  
  
 Se il `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà non corrisponde all'oggetto fuso orario, questo metodo esegue la conversione necessaria prima di restituire un risultato. Ad esempio, ciò può verificarsi se il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> ma l'oggetto fuso orario non è il fuso orario locale. Se `dateTime` è ambiguo, o se l'ora convertita è ambiguo, questo metodo interpreta l'ora ambigua come ora solare. Se `dateTime` non è valido, questo metodo restituisce un <xref:System.TimeSpan> oggetto che riflette la differenza tra l'ora UTC e l'ora solare del fuso orario.  
  
 Il <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> metodo è simile in operazione per il <xref:System.TimeZone.GetUtcOffset%2A> metodo il <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> metodo con fusi orari diversi e con valori di data con diversi <xref:System.DateTime.Kind%2A> i valori delle proprietà.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente quando si calcola l'offset rispetto a UTC, se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non in modo accurato calcolare la differenza tra l'ora locale e l'ora UTC in <paramref name="dateTime" />. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time to determine the offset for.</param>
        <summary>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</summary>
        <returns>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'intervallo di tempo restituito include le eventuali differenze a causa l'applicazione delle regole di adeguamento del fuso orario corrente. Differisce dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà, che restituisce la differenza tra ora UTC (Coordinated Universal Time) e l'ora solare del fuso orario e, pertanto, non considerare le regole di regolazione.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente quando si calcola l'offset rispetto a UTC, se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non in modo accurato calcolare la differenza tra l'ora locale e l'ora UTC in <paramref name="dateTimeOffset" />. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" />
      </Parameters>
      <Docs>
        <param name="other">A second object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.</param>
        <summary>Indicates whether the current object and another <see cref="T:System.TimeZoneInfo" /> object have the same adjustment rules.</summary>
        <returns>
          <see langword="true" /> if the two time zones have identical adjustment rules and an identical base offset; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Come le <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metodo, il <xref:System.TimeZoneInfo.HasSameRules%2A> metodo indica se due fusi orari hanno lo stesso offset di base (come definito dal <xref:System.TimeZoneInfo.BaseUtcOffset%2A> proprietà) e le stesse regole di regolazione. A differenza di <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> metodo, <xref:System.TimeZoneInfo.HasSameRules%2A> non consente il confronto identificatori del fuso orario (come definito dal <xref:System.TimeZoneInfo.Id%2A> proprietà).  
  
   
  
## Examples  
 In genere, un numero di fusi orari definiti nel Registro di sistema hanno lo stesso offset dall'ora UTC (Coordinated Universal Time) e le stesse regole di regolazione. Nell'esempio seguente visualizza un elenco di questi fusi orari nella console.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time zone identifier.</summary>
        <value>Identificatore del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Identificatore del fuso orario è una stringa chiave che identifica in modo univoco un particolare fuso orario. In Windows XP e Windows Vista, corrisponde alle sottochiavi del ramo HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zone del Registro di sistema. Può essere passata come parametro per il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo per recuperare un particolare fuso orario dal Registro di sistema.  
  
> [!IMPORTANT]
>  Anche se un nome della chiave del Registro di sistema di Windows può contenere un massimo di 255 caratteri, è consigliabile che un identificatore assegnato a un fuso orario personalizzato 32 caratteri o meno. Più è lunga l'identificatore di, maggiore è la probabilità che un nome di chiave errato verrà fornita al momento recuperarlo.  
  
 Il valore di <xref:System.TimeZoneInfo.Id%2A> proprietà viene in genere, ma non sempre, identico a quello del <xref:System.TimeZoneInfo.StandardName%2A> proprietà. L'identificatore del fuso orario universale coordinato è UTC.  
  
   
  
## Examples  
 Nell'esempio seguente vengono elencati gli identificatori di ciascuno dei fusi orari definiti nel computer locale.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora ambigua rientra in un intervallo di tempo per il fuso orario corrente. Ciò significa che può essere ora solare o un'ora risultante dall'applicazione di una regola di rettifica. In genere, i tempi ambigui causati quando l'orologio è impostato per restituire verso l'ora legale all'ora solare. Vedere la sezione di esempio per un'illustrazione.  
  
 Ora UTC (Coordinated Universal Time) non ha ambigui ore; fusi orari che non supportano ora legale. Di conseguenza, questi fusi orari hanno senza regole di regolazione e chiamate ai <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> metodo restituiscono sempre `false`.  
  
 Fusi orari che osservano l'ora legale, il comportamento preciso di questo metodo dipende dalla relazione tra i <xref:System.DateTime.Kind%2A> proprietà e il <xref:System.TimeZoneInfo> oggetto, come illustrato nella tabella seguente.  
  
|Tipo di oggetto TimeZoneInfo|Valore della proprietà Kind|Comportamento|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se il `dateTime` parametro è ambiguo.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` all'ora locale e determina quindi se tale orario cade ambiguo.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Restituisce `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Se `dateTime` è ambiguo, presuppone che sia un'ora solare, lo converte in formato UTC e restituisce `false`.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Converte `dateTime` all'ora nel fuso orario specificato e determina quindi se tale orario cade ambiguo.|  
|Qualsiasi altro fuso orario.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Determina se `dateTime` è ambiguo.|  
  
   
  
## Examples  
 Nel fuso orario del Pacifico, ora legale termina in corrispondenza di 2 ore 1.00 del mattino il 4 novembre 2007. Nell'esempio seguente l'ora viene passata a intervalli di un minuto da 59 ore 00.00 il 4 novembre 2007 per 2 ore 12:01. il 4 novembre 2007 per il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metodo di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario del Pacifico. L'output della console indica che tutte le volte da all'1:00 AM. il 4 novembre 2007 a 1 59 AM. il 4 novembre 2007 sono ambigue.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora ambigua per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time.</param>
        <summary>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora ambigua rientra in un intervallo di tempo per il fuso orario corrente. Ciò significa che può essere ora solare o un'ora risultante dall'applicazione di una regola di rettifica. In genere, i tempi ambigui causati quando l'orologio è impostato per restituire verso l'ora legale all'ora solare. Ora UTC (Coordinated Universal Time) non ha ambigui ore; fusi orari che non supportano ora legale.  
  
 A seconda dei casi il comportamento del metodo di precise sulla relazione tra i <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro e il fuso orario corrente. Se il valore di <xref:System.DateTimeOffset.Offset%2A> proprietà è un possibile offset dall'ora UTC del fuso orario corrente, il metodo determina se data e l'ora è ambiguo. In caso contrario, verrà convertito `dateTimeOffset` all'ora nel fuso orario corrente e determina quindi se data e l'ora è ambiguo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTimeOffset" /> è un'ora ambigua per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the current <see cref="T:System.TimeZoneInfo" /> object's time zone.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito di <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> dipende dalla relazione tra il fuso orario rappresentato dal <xref:System.TimeZoneInfo> oggetto e il <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro, come illustrato nella tabella seguente.  
  
|Oggetto TimeZoneInfo|Proprietà DateTime. Kind|Risultato|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Determina se `dateTime` è l'ora legale.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Converte `dateTime` da Coordinated Universal Time (UTC) in un'ora locale e determina se è l'ora legale.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Si presuppone che `dateTime` rappresenta ora locale e determina se è l'ora legale.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`o `DateTimeKind.Utc`|Restituisce `false` (ora UTC non supporta l'ora legale).|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Local`|Converte l'ora locale equivalente del <xref:System.TimeZoneInfo> dell'oggetto e quindi stabilisce se quest'ultima ora legale.|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Utc`|Converte l'ora UTC equivalente ora del <xref:System.TimeZoneInfo> dell'oggetto e quindi stabilisce se quest'ultima ora legale.|  
|Qualsiasi altro <xref:System.TimeZoneInfo> oggetto.|`DateTimeKind.Unspecified`|Determina se `dateTime` è l'ora legale.|  
  
 Se il fuso orario rappresentati come le <xref:System.TimeZoneInfo> oggetto non supporta l'ora legale, il metodo restituisce sempre `false`. Un numero di fusi orari, tra cui <xref:System.TimeZoneInfo.Utc%2A>, non osservare l'ora legale.  Per determinare se un fuso orario supporta l'ora legale, recuperare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 Se il `dateTime` parametro specifica un'ora ambigua nel fuso orario dell'oggetto corrente e la <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo interpreta `dateTime` come ora solare e restituisce `false` se relativo <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType> o <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Se il <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, questo metodo verrà selezionare l'ora ambigua corretta e indicare se si tratta di un'ora legale.  
  
 Poiché il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> metodo può restituire `false` per una data e ora che è ambigua (vale a dire, data e ora che può rappresentare un'ora solare o un'ora legale in un particolare fuso orario), il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> metodo può essere associato con la <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se un'ora può essere un'ora legale. Poiché un'ora ambigua è quello che può essere sia un'ora legale e un solare fuso orientale, il <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> metodo può essere chiamato prima per determinare se una data e ora può essere un'ora legale. Se il metodo restituisce `false`, il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo può essere chiamato per determinare se il <xref:System.DateTime> valore è un'ora legale. L'esempio seguente illustra questa tecnica.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Se il `dateTime` parametro specifica un'ora non valida, la chiamata al metodo genera un <xref:System.ArgumentException> se il valore della `dateTime` del parametro <xref:System.DateTime.Kind%2A> proprietà <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; in caso contrario, il metodo restituisce `false`.  
  
 Chiamare il <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo per determinare se utilizzi un fuso orario <xref:System.TimeZoneInfo.StandardName%2A> valore o dai relativi <xref:System.TimeZoneInfo.DaylightName%2A> valore quando si visualizza il nome del fuso orario. Vedere la sezione di esempio per un'illustrazione.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.</exception>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora legale per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">A date and time value.</param>
        <summary>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito di <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> dipende dalla relazione tra il fuso orario rappresentato dal <xref:System.TimeZoneInfo> oggetto e il <xref:System.DateTimeOffset.Offset%2A> proprietà del `dateTimeOffset` parametro. Se `dateTimeOffset` non corrisponde all'offset del fuso orario corrente dal Coordinated Universal Time (UTC), il metodo converte l'ora nell'ora nel fuso orario corrente. Determina quindi se data e l'ora è un'ora legale.  
  
 Se il fuso orario rappresentati come le <xref:System.TimeZoneInfo> oggetto non supporta l'ora legale, il metodo restituisce sempre `false`. Per determinare se un fuso orario supporta l'ora legale, recuperare il valore della relativa <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo alla regola di rettifica corrente se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTimeOffset" /> è un'ora legale per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time value.</param>
        <summary>Indicates whether a particular date and time is invalid.</summary>
        <returns>
          <see langword="true" /> if <paramref name="dateTime" /> is invalid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'ora non valida rientra in un intervallo di tempo per il fuso orario corrente che non possono essere mappati a Coordinated Universal Time (UTC) a causa dell'applicazione di una regola di rettifica. Casi non validi in genere, si verificano quando il tempo viene spostata in avanti per l'ora legale. Vedere la sezione di esempio per un'illustrazione.  
  
 Il valore della <xref:System.DateTime.Kind%2A> proprietà del `dateTime` parametro ha effetto sulla se `dateTime` rappresenta un'ora non valida, come illustrato nella tabella seguente.  
  
|Proprietà DateTime. Kind|Oggetto TimeZoneInfo (se applicabile)|Comportamento|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Determina se l'ora non è valido.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> o un fuso orario locale.|Converte `dateTime` al momento del <xref:System.TimeZoneInfo> oggetto e restituisce `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Non applicabile.|Si presuppone `dateTime` è il tempo del <xref:System.TimeZoneInfo> dell'oggetto e determina se è valido.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Non applicabile.|Restituisce `false`.|  
  
   
  
## Examples  
 Nel fuso orario del Pacifico, ora legale inizia alle 2.00 2 aprile 2006. Il codice seguente l'ora viene passata a intervalli di un minuto da 01:59. 2 aprile 2006, a 3 ore 12:01. 2 aprile 2006, per il <xref:System.TimeZoneInfo.IsInvalidTime%2A> metodo di un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario del Pacifico. L'output della console indica che tutte le volte da 2.00 2 aprile 2006 a 59 2.00 del mattino. 2 aprile 2006, non sono validi.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In [! Sistemi include[winxp](~/Includes/winxp-MD.MD)], questo metodo si applica solo la regola di rettifica se l'istanza corrente è <see cref="P:System.TimeZoneInfo.Local" />. Di conseguenza, il metodo potrebbe non segnalare in modo accurato se <paramref name="dateTime" /> è un'ora non valida per periodi precedenti la regola di rettifica corrente. Per altre informazioni, vedere la sezione Note per i chiamanti nel <see cref="P:System.TimeZoneInfo.Local" /> proprietà.</para>
        </block>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.</summary>
        <value>Oggetto che rappresenta il fuso orario locale.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il fuso orario locale è il fuso orario nel computer in cui viene eseguito il codice.  
  
> [!IMPORTANT]
>  È consigliabile accedere sempre il fuso orario locale tramite il <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà anziché assegnare l'ora locale della zona per una <xref:System.TimeZoneInfo> variabile oggetto. In tal modo il <xref:System.TimeZoneInfo> variabile oggetto venga invalidata da una chiamata al <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo> oggetto restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà riflette l'impostazione del **imposta automaticamente per salvare le modifiche l'ora legale** casella di controllo o **imposta automaticamente per legale Tempo** casella di controllo nel Pannello di controllo **data e ora** dell'applicazione per Windows XP e Windows Vista, rispettivamente. Se la casella di controllo è deselezionata, la copia memorizzata nella cache del fuso orario locale non contiene l'ora legale informazioni. Vale a dire che:  
  
-   Il fuso orario locale <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> metodo restituisce una matrice la cui lunghezza è pari a zero.  
  
-   Il fuso orario locale <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> restituisce proprietà `false`.  
  
-   Il fuso orario locale non ha ambigui o non validi ore (tutte le chiamate a <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> oppure <xref:System.TimeZoneInfo.IsInvalidTime%2A> restituire `false`).  
  
-   Tutte le chiamate a <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> con singole ore locali restituisce false.  
  
 Ciò non è true, tuttavia, se un riferimento al fuso orario locale verrà recuperato utilizzando il <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> metodo.  
  
 Il <xref:System.TimeZoneInfo.Local%2A> proprietà corrisponde al <xref:System.TimeZone.CurrentTimeZone%2A> proprietà del <xref:System.TimeZone> classe.  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta il fuso orario locale e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Nella conversione di date e ore, [! INCLUDE[winxp](~/Includes/winxp-MD.MD)] riconosce solo la regola di regolazione corrente, che si applica a tutte le date, incluse le date di livello inferiore (ovvero, le date precedenti alla data di inizio della regola di rettifica corrente). In [! INCLUDE[winxp](~/Includes/winxp-MD.MD)], per impedire locale informazioni di data e ora fornite dal <see cref="P:System.TimeZoneInfo.Local" /> oggetto da divergente dalle informazioni di data e ora visualizzate nell'area di notifica, il <see cref="T:System.TimeZoneInfo" /> oggetto restituito dal <see cref="P:System.TimeZoneInfo.Local" />proprietà si applica la regola di rettifica corrente a date di livello inferiore. Le applicazioni in esecuzione in [! INCLUDE[winxp](~/Includes/winxp-MD.MD)] che richiedono sempre accurata data locale e i calcoli temporali devono risolvere il problema utilizzando il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare un <see cref="T:System.TimeZoneInfo" /> oggetto che corrisponde al fuso orario locale.  Nell'esempio seguente viene illustrato questo concetto per un [! Sistema include[winxp](~/Includes/winxp-MD.MD)] negli Stati Uniti fuso orario Pacifico (Stati Uniti). Poiché i primi tre chiamate al metodo tutti utilizzano il fuso orario locale restituito dal <see cref="P:System.TimeZoneInfo.Local" /> proprietà, si applica la regola di rettifica fuso orario corrente (che è entrato nella effetto nel 2007) a una data nel 2006. La regola di rettifica corrente fornisce la transizione all'ora legale per il secondo domenica del mese di marzo. la regola precedente, che era attivo nel 2006, fornito per la transizione all'ora legale prima domenica del mese di aprile. Solo la quarta chiamata al metodo, che usa il <see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> metodo per recuperare il fuso orario locale, esegue in modo accurato questo cronologiche conversione date e ore.  [! code-csharp[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/cs/converttimetoutc.cs#1)] [! code-vb[System.TimeZoneInfo.ConvertTimeToUtc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttimetoutc/vb/converttimetoutc.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the display name for the time zone's standard time.</summary>
        <value>Nome visualizzato dell'ora solare del fuso orario.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il nome visualizzato è localizzato in base alle impostazioni cultura installate con il sistema operativo Windows.  
  
 Il <xref:System.TimeZoneInfo.StandardName%2A> è identica al <xref:System.TimeZone.StandardName%2A> proprietà del <xref:System.TimeZone> classe.  
  
 Se la lingua del sistema operativo è inglese, il valore di <xref:System.TimeZoneInfo.StandardName%2A> proprietà viene in genere, ma non sempre, identico a quello del <xref:System.TimeZoneInfo.Id%2A> proprietà.  
  
   
  
## Examples  
 L'esempio seguente definisce un metodo denominato `DisplayDateWithTimeZoneName` che utilizza il <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> metodo per determinare se visualizzare un fuso orario ora solare o dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the time zone has any daylight saving time rules.</summary>
        <value>
          <see langword="true" /> se il fuso orario supporta l'ora legale; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> proprietà per il fuso orario locale restituito dal <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> proprietà riflette l'impostazione del Pannello di controllo **data e ora** casella di controllo dell'applicazione che definisce se il sistema automaticamente regola per l'ora legale. Se è deselezionata, o se viene visualizzata alcuna casella per un fuso orario, il valore di questa proprietà è `false`.  
  
   
  
## Examples  
 Nell'esempio seguente recupera una raccolta di tutti i fusi orari disponibili in un sistema locale e vengono visualizzati i nomi di quelli che non supportano ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.TimeZoneInfo" /> object contains invalid or corrupted data.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data needed to serialize the current <see cref="T:System.TimeZoneInfo" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Esempio di codice seguente viene illustrato come utilizzare un handle di attesa per mantenere un processo da terminare mentre è in attesa per un thread in background terminare l'esecuzione. L'istanza corrente è un proxy trasparente per un  in un altro dominio applicazione.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.TimeZoneInfo" /> object to a serialized string.</summary>
        <returns>A string that represents the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le applicazioni basate sul fuso orario che non sono in genere definiti nel Registro di sistema dei sistemi Windows è possono usare il <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> metodo per creare un'istanza dei fusi orari necessari come <xref:System.TimeZoneInfo> oggetti. L'applicazione può quindi chiamare il <xref:System.TimeZoneInfo.ToSerializedString%2A> metodo per convertire l'oggetto fuso orario in una stringa.  
  
 Il <xref:System.TimeZoneInfo> oggetto deve essere archiviato anche in una posizione in cui l'applicazione può recuperare in caso di necessità. I possibili percorsi includono:  
  
-   Il Registro di sistema.  
  
-   Un file di risorse dell'applicazione.  
  
-   Un file esterno, ad esempio un file di testo.  
  
   
  
## Examples  
 Nell'esempio seguente tenta di recuperare il polo sud Antartide fuso orario di sistema locale. In caso contrario, il codice tenta di recuperare informazioni sul fuso orario da un file di testo nella directory dell'applicazione. Se questo tentativo non riesce, il codice crea il fuso orario e scrive le informazioni relative al file di testo.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.</summary>
        <returns>The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando assegnazione di una raccolta che contiene <xref:System.TimeZoneInfo> oggetti a un controllo elenco, ad esempio il <xref:System.Windows.Forms.ListBox> (controllo), il controllo chiama automaticamente il <xref:System.TimeZoneInfo.ToString%2A> metodo per estrarre una stringa che descrive ogni oggetto deve essere rappresentato nell'elenco. Di conseguenza, non è necessaria archiviare una descrizione significativa dell'oggetto sotto forma di stringa e l'utente non è necessario utilizzare tale stringa per estrarre l'oggetto dalla raccolta. Vedere [procedura: enumerare i fusi orari presenti in un Computer](~/docs/standard/datetime/enumerate-time-zones.md) per maggiori dettagli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.</summary>
        <value>Oggetto che rappresenta il fuso UTC (Coordinated Universal Time).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di un oggetto incorporato. informazioni su questo <xref:System.TimeZoneInfo> oggetto non viene recuperato dal Registro di sistema.  
  
> [!IMPORTANT]
>  È consigliabile accedere sempre il fuso ora UTC (Coordinated Universal Time) tramite il <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> proprietà anziché assegnare il fuso orario UTC da una <xref:System.TimeZoneInfo> variabile oggetto. In tal modo il <xref:System.TimeZoneInfo> variabile oggetto venga invalidata da una chiamata al <xref:System.TimeZoneInfo.ClearCachedData%2A> metodo.  
  
 Coordinated Universal Time era noto in precedenza come ora di Greenwich (GMT).  
  
   
  
## Examples  
 Nell'esempio seguente viene recuperato un <xref:System.TimeZoneInfo> oggetto che rappresenta l'ora UTC (Coordinated Universal Time) e restituisce il nome visualizzato, nome dell'ora solare e dell'ora legale.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>