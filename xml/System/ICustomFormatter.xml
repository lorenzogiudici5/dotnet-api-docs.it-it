<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54e2e84e8387855c2add6a214afa57814e391c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431014" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definisce un metodo che supporta la formattazione personalizzata del valore di un oggetto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.ICustomFormatter> interfaccia include un singolo metodo, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Quando questa interfaccia viene implementata da un tipo riferimento o valore, il <xref:System.ICustomFormatter.Format%2A> metodo restituisce una rappresentazione di stringa con formattazione personalizzata del valore dell'oggetto.  
  
 In genere, l'interfaccia <xref:System.ICustomFormatter> viene implementata con l'interfaccia <xref:System.IFormatProvider> per personalizzare il comportamento di due metodi di formattazione composta di stringhe di .NET Framework che includono un parametro <xref:System.IFormatProvider>. In particolare, l'interfaccia <xref:System.ICustomFormatter> è in grado di fornire una formattazione personalizzata del valore di un oggetto passato ai metodi <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> e <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Fornire una rappresentazione grafica del valore dell'oggetto, è necessario procedere nel modo seguente:  
  
1.  Definire una classe che implementa il <xref:System.ICustomFormatter> interfaccia e il relativo membro singolo, il <xref:System.ICustomFormatter.Format%2A> metodo.  
  
2.  Definire una classe che implementa il <xref:System.IFormatProvider> interfaccia e il relativo membro singolo, il <xref:System.IFormatProvider.GetFormat%2A> metodo. Il <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un'istanza di <xref:System.ICustomFormatter> implementazione. Spesso, un'unica classe implementa sia <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>. In di questo caso, la classe `GetFormat` implementazione restituisce solo un'istanza di se stesso.  
  
3.  Passare il <xref:System.IFormatProvider> implementazione come il `provider` argomento del <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metodo o un metodo confrontabile.  
  
 Il metodo di .NET Framework userà quindi la formattazione personalizzata anziché il proprio.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata <xref:System.ICustomFormatter> per consentire la formattazione binario, ottali ed esadecimali di valori integrali. In questo esempio, un'unica classe, `IBinaryFormatter`, implementa sia <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>. Il relativo <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metodo determina se il `formatType` parametro rappresenta un <xref:System.ICustomFormatter> tipo. In questo caso `BinaryFormatter` restituisce un'istanza di se stesso; in caso contrario, restituirà `null`. Il relativo <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementazione determina se il parametro di formato è una delle tre stringhe di formato supportato ("B" per i dati binari, "O" per ottale e "H" per esadecimale) e formatta il `arg` parametro in modo appropriato. In caso contrario, se `arg` non è `null`, chiama il `arg` parametro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione, se presente, o relativo senza parametri `ToString` (metodo), se non esiste. Se `arg` è `null`, il metodo restituisce <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` può quindi essere utilizzata per fornire la formattazione personalizzata passando un `BinaryFormatter` dell'oggetto come i `provider` parametro del <xref:System.String.Format%2A> metodo, come illustrato nell'esempio seguente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Common language runtime tenta di usare il <see cref="T:System.ICustomFormatter" /> implementazione per ogni elemento di formato in una stringa in formato composito. Di conseguenza, è logico prevedere che il <see cref="T:System.ICustomFormatter" /> implementazione verrà chiamata per fornire servizi di formattazione per gli oggetti o valori che non consente di gestire. In questi casi, il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo deve chiamare il metodo di formattazione appropriato per tale oggetto o un valore.  Esistono due tipi di <see cref="T:System.ICustomFormatter" /> implementazioni: funzione intrinseca e l'estensione.  Le implementazioni intrinseche sono implementazioni che forniscono la formattazione personalizzata per un oggetto definito dall'applicazione. In questo caso, l'implementazione deve includere le seguenti:-una definizione di stringhe di formato che definiscono la formattazione dell'oggetto. Stringhe di formato sono facoltative. In genere, una stringa di formato "G" o "g" definisce il formato generale (o utilizzato più di frequente). Tuttavia, si possono definire tutte le stringhe di formato scelto. Si possono anche decidere se sono distinzione maiuscole/minuscole o tra maiuscole e minuscole.  -Un test per assicurarsi che il tipo dell'oggetto passato per il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo è il tipo definito dall'applicazione. In caso contrario, è necessario chiamare l'oggetto <see cref="T:System.IFormattable" /> implementazione, se presente, o dai relativi <see cref="M:System.Object.ToString" /> (metodo), se non esiste. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.  -Codice per gestire una stringa di formato null se l'implementazione supporta le stringhe di formato. L'approccio più comune consiste nel sostituire una stringa di formato null con l'identificatore di formato generale.  -Codice per gestire tutte le stringhe di formato che supporta l'implementazione.  -Codice per gestire le stringhe di formato che non supportata. L'approccio più comune è generare un <see cref="T:System.FormatException" />, sebbene sia possibile fornire la formattazione predefinita.  Le implementazioni delle estensioni sono implementazioni che forniscono formattazione personalizzata per un tipo che dispone già di supporto per la formattazione. Ad esempio, è possibile definire un <c>CustomerNumberFormatter</c> che formatta un tipo integrale con trattini tra cifre specifiche. In questo caso, l'implementazione deve includere le seguenti:-una definizione di stringhe di formato che estendono la formattazione dell'oggetto. Queste stringhe di formato sono obbligatori, ma non devono creare conflitti con le stringhe di formato esistenti del tipo. Ad esempio, se si estende la formattazione per il <see cref="T:System.Int32" /> tipo, non è necessario implementare gli identificatori di formato "C", "D", "E", "F" e "G", tra gli altri.  -Un test che il tipo dell'oggetto passato per il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo è un tipo di cui l'estensione di formattazione è supportata. In caso contrario, chiamare l'oggetto <see cref="T:System.IFormattable" /> implementazione, se ne esiste uno, o senza parametri dell'oggetto <see cref="M:System.Object.ToString" /> (metodo), se non esiste. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.  -Codice per gestire tutte le stringhe di formato che supporta l'estensione.  -Codice per gestire tutte le stringhe di formato che non supporta l'estensione. Questi devono essere passati nel tipo <see cref="T:System.IFormattable" /> implementazione. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Stringa di formato contenente specifiche di formato.</param>
        <param name="arg">Oggetto da formattare.</param>
        <param name="formatProvider">Oggetto che fornisce informazioni sul formato relative all'istanza corrente.</param>
        <summary>Converte il valore di un oggetto specificato in una rappresentazione di stringa equivalente usando il formato e le informazioni di formattazione specifiche delle impostazioni cultura indicati.</summary>
        <returns>Rappresentazione in forma di stringa del valore di <paramref name="arg" />, formattato come specificato dai parametri <paramref name="format" /> e <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> è un metodo di callback. Viene chiamato da un metodo che supporta la formattazione personalizzata, ad esempio <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> o <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. L'implementazione viene chiamato una volta per ogni elemento di formato in una [stringa di formato composita](~/docs/standard/base-types/composite-formatting.md). Ad esempio, nell'istruzione seguente, il <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> metodo viene chiamato tre volte.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 Il `arg` parametro è l'oggetto nell'elenco di oggetti la cui posizione in base zero corrisponde all'indice di un particolare elemento di formato.  
  
 Il `format` parametro contiene una stringa di formato, ovvero il `formatString` componente di un elemento di formato. Se l'elemento di formato non ha alcun `formatString` componente, il valore di `format` è `null`. Se `format` viene `null`, a seconda del tipo di `arg`, potrebbe essere in grado di utilizzare la specifica del formato predefinito di propria scelta.  
  
 Il `formatProvider` parametro è il <xref:System.IFormatProvider> implementazione che fornisce la formattazione per `arg`. In genere, è un'istanza di <xref:System.ICustomFormatter> implementazione. Se `formatProvider` è `null`, ignorare il parametro.  
  
 L'implementazione del <xref:System.ICustomFormatter.Format%2A> metodo deve includere le seguenti funzionalità di .NET Framework può fornire la formattazione non supportata. Se il metodo di formattazione non supporta un formato, determinare se l'oggetto da formattare implementa il <xref:System.IFormattable> interfaccia. Se, richiamare il <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metodo di tale interfaccia. In caso contrario, richiama il valore predefinito <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodo dell'oggetto sottostante. Il codice seguente illustra questo modello.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata <xref:System.ICustomFormatter> per consentire la formattazione binario, ottali ed esadecimali di valori integrali. Il relativo <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementazione determina se il parametro di formato è una delle tre stringhe di formato supportato ("B" per i dati binari, "O" per ottale e "H" per esadecimale) e formatta il `arg` parametro in modo appropriato. In caso contrario, se `arg` non è `null`, chiama il `arg` parametro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione, se presente, o relativo senza parametri `ToString` (metodo), se non esiste. Se `arg` è `null`, il metodo restituisce <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` può quindi essere utilizzata per fornire la formattazione personalizzata passando un `BinaryFormatter` dell'oggetto come i `provider` parametro del <xref:System.String.Format%2A> metodo, come illustrato nell'esempio seguente.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>