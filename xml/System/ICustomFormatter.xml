<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f54e2e84e8387855c2add6a214afa57814e391c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431014" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b6130-101">Definisce un metodo che supporta la formattazione personalizzata del valore di un oggetto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b6130-101">Defines a method that supports custom formatting of the value of an object.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6130-102">Il <xref:System.ICustomFormatter> interfaccia include un singolo metodo, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6130-102">The <xref:System.ICustomFormatter> interface includes a single method, <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6130-103">Quando questa interfaccia viene implementata da un tipo riferimento o valore, il <xref:System.ICustomFormatter.Format%2A> metodo restituisce una rappresentazione di stringa con formattazione personalizzata del valore dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="b6130-103">When this interface is implemented by a reference or value type, the <xref:System.ICustomFormatter.Format%2A> method returns a custom-formatted string representation of an object's value.</span></span>  
  
 <span data-ttu-id="b6130-104">In genere, l'interfaccia <xref:System.ICustomFormatter> viene implementata con l'interfaccia <xref:System.IFormatProvider> per personalizzare il comportamento di due metodi di formattazione composta di stringhe di .NET Framework che includono un parametro <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="b6130-104">Typically, the <xref:System.ICustomFormatter> interface is implemented with the <xref:System.IFormatProvider> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <xref:System.IFormatProvider> parameter.</span></span> <span data-ttu-id="b6130-105">In particolare, l'interfaccia <xref:System.ICustomFormatter> è in grado di fornire una formattazione personalizzata del valore di un oggetto passato ai metodi <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> e <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6130-105">Specifically, the <xref:System.ICustomFormatter> interface can provide custom formatting of the value of an object passed to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> methods.</span></span>  
  
 <span data-ttu-id="b6130-106">Fornire una rappresentazione grafica del valore dell'oggetto, è necessario procedere nel modo seguente:</span><span class="sxs-lookup"><span data-stu-id="b6130-106">Providing a custom representation of an object's value requires that you do the following:</span></span>  
  
1.  <span data-ttu-id="b6130-107">Definire una classe che implementa il <xref:System.ICustomFormatter> interfaccia e il relativo membro singolo, il <xref:System.ICustomFormatter.Format%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="b6130-107">Define a class that implements the <xref:System.ICustomFormatter> interface and its single member, the <xref:System.ICustomFormatter.Format%2A> method.</span></span>  
  
2.  <span data-ttu-id="b6130-108">Definire una classe che implementa il <xref:System.IFormatProvider> interfaccia e il relativo membro singolo, il <xref:System.IFormatProvider.GetFormat%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="b6130-108">Define a class that implements the <xref:System.IFormatProvider> interface and its single member, the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="b6130-109">Il <xref:System.IFormatProvider.GetFormat%2A> metodo restituisce un'istanza di <xref:System.ICustomFormatter> implementazione.</span><span class="sxs-lookup"><span data-stu-id="b6130-109">The <xref:System.IFormatProvider.GetFormat%2A> method returns an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="b6130-110">Spesso, un'unica classe implementa sia <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="b6130-110">Often, a single class implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6130-111">In di questo caso, la classe `GetFormat` implementazione restituisce solo un'istanza di se stesso.</span><span class="sxs-lookup"><span data-stu-id="b6130-111">In that case, the class's `GetFormat` implementation just returns an instance of itself.</span></span>  
  
3.  <span data-ttu-id="b6130-112">Passare il <xref:System.IFormatProvider> implementazione come il `provider` argomento del <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> metodo o un metodo confrontabile.</span><span class="sxs-lookup"><span data-stu-id="b6130-112">Pass the <xref:System.IFormatProvider> implementation as the `provider` argument of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method or a comparable method.</span></span>  
  
 <span data-ttu-id="b6130-113">Il metodo di .NET Framework userà quindi la formattazione personalizzata anziché il proprio.</span><span class="sxs-lookup"><span data-stu-id="b6130-113">The .NET Framework method will then use your custom formatting instead of its own.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b6130-114">Nell'esempio seguente viene implementata <xref:System.ICustomFormatter> per consentire la formattazione binario, ottali ed esadecimali di valori integrali.</span><span class="sxs-lookup"><span data-stu-id="b6130-114">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="b6130-115">In questo esempio, un'unica classe, `IBinaryFormatter`, implementa sia <xref:System.ICustomFormatter> e <xref:System.IFormatProvider>.</span><span class="sxs-lookup"><span data-stu-id="b6130-115">In this example, a single class, `IBinaryFormatter`, implements both <xref:System.ICustomFormatter> and <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="b6130-116">Il relativo <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> metodo determina se il `formatType` parametro rappresenta un <xref:System.ICustomFormatter> tipo.</span><span class="sxs-lookup"><span data-stu-id="b6130-116">Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method determines whether the `formatType` parameter represents an <xref:System.ICustomFormatter> type.</span></span> <span data-ttu-id="b6130-117">In questo caso `BinaryFormatter` restituisce un'istanza di se stesso; in caso contrario, restituirà `null`.</span><span class="sxs-lookup"><span data-stu-id="b6130-117">If it does, `BinaryFormatter` returns an instance of itself; otherwise, it returns `null`.</span></span> <span data-ttu-id="b6130-118">Il relativo <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementazione determina se il parametro di formato è una delle tre stringhe di formato supportato ("B" per i dati binari, "O" per ottale e "H" per esadecimale) e formatta il `arg` parametro in modo appropriato.</span><span class="sxs-lookup"><span data-stu-id="b6130-118">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="b6130-119">In caso contrario, se `arg` non è `null`, chiama il `arg` parametro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione, se presente, o relativo senza parametri `ToString` (metodo), se non esiste.</span><span class="sxs-lookup"><span data-stu-id="b6130-119">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="b6130-120">Se `arg` è `null`, il metodo restituisce <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6130-120">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="b6130-121">`BinaryFormatter` può quindi essere utilizzata per fornire la formattazione personalizzata passando un `BinaryFormatter` dell'oggetto come i `provider` parametro del <xref:System.String.Format%2A> metodo, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="b6130-121">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="b6130-122">
        <para>Common language runtime tenta di usare il <see cref="T:System.ICustomFormatter" /> implementazione per ogni elemento di formato in una stringa in formato composito. Di conseguenza, è logico prevedere che il <see cref="T:System.ICustomFormatter" /> implementazione verrà chiamata per fornire servizi di formattazione per gli oggetti o valori che non consente di gestire. In questi casi, il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo deve chiamare il metodo di formattazione appropriato per tale oggetto o un valore.  Esistono due tipi di <see cref="T:System.ICustomFormatter" /> implementazioni: funzione intrinseca e l'estensione.  Le implementazioni intrinseche sono implementazioni che forniscono la formattazione personalizzata per un oggetto definito dall'applicazione. In questo caso, l'implementazione deve includere le seguenti:-una definizione di stringhe di formato che definiscono la formattazione dell'oggetto. Stringhe di formato sono facoltative. In genere, una stringa di formato "G" o "g" definisce il formato generale (o utilizzato più di frequente). Tuttavia, si possono definire tutte le stringhe di formato scelto. Si possono anche decidere se sono distinzione maiuscole/minuscole o tra maiuscole e minuscole.  -Un test per assicurarsi che il tipo dell'oggetto passato per il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo è il tipo definito dall'applicazione. In caso contrario, è necessario chiamare l'oggetto <see cref="T:System.IFormattable" /> implementazione, se presente, o dai relativi <see cref="M:System.Object.ToString" /> (metodo), se non esiste. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.  -Codice per gestire una stringa di formato null se l'implementazione supporta le stringhe di formato. L'approccio più comune consiste nel sostituire una stringa di formato null con l'identificatore di formato generale.  -Codice per gestire tutte le stringhe di formato che supporta l'implementazione.  -Codice per gestire le stringhe di formato che non supportata. L'approccio più comune è generare un <see cref="T:System.FormatException" />, sebbene sia possibile fornire la formattazione predefinita.  Le implementazioni delle estensioni sono implementazioni che forniscono formattazione personalizzata per un tipo che dispone già di supporto per la formattazione. Ad esempio, è possibile definire un <c>CustomerNumberFormatter</c> che formatta un tipo integrale con trattini tra cifre specifiche. In questo caso, l'implementazione deve includere le seguenti:-una definizione di stringhe di formato che estendono la formattazione dell'oggetto. Queste stringhe di formato sono obbligatori, ma non devono creare conflitti con le stringhe di formato esistenti del tipo. Ad esempio, se si estende la formattazione per il <see cref="T:System.Int32" /> tipo, non è necessario implementare gli identificatori di formato "C", "D", "E", "F" e "G", tra gli altri.  -Un test che il tipo dell'oggetto passato per il <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> metodo è un tipo di cui l'estensione di formattazione è supportata. In caso contrario, chiamare l'oggetto <see cref="T:System.IFormattable" /> implementazione, se ne esiste uno, o senza parametri dell'oggetto <see cref="M:System.Object.ToString" /> (metodo), se non esiste. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.  -Codice per gestire tutte le stringhe di formato che supporta l'estensione.  -Codice per gestire tutte le stringhe di formato che non supporta l'estensione. Questi devono essere passati nel tipo <see cref="T:System.IFormattable" /> implementazione. È consigliabile essere preparati a gestire tutte le eccezioni potrebbe generare le chiamate ai metodi.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="b6130-122">
          <para>The common language runtime attempts to use your <see cref="T:System.ICustomFormatter" /> implementation for every format item in a composite format string. As a result, you should expect that your <see cref="T:System.ICustomFormatter" /> implementation will be called to provide formatting services to objects or values that it is not designed to handle. In these cases, your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method must call the appropriate formatting method for that object or value.  There are two kinds of <see cref="T:System.ICustomFormatter" /> implementations: intrinsic and extension.  Intrinsic implementations are implementations that provide custom formatting for an application-defined object. In this case, your implementation should include the following:  -   A definition of format strings that define the formatting of the object. Format strings are optional. Typically, a "G" or "g" format string defines the general (or most commonly used) format. However, you are free to define any format strings that you choose. You are also free to decide whether they are case-sensitive or case-insensitive.  -   A test to ensure that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is your application-defined type. If it is not, you should call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or its <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle a null format string, if your implementation supports format strings. The most common approach is to replace a null format string with the general format specifier.  -   Code to handle any format strings that your implementation supports.  -   Code to handle format strings that you do not support. The most common approach is to throw a <see cref="T:System.FormatException" />, although you can provide default formatting.  Extension implementations are implementations that provide custom formatting for a type that already has formatting support. For example, you could define a <c>CustomerNumberFormatter</c> that formats an integral type with hyphens between specific digits. In this case, your implementation should include the following:  -   A definition of format strings that extend the formatting of the object. These format strings are required, but they must not conflict with the type's existing format strings. For example, if you are extending formatting for the <see cref="T:System.Int32" /> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.  -   A test that the type of the object passed to your <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> method is a type whose formatting your extension supports. If it is not, call the object's <see cref="T:System.IFormattable" /> implementation, if one exists, or the object's parameterless <see cref="M:System.Object.ToString" /> method, if it does not. You should be prepared to handle any exceptions these method calls might throw.  -   Code to handle any format strings that your extension supports.  -   Code to handle any format strings that your extension does not support. These should be passed on to the type's <see cref="T:System.IFormattable" /> implementation. You should be prepared to handle any exceptions these method calls might throw.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="b6130-123">Stringa di formato contenente specifiche di formato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6130-123">A format string containing formatting specifications.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="b6130-124">Oggetto da formattare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6130-124">An object to format.</span>
          </span>
        </param>
        <param name="formatProvider">
          <span data-ttu-id="b6130-125">Oggetto che fornisce informazioni sul formato relative all'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6130-125">An object that supplies format information about the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b6130-126">Converte il valore di un oggetto specificato in una rappresentazione di stringa equivalente usando il formato e le informazioni di formattazione specifiche delle impostazioni cultura indicati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6130-126">Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b6130-127">Rappresentazione in forma di stringa del valore di <paramref name="arg" />, formattato come specificato dai parametri <paramref name="format" /> e <paramref name="formatProvider" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b6130-127">The string representation of the value of <paramref name="arg" />, formatted as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b6130-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> è un metodo di callback.</span><span class="sxs-lookup"><span data-stu-id="b6130-128"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> is a callback method.</span></span> <span data-ttu-id="b6130-129">Viene chiamato da un metodo che supporta la formattazione personalizzata, ad esempio <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> o <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6130-129">It is called by a method that supports custom formatting, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b6130-130">L'implementazione viene chiamato una volta per ogni elemento di formato in una [stringa di formato composita](~/docs/standard/base-types/composite-formatting.md).</span><span class="sxs-lookup"><span data-stu-id="b6130-130">The implementation is called once for each format item in a [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span> <span data-ttu-id="b6130-131">Ad esempio, nell'istruzione seguente, il <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> metodo viene chiamato tre volte.</span><span class="sxs-lookup"><span data-stu-id="b6130-131">For example, in the following statement, the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method is called three times.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 <span data-ttu-id="b6130-132">Il `arg` parametro è l'oggetto nell'elenco di oggetti la cui posizione in base zero corrisponde all'indice di un particolare elemento di formato.</span><span class="sxs-lookup"><span data-stu-id="b6130-132">The `arg` parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</span></span>  
  
 <span data-ttu-id="b6130-133">Il `format` parametro contiene una stringa di formato, ovvero il `formatString` componente di un elemento di formato.</span><span class="sxs-lookup"><span data-stu-id="b6130-133">The `format` parameter contains a format string, which is the `formatString` component of a format item.</span></span> <span data-ttu-id="b6130-134">Se l'elemento di formato non ha alcun `formatString` componente, il valore di `format` è `null`.</span><span class="sxs-lookup"><span data-stu-id="b6130-134">If the format item has no `formatString` component, the value of `format` is `null`.</span></span> <span data-ttu-id="b6130-135">Se `format` viene `null`, a seconda del tipo di `arg`, potrebbe essere in grado di utilizzare la specifica del formato predefinito di propria scelta.</span><span class="sxs-lookup"><span data-stu-id="b6130-135">If `format` is `null`, depending on the type of `arg`, you may be able to use the default format specification of your choice.</span></span>  
  
 <span data-ttu-id="b6130-136">Il `formatProvider` parametro è il <xref:System.IFormatProvider> implementazione che fornisce la formattazione per `arg`.</span><span class="sxs-lookup"><span data-stu-id="b6130-136">The `formatProvider` parameter is the <xref:System.IFormatProvider> implementation that provides formatting for `arg`.</span></span> <span data-ttu-id="b6130-137">In genere, è un'istanza di <xref:System.ICustomFormatter> implementazione.</span><span class="sxs-lookup"><span data-stu-id="b6130-137">Typically, it is an instance of your <xref:System.ICustomFormatter> implementation.</span></span> <span data-ttu-id="b6130-138">Se `formatProvider` è `null`, ignorare il parametro.</span><span class="sxs-lookup"><span data-stu-id="b6130-138">If `formatProvider` is `null`, ignore that parameter.</span></span>  
  
 <span data-ttu-id="b6130-139">L'implementazione del <xref:System.ICustomFormatter.Format%2A> metodo deve includere le seguenti funzionalità di .NET Framework può fornire la formattazione non supportata.</span><span class="sxs-lookup"><span data-stu-id="b6130-139">Your implementation of the <xref:System.ICustomFormatter.Format%2A> method must include the following functionality so the .NET Framework can provide formatting you do not support.</span></span> <span data-ttu-id="b6130-140">Se il metodo di formattazione non supporta un formato, determinare se l'oggetto da formattare implementa il <xref:System.IFormattable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="b6130-140">If your format method does not support a format, determine whether the object being formatted implements the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="b6130-141">Se, richiamare il <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> metodo di tale interfaccia.</span><span class="sxs-lookup"><span data-stu-id="b6130-141">If it does, invoke the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> method of that interface.</span></span> <span data-ttu-id="b6130-142">In caso contrario, richiama il valore predefinito <xref:System.Object.ToString%2A?displayProperty=nameWithType> metodo dell'oggetto sottostante.</span><span class="sxs-lookup"><span data-stu-id="b6130-142">Otherwise, invoke the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method of the underlying object.</span></span> <span data-ttu-id="b6130-143">Il codice seguente illustra questo modello.</span><span class="sxs-lookup"><span data-stu-id="b6130-143">The following code illustrates this pattern.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="b6130-144">Nell'esempio seguente viene implementata <xref:System.ICustomFormatter> per consentire la formattazione binario, ottali ed esadecimali di valori integrali.</span><span class="sxs-lookup"><span data-stu-id="b6130-144">The following example implements <xref:System.ICustomFormatter> to allow binary, octal, and hexadecimal formatting of integral values.</span></span> <span data-ttu-id="b6130-145">Il relativo <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementazione determina se il parametro di formato è una delle tre stringhe di formato supportato ("B" per i dati binari, "O" per ottale e "H" per esadecimale) e formatta il `arg` parametro in modo appropriato.</span><span class="sxs-lookup"><span data-stu-id="b6130-145">Its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the `arg` parameter appropriately.</span></span> <span data-ttu-id="b6130-146">In caso contrario, se `arg` non è `null`, chiama il `arg` parametro <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione, se presente, o relativo senza parametri `ToString` (metodo), se non esiste.</span><span class="sxs-lookup"><span data-stu-id="b6130-146">Otherwise, if `arg` is not `null`, it calls the `arg` parameter's <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation, if one exists, or its parameterless `ToString` method, if one does not.</span></span> <span data-ttu-id="b6130-147">Se `arg` è `null`, il metodo restituisce <xref:System.String.Empty?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="b6130-147">If `arg` is `null`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 <span data-ttu-id="b6130-148">`BinaryFormatter` può quindi essere utilizzata per fornire la formattazione personalizzata passando un `BinaryFormatter` dell'oggetto come i `provider` parametro del <xref:System.String.Format%2A> metodo, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="b6130-148">`BinaryFormatter` can then be used to provide custom formatting by passing a `BinaryFormatter` object as the `provider` parameter of the <xref:System.String.Format%2A> method, as the following example shows.</span></span>  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>