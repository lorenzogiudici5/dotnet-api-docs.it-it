<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2576510961cb47b6ac9c492844f7dae58d8f64e" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48589816" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <TypeSignature Language="F#" Value="type IFormattable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornisce funzionalità per formattare il valore di un oggetto in una rappresentazione di stringa.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IFormattable> interfaccia converte un oggetto alla relativa rappresentazione di stringa basate su una stringa di formato e un provider di formato.  
  
 In genere, una stringa di formato definisce l'aspetto generale di un oggetto. Ad esempio, .NET Framework supporta quanto segue:  
  
-   Stringhe di formato standard per la formattazione di valori di enumerazione (vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md)).  
  
-   Stringhe di formato standard e personalizzate per la formattazione di valori numerici (vedere [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) e [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md)).  
  
-   Stringhe di formato standard e personalizzate per la formattazione di valori di data e ora (vedere [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md)).  
  
-   Stringhe di formato standard e personalizzate per la formattazione di intervalli di tempo (vedere [stringhe di formato TimeSpan Standard](~/docs/standard/base-types/standard-timespan-format-strings.md) e [stringhe di formato TimeSpan personalizzate](~/docs/standard/base-types/custom-timespan-format-strings.md)).  
  
 È anche possibile definire stringhe di formato per supportare la formattazione dei tipi definiti dall'applicazione.  
  
 Un provider di formato restituisce un oggetto di formattazione che in genere definisce i simboli usati nella conversione di un oggetto alla relativa rappresentazione di stringa. Ad esempio, quando si converte un numero in un valore di valuta, un provider di formato definisce il simbolo di valuta che appare nella stringa di risultato. .NET Framework definisce tre provider di formato:  
  
-   Il <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> classe, che restituisce un <xref:System.Globalization.NumberFormatInfo> oggetto per la formattazione di valori numerici, o un <xref:System.Globalization.DateTimeFormatInfo> oggetto per la formattazione di valori data e ora.  
  
-   Il <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType> (classe), che restituisce un'istanza di se stesso per la formattazione di valori numerici.  
  
-   Il <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType> (classe), che restituisce un'istanza di se stesso per la formattazione di valori data e ora.  
  
 Inoltre, è possibile definire i propri provider di formato personalizzato per fornire impostazioni cultura specifiche, professione specifico, o informazioni specifiche del settore utilizzato per la formattazione. Per altre informazioni sull'implementazione di formattazione personalizzata mediante un provider di formato personalizzato, vedere <xref:System.ICustomFormatter>.  
  
 Il <xref:System.IFormattable> interfaccia definisce un singolo metodo, <xref:System.IFormattable.ToString%2A>, che fornisce servizi di formattazione per il tipo di implementazione. Il <xref:System.IFormattable.ToString%2A> metodo può essere chiamato direttamente. Inoltre, viene chiamato automaticamente dal <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> e <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> metodi e dai metodi che utilizzano il [funzionalità di formattazione composita](~/docs/standard/base-types/composite-formatting.md) in .NET Framework. Tali metodi includono <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, <xref:System.String.Format%2A?displayProperty=nameWithType>, e <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>, tra gli altri. Il <xref:System.IFormattable.ToString%2A> viene chiamato per ogni elemento nella stringa di formato del metodo.  
  
 Il <xref:System.IFormattable> interfaccia viene implementata dai tipi di dati di base.  
  
   
  
## Examples  
 Nell'esempio seguente viene definita una classe `Temperature` che implementa l'interfaccia <xref:System.IFormattable> . La classe supporta quattro identificatori di formato: "G" e "C", che indicano che la temperatura deve essere visualizzato in Celsius; "F", che indica che la temperatura è da visualizzare in gradi Fahrenheit; e "K", che indica che la temperatura deve essere visualizzato in Kelvin. Inoltre, il <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione possa gestire anche una stringa di formato è `null` o vuoto. Gli altri due `ToString` metodi definiti dal `Temperature` classe semplicemente il wrapping di una chiamata al <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 L'esempio seguente chiama quindi il <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementazione direttamente o tramite una stringa di formato composito.  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Le classi che richiedono un maggiore controllo sulla formattazione delle stringhe rispetto alla <see cref="M:System.Object.ToString" /> fornisce devono implementare <see cref="T:System.IFormattable" />.  
  
Una classe che implementa <see cref="T:System.IFormattable" /> deve supportare l'identificatore di formato (generale) "G". Oltre l'identificatore "G", la classe può definire l'elenco di identificatori di formato che supporta. Inoltre, la classe deve essere preparata per gestire un identificatore di formato è <see langword="null" />. Per altre informazioni sulla formattazione e codici di formattazione, vedere [formattazione di tipi](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Formattazione di tipi in .NET</related>
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member ToString : string * IFormatProvider -&gt; string" Usage="iFormattable.ToString (format, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Formato da usare.  
  
oppure 
Riferimento Null (<see langword="Nothing" /> in Visual Basic) per utilizzare il formato definito per il tipo di implementazione di <see cref="T:System.IFormattable" />.</param>
        <param name="formatProvider">Provider da usare per formattare il valore.  
  
oppure 
Riferimento Null (<see langword="Nothing" /> in Visual Basic) per ottenere le informazioni sul formato numerico dalle impostazioni locali correnti del sistema operativo.</param>
        <summary>Formatta il valore dell'istanza corrente usando il formato specificato.</summary>
        <returns>Valore dell'istanza corrente nel formato specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.IFormattable.ToString%2A> metodo converte un valore in una rappresentazione di stringa che può essere espressi in diversi modi. Il formato esatto dipende dal simboli specifici o un ordine specifico definito da impostazioni cultura specifiche, professioni o settori. È possibile chiamare il metodo direttamente. Viene inoltre chiamato automaticamente dai metodi <xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType> e <xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> e dai metodi che utilizzano la funzionalità di formattazione composita in .NET Framework, come <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> e <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. (Per altre informazioni, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).)  
  
 Chiamata di metodi di formattazione composita la <xref:System.IFormattable.ToString%2A> metodo una volta per ogni elemento di formato in una stringa di formato. I parametri passati al metodo dipendono dal metodo di formattazione specifico che viene chiamato e il contenuto dell'elemento di formato, come indicato di seguito:  
  
-   Se l'elemento di formato non include una stringa di formato (ad esempio, se l'elemento di formato è semplicemente `{0}`), viene passato `null` come valore del <xref:System.String?displayProperty=nameWithType> parametro.  
  
-   Se l'elemento di formato include una stringa di formato (ad esempio, `{0:G}`), viene passata come valore di stringa di formato di <xref:System.String?displayProperty=nameWithType> parametro.  
  
-   Se la chiamata al metodo originale non include un' <xref:System.IFormatProvider?displayProperty=nameWithType> parametro, <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> viene passato come valore del <xref:System.IFormatProvider?displayProperty=nameWithType> parametro.  
  
-   Se la chiamata al metodo originale include un' <xref:System.IFormatProvider?displayProperty=nameWithType> parametro, il provider fornito nella chiamata al metodo viene passato come valore del <xref:System.IFormatProvider?displayProperty=nameWithType> parametro.  
  
> [!NOTE]
>  Un oggetto <xref:System.IFormattable.ToString%2A> implementazione viene chiamata dai metodi di formattazione compositi solo se non vengono passati un <xref:System.ICustomFormatter> provider di formato, o se il <xref:System.ICustomFormatter.Format%2A> metodo del provider di formato personalizzato restituisce `null`.  
  
 .NET Framework include tre provider di formato, che implementano il <xref:System.IFormatProvider> interfaccia:  
  
-   <xref:System.Globalization.NumberFormatInfo> fornisce numerico, ad esempio i caratteri da usare come separatore decimale e i separatori di gruppi, informazioni di formattazione e l'ortografia e la posizione del simbolo di valuta in valori monetari.  
  
-   <xref:System.Globalization.DateTimeFormatInfo> fornisce Data-ora relative e informazioni di formattazione, ad esempio la posizione del mese, giorno e anno in un modello di Data.  
  
-   <xref:System.Globalization.CultureInfo> contiene le informazioni contenute nelle impostazioni cultura specifiche, incluse le informazioni sul formato numerico e informazioni di formattazione relative alle date e basate sul tempo di formattazione predefinite.  
  
 Inoltre, è possibile definire il proprio provider di formato personalizzato.  
  
   
  
## Examples  
 L'esempio seguente illustra un `Temperature` classe che implementa il <xref:System.IFormattable.ToString%2A> (metodo). Questo esempio di codice è parte di un esempio più esaustivo disponibile per il <xref:System.IFormattable> classe.  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> metodo deve supportare l'identificatore di formato (generale) "G". Oltre l'identificatore "G", la classe può definire l'elenco di identificatori di formato che supporta. Inoltre, la classe deve essere preparata per gestire un identificatore di formato è <see langword="null" />. Per altre informazioni sulla formattazione e codici di formattazione, vedere [formattazione di tipi](~/docs/standard/base-types/formatting-types.md).</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>