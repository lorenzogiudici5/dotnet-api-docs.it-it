<Type Name="Action&lt;T1,T2&gt;" FullName="System.Action&lt;T1,T2&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e3935625062bdf386750b32d1941d96d44d2decd" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46631125" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`2&lt;- T1, - T2&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2)(arg1 As T1, arg2 As T2)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2&gt; = delegate of 'T1 * 'T2 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
    <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che presenta due parametri e non restituisce alcun valore.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare il <xref:System.Action%602> delegato passa un metodo come parametro senza dichiarare in modo esplicito un delegato personalizzato. Metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato. Ciò significa che il metodo incapsulato deve avere due parametri che sono entrambi passati al metodo tramite valore e non deve essere restituito un valore. (In c#, il metodo deve restituire `void`. In Visual Basic deve essere definito per il `Sub`...`End Sub` costrutto. Può anche essere un metodo che restituisce un valore che viene ignorato.) In genere, tale metodo viene utilizzato per eseguire un'operazione.  
  
> [!NOTE]
>  Per fare riferimento a un metodo che presenta due parametri e restituisce un valore, usare il tipo generico <xref:System.Func%603> delegato.  
  
 Quando si usa il <xref:System.Action%602> delegato, non è necessario definire in modo esplicito un delegato che incapsula un metodo con due parametri. Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato `ConcatStrings`. Assegna un riferimento a uno dei due metodi all'istanza di delegato. Un metodo scrive nella console; due stringhe il secondo scrive due stringhe in un file.  
  
 [!code-csharp[System.Action~2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Delegate.cs#1)]
 [!code-vb[System.Action~2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/Delegate.vb#1)]  
  
 Nell'esempio seguente viene semplificato il codice creando il <xref:System.Action%602> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.  
  
 [!code-csharp[System.Action~2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Action2.cs#2)]
 [!code-vb[System.Action~2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/action2.vb#2)]  
  
 È anche possibile usare il <xref:System.Action%602> delegare con i metodi anonimi nel linguaggio c#, come illustrato nell'esempio seguente. (Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Anon.cs#3)]  
  
 È anche possibile assegnare un'espressione lambda a un <xref:System.Action%602> delegare l'istanza, come illustrato nell'esempio seguente. (Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~2#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~2/cs/Lambda.cs#4)]
 [!code-vb[System.Action~2#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~2/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`3" />
  </Docs>
</Type>