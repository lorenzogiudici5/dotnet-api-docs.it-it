<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cf9514e878010f1710a9517414d04169c8524bc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431072" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="9959f-101">Tipo di oggetti da confrontare.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9959f-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="9959f-102">Definisce un metodo generalizzato che viene implementato da un tipo di valore o da una classe per creare un metodo specifico del tipo per la determinazione dell'uguaglianza delle istanze.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9959f-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9959f-103">Questa interfaccia è implementata dai tipi i cui valori possono essere identificati (per le classi di esempio, numerici e stringa).</span><span class="sxs-lookup"><span data-stu-id="9959f-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="9959f-104">Un tipo di valore o una classe implementa il <xref:System.IEquatable%601.Equals%2A> i metodi per creare un metodo specifico del tipo appropriato per la determinazione dell'uguaglianza delle istanze.</span><span class="sxs-lookup"><span data-stu-id="9959f-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9959f-105">Il <xref:System.IComparable%601> interfaccia definisce il <xref:System.IComparable%601.CompareTo%2A> metodo, che determina l'ordinamento delle istanze del tipo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="9959f-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="9959f-106">Il <xref:System.IEquatable%601> interfaccia definisce il <xref:System.IEquatable%601.Equals%2A> metodo, che determina l'uguaglianza delle istanze del tipo di implementazione.</span><span class="sxs-lookup"><span data-stu-id="9959f-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="9959f-107">Il <xref:System.IEquatable%601> interfaccia viene utilizzata dagli oggetti di raccolte generiche, ad esempio <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, e <xref:System.Collections.Generic.LinkedList%601> durante il test per verificarne l'uguaglianza in metodi quali `Contains`, `IndexOf`, `LastIndexOf`, e `Remove`.</span><span class="sxs-lookup"><span data-stu-id="9959f-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="9959f-108">Si devono essere implementato per qualsiasi oggetto che potrebbe essere archiviato in una raccolta generica.</span><span class="sxs-lookup"><span data-stu-id="9959f-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9959f-109">Vedere l'esempio per il <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9959f-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="9959f-110">
        <para>Sostituire il parametro di tipo di <see cref="T:System.IEquatable`1" /> interfaccia con il tipo che implementa questa interfaccia.  Se si implementa <see cref="T:System.IEquatable`1" />, di eseguire l'override delle implementazioni della classe base di <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> in modo che sia coerenza con quello del relativo comportamento di <see cref="M:System.IEquatable`1.Equals(`0)" /> metodo. Se si esegue l'override <see cref="M:System.Object.Equals(System.Object)" />, l'implementazione sottoposta a override viene chiamato anche nelle chiamate alla statica <see langword="Equals(System.Object, System.Object)" /> metodo nella classe. Inoltre, è necessario eseguire l'overload di <see langword="op_Equality" /> e <see langword="op_Inequality" /> operatori. In questo modo si garantisce che tutti i test per verificarne l'uguaglianza restituiscano risultati coerenti.  <block subset="none" type="note"><para> Per informazioni sull'override <see cref="M:System.Object.Equals(System.Object)" />, vedere il <see cref="M:System.Object.Equals(System.Object)" /> articolo.  </para></block>  Per un tipo valore, è sempre necessario implementare <see cref="T:System.IEquatable`1" /> ed eseguire l'override <see cref="M:System.Object.Equals(System.Object)" /> per ottenere prestazioni migliori. <see cref="M:System.Object.Equals(System.Object)" /> caselle i tipi di valore e si basa sulla reflection per confrontare due valori per verificarne l'uguaglianza. Sia l'implementazione di <see cref="M:System.IEquatable`1.Equals(`0)" /> e l'override del <see cref="M:System.Object.Equals(System.Object)" /> deve restituire risultati coerenti.  Se si implementa <see cref="T:System.IEquatable`1" />, è necessario implementare anche <see cref="T:System.IComparable`1" /> se le istanze del tipo possono essere ordinate o ordinate. Se il tipo implementa <see cref="T:System.IComparable`1" />, è quasi sempre anche implementare <see cref="T:System.IEquatable`1" />.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="9959f-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
        </span>
      </span>
      <span data-ttu-id="9959f-111">
        <para>Si noti che non vi siano alcune progettazioni in cui un tipo supporta una relazione di ordine, ma l'uguaglianza potrebbe essere diverso da una relazione di ordinamento. Si consideri una classe 'Persona' in cui in ordine alfabetico. Due persone con lo stesso nome lo stesso ordine, ma non sono la stessa persona.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="9959f-111">
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="9959f-112">Oggetto da confrontare con l'oggetto corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9959f-112">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9959f-113">Indica se l'oggetto corrente è uguale a un altro oggetto dello stesso tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9959f-113">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9959f-114">
            <see langword="true" /> se l'oggetto corrente è uguale al parametro <paramref name="other" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9959f-114">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9959f-115">L'implementazione del <xref:System.IEquatable%601.Equals%2A> metodo deve eseguire un test per verificare l'uguaglianza con un altro oggetto di tipo `T`, lo stesso tipo dell'oggetto corrente.</span><span class="sxs-lookup"><span data-stu-id="9959f-115">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="9959f-116">Il <xref:System.IEquatable%601.Equals(%600)> metodo viene chiamato nelle circostanze seguenti:</span><span class="sxs-lookup"><span data-stu-id="9959f-116">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="9959f-117">Quando il `Equals` viene chiamato e il `other` l'argomento è un oggetto fortemente tipizzata di tipo `T`.</span><span class="sxs-lookup"><span data-stu-id="9959f-117">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="9959f-118">(Se `other` non è di tipo `T`, la base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> metodo viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="9959f-118">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="9959f-119">Dei due metodi, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offre prestazioni leggermente migliori.)</span><span class="sxs-lookup"><span data-stu-id="9959f-119">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="9959f-120">Quando vengono chiamati i metodi di ricerca di un numero di oggetti della raccolta generica.</span><span class="sxs-lookup"><span data-stu-id="9959f-120">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="9959f-121">Alcuni di questi tipi e i relativi metodi, tra cui:</span><span class="sxs-lookup"><span data-stu-id="9959f-121">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="9959f-122">Alcuni degli overload generico del <xref:System.Array.BinarySearch%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9959f-122">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="9959f-123">I metodi di ricerca di <xref:System.Collections.Generic.List%601> classe, inclusi <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, e <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9959f-123">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="9959f-124">I metodi di ricerca di <xref:System.Collections.Generic.Dictionary%602> classe, inclusi <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> e <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="9959f-124">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="9959f-125">I metodi di ricerca dell'oggetto generico <xref:System.Collections.Generic.LinkedList%601> classe, inclusi <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> e <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span><span class="sxs-lookup"><span data-stu-id="9959f-125">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9959f-126">In altre parole, per gestire la possibilità che gli oggetti di una classe verranno archiviati in una matrice o un oggetto di raccolta generica, è consigliabile implementare <xref:System.IEquatable%601> in modo che l'oggetto può essere facilmente identificato e modificato.</span><span class="sxs-lookup"><span data-stu-id="9959f-126">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="9959f-127">Quando si implementa il <xref:System.IEquatable%601.Equals%2A> (metodo), definire l'uguaglianza in modo appropriato per il tipo specificato dall'argomento tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9959f-127">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="9959f-128">Ad esempio, se l'argomento tipo è <xref:System.Int32>, definire l'uguaglianza in modo appropriato per il confronto di due interi con segno a 32 bit.</span><span class="sxs-lookup"><span data-stu-id="9959f-128">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9959f-129">Nell'esempio seguente viene illustrata l'implementazione parziale di un `Person` classe che implementa <xref:System.IEquatable%601> e ha due proprietà, `LastName` e `SSN`.</span><span class="sxs-lookup"><span data-stu-id="9959f-129">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="9959f-130">Il <xref:System.IEquatable%601.Equals%2A> metodo restituisce `True` se il `SSN` proprietà di due `Person` oggetti sono identici; in caso contrario, restituisce `False`.</span><span class="sxs-lookup"><span data-stu-id="9959f-130">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="9959f-131">`Person` è quindi possibile archiviare oggetti un <xref:System.Collections.Generic.List%601> dell'oggetto e può essere identificato tramite il `Contains` metodo, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="9959f-131">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9959f-132">
            <para>Se si implementa <see cref="M:System.IEquatable`1.Equals(`0)" />, di eseguire l'override delle implementazioni della classe base di <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> in modo che sia coerenza con quello del relativo comportamento di <see cref="M:System.IEquatable`1.Equals(`0)" /> metodo. Se si esegue l'override <see cref="M:System.Object.Equals(System.Object)" />, l'implementazione sottoposta a override viene chiamato anche nelle chiamate alla statica <see langword="Equals(System.Object, System.Object)" /> metodo nella classe. Inoltre, è necessario eseguire l'overload di <see langword="op_Equality" /> e <see langword="op_Inequality" /> operatori. In questo modo si garantisce che tutti i test per verificarne l'uguaglianza restituiscano risultati coerenti, come illustrato nell'esempio.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9959f-132">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>