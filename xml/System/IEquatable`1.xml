<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71b1ce8bef586f2453604f33dc3ca2e6f5af9bc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37728039" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">Tipo di oggetti da confrontare.</typeparam>
    <summary>Definisce un metodo generalizzato che viene implementato da un tipo di valore o da una classe per creare un metodo specifico del tipo per la determinazione dell'uguaglianza delle istanze.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa interfaccia viene implementata da tipi i cui valori possono essere identificati (per esempio, numerico e stringa classi). Un tipo di valore o una classe implementano il <xref:System.IEquatable%601.Equals%2A> per creare un metodo specifico di tipo adatto per determinare l'uguaglianza fra istanze.  
  
> [!NOTE]
>  Il <xref:System.IComparable%601> l'interfaccia definisce il <xref:System.IComparable%601.CompareTo%2A> metodo che determina l'ordinamento delle istanze del tipo di implementazione. Il <xref:System.IEquatable%601> l'interfaccia definisce il <xref:System.IEquatable%601.Equals%2A> metodo che determina l'uguaglianza fra istanze del tipo di implementazione.  
  
 Il <xref:System.IEquatable%601> interfaccia viene utilizzata dagli oggetti di insieme generici, ad esempio <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, e <xref:System.Collections.Generic.LinkedList%601> per la verifica dell'uguaglianza in metodi quali `Contains`, `IndexOf`, `LastIndexOf`, e `Remove`. Esso deve essere implementata per qualsiasi oggetto che può essere memorizzato in un insieme generico.  
  
   
  
## Examples  
 Vedere l'esempio per il <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> metodo.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Sostituire il parametro di tipo di <see cref="T:System.IEquatable`1" /> interfaccia con il tipo che implementa questa interfaccia.  Se si implementa <see cref="T:System.IEquatable`1" />, di eseguire l'override delle implementazioni della classe base di <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> in modo che il relativo comportamento sia coerenza con quello del <see cref="M:System.IEquatable`1.Equals(`0)" /> metodo. Se esegue l'override di <see cref="M:System.Object.Equals(System.Object)" />, l'implementazione sottoposta a override viene chiamata anche nelle chiamate alla proprietà statica <see langword="Equals(System.Object, System.Object)" /> metodo sulla classe. Inoltre, è necessario eseguire l'overload di <see langword="op_Equality" /> e <see langword="op_Inequality" /> gli operatori. Ciò garantisce che tutti i test di uguaglianza restituiscano risultati coerenti.  <block subset="none" type="note"><para> Per informazioni sull'override <see cref="M:System.Object.Equals(System.Object)" />, vedere il <see cref="M:System.Object.Equals(System.Object)" /> articolo.  </para></block>  Per un tipo di valore, è sempre consigliabile implementare <see cref="T:System.IEquatable`1" /> ed eseguire l'override <see cref="M:System.Object.Equals(System.Object)" /> per ottenere prestazioni migliori. <see cref="M:System.Object.Equals(System.Object)" /> le finestre di tipi di valore e si basa sulla reflection per confrontare due valori per l'uguaglianza. Sia l'implementazione di <see cref="M:System.IEquatable`1.Equals(`0)" /> e l'override di <see cref="M:System.Object.Equals(System.Object)" /> deve restituire risultati coerenti.  Se si implementa <see cref="T:System.IEquatable`1" />, è necessario implementare anche <see cref="T:System.IComparable`1" /> se le istanze del tipo possono essere ordinate o ordinate. Se il tipo implementa <see cref="T:System.IComparable`1" />, è quasi sempre anche implementare <see cref="T:System.IEquatable`1" />.</para>
      <para>Sono disponibili alcuni schemi in un tipo supporta una relazione di ordine, ma uguaglianza può essere distinta da una relazione di ordinamento. Si consideri un `Person` classe dove in ordine alfabetico. Due persone con lo stesso nome è lo stesso ordine, ma non sono la stessa persona.</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">Oggetto da confrontare con l'oggetto corrente.</param>
        <summary>Indica se l'oggetto corrente è uguale a un altro oggetto dello stesso tipo.</summary>
        <returns>
          <see langword="true" /> se l'oggetto corrente è uguale al parametro <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione di <xref:System.IEquatable%601.Equals%2A> è progettato per eseguire un test di uguaglianza con un altro oggetto di tipo `T`, lo stesso tipo dell'oggetto corrente. Il <xref:System.IEquatable%601.Equals(%600)> viene chiamato nelle seguenti circostanze:  
  
-   Quando il `Equals` viene chiamato e il `other` argomento è un oggetto fortemente tipizzato di tipo `T`. (Se `other` non è di tipo `T`, della base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> viene chiamato. Dei due metodi, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offre prestazioni leggermente migliori.)  
  
-   Quando vengono chiamati i metodi di ricerca di un numero di oggetti di insieme generici. Di seguito alcuni di questi tipi e i relativi metodi:  
  
    -   Alcuni overload generici del <xref:System.Array.BinarySearch%2A> metodo.  
  
    -   I metodi di ricerca di <xref:System.Collections.Generic.List%601> classe, tra cui <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, e <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.  
  
    -   I metodi di ricerca di <xref:System.Collections.Generic.Dictionary%602> classe, tra cui <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> e <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.  
  
    -   I metodi di ricerca del tipo generico <xref:System.Collections.Generic.LinkedList%601> classe, tra cui <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> e <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.  
  
 In altre parole, per gestire la possibilità che gli oggetti di una classe vengano archiviati in una matrice o un oggetto insieme generico, è consigliabile implementare <xref:System.IEquatable%601> in modo che l'oggetto può essere facilmente identificato e modificato.  
  
 Quando si implementa il <xref:System.IEquatable%601.Equals%2A> metodo, definire l'uguaglianza in modo appropriato per il tipo specificato dall'argomento di tipo generico. Ad esempio, se l'argomento di tipo è <xref:System.Int32>, definire l'uguaglianza in modo appropriato per il confronto di due interi con segno a 32 bit.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata l'implementazione parziale di un `Person` classe che implementa <xref:System.IEquatable%601> e ha due proprietà, `LastName` e `SSN`. Il <xref:System.IEquatable%601.Equals%2A> metodo `True` se il `SSN` proprietà di due `Person` oggetti è identico a; in caso contrario, restituisce `False`.  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` gli oggetti possono quindi essere archiviati in un <xref:System.Collections.Generic.List%601> oggetto e possono essere identificati tramite il `Contains` metodo, come illustrato nell'esempio seguente.  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si implementa <see cref="M:System.IEquatable`1.Equals(`0)" />, di eseguire l'override delle implementazioni della classe base di <see cref="M:System.Object.Equals(System.Object)" /> e <see cref="M:System.Object.GetHashCode" /> in modo che il relativo comportamento sia coerenza con quello del <see cref="M:System.IEquatable`1.Equals(`0)" /> metodo. Se esegue l'override di <see cref="M:System.Object.Equals(System.Object)" />, l'implementazione sottoposta a override viene chiamata anche nelle chiamate alla proprietà statica <see langword="Equals(System.Object, System.Object)" /> metodo sulla classe. Inoltre, è necessario eseguire l'overload di <see langword="op_Equality" /> e <see langword="op_Inequality" /> gli operatori. Ciò garantisce che tutti i test di uguaglianza restituiscano risultati coerenti, come illustrato nell'esempio.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>