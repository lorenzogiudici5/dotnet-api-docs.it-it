<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96fd7d37809a311f589d8aebd6325fa8e619f81a" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52240739" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indica che un'enumerazione può essere gestita come un campo di bit, ovvero un set di flag.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I campi di bit vengono generalmente utilizzati per gli elenchi di elementi che possono ricorrere in combinazioni, mentre le costanti di enumerazione vengono in genere utilizzate per gli elenchi di elementi si escludono a vicenda. Di conseguenza, i campi di bit sono progettati per essere combinati con un'operazione OR bit per bit per generare i valori senza nome, mentre non sono costanti enumerate. Lingue variano l'uso dei campi di bit rispetto a costanti di enumerazione.  
  
## <a name="attributes-of-the-flagsattribute"></a>Attributi di FlagsAttribute  
 <xref:System.AttributeUsageAttribute> viene applicata a questa classe e il relativo <xref:System.AttributeUsageAttribute.Inherited%2A> proprietà specifica `false`. Questo attributo può essere applicato solo alle enumerazioni.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Linee guida per FlagsAttribute ed Enum  
  
-   Usare il <xref:System.FlagsAttribute> attributo personalizzato per un'enumerazione solo se un'operazione OR bit per bit (AND, OR esclusivo o) deve essere eseguita su un valore numerico.  
  
-   Definire le costanti di enumerazione in potenze di due, ovvero 1, 2, 4, 8 e così via. Ciò significa che i singoli flag in costanti di enumerazione combinato non si sovrappongano.  
  
-   È consigliabile creare una costante enumerata per le combinazioni di flag di uso comune. Ad esempio, se si dispone di un'enumerazione utilizzata per le operazioni dei / o file che contiene le costanti enumerate `Read = 1` e `Write = 2`, è consigliabile creare costante enumerata `ReadWrite = Read OR Write`, che combina il `Read` e `Write` flag. Inoltre, l'operazione OR bit per bit usato per combinare i flag può essere considerato un concetto avanzato in alcuni casi che non dovrebbe essere necessaria per eseguire semplici operazioni.  
  
-   Prestare attenzione se si definisce un numero negativo come una costante enumerata flag perché molte posizioni di flag potrebbero essere impostate su 1, che potrebbe rendere il codice di confusione e incoraggiare gli errori di codifica.  
  
-   Un modo pratico per verificare se un flag è impostato in un valore numerico è eseguire un'operazione con AND bit per bit tra il valore numerico e costante enumerata flag, che imposta il valore numerico da zero, che non corrispondono al flag di tutti i bit , quindi verificare se il risultato di tale operazione è uguale alla costante enumerata di flag.  
  
-   Usare `None` come il nome del flag enumerato costante il cui valore è zero. Non è possibile usare il `None` costante enumerata in un'operazione con AND bit per bit per testare un flag perché il risultato è sempre zero. Tuttavia, è possibile eseguire una logica, non un confronto bit per bit tra il valore numerico e `None` costante enumerata per determinare se si assegnano bit nel valore numerico.  
  
     Se si crea un'enumerazione dei valori anziché un'enumerazione di flag, è comunque utile creare un `None` costante enumerata. Il motivo è che per impostazione predefinita la memoria utilizzata per l'enumerazione viene inizializzata su zero da common language runtime. Di conseguenza, se non si definisce una costante il cui valore è uguale a zero, l'enumerazione contiene un valore non valido al momento della creazione.  
  
     Se è presente un case predefinito che deve rappresentare l'applicazione, è consigliabile usare una costante enumerata il cui valore è uguale a zero per rappresentare il valore predefinito. Se non c'è nessun caso predefinito, è consigliabile utilizzare una costante enumerata il cui valore è zero che significa che il case che non è rappresentato da una delle altre costanti enumerate.  
  
-   Non definire un valore di enumerazione esclusivamente per rispecchiare lo stato dell'enumerazione stessa. Ad esempio, si definisce una costante enumerata che si limita a contrassegnare la fine dell'enumerazione. Se è necessario determinare l'ultimo valore dell'enumerazione, verificare la presenza di tale valore in modo esplicito. Inoltre, è possibile eseguire una verifica di intervallo per costante enumerata e il cognome se tutti i valori all'interno dell'intervallo sono validi.  
  
-   Non si specifica costanti enumerate che sono riservate per utilizzi futuri.  
  
-   Quando si definisce un metodo o proprietà che accetta un valore costante enumerata, prendere in considerazione la convalida del valore. Il motivo è è possibile eseguire il cast di un valore numerico per il tipo di enumerazione anche se tale valore numerico non è definito nell'enumerazione.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del `FlagsAttribute` dell'attributo e Mostra l'effetto sul <xref:System.Enum.ToString%2A> metodo di utilizzo `FlagsAttribute` su un <xref:System.Enum> dichiarazione.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 L'esempio seguente definisce due enumerazioni, correlate al colore `SingleHue` e `MultiHue`. Quest'ultimo ha il `FlagsAttribute` attributo; non è il primo. L'esempio illustra la differenza nel comportamento quando un intervallo di numeri interi, inclusi valori interi che non rappresentano valori sottostanti del tipo di enumerazione, viene eseguito il cast al tipo di enumerazione e le relative rappresentazioni di stringa visualizzate.   Ad esempio, si noti che 3 non può essere rappresentato come un `SingleHue` valore perché 3 non è il valore sottostante di qualsiasi `SingleHue` membro, mentre il `FlagsAttribute` attributo consente di rappresentare 3 come un `MultiHue` valore `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.FlagsAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 L'esempio seguente definisce un `PhoneService` enumerazione che rappresenta i form di comunicazione forniti da una compagnia telefonica. Inizializza le tre variabili che rappresentano il servizio fornito ai tre famiglie diverse e quindi indica quali famiglie non dispone di alcun servizio, quali famiglie hanno solo servizio di telefoni cellulari e quali famiglie hanno un telefono cellulare sia ' s land servizio riga. Infine, viene chiamato in modo implicito il <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodo per visualizzare i tipi di servizio fornito per ogni nucleo familiare.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Nell'esempio seguente viene illustrato l'utilizzo del `FlagsAttribute` dell'attributo e Mostra l'effetto sul <xref:System.Enum.ToString%2A> metodo di utilizzo `FlagsAttribute` su un <xref:System.Enum> dichiarazione.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>