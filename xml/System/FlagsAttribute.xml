<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b2417901d3ec970c72a2c6cc0524b2108855ce0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431664" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="0a87e-101">Indica che un'enumerazione può essere gestita come un campo di bit, ovvero un set di flag.</span>
      <span class="sxs-lookup">
        <span data-stu-id="0a87e-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0a87e-102">I campi di bit vengono in genere utilizzati per gli elenchi di elementi che possono ricorrere in combinazioni, mentre le costanti di enumerazione sono in genere utilizzate per elenchi di elementi si escludono a vicenda.</span><span class="sxs-lookup"><span data-stu-id="0a87e-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="0a87e-103">Pertanto, i campi di bit sono progettati per essere combinati con un'operazione OR bit per bit per generare i valori senza nome, mentre non sono costanti enumerate.</span><span class="sxs-lookup"><span data-stu-id="0a87e-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="0a87e-104">Lingue variano l'uso dei campi di bit rispetto alle costanti di enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="0a87e-105">Attributi di FlagsAttribute</span><span class="sxs-lookup"><span data-stu-id="0a87e-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="0a87e-106"><xref:System.AttributeUsageAttribute> viene applicata a questa classe e il relativo <xref:System.AttributeUsageAttribute.Inherited%2A> proprietà specifica `false`.</span><span class="sxs-lookup"><span data-stu-id="0a87e-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="0a87e-107">Questo attributo può essere applicato solo alle enumerazioni.</span><span class="sxs-lookup"><span data-stu-id="0a87e-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="0a87e-108">Linee guida per FlagsAttribute ed Enum</span><span class="sxs-lookup"><span data-stu-id="0a87e-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="0a87e-109">Utilizzare il <xref:System.FlagsAttribute> attributo personalizzato per un'enumerazione solo se è un'operazione bit per bit (AND, OR esclusivo o) deve essere eseguita su un valore numerico.</span><span class="sxs-lookup"><span data-stu-id="0a87e-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="0a87e-110">Definire le costanti di enumerazione in potenze di due, ovvero 1, 2, 4, 8 e così via.</span><span class="sxs-lookup"><span data-stu-id="0a87e-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="0a87e-111">Ciò significa che i singoli flag nelle costanti di enumerazione combinate non si sovrappongano.</span><span class="sxs-lookup"><span data-stu-id="0a87e-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="0a87e-112">È consigliabile creare una costante enumerata per le combinazioni di flag di uso comune.</span><span class="sxs-lookup"><span data-stu-id="0a87e-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="0a87e-113">Ad esempio, se si dispone di un'enumerazione utilizzata per le operazioni dei / o file che contiene le costanti enumerate `Read = 1` e `Write = 2`, è consigliabile creare costante enumerata `ReadWrite = Read OR Write`, che combina il `Read` e `Write` flag.</span><span class="sxs-lookup"><span data-stu-id="0a87e-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="0a87e-114">Inoltre, l'operazione OR bit per bit usato per combinare i flag può essere considerato un concetto avanzato in alcuni casi che non devono essere necessaria per semplici attività.</span><span class="sxs-lookup"><span data-stu-id="0a87e-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="0a87e-115">Prestare attenzione se si definisce un numero negativo come costante enumerata di flag poiché molte posizioni di flag potrebbero essere impostate su 1, che potrebbe rendere il codice poco chiaro e incoraggiare gli errori di codifica.</span><span class="sxs-lookup"><span data-stu-id="0a87e-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="0a87e-116">Un modo pratico per verificare se è impostato un flag in un valore numerico è per eseguire un'operazione con AND bit per bit tra il valore numerico e costante enumerata di flag, che imposta tutti i bit nel valore numerico da zero, che non corrispondono al flag , quindi verificare se il risultato di tale operazione è uguale alla costante enumerata di flag.</span><span class="sxs-lookup"><span data-stu-id="0a87e-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="0a87e-117">Utilizzare `None` come il nome del flag costante enumerata il cui valore è zero.</span><span class="sxs-lookup"><span data-stu-id="0a87e-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="0a87e-118">Non è possibile utilizzare il `None` costante enumerata in un'operazione con AND bit per bit per verificare un flag perché il risultato è sempre zero.</span><span class="sxs-lookup"><span data-stu-id="0a87e-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="0a87e-119">Tuttavia, è possibile eseguire una logica, non un confronto bit per bit tra il valore numerico e `None` costante enumerata per determinare se si assegnano bit del valore numerico.</span><span class="sxs-lookup"><span data-stu-id="0a87e-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="0a87e-120">Se si crea un'enumerazione dei valori anziché un'enumerazione flags, risulta comunque utile creare un `None` costante enumerata.</span><span class="sxs-lookup"><span data-stu-id="0a87e-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="0a87e-121">Il motivo è che per impostazione predefinita la memoria utilizzata per l'enumerazione è inizializzata su zero da common language runtime.</span><span class="sxs-lookup"><span data-stu-id="0a87e-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="0a87e-122">Di conseguenza, se non si definisce una costante il cui valore è uguale a zero, l'enumerazione conterrà un valore non valido al momento della creazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="0a87e-123">Se è un caso predefinito ovvio che deve rappresentare l'applicazione, è consigliabile utilizzare una costante enumerata il cui valore è uguale a zero per rappresentare il valore predefinito.</span><span class="sxs-lookup"><span data-stu-id="0a87e-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="0a87e-124">Se non esiste alcun caso predefinito, valutare l'uso di una costante enumerata il cui valore è zero che significa che non è rappresentato da una delle altre costanti enumerate.</span><span class="sxs-lookup"><span data-stu-id="0a87e-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="0a87e-125">Non definire un valore di enumerazione esclusivamente per rispecchiare lo stato dell'enumerazione stessa.</span><span class="sxs-lookup"><span data-stu-id="0a87e-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="0a87e-126">Ad esempio, si definisce una costante enumerata che semplicemente contrassegna la fine dell'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="0a87e-127">Se è necessario determinare l'ultimo valore dell'enumerazione, controllare in modo esplicito per quel valore.</span><span class="sxs-lookup"><span data-stu-id="0a87e-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="0a87e-128">Inoltre, è possibile eseguire un controllo di intervallo per la prima e ultima costante enumerata se tutti i valori all'interno dell'intervallo sono validi.</span><span class="sxs-lookup"><span data-stu-id="0a87e-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="0a87e-129">Non si specifica costanti enumerate che sono riservate per utilizzi futuri.</span><span class="sxs-lookup"><span data-stu-id="0a87e-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="0a87e-130">Quando si definisce un metodo o proprietà che accetta una costante enumerata come valore, prendere in considerazione la convalida del valore.</span><span class="sxs-lookup"><span data-stu-id="0a87e-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="0a87e-131">Il motivo è che, anche se tale valore numerico non è definito nell'enumerazione, è possibile impostare un valore numerico per il tipo di enumerazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0a87e-132">Nell'esempio seguente viene illustrato l'utilizzo del `FlagsAttribute` dell'attributo e Mostra l'effetto sul <xref:System.Enum.ToString%2A> metodo di utilizzo `FlagsAttribute` su un <xref:System.Enum> dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="0a87e-133">L'esempio seguente definisce due enumerazioni correlate al colore `SingleHue` e `MultiHue`.</span><span class="sxs-lookup"><span data-stu-id="0a87e-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="0a87e-134">Quest'ultimo ha il `FlagsAttribute` attributo; il primo non lo è.</span><span class="sxs-lookup"><span data-stu-id="0a87e-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="0a87e-135">L'esempio mostra la differenza nel comportamento quando viene eseguito il cast di un intervallo di numeri interi, inclusi valori integer che rappresenta i valori sottostanti del tipo di enumerazione, per il tipo di enumerazione e le relative rappresentazioni di stringa visualizzate.</span><span class="sxs-lookup"><span data-stu-id="0a87e-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="0a87e-136">Ad esempio, si noti che 3 non può essere rappresentato come un `SingleHue` valore perché 3 non è il valore sottostante di qualsiasi `SingleHue` membro, mentre il `FlagsAttribute` attributo consente di rappresentare 3 come una `MultiHue` valore `Black, Red`.</span><span class="sxs-lookup"><span data-stu-id="0a87e-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="0a87e-137">Inizializza una nuova istanza della classe <see cref="T:System.FlagsAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="0a87e-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0a87e-138">L'esempio seguente definisce un `PhoneService` enumerazione che rappresenta i form di comunicazione fornito da una società di telefono.</span><span class="sxs-lookup"><span data-stu-id="0a87e-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="0a87e-139">Inizializza le tre variabili che rappresentano il servizio fornito ai tre famiglie diverse e indicherà quali famiglie non dispone di alcun servizio, quali famiglie solo servizio di telefoni cellulari e quali famiglie servizio riga sia telefoni cellulari e terreni.</span><span class="sxs-lookup"><span data-stu-id="0a87e-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="0a87e-140">Infine, chiama in modo implicito il <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> metodo per visualizzare i tipi di servizio fornito per ogni famiglia.</span><span class="sxs-lookup"><span data-stu-id="0a87e-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="0a87e-141">Nell'esempio seguente viene illustrato l'utilizzo del `FlagsAttribute` dell'attributo e Mostra l'effetto sul <xref:System.Enum.ToString%2A> metodo di utilizzo `FlagsAttribute` su un <xref:System.Enum> dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="0a87e-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>