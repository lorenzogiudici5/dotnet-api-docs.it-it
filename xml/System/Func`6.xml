<Type Name="Func&lt;T1,T2,T3,T4,T5,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6e065278f3b478a07daafad0fcd2cc91c369830" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36431261" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`6&lt;- T1, - T2, - T3, - T4, - T5, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`6" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 * 'T4 * 'T5 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="TResult">Tipo del valore restituito del metodo incapsulato da questo delegato.</typeparam>
    <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che dispone di cinque parametri e restituisce un valore del tipo specificato dal parametro <typeparamref name="TResult" />.</summary>
    <returns>Valore restituito del metodo incapsulato da questo delegato.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile usare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato. Metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato. Ciò significa che il metodo incapsulato deve avere cinque parametri, ognuno dei quali viene passato per valore, e che deve restituire un valore.  
  
> [!NOTE]
>  Per fare riferimento a un metodo che presenta cinque parametri e restituisce `void` (o in Visual Basic, che è dichiarato come un `Sub` anziché come una `Function`), usare il tipo generico <xref:System.Action%605> delegato.  
  
 È anche possibile usare il <xref:System.Func%606> delegati con metodi anonimi ed espressioni lambda.  
  
 Il tipo sottostante di un'espressione lambda è uno del tipo generico `Func` delegati. Questo rende possibile passare un'espressione lambda come un parametro senza assegnazione esplicita di un delegato.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`5" />
  </Docs>
</Type>