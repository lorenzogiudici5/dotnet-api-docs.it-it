<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="e01dd-101">Tipo di oggetto che viene inizializzato in modo differito.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e01dd-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="e01dd-102">Fornisce il supporto per l'inizializzazione differita.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e01dd-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-103">Utilizzare l'inizializzazione differita per rinviare la creazione di un oggetto di grandi dimensioni o risorse o l'esecuzione di un'attività a elevato utilizzo di risorse, in particolare quando tale creazione o esecuzione potrebbe non verificarsi durante la durata del programma.</span><span class="sxs-lookup"><span data-stu-id="e01dd-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="e01dd-104">Per preparare per l'inizializzazione differita, si crea un'istanza di <xref:System.Lazy%601>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="e01dd-105">L'argomento del tipo di <xref:System.Lazy%601> che l'oggetto creato specifica il tipo di oggetto che si desidera inizializzare in modo differito.</span><span class="sxs-lookup"><span data-stu-id="e01dd-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="e01dd-106">Il costruttore che consente di creare il <xref:System.Lazy%601> oggetto determina le caratteristiche dell'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="e01dd-107">L'inizializzazione differita viene eseguita la prima volta che si accede alla proprietà <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="e01dd-108">Nella maggior parte dei casi, la scelta di un costruttore dipende le risposte alle due domande:</span><span class="sxs-lookup"><span data-stu-id="e01dd-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="e01dd-109">Verrà eseguito l'oggetto inizializzato in modo differito da più thread?</span><span class="sxs-lookup"><span data-stu-id="e01dd-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="e01dd-110">In questo caso, il <xref:System.Lazy%601> oggetto potrebbe creare in qualsiasi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="e01dd-111">È possibile utilizzare uno dei costruttori semplici il cui comportamento predefinito consiste nel creare un thread-safe <xref:System.Lazy%601> dell'oggetto, quindi viene creata solo un'istanza dell'oggetto in modo differito creata un'istanza indipendentemente dal numero di thread tenta di accedervi.</span><span class="sxs-lookup"><span data-stu-id="e01dd-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="e01dd-112">Per creare un <xref:System.Lazy%601> oggetto che non è thread-safe, è necessario utilizzare un costruttore che consente di non specificare di thread-safe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="e01dd-113">Effettua il <xref:System.Lazy%601> affidabile oggetto non consente di proteggere l'oggetto con inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="e01dd-114">Se più thread può accedere all'oggetto con inizializzazione differita, è necessario apportare le proprietà e metodi sicuri per l'accesso multithreading.</span><span class="sxs-lookup"><span data-stu-id="e01dd-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="e01dd-115">L'inizializzazione differita richiede una grande quantità di codice o l'oggetto con inizializzazione differita privo di un costruttore predefinito che esegue tutti gli elementi necessari e non genera eccezioni?</span><span class="sxs-lookup"><span data-stu-id="e01dd-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="e01dd-116">Se è necessario scrivere codice di inizializzazione o se le eccezioni devono essere gestite, utilizzare uno dei costruttori che accettano un metodo factory.</span><span class="sxs-lookup"><span data-stu-id="e01dd-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="e01dd-117">Scrivere il codice di inizializzazione nel metodo factory.</span><span class="sxs-lookup"><span data-stu-id="e01dd-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="e01dd-118">La tabella seguente illustra il costruttore di scegliere, in base a questi due fattori:</span><span class="sxs-lookup"><span data-stu-id="e01dd-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="e01dd-119">Oggetto accederanno</span><span class="sxs-lookup"><span data-stu-id="e01dd-119">Object will be accessed by</span></span>|<span data-ttu-id="e01dd-120">Se è richiesto alcun codice di inizializzazione (costruttore predefinito), usare</span><span class="sxs-lookup"><span data-stu-id="e01dd-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="e01dd-121">Se il codice di inizializzazione è necessario, utilizzare</span><span class="sxs-lookup"><span data-stu-id="e01dd-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="e01dd-122">Più thread</span><span class="sxs-lookup"><span data-stu-id="e01dd-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="e01dd-123">Un thread</span><span class="sxs-lookup"><span data-stu-id="e01dd-123">One thread</span></span>|<span data-ttu-id="e01dd-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> con `isThreadSafe` impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="e01dd-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> con `isThreadSafe` impostato su `false`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="e01dd-126">È possibile utilizzare un'espressione lambda per specificare il metodo factory.</span><span class="sxs-lookup"><span data-stu-id="e01dd-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="e01dd-127">In questo modo tutto il codice di inizializzazione in un'unica posizione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="e01dd-128">L'espressione lambda acquisisce il contesto, inclusi gli eventuali argomenti passati al costruttore dell'oggetto con inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="e01dd-129">**La memorizzazione nella cache di eccezione** quando si utilizzano metodi factory, le eccezioni vengono memorizzati nella cache.</span><span class="sxs-lookup"><span data-stu-id="e01dd-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="e01dd-130">Ovvero, se il metodo factory genera un'ora la prima eccezione un thread tenta di accedere il <xref:System.Lazy%601.Value%2A> proprietà del <xref:System.Lazy%601> dell'oggetto, la stessa eccezione viene generata a ogni tentativo successivo.</span><span class="sxs-lookup"><span data-stu-id="e01dd-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="e01dd-131">Ciò garantisce che ogni chiamata al <xref:System.Lazy%601.Value%2A> proprietà produce lo stesso risultato, evitando errori difficili da rilevare che potrebbero verificarsi se diversi thread ottengano risultati diversi.</span><span class="sxs-lookup"><span data-stu-id="e01dd-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="e01dd-132">Il <xref:System.Lazy%601> sostituisce una vera e propria `T` che in caso contrario sarebbe sono stati inizializzati in precedenza, in genere durante l'avvio.</span><span class="sxs-lookup"><span data-stu-id="e01dd-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="e01dd-133">È in genere irreversibile un errore al momento precedente.</span><span class="sxs-lookup"><span data-stu-id="e01dd-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="e01dd-134">Se è presente un potenziale di un errore reversibile, è consigliabile compilare la logica di riesecuzione in routine di inizializzazione (in questo caso, il metodo factory), così come accadrebbe se non è stato utilizzato l'inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="e01dd-135">**In alternativa al blocco** In alcuni casi, si potrebbe voler evitare il sovraccarico dovuto il <xref:System.Lazy%601> dell'oggetto predefinito di comportamento di blocco.</span><span class="sxs-lookup"><span data-stu-id="e01dd-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="e01dd-136">In rari casi, potrebbe esserci un rischio di deadlock.</span><span class="sxs-lookup"><span data-stu-id="e01dd-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="e01dd-137">In questi casi, è possibile utilizzare il <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> costruttore e specificare <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-138">In questo modo il <xref:System.Lazy%601> oggetto per creare una copia dell'oggetto con inizializzazione differita in ognuno dei diversi thread se il thread chiama il <xref:System.Lazy%601.Value%2A> proprietà contemporaneamente.</span><span class="sxs-lookup"><span data-stu-id="e01dd-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="e01dd-139">Il <xref:System.Lazy%601> oggetto assicura che tutti i thread di utilizzare la stessa istanza dell'oggetto inizializzato in modalità differita ed Elimina le istanze che non vengono utilizzate.</span><span class="sxs-lookup"><span data-stu-id="e01dd-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="e01dd-140">Pertanto, il costo di ridurre l'overhead dei blocchi è che il programma potrebbe talvolta creare e rimuovere le copie aggiuntive di un oggetto dispendioso.</span><span class="sxs-lookup"><span data-stu-id="e01dd-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="e01dd-141">Nella maggior parte dei casi, è improbabile che ciò.</span><span class="sxs-lookup"><span data-stu-id="e01dd-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="e01dd-142">Gli esempi per il <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> costruttori illustrano questo comportamento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e01dd-143">Quando si specifica <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, le eccezioni non vengono mai memorizzati nella cache, anche se si specifica un metodo factory.</span><span class="sxs-lookup"><span data-stu-id="e01dd-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="e01dd-144">**Costruttori equivalenti** oltre a consentire l'utilizzo di <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> costruttori possono duplicare la funzionalità degli altri costruttori.</span><span class="sxs-lookup"><span data-stu-id="e01dd-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="e01dd-145">Nella tabella seguente vengono illustrati i valori di parametro che producono un comportamento equivalente.</span><span class="sxs-lookup"><span data-stu-id="e01dd-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="e01dd-146">Per creare un <xref:System.Lazy%601> oggetto</span><span class="sxs-lookup"><span data-stu-id="e01dd-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="e01dd-147">Per i costruttori che hanno un `LazyThreadSafetyMode` `mode` parametro, impostare `mode` per</span><span class="sxs-lookup"><span data-stu-id="e01dd-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="e01dd-148">Per i costruttori che dispongono di un valore booleano `isThreadSafe` parametro, impostare `isThreadSafe` per</span><span class="sxs-lookup"><span data-stu-id="e01dd-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="e01dd-149">Per i costruttori senza parametri di thread safety</span><span class="sxs-lookup"><span data-stu-id="e01dd-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="e01dd-150">Completamente thread-safe. utilizza il blocco per garantire che un solo thread Inizializza il valore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="e01dd-151">Tutti questi costruttori sono completamente thread-safe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="e01dd-152">Non i thread-safe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="e01dd-153">Non applicabile.</span><span class="sxs-lookup"><span data-stu-id="e01dd-153">Not applicable.</span></span>|  
|<span data-ttu-id="e01dd-154">Completamente thread-safe. i thread concorrono per inizializzare il valore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="e01dd-155">Non applicabile.</span><span class="sxs-lookup"><span data-stu-id="e01dd-155">Not applicable.</span></span>|<span data-ttu-id="e01dd-156">Non applicabile.</span><span class="sxs-lookup"><span data-stu-id="e01dd-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="e01dd-157">**Altre funzionalità** per informazioni sull'utilizzo di <xref:System.Lazy%601> con i campi statici thread o come archivio di backup per le proprietà, vedere [l'inizializzazione differita](~/docs/framework/performance/lazy-initialization.md).</span><span class="sxs-lookup"><span data-stu-id="e01dd-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-158">Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.Lazy%601> classe per fornire l'inizializzazione differita, con accesso da più thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-159">Nell'esempio viene utilizzato il <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="e01dd-160">Viene inoltre illustrato l'utilizzo del <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> costruttore (specificando `true` per `isThreadSafe`) e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> costruttore (specificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> per `mode`).</span><span class="sxs-lookup"><span data-stu-id="e01dd-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="e01dd-161">Per passare a un costruttore diverso, è sufficiente modificare costruttori sono impostate come commento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="e01dd-162">Per un esempio che illustra l'eccezione di memorizzazione nella cache utilizzando il costruttore stesso, vedere il <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-163">Nell'esempio viene definita una classe `LargeObject` che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="e01dd-164">Le quattro sezioni principali del codice vengono illustrate la creazione di inizializzatore, il metodo factory, effettiva inizializzazione e il costruttore del `LargeObject` (classe), che visualizza un messaggio quando viene creato l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="e01dd-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="e01dd-165">All'inizio del metodo `Main`, viene creato un inizializzatore thread-safe differito per `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-166">Il metodo factory illustra la creazione dell'oggetto, con un segnaposto per un'ulteriore inizializzazione:</span><span class="sxs-lookup"><span data-stu-id="e01dd-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="e01dd-167">Si noti che le sezioni di codice primi due possono essere combinate tramite una funzione lambda, come illustrato di seguito:</span><span class="sxs-lookup"><span data-stu-id="e01dd-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="e01dd-168">Nell'esempio viene sospeso, per indicare che un periodo di tempo indeterminato potrebbe trascorrere prima che venga eseguita l'inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="e01dd-169">Quando si preme il **invio** chiave, l'esempio crea e avvia tre thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="e01dd-170">Il `ThreadProc` metodo utilizzato da tutte le chiamate tre thread di <xref:System.Lazy%601.Value%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e01dd-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="e01dd-171">La prima volta in questo caso, il `LargeObject` viene creata l'istanza:</span><span class="sxs-lookup"><span data-stu-id="e01dd-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-172">Il costruttore del `LargeObject` (classe), che include l'ultima chiave sezione di codice, viene visualizzato un messaggio e registra l'identità del thread durante l'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="e01dd-173">L'output del programma viene visualizzato alla fine del listato di codice completo.</span><span class="sxs-lookup"><span data-stu-id="e01dd-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-174">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-175">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e01dd-176">Per impostazione predefinita, tutti i membri pubblici e protetti della <see cref="T:System.Lazy`1" /> classe sono thread-safe e possono essere utilizzati contemporaneamente da più thread.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e01dd-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="e01dd-177">Facoltativamente e per ogni istanza, utilizzando i parametri nei costruttori del tipo, è possibile rimuovere le garanzie di thread safety.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e01dd-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e01dd-178">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e01dd-179">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="e01dd-180">Quando si verifica l'inizializzazione differita, viene usato il costruttore predefinito del tipo di destinazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-181">Un'istanza che viene creata con questo costruttore può essere utilizzata contemporaneamente da più thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="e01dd-182">La modalità thread safety di un <xref:System.Lazy%601> istanza che viene inizializzato con questo costruttore è <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-183">La modalità thread safety viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="e01dd-184">Oggetto <xref:System.Lazy%601> istanza che viene creato con questo costruttore non memorizzato nella cache di eccezioni.</span><span class="sxs-lookup"><span data-stu-id="e01dd-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="e01dd-185">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-186">Nell'esempio seguente viene illustrato l'utilizzo del costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="e01dd-187">Viene inoltre illustrato l'utilizzo del <xref:System.Lazy%601.%23ctor%28System.Boolean%29> costruttore (specificando `true` per `isThreadSafe`) e <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> costruttore (specificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> per `mode`).</span><span class="sxs-lookup"><span data-stu-id="e01dd-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="e01dd-188">Per passare a un costruttore diverso, è sufficiente modificare costruttori sono impostate come commento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="e01dd-189">Nell'esempio viene definita una classe `LargeObject` che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="e01dd-190">Le due chiavi righe di codice in questo esempio sono la creazione di inizializzatore e l'inizializzazione effettivo.</span><span class="sxs-lookup"><span data-stu-id="e01dd-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="e01dd-191">All'inizio del metodo `Main`, viene creato un inizializzatore thread-safe differito per `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-192">L'esempio crea e avvia tre thread che bloccano su un <xref:System.Threading.ManualResetEvent> dell'oggetto, in modo che l'esempio è possibile rilasciare i thread in una sola volta.</span><span class="sxs-lookup"><span data-stu-id="e01dd-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="e01dd-193">Il `ThreadProc` metodo utilizzato da tutte le chiamate tre thread di <xref:System.Lazy%601.Value%2A> proprietà da ottenere il `LargeObject` istanza:</span><span class="sxs-lookup"><span data-stu-id="e01dd-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-194">Il <xref:System.Lazy%601> classe fornisce il blocco, in modo che è consentito un solo thread per creare il `LargeObject` istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="e01dd-195">Nell'esempio viene illustrato che il thread tutti ottengano la stessa istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-196">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-197">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="e01dd-198">
            <see langword="true" /> per far sì che l'istanza sia utilizzabile contemporaneamente da più thread; <see langword="false" /> per far sì che l'istanza sia utilizzabile da un solo thread alla volta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e01dd-199">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="e01dd-200">Quando si verifica l'inizializzazione differita, vengono usati il costruttore predefinito del tipo di destinazione e la modalità di inizializzazione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-201">La modalità thread safety di un <xref:System.Lazy%601> istanza che viene inizializzato con questo costruttore è <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> se `isThreadSafe` è `true`; in caso contrario, la modalità è <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-202">La modalità thread safety viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="e01dd-203">Per specificare il <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modalità, utilizzare il <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-204">Oggetto <xref:System.Lazy%601> istanza che viene creato con questo costruttore non memorizzato nella cache di eccezioni.</span><span class="sxs-lookup"><span data-stu-id="e01dd-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="e01dd-205">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-206">Nell'esempio seguente viene illustrato l'utilizzo di questo costruttore per creare un inizializzatore lazy che non è thread-safe, per gli scenari in cui si verifica ogni accesso all'oggetto con inizializzazione differita sullo stesso thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="e01dd-207">Viene inoltre illustrato l'utilizzo del <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> costruttore (specificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> per `mode`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="e01dd-208">Per passare a un costruttore diverso, è sufficiente modificare il costruttore viene impostata come commento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-209">Per il codice viene illustrato come utilizzare questo costruttore negli scenari multithreading (specificando `true` per `isThreadSafe`), vedere l'esempio per il <xref:System.Lazy%601.%23ctor> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-210">Nell'esempio viene definito un `LargeObject` classe che verrà inizializzata in modo differito.</span><span class="sxs-lookup"><span data-stu-id="e01dd-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="e01dd-211">Nel `Main` (metodo), nell'esempio viene creato un <xref:System.Lazy%601> istanza e quindi si verifica una sospensione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="e01dd-212">Quando si preme il **invio** chiave, nell'esempio si accede di <xref:System.Lazy%601.Value%2A> proprietà del <xref:System.Lazy%601> istanza, che provoca l'inizializzazione di.</span><span class="sxs-lookup"><span data-stu-id="e01dd-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="e01dd-213">Il costruttore del `LargeObject` classe viene visualizzato un messaggio di console.</span><span class="sxs-lookup"><span data-stu-id="e01dd-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-214">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-215">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="e01dd-216">Delegato richiamato per produrre il valore inizializzato in modalità differita quando è necessario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e01dd-217">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="e01dd-218">Quando si verifica l'inizializzazione differita, viene usata la funzione specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-219">Un'istanza che viene creata con questo costruttore può essere utilizzata contemporaneamente da più thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="e01dd-220">La modalità thread safety di un <xref:System.Lazy%601> istanza che viene inizializzato con questo costruttore è <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-221">La modalità thread safety viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="e01dd-222">Le eccezioni generate da `valueFactory` vengono memorizzati nella cache.</span><span class="sxs-lookup"><span data-stu-id="e01dd-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="e01dd-223">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-224">Nell'esempio seguente viene illustrato l'utilizzo di questo costruttore per fornire l'inizializzazione differita, con la memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="e01dd-225">Viene inoltre illustrato l'utilizzo del <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> costruttore (specificando `true` per `isThreadSafe`) e <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> costruttore (specificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> per `mode`).</span><span class="sxs-lookup"><span data-stu-id="e01dd-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="e01dd-226">Per passare a un costruttore diverso, è sufficiente modificare costruttori sono impostate come commento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="e01dd-227">Nell'esempio viene definita una classe `LargeObject` che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="e01dd-228">Le tre sezioni principali del codice vengono illustrate la creazione di inizializzatore effettiva inizializzazione e il costruttore del `LargeObject` (classe), che illustra la memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="e01dd-229">All'inizio del metodo `Main`, viene creato un inizializzatore thread-safe differito per `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-230">L'esempio crea e avvia tre thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-230">The example creates and starts three threads.</span></span> <span data-ttu-id="e01dd-231">Il `ThreadProc` metodo utilizzato da tutte le chiamate tre thread di <xref:System.Lazy%601.Value%2A> proprietà da ottenere il `LargeObject` istanza:</span><span class="sxs-lookup"><span data-stu-id="e01dd-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-232">Nel costruttore del `LargeObject` (classe), la terza sezione chiave del codice genera un'eccezione la prima volta un `LargeObject` viene creata l'istanza, ma successivamente consente la creazione di istanze di:</span><span class="sxs-lookup"><span data-stu-id="e01dd-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="e01dd-233">Quando si esegue l'esempio, il primo thread che tenta di creare un'istanza di `LargeObject` ha esito negativo e l'eccezione viene intercettata.</span><span class="sxs-lookup"><span data-stu-id="e01dd-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="e01dd-234">Si potrebbe pensare che il thread successivo deve creare correttamente un'istanza, ma la <xref:System.Lazy%601> oggetto ha memorizzato nella cache l'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="e01dd-235">Per questo motivo, tutti i thread generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-236">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-237">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e01dd-238">
            <paramref name="valueFactory" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="e01dd-239">Uno dei valori di enumerazione che specifica la modalità thread safety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e01dd-240">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" /> che utilizza il costruttore predefinito di <paramref name="T" /> e la modalità di thread safety specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-241">La modalità thread safety di un <xref:System.Lazy%601> istanza viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="e01dd-242">Oggetto <xref:System.Lazy%601> istanza che viene creato con questo costruttore non memorizzato nella cache di eccezioni.</span><span class="sxs-lookup"><span data-stu-id="e01dd-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="e01dd-243">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-244">Nell'esempio seguente viene illustrato l'utilizzo di questo costruttore per creare un inizializzatore lazy che consente a più thread per situazioni di race per creare un oggetto in modo differito.</span><span class="sxs-lookup"><span data-stu-id="e01dd-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="e01dd-245">Più thread riesca nella creazione di istanze, ma l'istanza è stata creata prima di utilizzare tutti i thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-246">Per un esempio che illustra come utilizzare questo costruttore in scenari a thread singolo (specificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> per `mode`), vedere il <xref:System.Lazy%601.%23ctor%28System.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="e01dd-247">Per un esempio che illustra come utilizzare questo costruttore per fornire il blocco anziché race condition in scenari con multithreading (specificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> per `mode`), vedere il <xref:System.Lazy%601.%23ctor> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-248">Nell'esempio viene definito un `LargeObject` classe che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="e01dd-249">Le tre sezioni principali del codice vengono illustrate la creazione di inizializzatore di, l'effettiva inizializzazione e il costruttore e il finalizzatore della `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="e01dd-250">All'inizio del `Main` (metodo), nell'esempio viene creata la <xref:System.Lazy%601> oggetto che esegue l'inizializzazione differita del `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-251">L'esempio crea e avvia tre thread che bloccano su un <xref:System.Threading.ManualResetEvent> dell'oggetto, in modo che l'esempio è possibile rilasciare i thread in una sola volta.</span><span class="sxs-lookup"><span data-stu-id="e01dd-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="e01dd-252">Nel `ThreadProc` metodo utilizzato da tutti i thread, la chiamata di <xref:System.Lazy%601.Value%2A> proprietà crea la `LargeObject` istanza:</span><span class="sxs-lookup"><span data-stu-id="e01dd-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-253">Poiché il costruttore per il <xref:System.Lazy%601> istanza specificata <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, tutti i thread sono autorizzati a creare `LargeObject` istanze.</span><span class="sxs-lookup"><span data-stu-id="e01dd-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="e01dd-254">Nell'esempio viene illustrato questo visualizzando i messaggi della console nel costruttore e nel finalizzatore del `LargeObject` classe:</span><span class="sxs-lookup"><span data-stu-id="e01dd-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="e01dd-255">Tuttavia, il <xref:System.Lazy%601> oggetto garantisce che solo un'istanza viene utilizzata da tutti i thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="e01dd-256">L'output dell'esempio mostra che tutti i thread utilizzano la stessa istanza e mostra inoltre che le due istanze possono essere recuperate tramite garbage collection.</span><span class="sxs-lookup"><span data-stu-id="e01dd-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-257">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-258">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e01dd-259">
            <paramref name="mode" /> contiene un valore non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="e01dd-260">Delegato richiamato per produrre il valore inizializzato in modalità differita quando è necessario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="e01dd-261">
            <see langword="true" /> per far sì che l'istanza sia utilizzabile contemporaneamente da più thread; <see langword="false" /> per far sì che l'istanza sia utilizzabile da un solo thread alla volta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e01dd-262">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="e01dd-263">Quando si verifica l'inizializzazione differita, vengono usate la funzione e la modalità di inizializzazione specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-264">La modalità thread safety di un <xref:System.Lazy%601> istanza che viene inizializzato con questo costruttore è <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> se `isThreadSafe` è `true`; in caso contrario, la modalità è <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-265">La modalità thread safety viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="e01dd-266">Per specificare il <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> modalità, utilizzare il <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> o <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-267">Le eccezioni generate da `valueFactory` vengono memorizzati nella cache.</span><span class="sxs-lookup"><span data-stu-id="e01dd-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="e01dd-268">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-269">Nell'esempio seguente viene illustrato l'utilizzo di questo costruttore per fornire l'inizializzazione differita, tranne la memorizzazione nella cache, in uno scenario con un singolo thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="e01dd-270">Viene inoltre illustrato l'utilizzo del <xref:System.Lazy%601.%23ctor%2A> costruttore (specificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> per `mode`).</span><span class="sxs-lookup"><span data-stu-id="e01dd-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="e01dd-271">Per passare al costruttore, è sufficiente modificare il costruttore viene impostata come commento.</span><span class="sxs-lookup"><span data-stu-id="e01dd-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-272">Per il codice viene illustrato come utilizzare questo costruttore negli scenari multithreading (specificando `true` per `isThreadSafe`), vedere l'esempio per il <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-273">Nell'esempio viene definita una classe `LargeObject` che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="e01dd-274">Le tre sezioni principali del codice vengono illustrate la creazione di inizializzatore effettiva inizializzazione e il costruttore del `LargeObject` (classe), che illustra la memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="e01dd-275">All'inizio del metodo `Main`, viene creato un inizializzatore thread-safe differito per `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-276">Nella chiamata al costruttore, il `isThreadSafe` parametro `false`, pertanto il <xref:System.Lazy%601> non è thread-safe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="e01dd-277">Perché non è thread-safe, nell'esempio viene chiamato il <xref:System.Lazy%601.Value%2A> proprietà tre volte sullo stesso thread:</span><span class="sxs-lookup"><span data-stu-id="e01dd-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-278">Nel costruttore del `LargeObject` (classe), la terza sezione chiave del codice genera un'eccezione la prima volta un `LargeObject` viene creata l'istanza, ma successivamente consente la creazione di istanze di:</span><span class="sxs-lookup"><span data-stu-id="e01dd-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="e01dd-279">Quando si esegue l'esempio, il primo tentativo di creare un'istanza di `LargeObject` ha esito negativo e l'eccezione viene intercettata.</span><span class="sxs-lookup"><span data-stu-id="e01dd-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="e01dd-280">Si potrebbe pensare che al successivo tentativo di esito positivo, ma la <xref:System.Lazy%601> oggetto ha memorizzato nella cache l'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="e01dd-281">Per questo motivo, tutti i tentativi generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-282">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-283">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e01dd-284">
            <paramref name="valueFactory" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="e01dd-285">Delegato richiamato per produrre il valore inizializzato in modalità differita quando è necessario.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="e01dd-286">Uno dei valori di enumerazione che specifica la modalità thread safety.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e01dd-287">Inizializza una nuova istanza della classe <see cref="T:System.Lazy`1" /> che utilizza la funzione di inizializzazione e la modalità di thread safety specificate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-288">La modalità thread safety di un <xref:System.Lazy%601> istanza viene descritto il comportamento quando più thread tentano di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="e01dd-289">Le eccezioni generate da `valueFactory` vengono memorizzati nella cache, a meno che non `mode` è <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e01dd-290">Per ulteriori informazioni, vedere la classe <xref:System.Lazy%601> o l'enumerazione <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e01dd-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e01dd-291">Nell'esempio seguente viene illustrato l'utilizzo di questo costruttore per creare un inizializzatore lazy che consente a più thread per situazioni di race per creare un oggetto in modo differito.</span><span class="sxs-lookup"><span data-stu-id="e01dd-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="e01dd-292">Più thread riesca nella creazione di istanze, ma l'istanza è stata creata prima di utilizzare tutti i thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="e01dd-293">Inoltre, nell'esempio viene illustrato che le eccezioni non vengono mai memorizzati nella cache quando si specifica <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, anche se l'inizializzazione viene eseguita da una funzione anziché dal costruttore predefinito del tipo creato in modo differito.</span><span class="sxs-lookup"><span data-stu-id="e01dd-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-294">Per un esempio che illustra come utilizzare questo costruttore in scenari a thread singolo (specificando <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> per `mode`), vedere il <xref:System.Lazy%601.%23ctor%28System.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="e01dd-295">Per un esempio che illustra come utilizzare questo costruttore per fornire il blocco anziché race condition in scenari con multithreading (specificando <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> per `mode`), vedere il <xref:System.Lazy%601.%23ctor> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="e01dd-296">Nell'esempio viene definito un `LargeObject` classe che verrà inizializzata in modo differito da uno dei diversi thread.</span><span class="sxs-lookup"><span data-stu-id="e01dd-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="e01dd-297">Le quattro sezioni principali del codice vengono illustrate la creazione di inizializzatore di, l'effettiva inizializzazione, la funzione di inizializzazione e il costruttore e il finalizzatore della `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="e01dd-298">All'inizio del `Main` (metodo), nell'esempio viene creata la <xref:System.Lazy%601> oggetto che esegue l'inizializzazione differita del `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="e01dd-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="e01dd-299">L'inizializzatore lazy utilizza una funzione per eseguire l'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="e01dd-300">In questo caso, una funzione è necessario perché è presente alcun costruttore predefinito per il `LargeObject` classe.</span><span class="sxs-lookup"><span data-stu-id="e01dd-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="e01dd-301">L'esempio crea e avvia tre thread che bloccano su un <xref:System.Threading.ManualResetEvent> dell'oggetto, in modo che l'esempio è possibile rilasciare i thread in una sola volta.</span><span class="sxs-lookup"><span data-stu-id="e01dd-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="e01dd-302">Nel `ThreadProc` metodo utilizzato da tutti i thread, la chiamata di <xref:System.Lazy%601.Value%2A> proprietà crea la `LargeObject` istanza:</span><span class="sxs-lookup"><span data-stu-id="e01dd-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="e01dd-303">Nella terza sezione chiave del codice, viene chiamata la funzione di inizializzazione differita per creare il `LargeObject` istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="e01dd-304">La funzione genera un'ora di eccezione, il primo che viene chiamato:</span><span class="sxs-lookup"><span data-stu-id="e01dd-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="e01dd-305">Con qualsiasi altro <xref:System.Threading.LazyThreadSafetyMode> impostazione, un'eccezione non gestita nella funzione di inizializzazione potrebbe essere memorizzato nella cache.</span><span class="sxs-lookup"><span data-stu-id="e01dd-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="e01dd-306">Tuttavia, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> evita la memorizzazione nella cache di eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="e01dd-307">L'output dell'esempio viene illustrato che un successivo tentativo di inizializzare l'oggetto ha esito positivo.</span><span class="sxs-lookup"><span data-stu-id="e01dd-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-308">In genere viene visualizzato il messaggio di eccezione dopo i messaggi che indicano che altri thread è inizializzati correttamente l'oggetto.</span><span class="sxs-lookup"><span data-stu-id="e01dd-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="e01dd-309">Equivale a causa del ritardo introdotto da generare e intercettare l'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="e01dd-310">Poiché il costruttore per il <xref:System.Lazy%601> istanza specificata <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, tutti i thread sono autorizzati a creare `LargeObject` istanze.</span><span class="sxs-lookup"><span data-stu-id="e01dd-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="e01dd-311">Nell'esempio viene illustrato questo visualizzando i messaggi della console nel costruttore e nel finalizzatore del `LargeObject` classe:</span><span class="sxs-lookup"><span data-stu-id="e01dd-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="e01dd-312">Il <xref:System.Lazy%601> oggetto garantisce che solo un'istanza viene utilizzata da tutti i thread (eccetto il thread in cui la funzione di inizializzazione genera un'eccezione).</span><span class="sxs-lookup"><span data-stu-id="e01dd-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="e01dd-313">L'output di esempio illustrata questa operazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e01dd-314">Per semplicità, in questo esempio viene utilizzata un'istanza globale di <xref:System.Lazy%601> e tutti i metodi sono `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e01dd-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="e01dd-315">Questi non sono requisiti per l'uso di inizializzazione differita.</span><span class="sxs-lookup"><span data-stu-id="e01dd-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e01dd-316">
            <paramref name="mode" /> contiene un valore non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e01dd-317">
            <paramref name="valueFactory" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e01dd-318">Ottiene un valore che indica se per questa istanza di <see cref="T:System.Lazy`1" /> è stato creato un valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e01dd-319">
            <see langword="true" /> se per questa istanza di <see cref="T:System.Lazy`1" /> è stato creato un valore; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-320">Quando l'inizializzazione differita si verifica per un <xref:System.Lazy%601> istanza potrebbe restituire un valore che viene creato o viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="e01dd-321">Se un'eccezione generato, i successivo comportamento del <xref:System.Lazy%601> istanza varia a seconda che la memorizzazione nella cache di eccezione attiva.</span><span class="sxs-lookup"><span data-stu-id="e01dd-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="e01dd-322">Se il <xref:System.Lazy%601> istanza sia stata creata utilizzando un costruttore che non specifica una funzione di inizializzazione, quindi la memorizzazione nella cache di eccezione non è attiva.</span><span class="sxs-lookup"><span data-stu-id="e01dd-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="e01dd-323">Un successivo tentativo di inizializzare il <xref:System.Lazy%601> potrebbe avere esito positivo e dopo l'inizializzazione ha esito positivo di <xref:System.Lazy%601.IsValueCreated%2A> restituisce proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="e01dd-324">Se il <xref:System.Lazy%601> istanza è stata creata con una funzione di inizializzazione (specificato da di `valueFactory` parametro del <xref:System.Lazy%601> costruttore), quindi la memorizzazione nella cache di eccezione è controllata per la modalità thread safety.</span><span class="sxs-lookup"><span data-stu-id="e01dd-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="e01dd-325">Se la modalità è <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> o <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, non c'è alcuna possibilità di secondo per inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="e01dd-326">Se si verifica un'eccezione non gestita nella funzione di inizializzazione, tale eccezione nella cache e generata di nuovo gli accessi successivi del <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="e01dd-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e01dd-327">Se viene generata un'eccezione, in tali casi, viene creato alcun valore <xref:System.Lazy%601.IsValueCreated%2A> restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="e01dd-328">Se la modalità è <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, il primo thread che riesce a eseguire la funzione di inizializzazione (o il costruttore predefinito) crea il valore per il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="e01dd-329">Se la funzione di inizializzazione genera un'eccezione in un unico thread, altri thread può ancora tentare di inizializzare il <xref:System.Lazy%601> istanza.</span><span class="sxs-lookup"><span data-stu-id="e01dd-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="e01dd-330">Fino a quando il valore viene creato, il <xref:System.Lazy%601.IsValueCreated%2A> restituisce proprietà `false`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e01dd-331">Crea e restituisce una rappresentazione di stringa della proprietà <see cref="P:System.Lazy`1.Value" /> per questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e01dd-332">Risultato della chiamata al metodo <see cref="M:System.Object.ToString" /> sulla proprietà <see cref="P:System.Lazy`1.Value" /> per questa istanza, se il valore è stato creato (ossia se la proprietà <see cref="P:System.Lazy`1.IsValueCreated" /> restituisce <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="e01dd-333">In caso contrario, stringa indicante che il valore non è stato creato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-334">Chiamare questo metodo non causa l'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="e01dd-335">Il <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> proprietà può essere `null` dopo l'inizializzazione differita, se il metodo factory che è stato specificato per il `valueFactory` parametro del <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> costruttore restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="e01dd-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="e01dd-336">La proprietà <see cref="P:System.Lazy`1.Value" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e01dd-337">Ottiene il valore inizializzato in modalità differita dell'istanza di <see cref="T:System.Lazy`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e01dd-338">Valore inizializzato in modalità differita dell'istanza di <see cref="T:System.Lazy`1" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e01dd-339">Se il <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> proprietà `false`, l'accesso al <xref:System.Lazy%601.Value%2A> proprietà forza l'inizializzazione.</span><span class="sxs-lookup"><span data-stu-id="e01dd-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="e01dd-340">Oltre le eccezioni che sono elencate il <xref:System.Lazy%601.Value%2A> proprietà può generare qualsiasi eccezione non gestita generata dal metodo factory che è stato passato il `valueFactory` parametro del <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, o <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> costruttore.</span><span class="sxs-lookup"><span data-stu-id="e01dd-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="e01dd-341">L'istanza <see cref="T:System.Lazy`1" /> viene inizializzata per l'utilizzo del costruttore predefinito del tipo che viene inizializzato in modalità differita e non si dispone delle autorizzazioni di accesso al costruttore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="e01dd-342">L'istanza <see cref="T:System.Lazy`1" /> viene inizializzata per l'utilizzo del costruttore predefinito del tipo che viene inizializzato in modalità differita e tale tipo non dispone di un costruttore pubblico senza parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e01dd-343">La funzione di inizializzazione tenta di accedere alla proprietà <see cref="P:System.Lazy`1.Value" /> su questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e01dd-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>