<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BitConverter.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5634043b141f292fdef3d261c90aaf9f4bcb41a62.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">634043b141f292fdef3d261c90aaf9f4bcb41a62</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts base data types to an array of bytes, and an array of bytes to base data types.</source>
          <target state="translated">Converte tipi di dati di base in una matrice di byte e una matrice di byte in tipi di dati di base.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class helps manipulate value types in their fundamental form, as a series of bytes.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> classe consente di modificare i tipi di valore nella loro forma fondamentale, come una serie di byte.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>A byte is defined as an 8-bit unsigned integer.</source>
          <target state="translated">Un byte è definito come un intero senza segno a 8 bit.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> classe include metodi statici per convertire tutti i tipi primitivi di in e da una matrice di byte, come illustrato nella tabella seguente.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Type</source>
          <target state="translated">Tipo</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>To byte conversion</source>
          <target state="translated">Conversione di byte</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>From byte conversion</source>
          <target state="translated">Conversione di byte</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If you use <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> methods to round-trip data, make sure that the <ph id="ph2">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload and the <ph id="ph3">`To`</ph><bpt id="p1">*</bpt>Type<ept id="p1">*</ept> method specify the same type.</source>
          <target state="translated">Se si utilizza <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> metodi per il round trip dei dati, assicurarsi che il <ph id="ph2">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload e <ph id="ph3">`To`</ph> <bpt id="p1">*</bpt>tipo<ept id="p1">*</ept> metodo specificano lo stesso tipo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>As the following example illustrates, restoring an array that represents a signed integer by calling the <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method can result in a value that is different from the original.</source>
          <target state="translated">Come illustrato nell'esempio seguente, il ripristino di una matrice che rappresenta un intero con segno chiamando il <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> metodo può generare un valore che è diverso dall'originale.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>For more information, see the entry <bpt id="p1">[</bpt>Working with Signed Non-Decimal and Bitwise Values<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> in the BCL Team Blog.</source>
          <target state="translated">Per ulteriori informazioni, vedere la voce <bpt id="p1">[</bpt>utilizzo di decimali Non firmato e i valori di bit per bit<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> nel Blog del Team BCL.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method overloads (as well as the order of bits in the integer returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method and the order of hexadecimal strings returned by the <ph id="ph3">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> method) depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload del metodo (nonché l'ordine di bit nel valore integer restituito dal <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> (metodo) e l'ordine delle stringhe esadecimali restituite dal <ph id="ph3">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> metodo) dipende dal fatto che il architettura del computer è little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Similarly, the order of bytes in the array and returned by the <ph id="ph1">`To`</ph><bpt id="p1">*</bpt>IntegerValue<ept id="p1">*</ept> methods and the <ph id="ph2">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">Analogamente, l'ordine dei byte nella matrice e restituito dal <ph id="ph1">`To`</ph> <bpt id="p1">*</bpt>IntegerValue<ept id="p1">*</ept> metodi e <ph id="ph2">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The endianness of an architecture is indicated by the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> property, which returns <ph id="ph2">`true`</ph> on little-endian systems and <ph id="ph3">`false`</ph> on big-endian systems.</source>
          <target state="translated">L'ordine dei byte di un'architettura è indicato dal <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> proprietà, che restituisce <ph id="ph2">`true`</ph> su sistemi little-endian e <ph id="ph3">`false`</ph> nei sistemi big-endian.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>On little-endian systems, lower-order bytes precede higher-order bytes.</source>
          <target state="translated">Nei sistemi little-endian, i byte di ordine inferiore precedono i byte di ordine superiore.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>On big-endian system, higher-order bytes precede lower-order bytes.</source>
          <target state="translated">Nel sistema big-endian, i byte di ordine superiore precedono i byte di ordine inferiore.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> method.</source>
          <target state="translated">Nella tabella seguente viene illustrata la differenza nelle matrici di byte che risultano dal passaggio dell'intero 1.234.567.890 (0x499602D2) per il <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The bytes are listed in order from the byte at index 0 to the byte at index 3.</source>
          <target state="translated">I byte sono elencati in ordine di byte in corrispondenza dell'indice 0 al byte in corrispondenza dell'indice 3.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Little-endian</source>
          <target state="translated">Little-endian</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>D2-02-96-49</source>
          <target state="translated">D2-02-96-49</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Big-endian</source>
          <target state="translated">Big-endian</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>49-96-02-D2</source>
          <target state="translated">49-96-02-D2</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:</source>
          <target state="translated">Poiché il valore restituito di alcuni metodi dipende dall'architettura del sistema, prestare attenzione durante la trasmissione di dati byte oltre i limiti della macchina:</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.</source>
          <target state="translated">Se tutti i sistemi, l'invio e ricezione di dati sono garantiti che l'ordine dei byte stessa, non è eseguita alcuna operazione per i dati.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If systems sending and receiving data can have different endianness, always transmit data in a particular order.</source>
          <target state="translated">Se i sistemi che inviano e ricevono dati possono avere l'ordine dei byte diverso, trasmettere i dati sempre in un ordine particolare.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them.</source>
          <target state="translated">Ciò significa che l'ordine dei byte nella matrice potrebbe essere necessario invertire prima dell'invio o dopo averli ricevuti.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>A common convention is to transmit data in network byte order (big-endian order).</source>
          <target state="translated">Una convenzione comune consiste nella trasmissione dei dati in ordine di byte di rete (ordine big-endian).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following example provides an implementation for sending an integer value in network byte order.</source>
          <target state="translated">Nell'esempio seguente fornisce un'implementazione per l'invio di un valore intero nell'ordine dei byte di rete.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> method to convert the data to network byte order and the <ph id="ph2">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType&gt;</ph> method to convert it to the order required by the recipient.</source>
          <target state="translated">Se è possibile inviare e ricevere dati di sistemi hanno l'ordine dei byte diverso e i dati da trasmettere è costituito da numeri interi con segno, chiamare il <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> metodo per convertire i dati in ordine byte di rete e <ph id="ph2">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType&gt;</ph> metodo per convertirlo in ordine richiesto dal destinatario.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following code example illustrates the use of several <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class methods.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di diverse <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> metodi della classe.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>Converts the specified double-precision floating point number to a 64-bit signed integer.</source>
          <target state="translated">Converte il numero in virgola mobile e precisione doppia specificato in un intero con segno a 64 bit.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>A 64-bit signed integer whose value is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Un intero con segno a 64 bit il cui valore è equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The order of bits in the integer returned by the <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine di bit nel valore integer restituito dal <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The following code example converts the bit patterns of several <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to <ph id="ph2">&lt;xref:System.Int64&gt;</ph> values with the <ph id="ph3">`DoubleToInt64Bits`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di diversi <ph id="ph1">&lt;xref:System.Double&gt;</ph> valori <ph id="ph2">&lt;xref:System.Int64&gt;</ph> valori con il <ph id="ph3">`DoubleToInt64Bits`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts the specified data to an array of bytes.</source>
          <target state="translated">Converte i dati specificati in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>A Boolean value.</source>
          <target state="translated">Valore booleano.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>Returns the specified Boolean value as a byte array.</source>
          <target state="translated">Restituisce il valore booleano specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>A byte array with length 1.</source>
          <target state="translated">Matrice di byte di lunghezza 1.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>You can convert a byte array back to a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value by calling the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
          <target state="translated">È possibile convertire una matrice di byte a una <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valore chiamando il <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>The following example converts the bit patterns of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Nell'esempio seguente converte gli schemi di bit di <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>A character to convert.</source>
          <target state="translated">Carattere da convertire</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>Returns the specified Unicode character value as an array of bytes.</source>
          <target state="translated">Restituisce il valore del carattere Unicode specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">Matrice di byte con lunghezza 2.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values (Unicode characters) to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.Char&gt;</ph> valori (caratteri Unicode) <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>Returns the specified double-precision floating point value as an array of bytes.</source>
          <target state="translated">Restituisce il valore in virgola mobile e precisione doppia specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">Matrice di byte con lunghezza 8.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.Double&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>Returns the specified 16-bit signed integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore dell'integer con segno a 16 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">Matrice di byte con lunghezza 2.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.Int16&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>Returns the specified 32-bit signed integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore intero con segno a 32 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">Matrice di byte con lunghezza 4.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.Int32&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>Returns the specified 64-bit signed integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore intero con segno a 64 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">Matrice di byte con lunghezza 8.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method to convert each element in an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> array to a <ph id="ph3">&lt;xref:System.Byte&gt;</ph> arrays.</source>
          <target state="translated">L'esempio seguente chiama il <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo per convertire ogni elemento in un <ph id="ph2">&lt;xref:System.Int64&gt;</ph> matrice un <ph id="ph3">&lt;xref:System.Byte&gt;</ph> matrici.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>Returns the specified single-precision floating point value as an array of bytes.</source>
          <target state="translated">Restituisce il valore in virgola mobile e precisione singola specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">Matrice di byte con lunghezza 4.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.Single&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>Returns the specified 16-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore dell'integer senza segno a 16 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">Matrice di byte con lunghezza 2.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>Returns the specified 32-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore dell'intero senza segno a 32 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">Matrice di byte con lunghezza 4.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>Returns the specified 64-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">Restituisce il valore dell'intero senza segno a 64 bit specificato come matrice di byte.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">Matrice di byte con lunghezza 8.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine dei byte nella matrice restituita dal <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> valori <ph id="ph2">&lt;xref:System.Byte&gt;</ph> le matrici con il <ph id="ph3">`GetBytes`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>The number to convert.</source>
          <target state="translated">Numero da convertire.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>Converts the specified 64-bit signed integer to a double-precision floating point number.</source>
          <target state="translated">Converte l'intero con segno a 64 bit specificato in un numero in virgola mobile e precisione doppia.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>A double-precision floating point number whose value is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Numero in virgola mobile e precisione doppia il cui valore è equivalente a <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>Typically, <ph id="ph1">`value`</ph> is an integer that is returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method.</source>
          <target state="translated">In genere, <ph id="ph1">`value`</ph> è un numero intero restituito dal <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>The following code example converts the bit patterns of several <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph3">`Int64BitsToDouble`</ph> method.</source>
          <target state="translated">Esempio di codice seguente consente di convertire gli schemi di bit di diversi <ph id="ph1">&lt;xref:System.Int64&gt;</ph> valori <ph id="ph2">&lt;xref:System.Double&gt;</ph> valori con il <ph id="ph3">`Int64BitsToDouble`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="F:System.BitConverter.IsLittleEndian">
          <source>Indicates the byte order ("endianness") in which data is stored in this computer architecture.</source>
          <target state="translated">Indica l'ordine dei byte ("architettura endian") in cui vengono memorizzati i dati in questa architettura di computer.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>Different computer architectures store data using different byte orders.</source>
          <target state="translated">Diverse architetture archiviano i dati utilizzando diversi ordini dei byte.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>"Big-endian" means the most significant byte is on the left end of a word.</source>
          <target state="translated">"Big-endian" significa che il byte più significativo si trova all'estremità sinistra di una parola.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>"Little-endian" means the most significant byte is on the right end of a word.</source>
          <target state="translated">"Little-endian", pertanto il byte più significativo all'estremità destra di una parola.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> field by passing a 16-bit, 32-bit, or 64 bit integer to the <ph id="ph2">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">È possibile convertire dall'ordine dei byte di rete per l'ordine dei byte del computer host senza recuperare il valore della <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> campo passando un intero a 16 bit, 32 bit o 64 bit di <ph id="ph2">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>The following code example illustrates the use of the <ph id="ph1">`IsLittleEndian`</ph> field.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">`IsLittleEndian`</ph> campo.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>A byte array.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>The index of the byte within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Indice del byte all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>Returns a Boolean value converted from the byte at a specified position in a byte array.</source>
          <target state="translated">Restituisce un valore booleano convertito da un byte in una posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the byte at <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> in <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is nonzero; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il byte in <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> è diverso da zero; in caso contrario <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>To convert a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to its byte representation, call the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
          <target state="translated">Per convertire un <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> valore nella relativa rappresentazione di byte, chiamata di <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values with the <ph id="ph3">`ToBoolean`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> valori con il <ph id="ph3">`ToBoolean`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>An array.</source>
          <target state="translated">Una matrice.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>Returns a Unicode character converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un carattere Unicode convertito da due byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>A character formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Carattere formato da due byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 1 a un <ph id="ph4">&lt;xref:System.Char&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Char&gt;</ph> values (Unicode characters) with the <ph id="ph3">`ToChar`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Char&gt;</ph> valori (caratteri Unicode) con il <ph id="ph3">`ToChar`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un numero in virgola mobile e precisione doppia convertito da otto byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>A double precision floating point number formed by eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un numero in virgola mobile e precisione doppia formato da otto byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 7 per un <ph id="ph4">&lt;xref:System.Double&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph3">`ToDouble`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Double&gt;</ph> valori con il <ph id="ph3">`ToDouble`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 7 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero con segno a 16 bit convertito da due byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>A 16-bit signed integer formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero con segno a 16 bit formato da due byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to an <ph id="ph4">&lt;xref:System.Int16&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 1 a un <ph id="ph4">&lt;xref:System.Int16&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Int16&gt;</ph> values with the <ph id="ph3">`ToInt16`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Int16&gt;</ph> valori con il <ph id="ph3">`ToInt16`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero con segno a 32 bit convertito da quattro byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>A 32-bit signed integer formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero con segno a 32 bit formato da quattro byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to an <ph id="ph4">&lt;xref:System.Int32&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 3 per un <ph id="ph4">&lt;xref:System.Int32&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note della <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method to create <ph id="ph2">&lt;xref:System.Int32&gt;</ph> values from a four-byte array and from the upper four bytes of an eight-byte array.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> metodo per creare <ph id="ph2">&lt;xref:System.Int32&gt;</ph> valori da una matrice di quattro byte e dai quattro byte superiori di una matrice di 8 byte.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> methods to round-trip an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> value.</source>
          <target state="translated">Utilizza inoltre il <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> e <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> metodi per il round trip un <ph id="ph3">&lt;xref:System.Int32&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 3 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero con segno a 64 bit convertito da otto byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>A 64-bit signed integer formed by eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero con segno a 64 bit formato da otto byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Int64&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 7 per un <ph id="ph4">&lt;xref:System.Int64&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Int64&gt;</ph> values with the <ph id="ph3">`ToInt64`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Int64&gt;</ph> valori con il <ph id="ph3">`ToInt64`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 7 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un numero in virgola mobile e precisione singola convertito da quattro byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>A single-precision floating point number formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un numero in virgola mobile e precisione singola formato da quattro byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 3 per un <ph id="ph4">&lt;xref:System.Single&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note della <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Single&gt;</ph> values with the <ph id="ph3">`ToSingle`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.Single&gt;</ph> valori con il <ph id="ph3">`ToSingle`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 3 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">Converte il valore numerico di ogni elemento di una matrice specificata di byte nella relativa rappresentazione di stringa esadecimale equivalente.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">Converte il valore numerico di ogni elemento di una matrice specificata di byte nella relativa rappresentazione di stringa esadecimale equivalente.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">Stringa di coppie esadecimali separate da trattini, dove ogni coppia rappresenta l'elemento corrispondente in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ad esempio "7F-2C-4A-00".</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>All the elements of <ph id="ph1">`value`</ph> are converted.</source>
          <target state="translated">Tutti gli elementi di <ph id="ph1">`value`</ph> vengono convertiti.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine di stringhe esadecimali restituito dal <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>The following code example converts <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.String&gt;</ph> objects with the <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated">Nell'esempio di codice riportato di seguito viene convertito <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.String&gt;</ph> gli oggetti con il <ph id="ph3">`ToString`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">Converte il valore numerico di ogni elemento di una sottomatrice specificata di byte nella relativa rappresentazione di stringa esadecimale equivalente.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">Stringa di coppie esadecimali separate da trattini, dove ogni coppia rappresenta l'elemento corrispondente in una sottomatrice di <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ad esempio "7F-2C-4A-00".</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The elements from array position <ph id="ph1">`startIndex`</ph> to the end of the array are converted.</source>
          <target state="translated">Gli elementi dalla matrice posizione <ph id="ph1">`startIndex`</ph> alla fine della matrice vengono convertiti.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine di stringhe esadecimali restituito dal <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The following code example converts the part of a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array starting at the specified <ph id="ph2">`startIndex`</ph> to a <ph id="ph3">&lt;xref:System.String&gt;</ph> with the <ph id="ph4">`ToString`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte la parte di un <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrice inizia in corrispondenza <ph id="ph2">`startIndex`</ph> per un <ph id="ph3">&lt;xref:System.String&gt;</ph> con il <ph id="ph4">`ToString`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The number of array elements in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated">Numero di elementi della matrice in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> da convertire.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">Converte il valore numerico di ogni elemento di una sottomatrice specificata di byte nella relativa rappresentazione di stringa esadecimale equivalente.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">Stringa di coppie esadecimali separate da trattini, dove ogni coppia rappresenta l'elemento corrispondente in una sottomatrice di <ph id="ph1">&lt;paramref name="value" /&gt;</ph>, ad esempio "7F-2C-4A-00".</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`length`</ph> elements from array position <ph id="ph2">`startIndex`</ph> are converted.</source>
          <target state="translated">Il <ph id="ph1">`length`</ph> gli elementi dalla posizione di matrice <ph id="ph2">`startIndex`</ph> vengono convertiti.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>If <ph id="ph1">`length`</ph> equals zero, the method returns <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Se <ph id="ph1">`length`</ph> uguale a zero, il metodo restituisce <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">L'ordine di stringhe esadecimali restituito dal <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> metodo varia a seconda che l'architettura del computer little-endian o big-endian.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method to convert part of a byte array, starting at the specified <ph id="ph2">`startIndex`</ph> and with the specified <ph id="ph3">`length`</ph>, to a string.</source>
          <target state="translated">L'esempio seguente usa il <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> metodo per la parte di una matrice di byte, inizia in corrispondenza di conversione <ph id="ph2">`startIndex`</ph> e con l'oggetto specificato <ph id="ph3">`length`</ph>, in una stringa.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> o <ph id="ph2">&lt;paramref name="length" /&gt;</ph> è minore di zero.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">oppure</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than zero and is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore di zero ed è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The combination of <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="length" /&gt;</ph> does not specify a position within <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; that is, the <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> parameter is greater than the length of <ph id="ph5">&lt;paramref name="value" /&gt;</ph> minus the <ph id="ph6">&lt;paramref name="length" /&gt;</ph> parameter.</source>
          <target state="translated">La combinazione di <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> e di <ph id="ph2">&lt;paramref name="length" /&gt;</ph> non specifica una posizione all'interno di <ph id="ph3">&lt;paramref name="value" /&gt;</ph>, vale a dire che il parametro <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> è maggiore della lunghezza di <ph id="ph5">&lt;paramref name="value" /&gt;</ph> meno il parametro <ph id="ph6">&lt;paramref name="length" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The array of bytes.</source>
          <target state="translated">La matrice di byte.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero senza segno a 16 bit convertito da due byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>A 16-bit unsigned integer formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero senza segno a 16 bit formato da due byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.UInt16&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 1 a un <ph id="ph4">&lt;xref:System.UInt16&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> values with the <ph id="ph3">`ToUInt16`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> valori con il <ph id="ph3">`ToUInt16`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero senza segno a 32 bit convertito da quattro byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>A 32-bit unsigned integer formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero senza segno a 32 bit formato da quattro byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.UInt32&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 3 per un <ph id="ph4">&lt;xref:System.UInt32&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> values with the <ph id="ph3">`ToUInt32`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> valori con il <ph id="ph3">`ToUInt32`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 3 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">Matrice di byte.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Posizione iniziale all'interno di <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">Restituisce un intero senza segno a 64 bit convertito da otto byte nella posizione specificata in una matrice di byte.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>A 64-bit unsigned integer formed by the eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated">Un intero senza segno a 64 bit formato da otto byte a partire da <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> value.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> metodo converte i byte dall'indice <ph id="ph2">`startIndex`</ph> a <ph id="ph3">`startIndex`</ph> + 7 per un <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> valore.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">L'ordine dei byte nella matrice deve riflettere l'ordine dei byte dell'architettura del sistema del computer; Per ulteriori informazioni, vedere la sezione Note del <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> argomento relativo alla classe.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> values with the <ph id="ph3">`ToUInt64`</ph> method.</source>
          <target state="translated">Esempio di codice seguente converte gli elementi di <ph id="ph1">&lt;xref:System.Byte&gt;</ph> matrici per <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> valori con il <ph id="ph3">`ToUInt64`</ph> metodo.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> è maggiore o uguale alla lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 7 e minore o uguale alla lunghezza di <ph id="ph3">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>è minore di zero o maggiore della lunghezza di <ph id="ph2">&lt;paramref name="value" /&gt;</ph> meno 1.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>