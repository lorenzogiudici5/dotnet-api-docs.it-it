<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa743ca2f45cda07f83e63ffd565711d31756eb5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728625" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Eccezione generata se si tenta di accedere a un elemento di una matrice o una raccolta con un indice che non rientra nei limiti.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.IndexOutOfRangeException> eccezione viene generata quando viene utilizzato un indice non valido di accedere a un membro di una matrice o una raccolta, o di lettura o scrittura da una specifica posizione in un buffer. Questa eccezione eredita la <xref:System.Exception> classe non aggiunge ma nessun membro univoco.  
  
 In genere, un <xref:System.IndexOutOfRangeException> eccezione viene generata in seguito a errore developer. Anziché la gestione dell'eccezione, è necessario diagnosticare la causa dell'errore e correggere il codice. Le cause più comuni dell'errore sono:  
  
-   Dimenticare che il limite superiore di una raccolta o una matrice in base zero è una minore il numero di membri e gli elementi, come nell'esempio seguente viene illustrato.  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     Per correggere l'errore, è possibile utilizzare codice simile al seguente.  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     In alternativa, anziché l'iterazione di tutti gli elementi nella matrice in base all'indice, è possibile utilizzare il `foreach` istruzione (in c#) o `For Each` istruzione (in Visual Basic).  
  
-   Il tentativo di assegnare un elemento di matrice a un'altra matrice non stata dimensionata adeguata e che ha meno elementi della matrice originale. Nell'esempio seguente tenta di assegnare l'ultimo elemento di `value1` matrice allo stesso elemento nel `value2` matrice. Tuttavia, il `value2` matrice ha correttamente dimensionata per sei anziché sette elementi. Di conseguenza, l'assegnazione genera un <xref:System.IndexOutOfRangeException> eccezione.  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   Utilizzo di un valore restituito da un metodo di ricerca per eseguire l'iterazione di una parte di una matrice o raccolta a partire da una posizione di indice specifico. Se si dimentica di controllare se l'operazione di ricerca è stata trovata una corrispondenza, il runtime genera un <xref:System.IndexOutOfRangeException> eccezione, come illustrato in questo esempio.  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     In questo caso, il <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType> metodo restituisce -1, che è un valore di indice non valido, quando non riesce a trovare una corrispondenza. Per correggere l'errore, verificare il valore restituito del metodo di ricerca prima di l'iterazione nella matrice, come illustrato in questo esempio.  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   Tentativo di utilizzare o enumerare un set di risultati, una raccolta o una matrice restituita da una query senza verificare se l'oggetto restituito include dati validi.  
  
-   Utilizzo di un valore calcolato per definire l'indice iniziale, l'indice finale o il numero di elementi da scorrere. Se il risultato del calcolo è imprevisto, ma potrebbe causare un <xref:System.IndexOutOfRangeException> eccezione. Controllare la logica del programma nel calcolo del valore di indice e convalidare il valore prima l'iterazione di matrice o raccolta. Le condizioni seguenti devono essere tutti true. in caso contrario, un <xref:System.IndexOutOfRangeException> viene generata un'eccezione:  
  
    -   Indice iniziale deve essere maggiore o uguale a <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> per la dimensione della matrice che si desidera eseguire l'iterazione, oppure maggiore o uguale a 0 per una raccolta.  
  
    -   L'indice finale non può superare <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> per la dimensione della matrice che si desidera eseguire l'iterazione, non può essere maggiore o uguale al `Count` proprietà di una raccolta.  
  
    -   L'equazione seguente deve essere true per la dimensione della matrice che si desidera eseguire l'iterazione:  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         Per una raccolta, l'equazione seguente deve essere true:  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  Indice iniziale di una matrice o raccolta non può mai essere un numero negativo.  
  
-   Supponendo che una matrice deve essere in base zero. È possibile creare matrici non in base zero di <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> metodo e può essere restituito tramite l'interoperabilità COM, anche se non sono conformi a CLS. Nell'esempio seguente viene illustrato il <xref:System.IndexOutOfRangeException> che viene generata quando si tenta di eseguire l'iterazione di una matrice in base zero non creata dal <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType> metodo.  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     Per correggere l'errore, come nell'esempio seguente, è possibile chiamare il <xref:System.Array.GetLowerBound%2A> metodo anziché fare ipotesi sull'indice iniziale di una matrice.  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     Si noti che quando si chiama il <xref:System.Array.GetLowerBound%2A> metodo per ottenere l'indice iniziale di una matrice, è inoltre necessario chiamare il <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType> metodo per ottenere il relativo indice finale.  
  
-   Chiaro di un indice e il valore in corrispondenza dell'indice in una matrice numerica o di una raccolta. Questo problema si verifica in genere quando si utilizza il `foreach` istruzione (in c#) o `For Each` istruzione (in Visual Basic). Nell'esempio che segue viene illustrato il problema.  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     Il costrutto dell'iterazione restituisce ogni valore in una matrice o raccolta, non il relativo indice. Per eliminare l'eccezione, utilizzare questo codice.  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   Specificare un nome di colonna non valido per il <xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType> proprietà.  
  
-   Violazione dei thread-safe. Operazioni quali la lettura dalla stessa <xref:System.IO.StreamReader> scrittura allo stesso oggetto <xref:System.IO.StreamWriter> dell'oggetto da più thread o l'enumerazione di oggetti in un <xref:System.Collections.Hashtable> da thread diversi possono generare un <xref:System.IndexOutOfRangeException> se l'oggetto non è accessibile un modalità thread-safe. Questa eccezione viene in genere intermittente perché si basa su una race condition.  
  
 Utilizzo di valori di indice a livello di codice per modificare una matrice è probabile che genera un'eccezione se il valore di indice è errato o non valido o se le dimensioni della matrice da una modifica non sono previsto. Per impedire un'operazione di generazione di un <xref:System.IndexOutOfRangeException> eccezione, è possibile eseguire le operazioni seguenti:  
  
-   Scorrere gli elementi della matrice utilizzando la [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) istruzione (in c#) o [per ogni... Avanti](https://msdn.microsoft.com/library/5ebk1751.aspx) costruire (in Visual Basic) anziché l'iterazione di elementi in base all'indice.  
  
-   Scorrere gli elementi in base all'indice a partire dall'indice restituito dal <xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType> (metodo) e terminando con l'indice restituito dal <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> metodo.  
  
-   Se si assegnano gli elementi in una matrice a un'altra, assicurarsi che la matrice di destinazione disponga almeno del numero di elementi come matrice di origine confrontando i relativi <xref:System.Array.Length%2A?displayProperty=nameWithType> proprietà.  
  
 Per un elenco di valori di proprietà iniziali per un'istanza di <xref:System.IndexOutOfRangeException>, vedere il <xref:System.IndexOutOfRangeException> costruttori.  
  
 Le seguenti istruzioni di linguaggio intermedio (IL) generano <xref:System.IndexOutOfRangeException>:  
  
-   ldelem.\<type>  
  
-   ldelema  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException> utilizza HRESULT COR_E_INDEXOUTOFRANGE, con valore 0x80131508.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.IndexOutOfRangeException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.IndexOutOfRangeException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Exception.Message%2A> proprietà della nuova istanza di un messaggio fornito dal sistema che descrive l'errore, ad esempio "un indice di matrice è compreso nell'intervallo". Questo messaggio prende in considerazione le impostazioni cultura correnti del sistema.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.IndexOutOfRangeException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento null (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore localizzato.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio in cui viene descritto l'errore.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.IndexOutOfRangeException" /> con un messaggio di errore specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza la <xref:System.Exception.Message%2A?displayProperty=nameWithType> proprietà della nuova eccezione utilizzando il `message` parametro. Il contenuto di `message` deve essere facilmente comprensibile. Il chiamante del costruttore deve garantire che la stringa sia stata localizzata in base alle impostazioni cultura correnti del sistema.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.IndexOutOfRangeException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento null (`Nothing` in Visual Basic).|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
        <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <c>innerException</c> non è un riferimento Null (<see langword="Nothing" /> in Visual Basic), l'eccezione corrente viene generata in un blocco <see langword="catch" /> che gestisce l'eccezione interna.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.IndexOutOfRangeException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'eccezione generata come risultato diretto di un'eccezione precedente deve includere un riferimento all'eccezione precedente nella proprietà <xref:System.Exception.InnerException%2A>. La proprietà `InnerException` restituisce lo stesso valore che viene passato al costruttore o un riferimento null (`Nothing` in Visual Basic), se la proprietà `InnerException` non fornisce al costruttore il valore dell'eccezione interna.  
  
 Nella tabella seguente vengono illustrati i valori di proprietà iniziali per un'istanza di <xref:System.IndexOutOfRangeException>.  
  
|Proprietà|Valore|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Riferimento all'eccezione interna.|  
|<xref:System.Exception.Message%2A>|Stringa del messaggio di errore.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>