<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a40925048dd06746d1e1cda2a76aa4ecaae1b916" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9fb9c-101">Rappresenta dichiarazioni di tipo: tipi classe, tipi interfaccia, tipi matrice, tipi di valore e di enumerazione, parametri di tipo, definizioni di tipo generico e tipi generici costruiti chiusi o aperti.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9fb9c-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-102">`Type` è la radice di <xref:System.Reflection> funzionalità ed è lo strumento principale per accedere ai metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="9fb9c-103">Utilizzare i membri di <xref:System.Type> per ottenere informazioni su una dichiarazione di tipo, sui membri di un tipo (ad esempio i costruttori, metodi, campi, proprietà ed eventi di una classe), nonché il modulo e assembly in cui è distribuita la classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="9fb9c-104">Non sono necessarie autorizzazioni per il codice usare la reflection per ottenere informazioni sui tipi e i relativi membri, indipendentemente dal loro livelli di accesso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="9fb9c-105">Non sono necessarie autorizzazioni per il codice usare la reflection per accedere ai membri pubblici o altri membri i cui livelli di accesso rendere visibile durante la compilazione normale.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="9fb9c-106">Tuttavia, in ordine per il codice usare la reflection per accedere ai membri che normalmente sarebbe accessibile, ad esempio metodi privati o interni o protetti i campi di un tipo di classe non eredita, il codice necessario <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="9fb9c-107">Vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="9fb9c-108">`Type` è una classe base astratta che consente più implementazioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="9fb9c-109">Il sistema fornirà sempre la classe derivata `RuntimeType`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="9fb9c-110">Nella reflection, tutte le classi che iniziano con la parola Runtime vengono create una sola volta per ogni oggetto nelle operazioni di confronto di sistema e supporto tecnico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-111">Negli scenari multithreading, non bloccare <xref:System.Type> oggetti per sincronizzare l'accesso a `static` dati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="9fb9c-112">Altro codice, in cui si ha alcun controllo, inoltre potrebbe bloccare il tipo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="9fb9c-113">Ciò potrebbe comportare un deadlock.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-113">This might result in a deadlock.</span></span> <span data-ttu-id="9fb9c-114">Invece, sincronizzare l'accesso ai dati statici bloccando private `static` oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-115">Una classe derivata può accedere ai membri protetti delle classi di base del codice chiamante.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="9fb9c-116">Inoltre, l'accesso è consentito ai membri di assembly dell'assembly del codice chiamante.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="9fb9c-117">In una regola, se è consentito l'accesso in codice con associazione anticipata, è consentito anche al codice ad associazione tardiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-118">Le interfacce che estendono le altre interfacce non ereditano i metodi definiti nelle interfacce estese.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="9fb9c-119">Contenuto della sezione:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-119">In this section:</span></span>  
  
 <span data-ttu-id="9fb9c-120">[I tipi rappresenta un oggetto di tipo?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="9fb9c-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="9fb9c-121">[Recupero di un oggetto di tipo](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="9fb9c-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="9fb9c-122">Il confronto di uguaglianza degli oggetti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="9fb9c-123">I tipi rappresenta un oggetto di tipo?</span><span class="sxs-lookup"><span data-stu-id="9fb9c-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="9fb9c-124">Questa classe è thread-safe. più thread possono leggere contemporaneamente da un'istanza di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="9fb9c-125">Un'istanza di <xref:System.Type> classe può rappresentare uno qualsiasi dei tipi seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="9fb9c-126">Classi</span><span class="sxs-lookup"><span data-stu-id="9fb9c-126">Classes</span></span>  
  
-   <span data-ttu-id="9fb9c-127">Tipi valore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-127">Value types</span></span>  
  
-   <span data-ttu-id="9fb9c-128">Matrici</span><span class="sxs-lookup"><span data-stu-id="9fb9c-128">Arrays</span></span>  
  
-   <span data-ttu-id="9fb9c-129">Interfacce</span><span class="sxs-lookup"><span data-stu-id="9fb9c-129">Interfaces</span></span>  
  
-   <span data-ttu-id="9fb9c-130">Enumerazioni</span><span class="sxs-lookup"><span data-stu-id="9fb9c-130">Enumerations</span></span>  
  
-   <span data-ttu-id="9fb9c-131">Delegati</span><span class="sxs-lookup"><span data-stu-id="9fb9c-131">Delegates</span></span>  
  
-   <span data-ttu-id="9fb9c-132">Tipi generici costruiti e definizioni di tipo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="9fb9c-133">Digitare gli argomenti e parametri di tipi generici costruiti, definizioni di tipo generico e definizioni di metodo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="9fb9c-134">Recupero di un oggetto di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="9fb9c-135">Il <xref:System.Type> associata a un particolare tipo di oggetto può essere ottenuto nei modi seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="9fb9c-136">L'istanza <xref:System.Object.GetType%2A?displayProperty=nameWithType> metodo restituisce un <xref:System.Type> oggetto che rappresenta il tipo di un'istanza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="9fb9c-137">Poiché tutti i tipi gestiti derivano da <xref:System.Object>, <xref:System.Object.GetType%2A> metodo può essere chiamato in un'istanza di qualsiasi tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="9fb9c-138">L'esempio seguente chiama il <xref:System.Object.GetType%2A?displayProperty=nameWithType> metodo per determinare il tipo di runtime di ciascun oggetto nella matrice di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="9fb9c-139">Il metodo statico <xref:System.Type.GetType%2A?displayProperty=nameWithType> i metodi restituiscono un <xref:System.Type> oggetto che rappresenta un tipo specificato dal nome completo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="9fb9c-140">Il <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, e <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> restituiscono `Type` gli oggetti che rappresentano i tipi definiti in un modulo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="9fb9c-141">Il primo metodo è utilizzabile per ottenere una matrice di <xref:System.Type> oggetti per tutti i tipi pubblici e privati definiti in un modulo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="9fb9c-142">(È possibile ottenere un'istanza di `Module` tramite il <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> o <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> metodo, o tramite il <xref:System.Type.Module%2A?displayProperty=nameWithType> proprietà.)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="9fb9c-143">Il <xref:System.Reflection.Assembly?displayProperty=nameWithType> oggetto contiene un numero di metodi per recuperare le classi definite in un assembly, tra cui <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, e <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9fb9c-144">Il <xref:System.Type.FindInterfaces%2A> metodo restituisce un elenco filtrato dei tipi di interfaccia supportati da un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="9fb9c-145">Il <xref:System.Type.GetElementType%2A> metodo restituisce un `Type` oggetto che rappresenta l'elemento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="9fb9c-146">Il <xref:System.Type.GetInterfaces%2A> e <xref:System.Type.GetInterface%2A> restituiscono <xref:System.Type> gli oggetti che rappresentano i tipi di interfaccia supportati da un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="9fb9c-147">Il <xref:System.Type.GetTypeArray%2A> il metodo restituisce una matrice di <xref:System.Type> gli oggetti che rappresentano i tipi specificati da un set arbitrario di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="9fb9c-148">Gli oggetti sono specificati con una matrice di tipo <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="9fb9c-149">Il <xref:System.Type.GetTypeFromProgID%2A> e <xref:System.Type.GetTypeFromCLSID%2A> vengono forniti metodi per l'interoperabilità COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="9fb9c-150">Restituiscono un <xref:System.Type> oggetto che rappresenta il tipo specificato da un `ProgID` o `CLSID`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="9fb9c-151">Il <xref:System.Type.GetTypeFromHandle%2A> metodo è fornito per l'interoperabilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="9fb9c-152">Restituisce un `Type` oggetto che rappresenta il tipo specificato da un handle di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="9fb9c-153">C# `typeof` (operatore), C++ `typeid` operatore e Visual Basic `GetType` operatore ottenere il `Type` oggetto per un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="9fb9c-154">Il <xref:System.Type.MakeGenericType%2A> metodo restituisce un <xref:System.Type> oggetto che rappresenta un tipo generico costruito, che è un tipo costruito aperto, se il relativo <xref:System.Type.ContainsGenericParameters%2A> restituisce proprietà `true`, e un tipo costruito chiuso in caso contrario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="9fb9c-155">Un tipo generico può essere implementato solo se è chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="9fb9c-156">Il <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, e <xref:System.Type.MakeByRefType%2A> restituiscono <xref:System.Type> gli oggetti che rappresentano, rispettivamente, una matrice di un tipo specificato, un puntatore a un tipo specificato e il tipo di un parametro di riferimento (`ref` in c#, `ByRef`in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="9fb9c-157">Il confronto di uguaglianza degli oggetti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="9fb9c-158">Oggetto <xref:System.Type> oggetto che rappresenta un tipo è univoco, vale a dire due <xref:System.Type> riferimenti fanno riferimento allo stesso oggetto solo se rappresentano lo stesso tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="9fb9c-159">In questo modo per il confronto di <xref:System.Type> oggetti utilizzando l'uguaglianza dei riferimenti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="9fb9c-160">Nell'esempio seguente vengono confrontate le <xref:System.Type> gli oggetti che rappresentano un numero di valori integer per determinare se sono dello stesso tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-161">L'esempio seguente illustra alcune funzionalità rappresentative di <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="9fb9c-162">C# `typeof` (operatore) (`GetType` operatore in Visual Basic, `typeid` operatore in Visual C++) viene utilizzato per ottenere un <xref:System.Type> che rappresenta l'oggetto <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="9fb9c-163">Da questo <xref:System.Type> oggetto, il <xref:System.Type.GetMethod%2A> metodo viene utilizzato per ottenere un <xref:System.Reflection.MethodInfo> che rappresenta il <xref:System.String.Substring%2A> overload che accetta una posizione di inizio e una lunghezza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="9fb9c-164">Per identificare la firma di overload, l'esempio di codice crea una matrice temporanea contenente due <xref:System.Type> oggetti che rappresentano `int` (`Integer` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-165">Per la precisione, la matrice contiene due riferimenti all'istanza di <xref:System.Type> che rappresenta `int` nel dominio applicazione corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="9fb9c-166">Per qualsiasi tipo, è disponibile solo un'istanza di <xref:System.Type> per ogni dominio applicazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="9fb9c-167">Nell'esempio di codice viene utilizzato il <xref:System.Reflection.MethodInfo> per richiamare il <xref:System.String.Substring%2A> metodo sulla stringa "Hello, World!" e visualizza il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="9fb9c-168">Questo tipo è thread-safe.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9fb9c-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="9fb9c-169">Quando si eredita da <see langword="Type" />, è necessario eseguire l'override dei membri seguenti:</span>
        <span class="sxs-lookup">
          <span data-stu-id="9fb9c-169">When you inherit from <see langword="Type" />, you must override the following members:</span>
        </span>  
  
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <span data-ttu-id="9fb9c-170"><see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span><span class="sxs-lookup"><span data-stu-id="9fb9c-170"><see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span></span>  
  
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-171">Inizializza una nuova istanza della classe <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-171">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-172">Questo costruttore viene richiamato dalle classi derivate durante la costruzione di oggetti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-172">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-173">Ottiene la classe <see cref="T:System.Reflection.Assembly" /> in cui è dichiarato il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-173">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="9fb9c-174">Per i tipi generici, ottiene la classe <see cref="T:System.Reflection.Assembly" /> in cui è definito il tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-174">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-175">Istanza di <see cref="T:System.Reflection.Assembly" /> che descrive l'assembly contenente il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-175">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="9fb9c-176">Per i tipi generici, l'istanza descrive l'assembly contenente la definizione di tipo generico, non l'assembly che crea e usa un determinato tipo costruito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-176">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-177">Se l'oggetto corrente <xref:System.Type> oggetto rappresenta un tipo generico costruito, questa proprietà restituisce l'assembly che contiene la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-177">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="9fb9c-178">Ad esempio, si supponga di crea un assembly denominato MyGenerics che contiene la definizione di tipo generico `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic `generic<T> ref class MyGenericStack` in C++).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-178">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="9fb9c-179">Se si crea un'istanza di `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in un altro assembly, il <xref:System.Type.Assembly%2A> proprietà per il tipo costruito restituisce un <xref:System.Reflection.Assembly> oggetto che rappresenta MyGenerics.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-179">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="9fb9c-180">Analogamente, se l'oggetto corrente <xref:System.Type> oggetto rappresenta un parametro generico non assegnato `T`, questa proprietà restituisce l'assembly che contiene il tipo generico che definisce `T`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-180">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="9fb9c-181">Se il <xref:System.Type.Assembly%2A?displayProperty=nameWithType> proprietà non è disponibile in una determinata implementazione di .NET, ad esempio .NET Core o la piattaforma Windows universale, utilizzare il <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> proprietà invece.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-181">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="9fb9c-182">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-182">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-183">Nell'esempio seguente visualizza il nome dell'assembly associato alla classe e il nome completo del tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-183">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-184">Ottiene il nome qualificato dall'assembly del tipo, che include il nome dell'assembly da cui è stato caricato l'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-184">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-185">Nome qualificato dall'assembly dell'oggetto <see cref="T:System.Type" />, che include il nome dell'assembly da cui è stato caricato <see cref="T:System.Type" /> oppure <see langword="null" /> se l'istanza corrente rappresenta un parametro di tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-185">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-186">Il nome di un tipo qualificato dall'assembly è costituito da nome del tipo, incluso il relativo spazio dei nomi, seguito da una virgola, seguita dal nome visualizzato dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-186">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="9fb9c-187">Il nome visualizzato di un assembly viene ottenuto utilizzando il <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-187">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-188">In .NET Framework versione 2.0, l'architettura del processore viene aggiunto all'identità dell'assembly e può essere specificato come parte di stringhe di nomi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-188">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9fb9c-189">Ad esempio, "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-189">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9fb9c-190">Tuttavia, non è incluso nella stringa restituita dal <xref:System.Type.AssemblyQualifiedName%2A> proprietà, per motivi di compatibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-190">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9fb9c-191">Vedere <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-191">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9fb9c-192">Tutti i compilatori che supportano common language runtime creano il nome semplice di una classe annidata e reflection costruisce un nome modificato quando si esegue la query in base alle convenzioni seguenti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-192">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="9fb9c-193">delimitatore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-193">Delimiter</span></span>|<span data-ttu-id="9fb9c-194">Significato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-194">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9fb9c-195">Barra rovesciata (\\)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-195">Backslash (\\)</span></span>|<span data-ttu-id="9fb9c-196">Carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-196">Escape character.</span></span>|  
|<span data-ttu-id="9fb9c-197">Comma (,)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-197">Comma (,)</span></span>|<span data-ttu-id="9fb9c-198">Precede il nome dell'Assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-198">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9fb9c-199">Segno più (+)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-199">Plus sign (+)</span></span>|<span data-ttu-id="9fb9c-200">Precede una classe annidata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-200">Precedes a nested class.</span></span>|  
|<span data-ttu-id="9fb9c-201">Punto (.)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-201">Period (.)</span></span>|<span data-ttu-id="9fb9c-202">Indica gli identificatori dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-202">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9fb9c-203">parentesi quadre ([])</span><span class="sxs-lookup"><span data-stu-id="9fb9c-203">Brackets ([])</span></span>|<span data-ttu-id="9fb9c-204">Dopo il nome di un tipo, indica una matrice di quel tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-204">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="9fb9c-205">oppure</span><span class="sxs-lookup"><span data-stu-id="9fb9c-205">-or-</span></span><br /><br /> <span data-ttu-id="9fb9c-206">Per un tipo generico, incluso l'elenco di argomenti di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-206">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="9fb9c-207">oppure</span><span class="sxs-lookup"><span data-stu-id="9fb9c-207">-or-</span></span><br /><br /> <span data-ttu-id="9fb9c-208">All'interno di un elenco di argomenti di tipo, incluso un tipo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-208">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="9fb9c-209">Il nome completo dell'assembly per una classe, ad esempio, potrebbe essere simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-209">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="9fb9c-210">Se lo spazio dei nomi contiene un segno più, ad esempio TopNamespace.Sub+Namespace, quindi sul segno più (+) potrebbe essere preceduto da un carattere di escape (\\) per evitare che venga interpretato come un separatore di annidamento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-210">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9fb9c-211">Reflection la stringa viene creata come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-211">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="9fb9c-212">A "+" diventa "\\+\\+" e un "\\"diventa"\\\\".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-212">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9fb9c-213">Questo nome completo può essere persistente e successivamente utilizzato per caricare il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-213">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9fb9c-214">Per cercare e caricare un <xref:System.Type>, utilizzare <xref:System.Type.GetType%2A> o con il tipo di nome solo oppure con il nome di tipo completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-214">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9fb9c-215"><xref:System.Type.GetType%2A> con il tipo di nome solo cercherà il <xref:System.Type> nell'assembly del chiamante, quindi nell'assembly System.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-215"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9fb9c-216"><xref:System.Type.GetType%2A> con l'assembly completo del tipo cercherà il <xref:System.Type> in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-216"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9fb9c-217">I nomi dei tipi possono includere caratteri finali che indicano informazioni aggiuntive sul tipo, ad esempio se il tipo è un tipo riferimento, un tipo di puntatore o un tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-217">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9fb9c-218">Per recuperare il nome del tipo senza caratteri finali, utilizzare `t.GetElementType().ToString()`, dove `t` è il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-218">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9fb9c-219">Gli spazi sono rilevanti in tutti i componenti di nome di tipo tranne il nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-219">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9fb9c-220">Il nome di assembly, spazi che precedono il separatore ',' sono rilevanti, ma gli spazi dopo il separatore ',' vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-220">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-221">Gli argomenti generici di tipi generici sono qualificato dal nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-221">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="9fb9c-222">Ad esempio, nel nome del tipo qualificato dall'assembly per `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` viene espanso al nome del tipo qualificato dall'assembly per <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-222">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="9fb9c-223">Se l'oggetto corrente <xref:System.Type> oggetto rappresenta un parametro generico, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-223">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-224">Nell'esempio seguente visualizza il nome dell'assembly associato alla classe e il nome completo del tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-224">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="9fb9c-225">L'esempio seguente confronta le stringhe restituite dal <xref:System.Type.ToString%2A> (metodo) e `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-225">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-226">Ottiene gli attributi associati all'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-226">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-227">Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che rappresenta il set di attributi di <see cref="T:System.Type" />, a meno che <see cref="T:System.Type" /> non rappresenti un parametro di tipo generico. In tal caso, il valore non è specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-227">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-228">Alcuni membri del <xref:System.Reflection.TypeAttributes> enumerazione sono maschere che rappresentano un gruppo di valori.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-228">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="9fb9c-229">Ogni gruppo include un membro il cui valore sottostante è zero.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-229">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="9fb9c-230">Ad esempio, il valore sottostante del <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> membro nel <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> gruppo è zero, come il <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> membro nel <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> gruppo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-230">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="9fb9c-231">Per questo motivo, è necessario utilizzare la maschera prima del test di tali valori.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-231">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="9fb9c-232">Nell'esempio viene illustrata una situazione di questo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-232">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9fb9c-233">Per la maggior parte degli scopi, ad esempio proprietà <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, e <xref:System.Type.IsSpecialName%2A> sono più facili da utilizzare rispetto agli attributi di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-233">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="9fb9c-234">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà restituisce gli attributi della definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-234">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="9fb9c-235">Ad esempio, gli attributi restituiti per `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) sono gli attributi di `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-235">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9fb9c-236">Se corrente <xref:System.Type> rappresenta un parametro di tipo generico, vale a dire, se il <xref:System.Type.IsGenericParameter%2A> restituisce proprietà `true` : il <xref:System.Reflection.TypeAttributes> valore restituito da questa proprietà non è specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-236">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-237">Il seguente usesthe esempio <xref:System.Type.Attributes%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-237">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-238">Ottiene il tipo da cui l'oggetto <see cref="T:System.Type" /> corrente eredita direttamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-238">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-239">Oggetto <see cref="T:System.Type" /> da cui <see cref="T:System.Type" /> corrente eredita direttamente o <see langword="null" /> se <see langword="Type" /> rappresenta la classe <see cref="T:System.Object" /> o un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-239">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-240">Il tipo di base è il tipo da cui il tipo corrente eredita direttamente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-240">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="9fb9c-241"><xref:System.Object> è l'unico tipo che non dispone di un tipo di base, pertanto `null` viene restituito come tipo di base del <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-241"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="9fb9c-242">Che ereditano da zero o più interfacce di base. Pertanto, questa proprietà restituisce `null` se il `Type` oggetto rappresenta un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-242">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="9fb9c-243">Le interfacce di base possono essere determinate con <xref:System.Type.GetInterfaces%2A> o <xref:System.Type.FindInterfaces%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-243">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-244">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, il tipo di base riflette gli argomenti generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-244">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="9fb9c-245">Si considerino ad esempio le dichiarazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-245">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9fb9c-246">Per il tipo costruito `C<int>` (`C(Of Integer)` in Visual Basic), il <xref:System.Type.BaseType%2A> restituisce proprietà `B<int>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-246">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="9fb9c-247">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di una definizione di tipo generico, <xref:System.Type.BaseType%2A> restituisce il vincolo di classe, vale a dire, la classe parametro di tipo deve ereditare.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-247">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="9fb9c-248">Se è presente alcun vincolo di classe, <xref:System.Type.BaseType%2A> restituisce <xref:System.Object?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-248">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9fb9c-249">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-249">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-250">Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.Type.BaseType%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-250">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="9fb9c-251">L'esempio seguente usa la ricorsione per elencare la gerarchia di ereditarietà completa di ogni classe nell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-251">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="9fb9c-252">Nell'esempio viene definita una classe denominata `C` che deriva da una classe denominata `B`, che, a sua volta deriva da una classe denominata `A`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-252">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-253">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> dispone di parametri di tipo che non sono stati sostituiti da tipi specifici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-253">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-254">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> è a sua volta un parametro di tipo generico o possiede parametri di tipo per i quali non sono stati forniti tipi specifici; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-254">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-255">Per creare un'istanza di un tipo, è non necessario alcun definizioni di tipo generico o i tipi costruiti aperti negli argomenti di tipo del tipo stesso, in tutti i tipi generici o in tutti gli elementi del tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-255">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="9fb9c-256">In altre parole quando viene esaminato in modo ricorsivo, il tipo non deve contenere alcun parametro di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-256">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="9fb9c-257">Poiché i tipi possono essere arbitrariamente complessi, stabilito questo aspetto è difficile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-257">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="9fb9c-258">Per motivi di praticità e ridurre le probabilità di errore, il <xref:System.Type.ContainsGenericParameters%2A> proprietà fornisce un modo per distinguere tra tipi costruiti chiusi, possono essere creata un'istanza, standard e tipi costruiti aperti, che non può essere.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-258">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="9fb9c-259">Se il <xref:System.Type.ContainsGenericParameters%2A> restituisce proprietà `true`, il tipo non può essere creata un'istanza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-259">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="9fb9c-260">Il <xref:System.Type.ContainsGenericParameters%2A> proprietà di ricerca in modo ricorsivo per i parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-260">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="9fb9c-261">Ad esempio, viene restituito `true` per una matrice i cui elementi sono di tipo `A<T>` (`A(Of T)` in Visual Basic), anche se la matrice non è generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-261">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="9fb9c-262">Ciò si differenzia dal comportamento del <xref:System.Type.IsGenericType%2A> proprietà, che restituisce `false` per le matrici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-262">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="9fb9c-263">Per un set di classi di esempio e una tabella che mostra i valori del <xref:System.Type.ContainsGenericParameters%2A> proprietà, vedere <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-263">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-264">Nell'esempio seguente definisce una classe generica con due parametri di tipo e quindi definisce una seconda classe generica da cui deriva la prima classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-264">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="9fb9c-265">Classe di base della classe derivata ha due argomenti di tipo: il primo è <xref:System.Int32> e il secondo è un parametro di tipo del tipo derivato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-265">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="9fb9c-266">Nell'esempio vengono visualizzate informazioni su queste classi generiche, incluse le posizioni segnalati dal <xref:System.Type.GenericParameterPosition%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-266">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-267">Ottiene una classe <see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo dichiarante se la classe <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo di un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-267">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-268">Se l'oggetto <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo di un metodo generico, una classe <see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo dichiarante; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-268">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-269">Il metodo dichiarante è una definizione di metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-269">The declaring method is a generic method definition.</span></span> <span data-ttu-id="9fb9c-270">Vale a dire se <xref:System.Type.DeclaringMethod%2A> non restituisce `null`, quindi `DeclaringMethod.IsGenericMethodDefinition` restituisce `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-270">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="9fb9c-271">Il <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> identificano la definizione di tipo generico o di una definizione di metodo generico in cui è stato originariamente definito il parametro di tipo generico:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-271">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="9fb9c-272">Se il <xref:System.Type.DeclaringMethod%2A> proprietà restituisce un <xref:System.Reflection.MethodInfo>che <xref:System.Reflection.MethodInfo> rappresenta una definizione di metodo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo della definizione di metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-272">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-273">Se il <xref:System.Type.DeclaringMethod%2A> restituisce proprietà `null`, quindi il <xref:System.Type.DeclaringType%2A> proprietà restituisce sempre un <xref:System.Type> oggetto che rappresenta una definizione di tipo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo del tipo generico definizione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-273">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-274">Recupero di <xref:System.Type.DeclaringMethod%2A> su un tipo il cui <xref:System.Type.IsGenericParameter%2A> proprietà `false` genera un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-274">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="9fb9c-275">Il <xref:System.Reflection.MethodBase> restituito dal <xref:System.Type.DeclaringMethod%2A> proprietà è un <xref:System.Reflection.MethodInfo> nel caso di un metodo generico, o un <xref:System.Reflection.ConstructorInfo> nel caso di un costruttore generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-275">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-276">In .NET Framework versione 2.0, i costruttori generici non sono supportati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-276">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="9fb9c-277">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-277">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-278">Esempio di codice seguente definisce una classe che dispone di un metodo generico, viene assegnato un argomento di tipo al metodo e richiama il metodo generico costruito risultante.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-278">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="9fb9c-279">Visualizza anche informazioni sulla definizione di metodo generico e il metodo costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-279">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="9fb9c-280">Quando si visualizzano informazioni sui parametri di tipo della definizione di metodo generico, nel `DisplayGenericMethodInfo` metodo, il codice di esempio viene mostrato il valore di <xref:System.Type.DeclaringMethod%2A> proprietà per il parametro di tipo generico del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-280">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-281">Ottiene il tipo che dichiara il parametro di tipo generico o di tipo annidato corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-281">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-282">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo contenitore, se il tipo corrente è un tipo annidato, oppure la definizione di tipo generico, se il tipo corrente è un parametro di tipo di un tipo generico, oppure il tipo che dichiara il metodo generico, se il tipo corrente è un parametro di tipo di un metodo generico; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-282">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-283">Se l'oggetto corrente <xref:System.Type> oggetto rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-283">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="9fb9c-284">Se l'oggetto corrente <xref:System.Type> oggetto rappresenta un parametro di tipo di un metodo generico, questa proprietà restituisce il tipo che contiene la definizione di metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-284">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="9fb9c-285">Se il tipo è generico, viene restituita la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-285">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="9fb9c-286">Ovvero, il codice seguente restituisce la definizione di tipo generico del <xref:System.Collections.Generic.List%601> classe generica, che contiene il <xref:System.Collections.Generic.List%601.ConvertAll%2A> metodo generico:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-286">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9fb9c-287">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, la <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> identificano la definizione di tipo generico o la definizione di metodo generico in cui parametro di tipo generico è stato originariamente definito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-287">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="9fb9c-288">Se il <xref:System.Type.DeclaringMethod%2A> proprietà restituisce un <xref:System.Reflection.MethodInfo>che <xref:System.Reflection.MethodInfo> rappresenta una definizione di metodo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo della definizione di metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-288">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-289">Se il <xref:System.Type.DeclaringMethod%2A> restituisce proprietà `null`, quindi il <xref:System.Type.DeclaringType%2A> proprietà restituisce sempre un <xref:System.Type> oggetto che rappresenta una definizione di tipo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo del tipo generico definizione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-289">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-290">Recupero di <xref:System.Type.DeclaringType%2A> su un tipo il cui <xref:System.Type.IsGenericParameter%2A> proprietà `false` genera un <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-290">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-291">Questo esempio visualizza il tipo dichiarante di un metodo in una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-291">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-292">Ottiene un riferimento al binder predefinito, il quale implementa regole interne per la selezione dei membri appropriati che devono essere chiamati con il metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-292">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-293">Riferimento al binder predefinito usato dal sistema.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-293">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-294">Lo strumento di associazione predefiniti fornito con common language runtime è applicabile in tutte le circostanze più specializzate.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-294">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="9fb9c-295">Se è necessario uno strumento di associazione che segua regole diverse da quelle del gestore di associazione predefinito fornito, definire un tipo derivato dal <xref:System.Reflection.Binder> classe e passare un'istanza di quel tipo utilizzando il `binder` parametro di uno del <xref:System.Type.InvokeMember%2A> overload.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-295">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="9fb9c-296">Reflection modella le regole di accessibilità di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-296">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="9fb9c-297">Ad esempio, se il chiamante è nello stesso assembly, il chiamante non necessita di autorizzazioni speciali per i membri interni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-297">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="9fb9c-298">In caso contrario, il chiamante deve <xref:System.Security.Permissions.ReflectionPermission>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-298">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="9fb9c-299">Ciò è coerente con la ricerca di membri che sono protetti, privato e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-299">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-300">Il principio generale è che <xref:System.Reflection.Binder.ChangeType%2A> deve eseguire solo conversione, che non comportano la perdita di dati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-300">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="9fb9c-301">Un esempio di una conversione widening consiste nel convertire un valore che è un intero con segno a 32 bit su un valore che è un intero con segno a 64 bit.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-301">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="9fb9c-302">Questa operazione si differenzia dalla conversione, che potrebbe perdere dati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-302">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="9fb9c-303">Un esempio di una conversione di narrowing è conversione di un intero con segno a 64 bit in un intero con segno a 32 bit.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-303">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="9fb9c-304">Nella tabella seguente sono elencate le conversioni supportate dal gestore di associazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-304">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="9fb9c-305">Tipo di origine</span><span class="sxs-lookup"><span data-stu-id="9fb9c-305">Source Type</span></span>|<span data-ttu-id="9fb9c-306">Tipo di destinazione</span><span class="sxs-lookup"><span data-stu-id="9fb9c-306">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="9fb9c-307">Qualsiasi tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-307">Any type</span></span>|<span data-ttu-id="9fb9c-308">Il tipo di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-308">Its base type.</span></span>|  
|<span data-ttu-id="9fb9c-309">Qualsiasi tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-309">Any type</span></span>|<span data-ttu-id="9fb9c-310">Interfaccia che implementa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-310">The interface it implements.</span></span>|  
|<span data-ttu-id="9fb9c-311">Char</span><span class="sxs-lookup"><span data-stu-id="9fb9c-311">Char</span></span>|<span data-ttu-id="9fb9c-312">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-312">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-313">Byte</span><span class="sxs-lookup"><span data-stu-id="9fb9c-313">Byte</span></span>|<span data-ttu-id="9fb9c-314">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-314">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-315">SByte</span><span class="sxs-lookup"><span data-stu-id="9fb9c-315">SByte</span></span>|<span data-ttu-id="9fb9c-316">Int16, Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-316">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-317">UInt16</span><span class="sxs-lookup"><span data-stu-id="9fb9c-317">UInt16</span></span>|<span data-ttu-id="9fb9c-318">UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-318">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-319">Int16</span><span class="sxs-lookup"><span data-stu-id="9fb9c-319">Int16</span></span>|<span data-ttu-id="9fb9c-320">Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-320">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-321">UInt32</span><span class="sxs-lookup"><span data-stu-id="9fb9c-321">UInt32</span></span>|<span data-ttu-id="9fb9c-322">UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-322">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-323">Int32</span><span class="sxs-lookup"><span data-stu-id="9fb9c-323">Int32</span></span>|<span data-ttu-id="9fb9c-324">Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-324">Int64, Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-325">UInt64</span><span class="sxs-lookup"><span data-stu-id="9fb9c-325">UInt64</span></span>|<span data-ttu-id="9fb9c-326">Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-326">Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-327">Int64</span><span class="sxs-lookup"><span data-stu-id="9fb9c-327">Int64</span></span>|<span data-ttu-id="9fb9c-328">Single, Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-328">Single, Double</span></span>|  
|<span data-ttu-id="9fb9c-329">Single</span><span class="sxs-lookup"><span data-stu-id="9fb9c-329">Single</span></span>|<span data-ttu-id="9fb9c-330">Double</span><span class="sxs-lookup"><span data-stu-id="9fb9c-330">Double</span></span>|  
|<span data-ttu-id="9fb9c-331">Non-riferimento</span><span class="sxs-lookup"><span data-stu-id="9fb9c-331">Non-reference</span></span>|<span data-ttu-id="9fb9c-332">In base al riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-332">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-333">Nell'esempio seguente ottiene il binder predefinito dal `DefaultBinder` , proprietà e richiama un membro di MyClass passando il `DefaultBinder` valore come parametro a <xref:System.Type.InvokeMember%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-333">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-334">Separa i nomi nello spazio dei nomi dell'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-334">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-335">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-335">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-336">Rappresenta una matrice vuota di tipo <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-336">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-337">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-337">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9fb9c-338">Nell'esempio di codice riportato di seguito viene illustrato il `EmptyTypes` campo utilizzato in uno del `GetConstructor` metodi per ottenere un costruttore che non accetta parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-338">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-339">Determina se il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> corrente coincide con il tipo di sistema sottostante di <see cref="T:System.Object" /> o dell'oggetto <see cref="T:System.Type" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-339">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="9fb9c-340">Oggetto il cui tipo di sistema sottostante deve essere confrontato con il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-340">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-341">Affinché il confronto abbia esito positivo, deve essere possibile eseguire il cast o la conversione di <c>o</c> in un oggetto di tipo <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-341">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-342">Determina se il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> corrente coincide con il tipo di sistema sottostante dell'oggetto <see cref="T:System.Object" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-342">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-343">
            <see langword="true" /> se il tipo di sistema sottostante di <paramref name="o" /> coincide con il tipo di sistema sottostante del <see cref="T:System.Type" /> corrente. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-343">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9fb9c-344">Questo metodo restituisce anche <see langword="false" /> se:</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-344">This method also returns <see langword="false" /> if: .</span>
          </span>  
  
-   <span data-ttu-id="9fb9c-345"><paramref name="o" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-345"><paramref name="o" /> is <see langword="null" />.</span></span>  
  
-   <span data-ttu-id="9fb9c-346">Impossibile eseguire il cast o la conversione di <paramref name="o" /> in un oggetto <see cref="T:System.Type" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-346"><paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-347">Questo metodo esegue l'override del metodo <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-347">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9fb9c-348">Esegue il cast `o` a un oggetto di tipo <xref:System.Type> e chiama il <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-348">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-349">L'esempio seguente usa <xref:System.Type.Equals%28System.Object%29> per confrontare i vari <xref:System.Type> oggetto istanze con vari <xref:System.Object> istanze.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-349">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="9fb9c-350">Due elementi sono particolarmente non degni di nota nell'esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-350">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="9fb9c-351">Il confronto di un <xref:System.Type> oggetto che rappresenta un intero con un <xref:System.Reflection.TypeInfo> oggetto che rappresenta un numero intero restituito `true` perché <xref:System.Reflection.TypeInfo> è derivato da <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-351">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="9fb9c-352">Il confronto di un <xref:System.Type> oggetto che rappresenta un <xref:System.Collections.Generic.IList%601> oggetto (un tipo generico aperto) con un `List(Of String)` oggetto (un tipo generico chiuso) restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-352">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="9fb9c-353">Oggetto il cui tipo di sistema sottostante deve essere confrontato con il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-353">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-354">Determina se il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> corrente coincide con il tipo di sistema sottostante dell'oggetto <see cref="T:System.Type" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-354">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-355">
            <see langword="true" /> se il tipo di sistema sottostante di <paramref name="o" /> coincide con il tipo di sistema sottostante del <see cref="T:System.Type" /> corrente. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-355">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9fb9c-356">L'esempio seguente usa `Equals` per confrontare due tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-356">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-357">Rappresenta il filtro membro usato sugli attributi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-357">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="9fb9c-358">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-358">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-359">Questo campo contiene un riferimento al delegato utilizzato per il <xref:System.Type.FindMembers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-359">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9fb9c-360">Il metodo incapsulato da questo delegato accetta due parametri: il primo è un <xref:System.Reflection.MemberInfo> oggetto e il secondo è un `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-360">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9fb9c-361">Il metodo determina se il `MemberInfo` oggetto corrispondente ai criteri specificati per il `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-361">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9fb9c-362">Il `Object` può essere assegnato il valore di uno qualsiasi dei campi per le classi <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, o <xref:System.Reflection.MethodImplAttributes>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-362">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="9fb9c-363">Ad esempio, il `Object` può essere assegnato il valore di un campo da `FieldAttributes` come pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-363">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="9fb9c-364">In tal caso, quando il `FilterAttribute` delegato viene richiamato, verrà restituito `true` solo se il metodo rappresentato dal `MemberInfo` oggetto è decorato con l'attributo di campo pubblico nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-364">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-365">Nell'esempio seguente viene ottenuto il `FilterAttribute` delegato, passarlo come parametro per il <xref:System.Type.FindMembers%2A> (metodo) e visualizza i membri specificati e i relativi attributi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-365">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-366">Rappresenta il filtro membro usato sui nomi, che fa distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-366">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="9fb9c-367">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-367">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-368">Questo campo contiene un riferimento al delegato utilizzato per il <xref:System.Type.FindMembers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-368">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9fb9c-369">Il metodo incapsulato da questo delegato accetta due parametri: il primo è un <xref:System.Reflection.MemberInfo> oggetto e il secondo è un `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-369">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9fb9c-370">Il metodo determina se il `MemberInfo` oggetto corrispondente ai criteri specificati per il `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-370">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9fb9c-371">Il `Object` viene assegnato un valore stringa, che può includere una parentesi finale "\*" carattere jolly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-371">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="9fb9c-372">Solo fine stringa jolly è supportata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-372">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="9fb9c-373">Ad esempio, il `Object` può essere assegnato il valore "Byte \*".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-373">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="9fb9c-374">In tal caso, quando il `FilterName` delegato viene richiamato, verrà restituito `true` solo se il metodo rappresentato dal `MemberInfo` oggetto ha un nome che inizia con "Byte".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-374">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-375">Esempio di codice seguente ottiene i metodi associati definito dall'utente `Application` tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-375">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-376">Rappresenta il filtro membro usato sui nomi che non fa distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-376">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="9fb9c-377">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-377">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-378">Questo campo contiene un riferimento al delegato utilizzato per il <xref:System.Type.FindMembers%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-378">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="9fb9c-379">Il metodo incapsulato da questo delegato accetta due parametri: il primo è un <xref:System.Reflection.MemberInfo> oggetto e il secondo è un `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-379">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="9fb9c-380">Il metodo determina se il `MemberInfo` oggetto corrispondente ai criteri specificati per il `Object`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-380">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="9fb9c-381">Il `Object` viene assegnato un valore stringa, che può includere una parentesi finale "\*" carattere jolly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-381">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="9fb9c-382">Solo fine stringa jolly è supportata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-382">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="9fb9c-383">Ad esempio, il `Object` può essere assegnato il valore "ByTe \*".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-383">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="9fb9c-384">In tal caso, quando il `FilterName` delegato viene richiamato, viene restituito true solo se il metodo rappresentato dal `MemberInfo` oggetto ha un nome che inizia con "byte", ignorando i casi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-384">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-385">Nell'esempio seguente si ottiene il `MemberFilter` delegato, passarlo come parametro per il <xref:System.Type.FindMembers%2A> (metodo) e vengono visualizzati i metodi e i relativi attributi del `String` classe che iniziano con la lettera "c", ignorando il caso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-385">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="9fb9c-386">Delegato che confronta le interfacce con <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-386">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="9fb9c-387">Criteri di ricerca che determinano se un'interfaccia deve essere inclusa nella matrice restituita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-387">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-388">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresenta un elenco filtrato di interfacce implementate o ereditate dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-388">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-389">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta un elenco filtrato delle interfacce implementate o ereditate dall'oggetto <see cref="T:System.Type" /> corrente oppure matrice vuota di tipo <see cref="T:System.Type" /> se l'oggetto <see cref="T:System.Type" /> corrente non ha implementato né ereditato interfacce che corrispondono al filtro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-389">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-390">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-390">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-391">Il <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> e <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegati forniti dal <xref:System.Reflection.Module?displayProperty=nameWithType> classe potrebbe anche essere utilizzata in anziché il <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-391">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="9fb9c-392">Tutte le interfacce implementate da questa classe vengono considerate durante la ricerca, se dichiarata da questa stessa classe o di una classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-392">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="9fb9c-393">Questo metodo cerca nella gerarchia di classe di base, la restituzione di ognuna delle interfacce corrispondenti a ogni classe implementa nonché tutti i corrispondenti interfacce ognuno di tali implementa le interfacce (ovvero, la chiusura transitiva di interfacce corrispondenti viene restituita).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-393">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="9fb9c-394">Interfacce non duplicati vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-394">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="9fb9c-395">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, <xref:System.Type.FindInterfaces%2A> cercate tutte le interfacce dichiarate nei vincoli sul parametro di tipo e tutte le interfacce ereditate tramite le interfacce dichiarate nei vincoli.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-395">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="9fb9c-396">Se l'oggetto corrente <xref:System.Type> rappresenta un argomento di tipo di un tipo generico, <xref:System.Type.FindInterfaces%2A> Cerca tutte le interfacce implementate dal tipo di corrispondenza con i vincoli o meno.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-396">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-397"><xref:System.Type.FindInterfaces%2A> può restituire le interfacce generiche, anche su tipi non generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-397"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="9fb9c-398">Ad esempio, è possibile implementare un tipo non generico `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-398">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-399">Nell'esempio seguente consente di trovare l'interfaccia specificata implementata o ereditata dal tipo specificato e quindi Visualizza i nomi di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-399">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-400">
            <paramref name="filter" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-400">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-401">Un inizializzatore statico viene richiamato e genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-401">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="9fb9c-402">Oggetto che indica il tipo di membro da cercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-402">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-403">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-403">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-404">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-404">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-405">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-405">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="9fb9c-406">Delegato che esegue il confronto e restituisce <see langword="true" /> se il membro in esame corrisponde a <c>filterCriteria</c>, in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-406">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="9fb9c-407">È possibile usare i delegati <see langword="FilterAttribute" />, <see langword="FilterName" /> e <see langword="FilterNameIgnoreCase" /> forniti da questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-407">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="9fb9c-408">Come criteri di ricerca, il primo usa i campi di <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> e gli altri due delegati usano gli oggetti <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-408">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="9fb9c-409">Criteri di ricerca che determinano se un membro viene restituito nella matrice di oggetti <see langword="MemberInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-409">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="9fb9c-410">I campi di <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> e <see langword="MethodImplAttributes" /> possono essere usati assieme al delegato <see langword="FilterAttribute" /> fornito da questa classe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-410">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-411">Restituisce una matrice filtrata di oggetti <see cref="T:System.Reflection.MemberInfo" /> del tipo di membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-411">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-412">Matrice filtrata di oggetti <see cref="T:System.Reflection.MemberInfo" /> del tipo di membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-412">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="9fb9c-413">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-413">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-414">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di membri del tipo <paramref name="memberType" /> corrispondenti ai criteri del filtro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-414">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-415">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-415">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-416">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-416">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-417">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-417">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-418">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-418">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-419">Specificare `BindingFlags.Instance` per includere i membri di istanza nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-419">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-420">Specificare `BindingFlags.Static` per includere i membri statici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-420">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-421">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-421">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-422">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-422">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-423">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-423">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-424">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-424">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-425">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-425">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-426">I valori validi per <xref:System.Type.MemberType%2A> definiti in <xref:System.Reflection.MemberInfo>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-426">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="9fb9c-427">Se nessuno di tali membri non viene trovato, viene restituita una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-427">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-428">Per ottenere l'inizializzatore di classi (. cctor) tramite questo metodo, è necessario specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-428">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-429">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-429">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-430">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico o un metodo generico, <xref:System.Type.FindMembers%2A> elabora tutti i membri dichiarati dal vincolo di classe e i vincoli del parametro di tipo di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-430">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-431">Nell'esempio seguente trova tutti i membri in una classe che soddisfano i criteri di ricerca specificato e quindi Visualizza i membri corrispondenti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-431">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-432">
            <paramref name="filter" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-432">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-433">Ottiene il nome completo del tipo, comprendente il relativo spazio dei nomi ma non l'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-433">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-434">Nome completo del tipo, incluso il relativo lo spazio dei nomi ma non l'assembly; oppure <see langword="null" /> se l'istanza corrente rappresenta un parametro di tipo generico, un tipo matrice, un tipo puntatore o un tipo <see langword="byref" /> basato su un parametro di tipo, o un tipo generico che non è una definizione di tipo generico ma contiene parametri di tipo non risolto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-434">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-435">Ad esempio, il nome completo del <xref:System.String> è di tipo `System.String`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-435">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="9fb9c-436">Ciò si differenzia il nome qualificato dall'assembly restituito dal <xref:System.Type.AssemblyQualifiedName%2A> proprietà, che comprende il nome completo e il nome completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-436">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="9fb9c-437">Se il tipo corrente rappresenta un tipo generico chiuso, gli argomenti di tipo nella stringa di risultato di <xref:System.Type.FullName%2A> proprietà vengono qualificati in base al nome completo dell'assembly, anche se la rappresentazione di stringa di tipo generico non è qualificata tramite il relativo full nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-437">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="9fb9c-438">Nell'esempio seguente viene illustrata la differenza nella proprietà nome completo per un tipo che rappresenta la definizione di tipo generico e uno che rappresenta un tipo generico chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-438">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="9fb9c-439">Questa proprietà restituisce `null` se:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-439">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="9fb9c-440">Corrente <xref:System.Type> oggetto rappresenta un parametro di tipo di un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-440">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="9fb9c-441">L'esempio seguente recupera il parametro di tipo di <xref:System.Nullable%601> tipo e tenta di visualizzare il relativo <xref:System.Type.FullName%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-441">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="9fb9c-442">Corrente <xref:System.Type> oggetto rappresenta un tipo di matrice, un tipo di puntatore o un `byref` tipo basato su un parametro di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-442">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="9fb9c-443">L'esempio seguente definisce un tipo generico, `Generictype1<T>`, con tre metodi: `Display(T[])`, che viene passata una matrice di tipo T. `HandleT(T)`, che viene passato un oggetto T; e `ChangeValue(ref T)`, che viene passato un oggetto T per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-443">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="9fb9c-444">Poiché in c# e Visual Basic non consente di definire T come un puntatore nel `HandleT` (metodo), è necessario chiamare il <xref:System.Type.MakePointerType%2A> metodo il <xref:System.Type> oggetto che rappresenta il tipo di parametro del metodo per creare un puntatore a un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-444">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="9fb9c-445">L'output dell'esempio mostra che in tutti e tre i casi, il <xref:System.Type.FullName%2A> proprietà `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-445">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="9fb9c-446">Il tipo corrente contiene parametri di tipo generico che non sono stati sostituiti da tipi specifici (, ovvero il <xref:System.Type.ContainsGenericParameters%2A> restituisce proprietà `true`), ma il tipo non è una definizione di tipo generico (vale a dire il <xref:System.Type.IsGenericTypeDefinition%2A> restituisce proprietà `false`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-446">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="9fb9c-447">Nell'esempio seguente, `Derived<T>` eredita da `Base<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-447">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="9fb9c-448">Il <xref:System.Type.BaseType%2A> proprietà ottiene il <xref:System.Type> oggetto che rappresenta il tipo di base di `Derived<T>`e il relativo <xref:System.Type.FullName%2A> restituisce proprietà `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-448">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="9fb9c-449">Per ottenere un <xref:System.Type.FullName%2A> non `null`, è possibile utilizzare il <xref:System.Type.GetGenericTypeDefinition%2A> metodo per ottenere la definizione di tipo generico, come illustrato nell'esempio.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-449">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="9fb9c-450">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-450">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-451">Nell'esempio seguente visualizza il nome completo del tipo specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-451">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="9fb9c-452">L'esempio seguente confronta le stringhe restituite dal <xref:System.Type.ToString%2A> (metodo) e `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-452">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-453">Ottiene una combinazione di flag <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrivono la covariante e i vincoli speciali del parametro di tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-453">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-454">Combinazione bit per bit di valori <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-454">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-455">Il valore di questa proprietà contiene i flag che descrivono se il parametro di tipo generico corrente è covariante e i flag che descrivono i vincoli speciali.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-455">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="9fb9c-456">Utilizzare il <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> valore per selezionare i flag di covarianza e utilizzare il <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> valore per selezionare i flag di vincolo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-456">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="9fb9c-457">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-457">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-458">Esempio di codice seguente definisce un tipo generico `Test` con due parametri di tipo con vincoli diversi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-458">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="9fb9c-459">Quando viene eseguito il programma, i vincoli vengono esaminati utilizzando il <xref:System.Type.GenericParameterAttributes%2A> proprietà e <xref:System.Type.GetGenericParameterConstraints%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-459">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-460">L'oggetto <see cref="T:System.Type" /> corrente non è un parametro di tipo generico,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-460">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-461">Quindi la proprietà <see cref="P:System.Type.IsGenericParameter" /> restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-461">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-462">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-462">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-463">Ottiene la posizione del parametro di tipo nell'elenco di parametri di tipo del tipo o del metodo generico che ha dichiarato il parametro, quando l'oggetto <see cref="T:System.Type" /> rappresenta un parametro di tipo di un tipo o un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-463">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-464">Posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo o del metodo generico che definisce il parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-464">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-465">I numeri di posizione iniziano da 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-465">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-466">Il <xref:System.Type.GenericParameterPosition%2A> proprietà restituisce la posizione di un parametro di tipo nell'elenco dei parametri della definizione di tipo generico o la definizione di metodo generico in cui è stato originariamente definito il parametro di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-466">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="9fb9c-467">Il <xref:System.Type.DeclaringType%2A> e <xref:System.Type.DeclaringMethod%2A> identificano la definizione di tipo o metodo generica:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-467">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="9fb9c-468">Se il <xref:System.Type.DeclaringMethod%2A> proprietà restituisce un <xref:System.Reflection.MethodInfo>che <xref:System.Reflection.MethodInfo> rappresenta una definizione di metodo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo della definizione di metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-468">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-469">Se il <xref:System.Type.DeclaringMethod%2A> restituisce proprietà `null`, quindi il <xref:System.Type.DeclaringType%2A> proprietà restituisce sempre un <xref:System.Type> oggetto che rappresenta una definizione di tipo generico e corrente <xref:System.Type> oggetto rappresenta un parametro di tipo del tipo generico definizione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-469">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="9fb9c-470">Per fornire contesto corretto per il valore di <xref:System.Type.GenericParameterPosition%2A> proprietà, è necessario identificare il metodo appartiene a un parametro di tipo o un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-470">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="9fb9c-471">Si consideri ad esempio il valore restituito del metodo generico `GetSomething` nel codice seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-471">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9fb9c-472">Il tipo restituito da `GetSomething` dipende dagli argomenti di tipo forniti a classe `A` e `GetSomething` stesso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-472">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="9fb9c-473">È possibile ottenere un <xref:System.Reflection.MethodInfo> per `GetSomething`, e da cui è possibile ottenere il tipo restituito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-473">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="9fb9c-474">Quando si esaminano i parametri di tipo del tipo restituito, <xref:System.Type.GenericParameterPosition%2A> restituisce 0 per entrambi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-474">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="9fb9c-475">La posizione di `V` è 0 poiché `V` è il primo parametro di tipo nell'elenco di parametri di tipo per la classe `A`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-475">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="9fb9c-476">La posizione di `X` è 0 poiché `X` è il primo parametro di tipo nell'elenco di parametri di tipo per `GetSomething`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-476">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-477">La chiamata di <xref:System.Type.GenericParameterPosition%2A> proprietà genera un'eccezione se l'oggetto corrente <xref:System.Type> non rappresenta un parametro di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-477">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="9fb9c-478">Quando si esaminano gli argomenti di tipo di un tipo costruito aperto, usare il <xref:System.Type.IsGenericParameter%2A> proprietà per indicare che sono parametri di tipo e i tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-478">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="9fb9c-479">Il <xref:System.Type.IsGenericParameter%2A> restituisce proprietà `true` per un parametro di tipo; è quindi possibile utilizzare il <xref:System.Type.GenericParameterPosition%2A> metodo per ottenere la posizione e utilizzare il <xref:System.Type.DeclaringMethod%2A> e <xref:System.Type.DeclaringType%2A> proprietà per determinare il metodo generico o la definizione che definisce il tipo di .</span><span class="sxs-lookup"><span data-stu-id="9fb9c-479">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-480">Nell'esempio seguente definisce una classe generica con due parametri di tipo e una seconda classe generica da cui deriva la prima classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-480">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="9fb9c-481">Classe di base della classe derivata ha due argomenti di tipo: il primo è <xref:System.Int32>, e il secondo è un parametro di tipo del tipo derivato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-481">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="9fb9c-482">Nell'esempio vengono visualizzate informazioni su queste classi generiche, incluse le posizioni segnalati dal <xref:System.Type.GenericParameterPosition%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-482">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-483">Il tipo corrente non rappresenta un parametro di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-483">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-484">Ciò significa che <see cref="P:System.Type.IsGenericParameter" /> restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-484">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-485">Ottiene una matrice di argomenti tipo generico per questo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-485">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-486">Matrice di argomenti tipo generico per questo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-486">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-487">Questa proprietà ottiene solo gli argomenti di tipo generico; ovvero, i tipi che sono stati specificati i parametri di tipo generico del tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-487">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="9fb9c-488">Se il tipo corrente è una definizione di tipo generico, questa proprietà restituisce una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-488">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-489">Se un tipo generico viene utilizzato in un metodo generico o in un altro tipo generico, alcuni dei relativi argomenti di tipo generico potrebbe essere parametri di tipo generico del metodo o tipo contenitore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-489">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="9fb9c-490">Per ottenere i parametri di tipo generico di un tipo che rappresenta una definizione di tipo generico, utilizzare il <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-490">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="9fb9c-491">Per ottenere un <xref:System.Reflection.TypeInfo> oggetto per l'oggetto corrente <xref:System.Type> oggetto, usare il <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> metodo di estensione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-491">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-492">Ottiene il numero di dimensioni in una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-492">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-493">Intero che contiene il numero di dimensioni del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-493">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9fb9c-494">Nell'esempio seguente visualizza il numero di dimensioni in una matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-494">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-495">La funzionalità di questo metodo non è supportata nella classe base e deve invece essere implementata in una classe derivata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-495">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-496">Il tipo corrente non è una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-496">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-497">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.Attributes" /> e ottiene una maschera di bit che indica gli attributi associati a <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-497">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-498">Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che rappresenta il gruppo di attributi di <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-498">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-499">Ottiene un costruttore specifico dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-499">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="9fb9c-500">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano il numero, l'ordine e il tipo dei parametri per il costruttore desiderato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-500">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="9fb9c-501">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-501">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-502">Matrice vuota di oggetti <see cref="T:System.Type" /> per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-502">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-503">Tale matrice vuota viene fornita dal campo <see langword="static" /><see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-503">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-504">Cerca un costruttore di istanza pubblica i cui parametri corrispondono ai tipi nella matrice specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-504">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-505">Oggetto che rappresenta il costruttore dell'istanza pubblica i cui parametri corrispondono ai tipi nella matrice del tipo di parametro, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-505">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-506">Overload di questo metodo cerca costruttori di istanza pubblici e non può essere utilizzato per ottenere un inizializzatore di classi (. cctor).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-506">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="9fb9c-507">Per ottenere un inizializzatore di classi, usare un overload che accetta <xref:System.Reflection.BindingFlags>e specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-507">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-508">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-508">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-509">Se il costruttore richiesto non è pubblica, questo metodo restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-509">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-510">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-510">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-511">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-511">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-512">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.ConstructorInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-512">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-513">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo restituisce sempre `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-513">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-514">Nell'esempio seguente viene ottenuto il tipo di `MyClass`, ottiene il <xref:System.Reflection.ConstructorInfo> dell'oggetto e Visualizza la firma del costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-514">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-515">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-515">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-516">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-516">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-517">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-517">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-518">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-518">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-519">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-519">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-520">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-520">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-521">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-521">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-522">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-522">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-523">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-523">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-524">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-524">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-525">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta numero, ordine e tipo dei parametri relativi al costruttore da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-525">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="9fb9c-526">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-526">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-527">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero Type[] types = new Type[0]) per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-527">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-528">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-528">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-529">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-529">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-530">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresentano gli attributi associati all'elemento corrispondente nella matrice del tipo di parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-530">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="9fb9c-531">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-531">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-532">Cerca un costruttore i cui parametri corrispondono ai tipi e ai modificatori dell'argomento specificato, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-532">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-533">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-533">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-534">Se non esiste una corrispondenza esatta, la `binder` tenterà di assegnare forzatamente i tipi di parametro specificati nel `types` matrice per selezionare una corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-534">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9fb9c-535">Se il `binder` non è in grado di selezionare una corrispondenza, quindi `null` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-535">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-536">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro può essere utilizzato per definire i costruttori da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-536">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-537">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-537">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-538">Specificare `BindingFlags.Public` per includere i costruttori pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-538">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-539">Specificare `BindingFlags.NonPublic` per includere nella ricerca i costruttori pubblici (ovvero, i costruttori privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-539">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-540">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-540">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-541">Per ottenere l'inizializzatore di classi (. cctor) tramite l'overload di questo metodo, è necessario specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-541">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-542">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-542">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-543">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-543">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-544">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-544">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-545">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.ConstructorInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-545">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-546">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo restituisce sempre `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-546">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-547">Il programma seguente ottiene il tipo di `MyClass1` classe, ottiene il <xref:System.Reflection.ConstructorInfo> oggetto corrispondenza il flag di associazione specificati e viene visualizzata la firma del costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-547">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-548">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-548">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-549">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-549">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-550">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-550">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-551">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-551">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-552">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-552">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-553">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-553">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-554">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-554">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-555">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-555">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-556">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-556">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-557">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-557">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-558">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-558">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-559">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-559">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-560">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-560">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-561">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-561">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="9fb9c-562">Oggetto che specifica il set di regole da usare per l'ordine e il layout degli argomenti, la modalità di passaggio del valore restituito, i Registri di sistema usati per gli argomenti e la pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-562">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-563">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta numero, ordine e tipo dei parametri relativi al costruttore da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-563">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="9fb9c-564">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-564">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-565">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero Type[] types = new Type[0]) per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-565">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-566">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-566">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-567">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-567">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-568">Cerca il costruttore i cui parametri corrispondono ai tipi di argomenti e ai modificatori specificati, usando i vincoli di associazione e la convenzione di chiamata specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-568">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-569">Oggetto che rappresenta il costruttore corrispondente ai requisiti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-569">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-570">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-570">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-571">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-571">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-572">Se non esiste una corrispondenza esatta, la `binder` tenterà di assegnare forzatamente i tipi di parametro specificati nel `types` matrice per selezionare una corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-572">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9fb9c-573">Se il `binder` non è in grado di selezionare una corrispondenza, quindi `null` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-573">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-574">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro può essere utilizzato per definire i costruttori da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-574">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-575">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-575">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-576">Specificare `BindingFlags.Public` per includere i costruttori pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-576">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-577">Specificare `BindingFlags.NonPublic` per includere nella ricerca i costruttori pubblici (ovvero, i costruttori privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-577">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-578">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-578">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-579">Per ottenere l'inizializzatore di classi (. cctor) tramite questo metodo, è necessario specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-579">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-580">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-580">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-581">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-581">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-582">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-582">Member Type</span></span>|<span data-ttu-id="9fb9c-583">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-583">Static</span></span>|<span data-ttu-id="9fb9c-584">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-584">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-585">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-585">Constructor</span></span>|<span data-ttu-id="9fb9c-586">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-586">No</span></span>|<span data-ttu-id="9fb9c-587">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-587">No</span></span>|  
|<span data-ttu-id="9fb9c-588">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-588">Field</span></span>|<span data-ttu-id="9fb9c-589">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-589">No</span></span>|<span data-ttu-id="9fb9c-590">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-590">Yes.</span></span> <span data-ttu-id="9fb9c-591">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-591">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-592">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-592">Event</span></span>|<span data-ttu-id="9fb9c-593">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-593">Not applicable</span></span>|<span data-ttu-id="9fb9c-594">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-594">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-595">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-595">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-596">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-596">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-597">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-597">Method</span></span>|<span data-ttu-id="9fb9c-598">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-598">No</span></span>|<span data-ttu-id="9fb9c-599">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-599">Yes.</span></span> <span data-ttu-id="9fb9c-600">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-600">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-601">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-601">Nested Type</span></span>|<span data-ttu-id="9fb9c-602">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-602">No</span></span>|<span data-ttu-id="9fb9c-603">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-603">No</span></span>|  
|<span data-ttu-id="9fb9c-604">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-604">Property</span></span>|<span data-ttu-id="9fb9c-605">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-605">Not applicable</span></span>|<span data-ttu-id="9fb9c-606">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-607">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-608">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-608">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-609">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-609">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-610">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-610">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-611">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-611">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-612">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-612">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-613">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-613">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-614">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-614">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-615">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-615">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-616">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.ConstructorInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-616">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-617">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo restituisce sempre `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-617">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-618">Nell'esempio seguente viene ottenuto il tipo di `MyClass1`, ottiene il <xref:System.Reflection.ConstructorInfo> oggetto che corrisponde ai flag di associazione specificato e Visualizza la firma del costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-618">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-619">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-619">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-620">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-620">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-621">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-621">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-622">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-622">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-623">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-623">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-624">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-624">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-625">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-625">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-626">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-626">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-627">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-627">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-628">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-628">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-629">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-629">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-630">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-630">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-631">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-631">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-632">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-632">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="9fb9c-633">Oggetto che specifica il set di regole da usare per l'ordine e il layout degli argomenti, la modalità di passaggio del valore restituito, i Registri di sistema usati per gli argomenti e la pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-633">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-634">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta numero, ordine e tipo dei parametri relativi al costruttore da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-634">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="9fb9c-635">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-635">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-636">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero Type[] types = new Type[0]) per ottenere un costruttore che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-636">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-637">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-637">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-638">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-638">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-639">Quando ne viene eseguito l'override in una classe derivata, cerca un costruttore i cui parametri corrispondono ai modificatori e ai tipi di argomento specificati, usando i vincoli di associazione e la convenzione di denominazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-639">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-640">Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-640">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-641">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-641">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-642">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-642">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-643">Se non esiste una corrispondenza esatta, la `binder` tenterà di assegnare forzatamente i tipi di parametro specificati nel `types` matrice per selezionare una corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-643">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9fb9c-644">Se il `binder` non è in grado di selezionare una corrispondenza, quindi `null` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-644">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-645">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro può essere utilizzato per definire i costruttori da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-645">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-646">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-646">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-647">Specificare `BindingFlags.Public` per includere i costruttori pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-647">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-648">Specificare `BindingFlags.NonPublic` per includere nella ricerca i costruttori pubblici (ovvero, i costruttori privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-648">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-649">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-649">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-650">Questo metodo implementa <xref:System.Type.GetConstructor%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-650">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-651">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-651">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-652">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-652">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-653">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-653">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-654">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-654">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-655">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-655">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-656">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-656">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-657">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-657">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-658">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-658">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-659">Il tipo corrente è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-659">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-660">Ottiene i costruttori dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-660">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-661">Restituisce tutti i costruttori di tipo pubblico definiti per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-661">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-662">Matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano tutti i costruttori di istanza pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente, senza l'inizializzatore di tipo (costruttore statico).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-662">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="9fb9c-663">Se per l'oggetto <see cref="T:System.Type" /> corrente non sono definiti costruttori di istanza pubblici o se l'oggetto <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo nella definizione di un tipo o di un metodo generico, viene restituita una matrice vuota di tipo <see cref="T:System.Reflection.ConstructorInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-663">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-664">Il <xref:System.Type.GetConstructors%2A> metodo non restituisce i costruttori in un ordine specifico, ad esempio ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-664">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="9fb9c-665">Il codice non deve dipendere dall'ordine in cui vengono restituiti i costruttori, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-665">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-666">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-666">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-667">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-667">Member Type</span></span>|<span data-ttu-id="9fb9c-668">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-668">Static</span></span>|<span data-ttu-id="9fb9c-669">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-669">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-670">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-670">Constructor</span></span>|<span data-ttu-id="9fb9c-671">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-671">No</span></span>|<span data-ttu-id="9fb9c-672">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-672">No</span></span>|  
|<span data-ttu-id="9fb9c-673">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-673">Field</span></span>|<span data-ttu-id="9fb9c-674">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-674">No</span></span>|<span data-ttu-id="9fb9c-675">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-675">Yes.</span></span> <span data-ttu-id="9fb9c-676">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-676">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-677">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-677">Event</span></span>|<span data-ttu-id="9fb9c-678">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-678">Not applicable</span></span>|<span data-ttu-id="9fb9c-679">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-679">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-680">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-680">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-681">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-681">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-682">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-682">Method</span></span>|<span data-ttu-id="9fb9c-683">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-683">No</span></span>|<span data-ttu-id="9fb9c-684">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-684">Yes.</span></span> <span data-ttu-id="9fb9c-685">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-685">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-686">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-686">Nested Type</span></span>|<span data-ttu-id="9fb9c-687">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-687">No</span></span>|<span data-ttu-id="9fb9c-688">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-688">No</span></span>|  
|<span data-ttu-id="9fb9c-689">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-689">Property</span></span>|<span data-ttu-id="9fb9c-690">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-690">Not applicable</span></span>|<span data-ttu-id="9fb9c-691">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-691">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-692">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-692">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-693">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-693">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-694">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-694">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-695">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-695">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-696">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-696">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-697">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-697">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-698">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-698">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-699">Overload di questo metodo chiama il <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload del metodo, con <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-699">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-700">Non verranno individuati gli inizializzatori di classi (. cctor).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-700">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="9fb9c-701">Per trovare gli inizializzatori di classi, usare un overload che accetta <xref:System.Reflection.BindingFlags>e specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-701">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-702">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-702">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-703">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.ConstructorInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-703">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-704">Ad esempio, se classe `C<T>` ha un costruttore `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), la chiamata <xref:System.Type.GetConstructors%2A> su `C<int>` restituisce un <xref:System.Reflection.ConstructorInfo> che rappresenta `C(int t1)` in c# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-704">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9fb9c-705">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo generico, la <xref:System.Type.GetConstructors%2A> metodo restituisce una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-705">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-706">In questo esempio mostra l'output del <xref:System.Type.GetConstructors%2A> overload da una classe che dispone di due costruttori di istanza e un costruttore statico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-706">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="9fb9c-707">L'output di questo codice è:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-707">The output of this code is:</span></span>  
  
 <span data-ttu-id="9fb9c-708">2</span><span class="sxs-lookup"><span data-stu-id="9fb9c-708">2</span></span>  
  
 <span data-ttu-id="9fb9c-709">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-709">False</span></span>  
  
 <span data-ttu-id="9fb9c-710">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-710">False</span></span>  
  
 <span data-ttu-id="9fb9c-711">Poiché il <xref:System.Type.GetConstructors> overload utilizza solo <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, il costruttore statico non viene conteggiato dal `for` espressione né valutato da `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-711">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="9fb9c-712">Per trovare i costruttori statici, utilizzare il <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload e passare la combinazione (logico `OR`) di <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, come illustrato nell'esempio di codice seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-712">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="9fb9c-713">L'output è ora:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-713">Now the output is:</span></span>  
  
 <span data-ttu-id="9fb9c-714">3</span><span class="sxs-lookup"><span data-stu-id="9fb9c-714">3</span></span>  
  
 <span data-ttu-id="9fb9c-715">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-715">False</span></span>  
  
 <span data-ttu-id="9fb9c-716">True</span><span class="sxs-lookup"><span data-stu-id="9fb9c-716">True</span></span>  
  
 <span data-ttu-id="9fb9c-717">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-717">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-718">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-718">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-719">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-719">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-720">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-720">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-721">Quando ne viene eseguito l'override in una classe derivata, cerca i costruttori definiti per l'oggetto <see cref="T:System.Type" /> corrente, usando i <see langword="BindingFlags" /> specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-721">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-722">Matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano tutti i costruttori definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondente ai vincoli di binding specificati, compreso l'inizializzatore di tipo, se definito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-722">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="9fb9c-723">Restituisce una matrice vuota di tipo <see cref="T:System.Reflection.ConstructorInfo" /> se per l'oggetto <see cref="T:System.Type" /> corrente non sono definiti costruttori, se nessuno dei costruttori definiti corrisponde ai vincoli di binding o se l'oggetto <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo nella definizione di un tipo o di un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-723">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-724">Il <xref:System.Type.GetConstructors%2A> metodo non restituisce i costruttori in un ordine specifico, ad esempio ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-724">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="9fb9c-725">Il codice non deve dipendere dall'ordine in cui vengono restituiti i costruttori, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-725">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-726">`bindingAttr` Consente di specificare se restituire solo i costruttori pubblici o costruttori pubblici e non pubblici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-726">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="9fb9c-727">Se non esiste una corrispondenza esatta, la `binder` tenterà di assegnare forzatamente i tipi di parametro specificati nel `types` matrice per selezionare una corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-727">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="9fb9c-728">Se il `binder` non è in grado di selezionare una corrispondenza, quindi `null` viene restituito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-728">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-729">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro può essere utilizzato per definire i costruttori da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-729">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-730">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-730">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-731">Specificare `BindingFlags.Public` per includere i costruttori pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-731">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-732">Specificare `BindingFlags.NonPublic` per includere nella ricerca i costruttori pubblici (ovvero, i costruttori privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-732">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="9fb9c-733">I costruttori delle classi base non vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-733">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="9fb9c-734">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-734">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-735">Per ottenere l'inizializzatore di classi (. cctor) tramite l'overload di questo metodo, è necessario specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-735">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-736">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-736">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-737">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.ConstructorInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-737">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-738">Ad esempio, se classe `C<T>` ha un costruttore `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), la chiamata <xref:System.Type.GetConstructors%2A> su `C<int>` restituisce un <xref:System.Reflection.ConstructorInfo> che rappresenta `C(int t1)` in c# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-738">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9fb9c-739">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo generico, la <xref:System.Type.GetConstructors%2A> metodo restituisce una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-739">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-740">In questo esempio mostra l'output del <xref:System.Type.GetConstructors> overload da una classe che dispone di due costruttori di istanza e un costruttore statico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-740">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="9fb9c-741">L'output di questo codice è:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-741">The output of this code is:</span></span>  
  
 <span data-ttu-id="9fb9c-742">2</span><span class="sxs-lookup"><span data-stu-id="9fb9c-742">2</span></span>  
  
 <span data-ttu-id="9fb9c-743">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-743">False</span></span>  
  
 <span data-ttu-id="9fb9c-744">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-744">False</span></span>  
  
 <span data-ttu-id="9fb9c-745">Poiché il <xref:System.Type.GetConstructors%2A> overload utilizza solo <xref:System.Reflection.BindingFlags.Public> e <xref:System.Reflection.BindingFlags.Instance>, il costruttore statico non viene conteggiato dal `for` espressione né valutato da `IsStatic`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-745">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="9fb9c-746">Per trovare i costruttori statici, utilizzare il <xref:System.Type.GetConstructors%2A> overload e passare la combinazione (OR logico) di <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, come illustrato nell'esempio di codice seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-746">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="9fb9c-747">L'output è ora:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-747">Now the output is:</span></span>  
  
 <span data-ttu-id="9fb9c-748">3</span><span class="sxs-lookup"><span data-stu-id="9fb9c-748">3</span></span>  
  
 <span data-ttu-id="9fb9c-749">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-749">False</span></span>  
  
 <span data-ttu-id="9fb9c-750">True</span><span class="sxs-lookup"><span data-stu-id="9fb9c-750">True</span></span>  
  
 <span data-ttu-id="9fb9c-751">False</span><span class="sxs-lookup"><span data-stu-id="9fb9c-751">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-752">Cerca i membri definiti per l'oggetto <see cref="T:System.Type" /> corrente per cui è impostato il <see cref="T:System.Reflection.DefaultMemberAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-752">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-753">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri predefiniti dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-753">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-754">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-754">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-755">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono membri predefiniti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-755">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-756">Il <xref:System.Type.GetDefaultMembers%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-756">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-757">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-757">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-758">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-758">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-759">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-759">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-760">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-760">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-761">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-761">Member Type</span></span>|<span data-ttu-id="9fb9c-762">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-762">Static</span></span>|<span data-ttu-id="9fb9c-763">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-763">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-764">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-764">Constructor</span></span>|<span data-ttu-id="9fb9c-765">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-765">No</span></span>|<span data-ttu-id="9fb9c-766">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-766">No</span></span>|  
|<span data-ttu-id="9fb9c-767">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-767">Field</span></span>|<span data-ttu-id="9fb9c-768">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-768">No</span></span>|<span data-ttu-id="9fb9c-769">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-769">Yes.</span></span> <span data-ttu-id="9fb9c-770">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-770">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-771">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-771">Event</span></span>|<span data-ttu-id="9fb9c-772">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-772">Not applicable</span></span>|<span data-ttu-id="9fb9c-773">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-773">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-774">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-774">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-775">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-775">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-776">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-776">Method</span></span>|<span data-ttu-id="9fb9c-777">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-777">No</span></span>|<span data-ttu-id="9fb9c-778">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-778">Yes.</span></span> <span data-ttu-id="9fb9c-779">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-779">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-780">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-780">Nested Type</span></span>|<span data-ttu-id="9fb9c-781">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-781">No</span></span>|<span data-ttu-id="9fb9c-782">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-782">No</span></span>|  
|<span data-ttu-id="9fb9c-783">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-783">Property</span></span>|<span data-ttu-id="9fb9c-784">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-784">Not applicable</span></span>|<span data-ttu-id="9fb9c-785">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-785">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-786">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-786">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-787">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-787">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-788">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-788">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-789">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-789">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-790">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-790">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-791">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-791">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-792">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-792">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-793">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-793">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="9fb9c-794">Ad esempio, se classe `C<T>` dispone di una proprietà `P` che restituisce `T`, la chiamata <xref:System.Type.GetDefaultMembers%2A> su `C<int>` restituisce `int P` in c# (`Property P As Integer` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-794">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9fb9c-795">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-795">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-796">Nell'esempio seguente recupera le informazioni di membro predefinito di `MyClass` e visualizza i membri predefiniti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-796">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-797">Quando ne viene eseguito l'override in una classe derivata, restituisce l'oggetto <see cref="T:System.Type" /> dell'oggetto incluso in modo diretto o mediante riferimento tramite matrice, puntatore o tipo di riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-797">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-798">Oggetto <see cref="T:System.Type" /> dell'oggetto incluso o a cui fa riferimento la matrice, il puntatore o il tipo di riferimento corrente oppure <see langword="null" /> se l'oggetto <see cref="T:System.Type" /> corrente non è una matrice né un puntatore, non viene passato per riferimento oppure rappresenta un tipo generico o un parametro di tipo nella definizione di un tipo o di un metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-798">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-799">Questo metodo restituisce `null` per la <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-799">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-800">Nell'esempio seguente viene illustrato l'utilizzo di `GetElementType` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-800">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9fb9c-801">Valore di cui recuperare il nome.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-801">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-802">Restituisce il nome della costante avente il valore specificato, per il tipo di enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-802">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-803">Nome del membro del tipo di enumerazione corrente avente il valore specificato oppure <see langword="null" /> se tale costante non viene rilevata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-803">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-804">Il tipo corrente non è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-804">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="9fb9c-805">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-805">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-806">Il tipo di <paramref name="value" /> non corrisponde al tipo corrente. Inoltre, il relativo tipo sottostante non corrisponde a quello del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-806">
              <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-807">
            <paramref name="value" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-807">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-808">Restituisce i nomi dei membri del tipo di enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-808">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-809">Matrice contenente i nomi dei membri dell'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-809">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-810">Gli elementi della matrice di valori restituiti vengono ordinati in base ai valori binari (ovvero, i valori senza segno) delle costanti enumerate.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-810">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="9fb9c-811">Se la matrice contiene costanti enumerate con lo stesso valore, non è specificato l'ordine dei nomi corrispondenti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-811">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-812">Il tipo corrente non è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-812">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-813">Restituisce il tipo sottostante del tipo di enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-813">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-814">Tipo sottostante dell'enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-814">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-815">Per impostazione predefinita, il tipo sottostante di un'enumerazione in c# e Visual Basic è <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-815">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="9fb9c-816">È possibile specificare altri tipi di integer.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-816">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-817">Il tipo corrente non è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-817">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="9fb9c-818">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-818">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-819">Il tipo di enumerazione non è valido perché contiene più di un campo di istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-819">The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-820">Restituisce una matrice dei valori delle costanti nel tipo di enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-820">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-821">Matrice contenente i valori.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-821">An array that contains the values.</span>
          </span>
          <span data-ttu-id="9fb9c-822">Gli elementi della matrice sono ordinati in base ai valori binari (ad esempio, i valori senza segno) delle costanti dell'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-822">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-823">Il tipo corrente non è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-823">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-824">Ottiene un evento specifico dichiarato o ereditato dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-824">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-825">Stringa contenente il nome di un evento dichiarato o ereditato dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-825">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-826">Restituisce l'oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento pubblico specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-826">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-827">Oggetto che rappresenta l'evento pubblico specificato dichiarato o ereditato dall'oggetto <see cref="T:System.Type" /> corrente, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-827">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-828">Un evento è considerato pubblico per la reflection se dispone di almeno un metodo o una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-828">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9fb9c-829">In caso contrario, l'evento viene considerato privato ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-829">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-830">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-830">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-831">La ricerca include gli eventi di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-831">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="9fb9c-832">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-832">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-833">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-833">Member Type</span></span>|<span data-ttu-id="9fb9c-834">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-834">Static</span></span>|<span data-ttu-id="9fb9c-835">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-835">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-836">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-836">Constructor</span></span>|<span data-ttu-id="9fb9c-837">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-837">No</span></span>|<span data-ttu-id="9fb9c-838">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-838">No</span></span>|  
|<span data-ttu-id="9fb9c-839">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-839">Field</span></span>|<span data-ttu-id="9fb9c-840">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-840">No</span></span>|<span data-ttu-id="9fb9c-841">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-841">Yes.</span></span> <span data-ttu-id="9fb9c-842">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-842">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-843">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-843">Event</span></span>|<span data-ttu-id="9fb9c-844">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-844">Not applicable</span></span>|<span data-ttu-id="9fb9c-845">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-845">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-846">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-846">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-847">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-847">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-848">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-848">Method</span></span>|<span data-ttu-id="9fb9c-849">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-849">No</span></span>|<span data-ttu-id="9fb9c-850">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-850">Yes.</span></span> <span data-ttu-id="9fb9c-851">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-851">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-852">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-852">Nested Type</span></span>|<span data-ttu-id="9fb9c-853">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-853">No</span></span>|<span data-ttu-id="9fb9c-854">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-854">No</span></span>|  
|<span data-ttu-id="9fb9c-855">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-855">Property</span></span>|<span data-ttu-id="9fb9c-856">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-856">Not applicable</span></span>|<span data-ttu-id="9fb9c-857">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-857">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-858">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-858">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-859">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-859">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-860">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-860">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-861">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-861">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-862">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-862">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-863">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-863">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-864">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-864">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-865">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.EventInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-865">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-866">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca gli eventi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-866">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-867">Nell'esempio seguente viene creato un <xref:System.Reflection.EventInfo> dell'oggetto e ottiene l'evento per una classe di pulsanti per l'evento specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-867">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-868">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-868">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-869">Stringa contenente il nome di un evento dichiarato o ereditato dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-869">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-870">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-870">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-871">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-871">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-872">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-872">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-873">Quando ne viene eseguito l'override in una classe derivata, restituisce l'oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento specificato, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-873">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-874">Oggetto che rappresenta l'evento specificato dichiarato o ereditato dall'oggetto <see cref="T:System.Type" /> corrente, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-874">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-875">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire gli eventi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-875">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-876">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-876">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-877">Specificare `BindingFlags.Public` per includere gli eventi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-877">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-878">Specificare `BindingFlags.NonPublic` per includere gli eventi pubblici (vale a dire eventi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-878">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-879">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-879">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-880">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-880">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-881">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-881">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-882">`BindingFlags.DeclaredOnly` Per cercare solo gli eventi dichiarati sul <xref:System.Type>, non gli eventi di quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-882">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-883">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-883">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-884">Un evento è considerato pubblico per la reflection se dispone di almeno un metodo o una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-884">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9fb9c-885">In caso contrario, l'evento viene considerato privato ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-885">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-886">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.EventInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-886">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-887">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca gli eventi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-887">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-888">Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> metodo per cercare un tipo di un evento pubblico o non pubblico denominato "Clic" che non è `static` (`Shared` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-888">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-889">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-889">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-890">Ottiene gli eventi dichiarati o ereditati dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-890">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-891">Restituisce tutti gli eventi pubblici dichiarati o ereditati dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-891">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-892">Matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano tutti gli eventi pubblici dichiarati o ereditati dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-892">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-893">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-893">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-894">Matrice vuota di tipo <see cref="T:System.Reflection.EventInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono eventi pubblici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-894">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-895">Un evento è considerato pubblico per la reflection se dispone di almeno un metodo o una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-895">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9fb9c-896">In caso contrario, l'evento viene considerato privato ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-896">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-897">Il <xref:System.Type.GetEvents%2A> metodo non restituisce gli eventi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-897">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-898">Il codice non deve dipendere dall'ordine in cui vengono restituiti gli eventi, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-898">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-899">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-899">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-900">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-900">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-901">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-901">Member Type</span></span>|<span data-ttu-id="9fb9c-902">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-902">Static</span></span>|<span data-ttu-id="9fb9c-903">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-903">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-904">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-904">Constructor</span></span>|<span data-ttu-id="9fb9c-905">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-905">No</span></span>|<span data-ttu-id="9fb9c-906">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-906">No</span></span>|  
|<span data-ttu-id="9fb9c-907">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-907">Field</span></span>|<span data-ttu-id="9fb9c-908">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-908">No</span></span>|<span data-ttu-id="9fb9c-909">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-909">Yes.</span></span> <span data-ttu-id="9fb9c-910">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-910">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-911">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-911">Event</span></span>|<span data-ttu-id="9fb9c-912">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-912">Not applicable</span></span>|<span data-ttu-id="9fb9c-913">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-913">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-914">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-914">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-915">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-915">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-916">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-916">Method</span></span>|<span data-ttu-id="9fb9c-917">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-917">No</span></span>|<span data-ttu-id="9fb9c-918">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-918">Yes.</span></span> <span data-ttu-id="9fb9c-919">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-919">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-920">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-920">Nested Type</span></span>|<span data-ttu-id="9fb9c-921">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-921">No</span></span>|<span data-ttu-id="9fb9c-922">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-922">No</span></span>|  
|<span data-ttu-id="9fb9c-923">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-923">Property</span></span>|<span data-ttu-id="9fb9c-924">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-924">Not applicable</span></span>|<span data-ttu-id="9fb9c-925">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-925">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-926">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-926">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-927">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-927">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-928">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-928">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-929">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-929">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-930">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-930">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-931">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-931">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-932">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-932">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-933">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.EventInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-933">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-934">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca gli eventi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-934">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-935">Nell'esempio seguente si ottiene una matrice di <xref:System.Reflection.EventInfo> gli oggetti, ottiene tutti gli eventi per un `Button` classe e visualizza i nomi degli eventi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-935">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="9fb9c-936">Per compilare l'esempio di Visual Basic, utilizzare la seguente riga di comando:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-936">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-937">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-937">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-938">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-938">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-939">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-939">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-940">Quando ne viene eseguito l'override in una classe derivata, cerca gli eventi dichiarati o ereditati dall'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-940">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-941">Matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano tutti gli eventi dichiarati o ereditati dalla classe <see cref="T:System.Type" /> corrente e che corrispondono ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-941">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="9fb9c-942">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-942">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-943">Matrice vuota di tipo <see cref="T:System.Reflection.EventInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di eventi oppure se nessuno degli eventi corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-943">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-944">Il <xref:System.Type.GetEvents%2A> metodo non restituisce gli eventi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-944">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-945">Il codice non deve dipendere dall'ordine in cui vengono restituiti gli eventi, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-945">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-946">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire gli eventi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-946">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-947">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-947">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-948">Specificare `BindingFlags.Public` per includere gli eventi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-948">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-949">Specificare `BindingFlags.NonPublic` per includere gli eventi pubblici (vale a dire eventi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-949">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="9fb9c-950">Solo protetti e vengono restituiti gli eventi interni delle classi di base; gli eventi privati delle classi base non vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-950">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9fb9c-951">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-951">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-952">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-952">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-953">`BindingFlags.DeclaredOnly` Per cercare solo gli eventi dichiarati sul <xref:System.Type>, non gli eventi di quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-953">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-954">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-954">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-955">Un evento è considerato pubblico per la reflection se dispone di almeno un metodo o una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-955">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="9fb9c-956">In caso contrario, l'evento viene considerato privato ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-956">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-957">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.EventInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-957">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-958">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca gli eventi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-958">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-959">Nell'esempio seguente si ottiene una matrice di <xref:System.Reflection.EventInfo> gli oggetti che corrispondono ai flag di associazione specificati, ottiene tutti gli eventi per un `Button` classe e visualizza i nomi degli eventi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-959">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="9fb9c-960">Per compilare l'esempio di Visual Basic, utilizzare la seguente riga di comando:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-960">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-961">Ottiene un campo specifico dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-961">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-962">Stringa che contiene il nome del campo dati da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-962">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-963">Cerca il campo pubblico con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-963">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-964">Oggetto che rappresenta il campo pubblico con il nome specificato, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-964">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-965">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-965">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-966">La ricerca include campi di istanza pubblici static e public.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-966">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="9fb9c-967">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.FieldInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-967">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-968">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i campi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-968">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-969">Nell'esempio seguente ottiene la `Type` dell'oggetto per la classe specificata, ottiene il <xref:System.Reflection.FieldInfo> oggetto per il campo e viene visualizzato il valore del campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-969">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-970">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-970">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-971">Questo oggetto <see cref="T:System.Type" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> il cui metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> non è stato ancora chiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-971">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-972">Stringa che contiene il nome del campo dati da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-972">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-973">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-973">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-974">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-974">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-975">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-975">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-976">Cerca il campo specificato, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-976">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-977">Oggetto che rappresenta il campo corrispondente ai requisiti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-977">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-978">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-978">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-979">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-979">Member Type</span></span>|<span data-ttu-id="9fb9c-980">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-980">Static</span></span>|<span data-ttu-id="9fb9c-981">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-981">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-982">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-982">Constructor</span></span>|<span data-ttu-id="9fb9c-983">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-983">No</span></span>|<span data-ttu-id="9fb9c-984">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-984">No</span></span>|  
|<span data-ttu-id="9fb9c-985">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-985">Field</span></span>|<span data-ttu-id="9fb9c-986">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-986">No</span></span>|<span data-ttu-id="9fb9c-987">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-987">Yes.</span></span> <span data-ttu-id="9fb9c-988">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-988">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-989">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-989">Event</span></span>|<span data-ttu-id="9fb9c-990">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-990">Not applicable</span></span>|<span data-ttu-id="9fb9c-991">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-991">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-992">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-992">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-993">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-993">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-994">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-994">Method</span></span>|<span data-ttu-id="9fb9c-995">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-995">No</span></span>|<span data-ttu-id="9fb9c-996">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-996">Yes.</span></span> <span data-ttu-id="9fb9c-997">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-997">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-998">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-998">Nested Type</span></span>|<span data-ttu-id="9fb9c-999">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-999">No</span></span>|<span data-ttu-id="9fb9c-1000">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1000">No</span></span>|  
|<span data-ttu-id="9fb9c-1001">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1001">Property</span></span>|<span data-ttu-id="9fb9c-1002">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1002">Not applicable</span></span>|<span data-ttu-id="9fb9c-1003">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1003">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1004">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1004">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1005">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1005">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1006">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1006">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1007">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1007">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1008">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1008">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1009">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1009">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1010">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1010">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1011">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i campi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1011">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1012">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1012">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1013">Specificare `BindingFlags.Public` per includere i campi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1013">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1014">Specificare `BindingFlags.NonPublic` per includere i campi non pubblici (ovvero, i campi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1014">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1015">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1015">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1016">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1016">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1017">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1017">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1018">`BindingFlags.DeclaredOnly` Per cercare solo i campi dichiarati sul <xref:System.Type>, non i campi sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1018">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1019">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1019">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1020">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.FieldInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1020">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1021">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i campi del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1021">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1022">Nell'esempio seguente viene ottenuto il `Type` dell'oggetto per la classe specificata, ottiene il <xref:System.Reflection.FieldInfo> oggetto per il campo che corrisponde ai flag di associazione specificato e visualizza il valore del campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1022">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1023">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1023">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1024">Ottiene i campi dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1024">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1025">Restituisce tutti i campi pubblici dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1025">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1026">Matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano tutti i campi pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1026">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1027">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1027">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1028">Matrice vuota di tipo <see cref="T:System.Reflection.FieldInfo" />, se non è definito alcun campo pubblico per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1028">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1029">Il <xref:System.Type.GetFields%2A> metodo non restituisce i campi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1029">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1030">Il codice non deve dipendere dall'ordine in cui vengono restituiti i campi, poiché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1030">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1031">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1031">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1032">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1032">Member Type</span></span>|<span data-ttu-id="9fb9c-1033">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1033">Static</span></span>|<span data-ttu-id="9fb9c-1034">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1034">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1035">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1035">Constructor</span></span>|<span data-ttu-id="9fb9c-1036">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1036">No</span></span>|<span data-ttu-id="9fb9c-1037">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1037">No</span></span>|  
|<span data-ttu-id="9fb9c-1038">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1038">Field</span></span>|<span data-ttu-id="9fb9c-1039">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1039">No</span></span>|<span data-ttu-id="9fb9c-1040">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1040">Yes.</span></span> <span data-ttu-id="9fb9c-1041">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1041">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1042">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1042">Event</span></span>|<span data-ttu-id="9fb9c-1043">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1043">Not applicable</span></span>|<span data-ttu-id="9fb9c-1044">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1044">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1045">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1045">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1046">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1046">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1047">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1047">Method</span></span>|<span data-ttu-id="9fb9c-1048">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1048">No</span></span>|<span data-ttu-id="9fb9c-1049">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1049">Yes.</span></span> <span data-ttu-id="9fb9c-1050">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1050">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1051">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1051">Nested Type</span></span>|<span data-ttu-id="9fb9c-1052">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1052">No</span></span>|<span data-ttu-id="9fb9c-1053">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1053">No</span></span>|  
|<span data-ttu-id="9fb9c-1054">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1054">Property</span></span>|<span data-ttu-id="9fb9c-1055">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1055">Not applicable</span></span>|<span data-ttu-id="9fb9c-1056">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1056">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1057">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1057">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1058">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1058">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1059">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1059">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1060">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1060">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1061">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1061">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1062">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1062">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1063">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1063">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1064">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.FieldInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1064">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1065">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i campi pubblici del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1065">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1066">Nell'esempio seguente viene illustrato un utilizzo della `GetFields()` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1066">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1067">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1067">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1068">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1068">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1069">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1069">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1070">Quando ne viene eseguito l'override in una classe derivata, cerca i campi definiti per l'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1070">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1071">Matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano tutti i campi definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondente ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1071">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="9fb9c-1072">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1072">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1073">Matrice vuota di tipo <see cref="T:System.Reflection.FieldInfo" />, se non è definito alcun campo per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei campi definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1073">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1074">Il <xref:System.Type.GetFields%2A> metodo non restituisce i campi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1074">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1075">Il codice non deve dipendere dall'ordine in cui vengono restituiti i campi, poiché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1075">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1076">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i campi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1076">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1077">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1077">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1078">Specificare `BindingFlags.Public` per includere i campi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1078">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1079">Specificare `BindingFlags.NonPublic` per includere i campi non pubblici (ovvero, i campi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1079">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="9fb9c-1080">Solo protetti e vengono restituiti i campi interni delle classi base; i campi privati delle classi base non vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1080">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9fb9c-1081">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1081">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1082">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1082">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1083">`BindingFlags.DeclaredOnly` Per cercare solo i campi dichiarati sul <xref:System.Type>, non i campi sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1083">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1084">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1084">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1085">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.FieldInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1085">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1086">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i campi pubblici del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1086">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1087">Nell'esempio seguente viene illustrato un utilizzo della `GetFields(BindingFlags)` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1087">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1088">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un tipo generico chiuso o i parametri di tipo di una definizione di tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1088">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1089">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1089">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="9fb9c-1090">Restituisce una matrice vuota se il tipo corrente non è un tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1090">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1091">Gli elementi della matrice vengono restituiti nell'ordine in cui compaiono nell'elenco di argomenti di tipo per il tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1091">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="9fb9c-1092">Se il tipo corrente è un tipo costruito chiuso (vale a dire il <xref:System.Type.ContainsGenericParameters%2A> restituisce proprietà `false`), la matrice restituita dal <xref:System.Type.GetGenericArguments%2A> metodo contiene i tipi che sono stati assegnati ai parametri di tipo generico della definizione di tipo generico .</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1092">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-1093">Se il tipo corrente è una definizione di tipo generico, la matrice contiene i parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1093">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="9fb9c-1094">Se il tipo corrente è un tipo costruito aperto (ovvero, il <xref:System.Type.ContainsGenericParameters%2A> restituisce proprietà `true`) in tipi specifici non sono stati assegnati a tutti i parametri di tipo e i parametri di tipo di inclusione di tipi o metodi generici, la matrice contiene tipi e parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1094">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="9fb9c-1095">Utilizzare il <xref:System.Type.IsGenericParameter%2A> proprietà per distinguerli.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1095">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="9fb9c-1096">Per una dimostrazione di questo scenario, vedere l'esempio di codice per il <xref:System.Type.ContainsGenericParameters%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1096">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1097">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1097">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1098">Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Type.GetGenericArguments%2A> metodo per visualizzare gli argomenti di tipo di un tipo costruito e i parametri di tipo della relativa definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1098">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="9fb9c-1099">Questo esempio di codice fa parte di un esempio più esaustivo disponibile per il <xref:System.Type.IsGenericTypeDefinition%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1099">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="9fb9c-1100">Vedere l'esempio più esaustivo per l'output di esempio.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1100">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-1101">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1101">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="9fb9c-1102">Le classi derivate devono fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1102">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1103">Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano i vincoli sul parametro di tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1103">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1104">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano i vincoli sul parametro di tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1104">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1105">Ogni vincolo su un parametro di tipo generico viene espresso come un <xref:System.Type> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1105">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="9fb9c-1106">Utilizzare il <xref:System.Type.IsClass%2A> proprietà per determinare se un vincolo è il vincolo di classe di base; se la proprietà restituisce `false`, il vincolo è un vincolo di interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1106">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="9fb9c-1107">Se un parametro di tipo senza vincoli di classe e senza vincoli di interfaccia, viene restituita una matrice vuota.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1107">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="9fb9c-1108">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1108">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1109">Esempio di codice seguente definisce un tipo generico `Test` con due parametri di tipo con vincoli diversi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1109">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="9fb9c-1110">Quando viene eseguito il programma, i vincoli vengono esaminati utilizzando il <xref:System.Type.GenericParameterAttributes%2A> proprietà e <xref:System.Type.GetGenericParameterConstraints%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1110">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-1111">L'oggetto <see cref="T:System.Type" /> corrente non è un parametro di tipo generico,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1111">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-1112">Quindi la proprietà <see cref="P:System.Type.IsGenericParameter" /> restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1112">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1113">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una definizione di tipo generico da cui è possibile costruire il tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1113">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1114">Oggetto <see cref="T:System.Type" /> che rappresenta un tipo generico da cui è possibile costruire il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1114">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1115">Una definizione di tipo generico è un modello da cui è possibile costruire altri tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1115">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="9fb9c-1116">Ad esempio, dalla definizione di tipo generico `G<T>` (espressi nella sintassi c#; `G(Of T)` in Visual Basic o `generic <typename T> ref class G` in C++) è possibile costruire e creare istanze del tipo `G<int>` (`G(Of Integer)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1116">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1117">Dato un <xref:System.Type> oggetto che rappresenta questo tipo costruito, il <xref:System.Type.GetGenericTypeDefinition%2A> metodo restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1117">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="9fb9c-1118">Se due tipi costruiti vengono creati dalla stessa definizione di tipo generico, utilizzando gli stessi argomenti di tipo, il <xref:System.Type.GetGenericTypeDefinition%2A> metodo restituisce lo stesso <xref:System.Type> oggetto per entrambi i tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1118">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="9fb9c-1119">Se si chiama il <xref:System.Type.GetGenericTypeDefinition%2A> metodo su un <xref:System.Type> oggetto già rappresenta una definizione di tipo generico, restituisce l'oggetto corrente <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1119">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9fb9c-1120">Una matrice di tipi generici non è generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1120">An array of generic types is not itself generic.</span></span> <span data-ttu-id="9fb9c-1121">Nel codice c# `A<int>[] v;` o il codice Visual Basic `Dim v() As A(Of Integer)`, il tipo della variabile `v` non è generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1121">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="9fb9c-1122">Utilizzare <xref:System.Type.IsGenericType%2A> per determinare se un tipo è generico prima di chiamare <xref:System.Type.GetGenericTypeDefinition%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1122">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-1123">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1123">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1124">Esempio di codice seguente crea un'istanza di un tipo costruito utilizzando la creazione di istanza comune e quindi utilizza il <xref:System.Type.GetType%2A> e <xref:System.Type.GetGenericTypeDefinition%2A> metodi per recuperare il tipo costruito e definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1124">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="9fb9c-1125">Questo esempio viene utilizzato il generico <xref:System.Collections.Generic.Dictionary%602> tipo; rappresenta il tipo costruito un <xref:System.Collections.Generic.Dictionary%602> di `Test` oggetti con chiavi di stringa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1125">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-1126">Il tipo corrente non è generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1126">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="9fb9c-1127">Ciò significa che <see cref="P:System.Type.IsGenericType" /> restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1127">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-1128">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1128">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="9fb9c-1129">Le classi derivate devono fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1129">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1130">Restituisce il codice hash per l'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1130">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1131">Codice hash per l'istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1131">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1132">Questo metodo esegue l'override del metodo <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1132">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1133">L'esempio seguente mostra il codice hash del `System.Windows.Forms.Button` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1133">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1134">Ottiene un'interfaccia specifica implementata o ereditata dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1134">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1135">Stringa che contiene il nome dell'interfaccia da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1135">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1136">Per le interfacce generiche, si tratta del nome alterato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1136">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1137">Cerca l'interfaccia con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1137">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1138">Oggetto che rappresenta l'interfaccia con il nome specificato, implementata o ereditata dall'oggetto <see cref="T:System.Type" /> corrente, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1138">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1139">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1139">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="9fb9c-1140">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Type> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1140">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1141">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo vengono cercati i vincoli di interfaccia ed eventuali interfacce ereditate dai vincoli di classe o interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1141">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1142">Per le interfacce generiche, la `name` parametro corrisponde al nome alterato, che termina con un accento grave (\`) e il numero di parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1142">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="9fb9c-1143">Questo vale per le definizioni di interfaccia generica e interfacce generiche costruite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1143">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="9fb9c-1144">Ad esempio, per trovare `IExample<T>` (`IExample(Of T)` in Visual Basic) o `IExample<string>` (`IExample(Of String)` in Visual Basic), cercare ``"IExample`1"``.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1144">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1145">Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Type.GetInterface%28System.String%29> metodo per la ricerca di <xref:System.Collections.Hashtable> classe per il <xref:System.Runtime.Serialization.IDeserializationCallback> interfaccia ed elenca i metodi dell'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1145">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="9fb9c-1146">L'esempio di codice viene inoltre illustrato il <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> overload del metodo e <xref:System.Type.GetInterfaceMap%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1146">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1147">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1147">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1148">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo che implementa la stessa interfaccia generica con argomenti di tipo differenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1148">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1149">Stringa che contiene il nome dell'interfaccia da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1149">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1150">Per le interfacce generiche, si tratta del nome alterato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1150">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9fb9c-1151">
            <see langword="true" /> per ignorare la distinzione tra maiuscole e minuscole nella parte di <c> name</c> che specifica il nome semplice dell'interfaccia. Nella parte in cui viene specificato lo spazio dei nomi è necessario fare distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1151">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="9fb9c-1152">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1152">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1153">
            <see langword="false" /> per eseguire una ricerca di tutte le parti di <c>name</c> facendo distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1153">
              <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1154">Quando è sottoposto a override in una classe derivata, cerca l'interfaccia specificata, indicando se la ricerca del nome dell'interfaccia viene eseguita senza fare distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1154">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1155">Oggetto che rappresenta l'interfaccia con il nome specificato, implementata o ereditata dall'oggetto <see cref="T:System.Type" /> corrente, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1155">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1156">Il `ignoreCase` parametro si applica solo al nome semplice dell'interfaccia, non allo spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1156">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="9fb9c-1157">La parte di `name` che specifica lo spazio dei nomi deve avere lettere maiuscole o minuscole o l'interfaccia non verrà trovato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1157">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="9fb9c-1158">Ad esempio, la stringa "System. IComparable" trova il <xref:System.IComparable> interfaccia, ma la stringa "System. IComparable" non.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1158">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="9fb9c-1159">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Type> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1159">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1160">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo vengono cercati i vincoli di interfaccia ed eventuali interfacce ereditate dai vincoli di classe o interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1160">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1161">Per le interfacce generiche, la `name` parametro corrisponde al nome alterato, che termina con un accento grave (\`) e il numero di parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1161">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="9fb9c-1162">Questo vale per le definizioni di interfaccia generica e interfacce generiche costruite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1162">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="9fb9c-1163">Ad esempio, per trovare `IExample<T>` (`IExample(Of T)` in Visual Basic) o `IExample<string>` (`IExample(Of String)` in Visual Basic), cercare `"IExample`1"'.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1163">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1164">Nell'esempio di codice viene illustrato come utilizzare il <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> metodo per eseguire una ricerca di distinzione tra maiuscole e le <xref:System.Collections.Hashtable> classe per il <xref:System.Collections.IEnumerable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1164">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="9fb9c-1165">L'esempio di codice viene inoltre illustrato il <xref:System.Type.GetInterface%28System.String%29> overload del metodo e <xref:System.Type.GetInterfaceMap%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1165">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1166">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1166">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1167">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo che implementa la stessa interfaccia generica con argomenti di tipo differenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1167">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="9fb9c-1168">Tipo dell'interfaccia per cui recuperare un mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1168">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1169">Restituisce un mapping di interfaccia per il tipo di interfaccia specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1169">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1170">Oggetto che rappresenta il mapping dell'interfaccia per il parametro <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1170">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1171">La mappa dell'interfaccia indica la modalità di mapping di un'interfaccia in membri effettivi in una classe che implementa tale interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1171">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="9fb9c-1172">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, i parametri vengono sostituiti dagli argomenti di tipo appropriati negli elementi di tipo di <xref:System.Reflection.InterfaceMapping> restituito da questo metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1172">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1173">Nell'esempio seguente viene chiamato il <xref:System.Type.GetInterfaceMap%2A> metodo per determinare come <xref:System.IFormatProvider> interfaccia esegue il mapping a <xref:System.Globalization.CultureInfo> metodi e come <xref:System.IAppDomainSetup> interfaccia esegue il mapping a <xref:System.AppDomainSetup> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1173">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="9fb9c-1174">Si noti che, in quanto il <xref:System.IAppDomainSetup> interfaccia definisce un set di proprietà, l'oggetto restituito <xref:System.Reflection.InterfaceMapping> oggetto include separato <xref:System.Reflection.MethodInfo> gli oggetti per ottenere una proprietà e funzioni di accesso set.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1174">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1175">
            <paramref name="interfaceType" /> non è implementato dal tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1175">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="9fb9c-1176">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1176">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1177">Il parametro <paramref name="interfaceType" /> non contiene riferimenti a un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1177">The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          </span>
          <span data-ttu-id="9fb9c-1178">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1178">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1179">
            <paramref name="interfaceType" /> è un'interfaccia generica e il tipo corrente è un tipo di matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1179">
              <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1180">
            <paramref name="interfaceType" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1180">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-1181">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo generico; ovvero la proprietà <see cref="P:System.Type.IsGenericParameter" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1181">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-1182">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1182">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="9fb9c-1183">Le classi derivate devono fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1183">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1184">Quando ne viene eseguito l'override in una classe derivata, ottiene tutte le interfacce implementate o ereditate dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1184">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1185">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutte le interfacce implementate o ereditate dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1185">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1186">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1186">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1187">Matrice vuota di tipo <see cref="T:System.Type" />, se non vengono implementate o ereditate interfacce dall'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1187">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1188">Il <xref:System.Type.GetInterfaces%2A> metodo non restituisce le interfacce in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1188">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1189">Il codice non deve dipendere dall'ordine in cui vengono restituite le interfacce, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1189">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1190">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Type> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1190">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1191">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo vengono cercati i vincoli di interfaccia ed eventuali interfacce ereditate dai vincoli di classe o interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1191">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1192">Nell'esempio seguente ottiene il tipo della classe specificata e consente di visualizzare tutte le interfacce che il tipo implementa o eredita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1192">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="9fb9c-1193">Per compilare l'esempio di Visual Basic, utilizzare i comandi del compilatore seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1193">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-1194">Un inizializzatore statico viene richiamato e genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1194">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1195">Ottiene i membri specificati dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1195">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1196">Stringa che contiene il nome dei membri pubblici da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1196">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1197">Cerca i membri pubblici con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1197">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1198">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1198">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1199">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1199">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-1200">La ricerca include i membri di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1200">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="9fb9c-1201">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1201">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-1202">Il <xref:System.Type.GetMember%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1202">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1203">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1203">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1204">Questo overload del metodo non sarà possibile trovare gli inizializzatori di classi (. cctor).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1204">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="9fb9c-1205">Per trovare gli inizializzatori di classi, usare un overload che accetta <xref:System.Reflection.BindingFlags>e specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1205">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1206">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1206">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1207">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1207">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1208">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1208">Member Type</span></span>|<span data-ttu-id="9fb9c-1209">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1209">Static</span></span>|<span data-ttu-id="9fb9c-1210">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1210">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1211">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1211">Constructor</span></span>|<span data-ttu-id="9fb9c-1212">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1212">No</span></span>|<span data-ttu-id="9fb9c-1213">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1213">No</span></span>|  
|<span data-ttu-id="9fb9c-1214">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1214">Field</span></span>|<span data-ttu-id="9fb9c-1215">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1215">No</span></span>|<span data-ttu-id="9fb9c-1216">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1216">Yes.</span></span> <span data-ttu-id="9fb9c-1217">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1217">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1218">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1218">Event</span></span>|<span data-ttu-id="9fb9c-1219">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1219">Not applicable</span></span>|<span data-ttu-id="9fb9c-1220">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1220">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1221">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1221">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1222">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1222">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1223">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1223">Method</span></span>|<span data-ttu-id="9fb9c-1224">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1224">No</span></span>|<span data-ttu-id="9fb9c-1225">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1225">Yes.</span></span> <span data-ttu-id="9fb9c-1226">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1226">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1227">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1227">Nested Type</span></span>|<span data-ttu-id="9fb9c-1228">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1228">No</span></span>|<span data-ttu-id="9fb9c-1229">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1229">No</span></span>|  
|<span data-ttu-id="9fb9c-1230">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1230">Property</span></span>|<span data-ttu-id="9fb9c-1231">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1231">Not applicable</span></span>|<span data-ttu-id="9fb9c-1232">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1232">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1233">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1233">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1234">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1234">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1235">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1235">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1236">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1236">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1237">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1237">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1238">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1238">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1239">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1239">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1240">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1240">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1241">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1241">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1242">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1242">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1243">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1243">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1244">L'esempio seguente visualizza tutti i membri del `String` classe che iniziano con la lettera C.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1244">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1245">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1245">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1246">Stringa che contiene il nome dei membri da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1246">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1247">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1247">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1248">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1248">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1249">Zero, per restituire una matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1249">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1250">Cerca i membri specificati, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1250">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1251">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1251">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1252">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1252">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-1253">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1253">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-1254">Il <xref:System.Type.GetMember%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1254">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1255">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1255">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1256">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1256">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1257">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1257">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1258">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1258">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1259">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1259">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1260">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1260">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1261">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1261">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1262">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1262">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1263">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1263">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1264">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1264">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1265">Per ottenere l'inizializzatore di classi (. cctor) tramite l'overload di questo metodo, è necessario specificare ". cctor" per `name`, e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) per `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1265">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="9fb9c-1266">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1266">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1267">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1267">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1268">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1268">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1269">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1269">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1270">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1270">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1271">Nell'esempio seguente consente di visualizzare tutti i membri statici pubblici del `myString` classe che iniziano con la lettera C.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1271">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1272">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1272">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1273">Stringa che contiene il nome dei membri da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1273">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="9fb9c-1274">Valore da cercare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1274">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1275">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1275">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1276">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1276">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1277">Zero, per restituire una matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1277">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1278">Cerca i membri specificati del tipo di membro specificato usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1278">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1279">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici con il nome specificato, se presenti; in caso contrario, matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1279">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1280">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1280">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-1281">Il <xref:System.Type.GetMember%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1281">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1282">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1282">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1283">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1283">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1284">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1284">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1285">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1285">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1286">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1286">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1287">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1287">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1288">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1288">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1289">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1289">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1290">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1290">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1291">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1291">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1292">Per ottenere l'inizializzatore di classi (. cctor) tramite l'overload di questo metodo, è necessario specificare ". cctor" per `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> per `type`, e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) per `bindingAttr`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1292">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="9fb9c-1293">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1293">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1294">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1294">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1295">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1295">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1296">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1296">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1297">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1297">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1298">L'esempio seguente visualizza tutti i metodi del `myString` classe che iniziano con la lettera C.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1298">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1299">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1299">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-1300">Una classe derivata deve fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1300">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1301">Ottiene i membri (proprietà, metodi, campi, eventi e così via) dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1301">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1302">Restituisce tutti i membri pubblici dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1302">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1303">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri pubblici dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1303">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1304">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1304">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1305">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se per l'oggetto <see cref="T:System.Type" /> corrente non esistono membri pubblici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1305">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1306">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1306">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-1307">Il <xref:System.Type.GetMembers%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1307">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1308">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1308">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1309">Overload di questo metodo chiama il <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> overload del metodo, con <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1309">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1310">Non verranno individuati gli inizializzatori di classi (. cctor).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1310">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="9fb9c-1311">Per trovare gli inizializzatori di classi, usare un overload che accetta <xref:System.Reflection.BindingFlags>e specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1311">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1312">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1312">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1313">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1313">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1314">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1314">Member Type</span></span>|<span data-ttu-id="9fb9c-1315">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1315">Static</span></span>|<span data-ttu-id="9fb9c-1316">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1316">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1317">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1317">Constructor</span></span>|<span data-ttu-id="9fb9c-1318">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1318">No</span></span>|<span data-ttu-id="9fb9c-1319">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1319">No</span></span>|  
|<span data-ttu-id="9fb9c-1320">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1320">Field</span></span>|<span data-ttu-id="9fb9c-1321">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1321">No</span></span>|<span data-ttu-id="9fb9c-1322">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1322">Yes.</span></span> <span data-ttu-id="9fb9c-1323">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1323">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1324">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1324">Event</span></span>|<span data-ttu-id="9fb9c-1325">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1325">Not applicable</span></span>|<span data-ttu-id="9fb9c-1326">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1326">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1327">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1327">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1328">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1328">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1329">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1329">Method</span></span>|<span data-ttu-id="9fb9c-1330">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1330">No</span></span>|<span data-ttu-id="9fb9c-1331">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1331">Yes.</span></span> <span data-ttu-id="9fb9c-1332">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1332">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1333">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1333">Nested Type</span></span>|<span data-ttu-id="9fb9c-1334">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1334">No</span></span>|<span data-ttu-id="9fb9c-1335">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1335">No</span></span>|  
|<span data-ttu-id="9fb9c-1336">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1336">Property</span></span>|<span data-ttu-id="9fb9c-1337">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1337">Not applicable</span></span>|<span data-ttu-id="9fb9c-1338">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1338">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1339">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1339">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1340">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1340">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1341">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1341">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1342">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1342">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1343">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1343">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1344">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1344">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1345">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1345">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1346">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1346">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1347">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1347">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1348">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Type.GetMembers> overload del metodo per raccogliere informazioni su tutti i membri pubblici di una classe specificata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1348">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1349">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1349">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1350">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1350">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1351">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), per restituire una matrice vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1351">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1352">Quando ne viene eseguito l'override in una classe derivata, cerca i membri definiti per l'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1352">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1353">Matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano tutti i membri definiti per l'oggetto <see cref="T:System.Type" /> corrente corrispondenti ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1353">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="9fb9c-1354">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1354">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1355">Matrice vuota di tipo <see cref="T:System.Reflection.MemberInfo" />, se non vi sono membri definiti per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei membri definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1355">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1356">I membri includere proprietà, metodi, campi, eventi e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1356">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-1357">Il <xref:System.Type.GetMembers%2A> metodo non restituisce i membri in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1357">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1358">Il codice non deve dipendere dall'ordine in cui vengono restituiti i membri, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1358">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1359">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1359">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1360">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1360">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1361">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1361">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1362">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1362">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="9fb9c-1363">Solo protetti e vengono restituiti i membri interni delle classi base; membri privati delle classi base non vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1363">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9fb9c-1364">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1364">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1365">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1365">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1366">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1366">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1367">Chiamare questo metodo solo con il `Public` flag o solo il `NonPublic` flag restituirà i membri specificati e non richiede altri flag di qualsiasi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1367">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9fb9c-1368">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1368">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1369">Per ottenere l'inizializzatore di classi (. cctor) tramite l'overload di questo metodo, è necessario specificare <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1369">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1370">È inoltre possibile ottenere l'inizializzatore di classi tramite il <xref:System.Type.TypeInitializer%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1370">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-1371">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MemberInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1371">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1372">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i membri del vincolo di classe o i membri di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1372">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1373">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> overload del metodo per raccogliere informazioni su tutti i membri di istanza pubblici di una classe specificata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1373">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1374">Ottiene un metodo specifico dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1374">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1375">Stringa che contiene il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1375">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1376">Cerca il metodo pubblico con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1376">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1377">Oggetto che rappresenta il metodo pubblico con il nome specificato, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1377">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1378">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1378">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-1379">La ricerca include i metodi di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1379">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="9fb9c-1380">Se un metodo di overload e dispone di più di un metodo pubblico, il <xref:System.Type.GetMethod%28System.String%29> metodo genera un <xref:System.Reflection.AmbiguousMatchException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1380">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="9fb9c-1381">Nell'esempio seguente, viene generata un'eccezione perché non esiste più di un overload pubblico del <xref:System.Int32.ToString%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1381">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="9fb9c-1382">D'altra parte, perché il `Person.ToString` override dei metodi <xref:System.Object.ToString%2A?displayProperty=nameWithType> e pertanto non sia sovraccarico, il <xref:System.Type.GetMethod%28System.String%29> metodo è in grado di recuperare il <xref:System.Reflection.MethodInfo> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1382">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="9fb9c-1383">È possibile eseguire una delle operazioni seguenti per recuperare un metodo specifico:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1383">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="9fb9c-1384">Chiamare il <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> (metodo) e specificare un `bindingAttr` argomento che identifica il metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1384">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="9fb9c-1385">Ad esempio, se l'eccezione viene generata perché un tipo ha un valore statico e un overload di istanza, è possibile specificare un `bindingAttr` argomento di <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1385">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="9fb9c-1386">Chiamare un overload di <xref:System.Type.GetMethod%2A> metodo che include un `types` parametro che definisce i tipi di parametri del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1386">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="9fb9c-1387">Chiamare il <xref:System.Type.GetMethods> metodo per recuperare una matrice contenente tutti i metodi pubblici appartenenti a un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1387">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="9fb9c-1388">È possibile quindi eseguire l'iterazione in modo da identificare i metodi duplicati denominati `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1388">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="9fb9c-1389">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1389">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1390">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1390">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1391">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1391">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1392">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1392">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1393">Nell'esempio seguente viene ottenuto un metodo denominato `MethodA`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1393">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1394">È stato trovato più di un metodo con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1394">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1395">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1395">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1396">Stringa che contiene il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1396">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1397">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1397">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1398">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1398">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1399">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1399">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1400">Cerca il metodo specificato, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1400">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1401">Oggetto che rappresenta il metodo corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1401">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1402">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i metodi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1402">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1403">È necessario specificare <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> o <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1403">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1404">Specificare <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> per includere i metodi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1404">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1405">Specificare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> per includere nella ricerca i metodi non pubblici (vale a dire metodi privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1405">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1406">Specificare <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1406">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1407">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1407">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1408"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1408"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1409"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> Per cercare solo i metodi dichiarati nel <xref:System.Type>, non i metodi quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1409"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1410">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1410">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1411">Se un metodo viene sottoposto a overload e più di un overload soddisfa i vincoli specificati per il `bindingAttr` argomento, il metodo genera un <xref:System.Reflection.AmbiguousMatchException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1411">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="9fb9c-1412">Nell'esempio seguente, viene generata un'eccezione perché:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1412">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="9fb9c-1413">Il `TestClass` tipo dispone di due overload di istanza pubblici del `DisplayValue` metodo `DisplayValue(String)` e `DisplayValue(String, Object[])`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1413">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1414">Il `TestClass` tipo dispone di due overload di istanza pubblici del `Equals` uno dei quali viene ereditato dal metodo <xref:System.Object>: `Equals(TestClass)` e `Equals(Object)`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1414">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="9fb9c-1415">È possibile eseguire una delle operazioni seguenti per recuperare un metodo specifico:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1415">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="9fb9c-1416">Modificare i vincoli di associazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1416">Change the binding constraints.</span></span> <span data-ttu-id="9fb9c-1417">Nell'esempio precedente, il tentativo di recuperare un'istanza pubblica `Equals` metodo che viene dichiarato dal tipo e non è stato ereditato recupera `Equals(TestClass)`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1417">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1418">Chiamare un overload di <xref:System.Type.GetMethod%2A> metodo che include un `types` parametro che definisce i tipi di parametri del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1418">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="9fb9c-1419">Chiamare il <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> metodo per recuperare una matrice contenente tutti i metodi appartenenti a un tipo che hanno gli attributi di associazione specificati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1419">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="9fb9c-1420">È possibile quindi eseguire l'iterazione in modo da identificare i metodi duplicati denominati `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1420">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="9fb9c-1421">Questo approccio è illustrato nel gestore dell'esempio precedente per il <xref:System.Reflection.AmbiguousMatchException> eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1421">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="9fb9c-1422">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1422">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1423">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1423">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1424">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1424">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1425">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1425">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1426">Nell'esempio seguente ottiene il metodo corrispondente ai flag di associazione specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1426">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1427">È stato trovato più di un metodo con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1427">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1428">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1428">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1429">Stringa che contiene il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1429">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-1430">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1430">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1431">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1431">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1432">Matrice vuota di oggetti <see cref="T:System.Type" /> (come fornita dal campo <see cref="F:System.Type.EmptyTypes" />) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1432">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1433">Cerca il metodo pubblico specificato i cui parametri corrispondono ai tipi di argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1433">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1434">Oggetto che rappresenta il metodo pubblico i cui parametri corrispondono ai tipi di argomenti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1434">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1435">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1435">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-1436">La ricerca include i metodi di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1436">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1437">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1437">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1438">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1438">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1439">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1439">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1440">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1440">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1441">Il `name` parametro non può includere gli argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1441">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="9fb9c-1442">Ad esempio, il codice c# `GetMethod("MyGenericMethod<int>")` esegue la ricerca di un metodo con il nome del testo "`MyGenericMethod<int>`", anziché per un metodo denominato `MyGenericMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1442">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="9fb9c-1443">Utilizzare invece `GetMethod("MyGenericMethod")` con il parametro appropriato nel `types` matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1443">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1444">Nell'esempio seguente vengono determinati overload di `MethodA`, specificando un'ampia gamma di tipi di argomento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1444">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1445">Il [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] esempio presenta i requisiti di `/unsafe` l'opzione del compilatore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1445">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="9fb9c-1446">L'esempio seguente recupera <xref:System.Reflection.MethodInfo> gli oggetti che rappresentano il `Add` metodi di un tipo non generico (il <xref:System.Collections.ArrayList> classe), un tipo generico aperto (il <xref:System.Collections.Generic.List%601> classe) e un tipo generico chiuso (il `List(Of String)` tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1446">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="9fb9c-1447">Nell'esempio viene definito un `GetAddMethod` metodo che recupera l'oggetto appropriato <xref:System.Reflection.MethodInfo> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1447">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="9fb9c-1448">Per fornire il `types` argomento per un tipo generico aperto, chiama il <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1448">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9fb9c-1449">Per fornire il `types` argomento per un tipo generico chiuso, viene recuperato il valore del <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1449">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1450">Sono stati trovati più metodi con il nome e i parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1450">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1451">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1451">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1452">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1452">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1453">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1453">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1454">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1454">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1455">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1455">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1456">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1456">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1457">Stringa che contiene il nome del metodo pubblico da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1457">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-1458">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1458">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1459">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1459">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1460">Matrice vuota di oggetti <see cref="T:System.Type" /> (come fornita dal campo <see cref="F:System.Type.EmptyTypes" />) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1460">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-1461">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1461">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-1462">Da usare solo quando si effettuano chiamate tramite l'interoperabilità COM e vengono gestiti solo i parametri passati per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1462">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="9fb9c-1463">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1463">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1464">Cerca il metodo pubblico specificato i cui parametri corrispondono ai modificatori e ai tipi di argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1464">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1465">Oggetto che rappresenta il metodo pubblico corrispondente ai requisiti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1465">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1466">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1466">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-1467">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1467">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-1468">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1468">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-1469">La ricerca include i metodi di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1469">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1470">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1470">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1471">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1471">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1472">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1472">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1473">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1473">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1474">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1474">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1475">Ad esempio, il codice c# `GetMethod("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1475">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="9fb9c-1476">Utilizzare invece `GetMethod("MyMethod")` con il parametro appropriato nel `types` matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1476">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1477">Sono stati trovati più metodi con il nome e i parametri specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1477">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1478">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1478">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1479">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1479">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1480">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1480">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1481">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1481">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1482">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1482">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1483">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1483">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-1484">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1484">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1485">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1485">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1486">Stringa che contiene il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1486">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1487">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1487">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1488">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1488">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1489">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1489">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-1490">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1490">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-1491">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1491">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1492">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1492">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-1493">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1493">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1494">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1494">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1495">Matrice vuota di oggetti <see cref="T:System.Type" /> (come fornita dal campo <see cref="F:System.Type.EmptyTypes" />) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1495">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-1496">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1496">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-1497">Da usare solo quando si effettuano chiamate tramite l'interoperabilità COM e vengono gestiti solo i parametri passati per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1497">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="9fb9c-1498">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1498">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1499">Cerca il metodo specificato i cui parametri corrispondono ai tipi di argomenti e ai modificatori specificati, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1499">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1500">Oggetto che rappresenta il metodo corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1500">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1501">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1501">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-1502">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1502">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-1503">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i metodi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1503">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1504">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1504">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1505">Specificare `BindingFlags.Public` per includere i metodi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1505">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1506">Specificare `BindingFlags.NonPublic` per includere i metodi non pubblici (vale a dire metodi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1506">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1507">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1507">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1508">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1508">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1509">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1509">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1510">`BindingFlags.DeclaredOnly` Per cercare solo i metodi dichiarati nel <xref:System.Type>, non i metodi quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1510">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1511">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1511">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1512">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1512">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1513">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1513">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1514">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1514">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1515">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1515">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1516">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1516">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1517">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1517">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1518">Nell'esempio seguente vengono determinati overload di `MethodA`, specificando i vincoli di associazione e una varietà di tipi di argomento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1518">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1519">Il [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] esempio presenta i requisiti di `/unsafe` l'opzione del compilatore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1519">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1520">È stato trovato più di un metodo con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1520">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1521">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1521">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1522">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1522">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1523">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1523">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1524">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1524">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1525">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1525">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1526">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1526">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-1527">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1527">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1528">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1528">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1529">Stringa che contiene il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1529">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1530">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1530">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1531">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1531">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1532">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1532">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-1533">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1533">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-1534">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1534">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1535">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1535">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="9fb9c-1536">Oggetto che specifica il set di regole da usare per la disposizione e il layout degli argomenti, la modalità di passaggio del valore restituito, i registri usati per gli argomenti e la pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1536">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-1537">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1537">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1538">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1538">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1539">Matrice vuota di oggetti <see cref="T:System.Type" /> (come fornita dal campo <see cref="F:System.Type.EmptyTypes" />) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1539">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-1540">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1540">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-1541">Da usare solo quando si effettuano chiamate tramite l'interoperabilità COM e vengono gestiti solo i parametri passati per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1541">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="9fb9c-1542">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1542">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1543">Cerca il metodo specificato i cui parametri corrispondono ai tipi di argomenti e ai modificatori specificati, usando i vincoli di associazione e la convenzione di chiamata specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1543">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1544">Oggetto che rappresenta il metodo corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1544">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1545">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1545">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-1546">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1546">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-1547">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `GetXXX` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1547">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1548">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1548">Member Type</span></span>|<span data-ttu-id="9fb9c-1549">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1549">Static</span></span>|<span data-ttu-id="9fb9c-1550">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1550">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1551">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1551">Constructor</span></span>|<span data-ttu-id="9fb9c-1552">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1552">No</span></span>|<span data-ttu-id="9fb9c-1553">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1553">No</span></span>|  
|<span data-ttu-id="9fb9c-1554">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1554">Field</span></span>|<span data-ttu-id="9fb9c-1555">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1555">No</span></span>|<span data-ttu-id="9fb9c-1556">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1556">Yes.</span></span> <span data-ttu-id="9fb9c-1557">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1557">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1558">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1558">Event</span></span>|<span data-ttu-id="9fb9c-1559">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1559">Not applicable</span></span>|<span data-ttu-id="9fb9c-1560">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1560">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1561">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1561">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1562">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1562">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1563">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1563">Method</span></span>|<span data-ttu-id="9fb9c-1564">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1564">No</span></span>|<span data-ttu-id="9fb9c-1565">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1565">Yes.</span></span> <span data-ttu-id="9fb9c-1566">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1566">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1567">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1567">Nested Type</span></span>|<span data-ttu-id="9fb9c-1568">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1568">No</span></span>|<span data-ttu-id="9fb9c-1569">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1569">No</span></span>|  
|<span data-ttu-id="9fb9c-1570">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1570">Property</span></span>|<span data-ttu-id="9fb9c-1571">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1571">Not applicable</span></span>|<span data-ttu-id="9fb9c-1572">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1572">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1573">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1573">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1574">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1574">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1575">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1575">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1576">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1576">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1577">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1577">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1578">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1578">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1579">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1579">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1580">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i metodi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1580">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1581">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1581">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1582">Specificare `BindingFlags.Public` per includere i metodi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1582">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1583">Specificare `BindingFlags.NonPublic` per includere i metodi non pubblici (vale a dire metodi privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1583">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1584">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1584">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1585">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1585">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1586">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1586">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1587">`BindingFlags.DeclaredOnly` Per cercare solo i metodi dichiarati nel <xref:System.Type>, non i metodi quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1587">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1588">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1588">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1589">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1589">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1590">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1590">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1591">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1591">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1592">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1592">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1593">Per i metodi generici, non includere gli argomenti di tipo in `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1593">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="9fb9c-1594">Ad esempio, il codice c# `GetMember("MyMethod<int>")` esegue la ricerca di un membro con il nome del testo "`MyMethod<int>`", anziché per un metodo denominato `MyMethod` che dispone di un argomento generico di tipo `int`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1594">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1595">Nell'esempio seguente vengono determinati overload di `MethodA`, che specifica i vincoli di associazione, convenzioni di chiamata e un'ampia gamma di tipi di argomento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1595">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1596">Il [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] esempio presenta i requisiti di `/unsafe` l'opzione del compilatore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1596">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1597">È stato trovato più di un metodo con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1597">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1598">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1598">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1599">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1599">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1600">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1600">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1601">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1601">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1602">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1602">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1603">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1603">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-1604">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1604">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1605">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1605">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1606">Stringa che contiene il nome del metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1606">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1607">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1607">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1608">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1608">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1609">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1609">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-1610">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1610">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-1611">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1611">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1612">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1612">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="9fb9c-1613">Oggetto che specifica il set di regole da usare per l'ordine e il layout degli argomenti, la modalità di passaggio del valore restituito, i registri usati per gli argomenti e il processo di pulizia dello stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1613">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-1614">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi al metodo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1614">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="9fb9c-1615">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1615">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1616">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere un metodo che non accetta parametri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1616">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-1617">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1617">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1618">
            <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1618">
              <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1619">Se <c>types</c> è <see langword="null" />, gli argomenti non corrispondono.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1619">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-1620">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1620">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-1621">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1621">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1622">Quando ne viene eseguito l'override in una classe derivata, cerca il metodo specificato i cui parametri corrispondono ai modificatori e ai tipi di argomento definiti, usando i vincoli di associazione e la convenzione di denominazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1622">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1623">Oggetto che rappresenta il metodo corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1623">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1624">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1624">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-1625">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1625">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-1626">Se `types` è `null`, gli argomenti non corrispondono.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1626">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="9fb9c-1627">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i metodi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1627">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1628">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1628">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1629">Specificare `BindingFlags.Public` per includere i metodi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1629">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1630">Specificare `BindingFlags.NonPublic` per includere nella ricerca i metodi non pubblici (vale a dire metodi privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1630">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1631">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1631">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1632">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1632">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1633">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1633">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1634">`BindingFlags.DeclaredOnly` Per cercare solo i metodi dichiarati nel <xref:System.Type>, non i metodi quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1634">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1635">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1635">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1636">È stato trovato più di un metodo con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1636">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1637">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1637">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-1638">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1638">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-1639">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1639">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1640">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1640">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-1641">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1641">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1642">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1642">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-1643">Il tipo corrente è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> o <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1643">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1644">Ottiene i metodi dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1644">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1645">Restituisce tutti i metodi pubblici dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1645">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1646">Matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano tutti i metodi pubblici definiti per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1646">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1647">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1647">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1648">Matrice vuota di tipo <see cref="T:System.Reflection.MethodInfo" />, se non sono definiti metodi pubblici per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1648">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1649">Il <xref:System.Type.GetMethods%2A> metodo non restituisce i metodi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1649">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1650">Il codice non deve dipendere dall'ordine in cui vengono restituiti metodi perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1650">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1651">I costruttori non sono inclusi nella matrice di metodi restituiti da questa chiamata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1651">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="9fb9c-1652">Effettuare una chiamata separata a `GetConstructors()` per ottenere i metodi del costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1652">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="9fb9c-1653">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1653">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1654">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1654">Member Type</span></span>|<span data-ttu-id="9fb9c-1655">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1655">Static</span></span>|<span data-ttu-id="9fb9c-1656">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1656">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1657">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1657">Constructor</span></span>|<span data-ttu-id="9fb9c-1658">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1658">No</span></span>|<span data-ttu-id="9fb9c-1659">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1659">No</span></span>|  
|<span data-ttu-id="9fb9c-1660">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1660">Field</span></span>|<span data-ttu-id="9fb9c-1661">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1661">No</span></span>|<span data-ttu-id="9fb9c-1662">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1662">Yes.</span></span> <span data-ttu-id="9fb9c-1663">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1663">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1664">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1664">Event</span></span>|<span data-ttu-id="9fb9c-1665">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1665">Not applicable</span></span>|<span data-ttu-id="9fb9c-1666">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1666">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1667">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1667">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1668">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1668">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1669">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1669">Method</span></span>|<span data-ttu-id="9fb9c-1670">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1670">No</span></span>|<span data-ttu-id="9fb9c-1671">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1671">Yes.</span></span> <span data-ttu-id="9fb9c-1672">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1672">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1673">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1673">Nested Type</span></span>|<span data-ttu-id="9fb9c-1674">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1674">No</span></span>|<span data-ttu-id="9fb9c-1675">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1675">No</span></span>|  
|<span data-ttu-id="9fb9c-1676">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1676">Property</span></span>|<span data-ttu-id="9fb9c-1677">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1677">Not applicable</span></span>|<span data-ttu-id="9fb9c-1678">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1678">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1679">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1679">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1680">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1680">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1681">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1681">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1682">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1682">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1683">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1683">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1684">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1684">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1685">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1685">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1686">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1686">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1687">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1687">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1688">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1688">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1689">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1689">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1690">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1690">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1691">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1691">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1692">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1692">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1693">Quando ne viene eseguito l'override in una classe derivata, cerca i metodi definiti per l'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1693">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1694">Matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano tutti i metodi definiti per l'oggetto <see cref="T:System.Type" /> corrente, corrispondente ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1694">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="9fb9c-1695">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1695">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1696">Matrice vuota di tipo <see cref="T:System.Reflection.MethodInfo" />, se non è definito alcun metodo per l'oggetto <see cref="T:System.Type" /> corrente oppure se nessuno dei metodi definiti corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1696">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1697">Il <xref:System.Type.GetMethods%2A> metodo non restituisce i metodi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1697">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1698">Il codice non deve dipendere dall'ordine in cui vengono restituiti metodi perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1698">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1699">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i metodi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1699">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1700">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1700">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1701">Specificare `BindingFlags.Public` per includere i metodi pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1701">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1702">Specificare `BindingFlags.NonPublic` per includere nella ricerca i metodi non pubblici (vale a dire metodi privati, interni e protetti).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1702">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="9fb9c-1703">Solo protetti e vengono restituiti metodi interni delle classi base; metodi privati delle classi base non vengono restituiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1703">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9fb9c-1704">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1704">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1705">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1705">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1706">`BindingFlags.DeclaredOnly` Per cercare solo i metodi dichiarati nel <xref:System.Type>, non i metodi quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1706">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1707">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1707">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1708">È possibile omettere i parametri per la ricerca di costruttori e metodi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1708">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="9fb9c-1709">È possibile omettere i parametri solo quando viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1709">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="9fb9c-1710">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.MethodInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1710">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1711">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo cerca i metodi del vincolo di classe o i metodi di <xref:System.Object> se è presente alcun vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1711">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1712">Nell'esempio seguente viene creata una classe con due metodi pubblici e un metodo protetto, crea un `Type` oggetto corrispondente a `MyTypeClass`, ottiene tutti i metodi pubblici e non pubblici e ne visualizza i nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1712">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1713">Ottiene un tipo specifico annidato all'interno dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1713">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1714">Stringa che contiene il nome del tipo annidato da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1714">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1715">Cerca il tipo annidato pubblico con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1715">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1716">Oggetto che rappresenta il tipo annidato pubblico con il nome specificato, se disponibile; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1716">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1717">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1717">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="9fb9c-1718">Utilizzare il nome semplice della classe annidata per `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1718">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="9fb9c-1719">Non qualificarlo con il nome della classe esterna.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1719">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="9fb9c-1720">Per una classe annidata di tipo generica, utilizzare il nome modificato, vale a dire, aggiungere un accento grave e il numero di argomenti generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1720">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="9fb9c-1721">Ad esempio, utilizzare la stringa "interna\`1" per ottenere il tipo generico annidato classe `Inner<T>` (`Inner(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1721">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1722">Non includere la sintassi specifica del linguaggio per i parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1722">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="9fb9c-1723">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1723">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1724">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1724">Member Type</span></span>|<span data-ttu-id="9fb9c-1725">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1725">Static</span></span>|<span data-ttu-id="9fb9c-1726">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1726">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1727">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1727">Constructor</span></span>|<span data-ttu-id="9fb9c-1728">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1728">No</span></span>|<span data-ttu-id="9fb9c-1729">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1729">No</span></span>|  
|<span data-ttu-id="9fb9c-1730">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1730">Field</span></span>|<span data-ttu-id="9fb9c-1731">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1731">No</span></span>|<span data-ttu-id="9fb9c-1732">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1732">Yes.</span></span> <span data-ttu-id="9fb9c-1733">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1733">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1734">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1734">Event</span></span>|<span data-ttu-id="9fb9c-1735">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1735">Not applicable</span></span>|<span data-ttu-id="9fb9c-1736">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1736">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1737">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1737">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1738">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1738">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1739">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1739">Method</span></span>|<span data-ttu-id="9fb9c-1740">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1740">No</span></span>|<span data-ttu-id="9fb9c-1741">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1741">Yes.</span></span> <span data-ttu-id="9fb9c-1742">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1742">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1743">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1743">Nested Type</span></span>|<span data-ttu-id="9fb9c-1744">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1744">No</span></span>|<span data-ttu-id="9fb9c-1745">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1745">No</span></span>|  
|<span data-ttu-id="9fb9c-1746">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1746">Property</span></span>|<span data-ttu-id="9fb9c-1747">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1747">Not applicable</span></span>|<span data-ttu-id="9fb9c-1748">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1748">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1749">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1749">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1750">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1750">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1751">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1751">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1752">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1752">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1753">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1753">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1754">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1754">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1755">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1755">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1756">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i tipi annidati del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1756">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1757">Se un tipo annidato è generico, questo metodo restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1757">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9fb9c-1758">Questo vale anche se il tipo generico contenitore è un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1758">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1759">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico definito in c#, Visual Basic o C++, i relativi tipi annidati sono tutti generici, anche se non dispongono di propri parametri generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1759">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9fb9c-1760">Ciò non avviene necessariamente di tipi annidati definiti in assembly dinamici o compilati con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1760">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9fb9c-1761">Per informazioni sui tipi generici annidati e sulla costruzione di tipi generici annidati dalle definizioni di tipo generico, vedere <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1761">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1762">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1762">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1763">Stringa che contiene il nome del tipo annidato da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1763">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1764">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1764">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1765">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1765">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1766">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1766">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1767">Quando ne viene eseguito l'override in una classe derivata, cerca il tipo annidato specificato, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1767">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1768">Oggetto che rappresenta il tipo annidato corrispondente ai requisiti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1768">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1769">Utilizzare il nome semplice della classe annidata per `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1769">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="9fb9c-1770">Non qualificarlo con il nome della classe esterna.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1770">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="9fb9c-1771">Per una classe annidata di tipo generica, utilizzare il nome modificato, vale a dire, aggiungere un accento grave e il numero di parametri generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1771">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="9fb9c-1772">Ad esempio, utilizzare la stringa "interna\`1" per ottenere il tipo generico annidato classe `Inner<T>` (`Inner(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1772">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1773">Non includere la sintassi specifica del linguaggio per i parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1773">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="9fb9c-1774">Le operazioni seguenti <xref:System.Reflection.BindingFlags> filtro flag possono essere utilizzati per definire annidati di tipi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1774">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1775">È necessario specificare <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> o <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1775">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1776">Specificare <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> per includere i tipi annidati pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1776">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1777">Specificare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> per includere nella ricerca i tipi annidati pubblici (vale a dire, privati, interni e protetti tipi annidati).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1777">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-1778">Questo metodo restituisce solo i tipi annidati del tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1778">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="9fb9c-1779">Non esegue la ricerca di classi di base del tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1779">It does not search the base classes of the current type.</span></span> <span data-ttu-id="9fb9c-1780">Per individuare i tipi nidificati nelle classi di base, è necessario seguire la gerarchia di ereditarietà, la chiamata <xref:System.Type.GetNestedType%2A> a ogni livello.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1780">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="9fb9c-1781"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1781"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-1782">Chiamare questo metodo solo con il <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag o solo il <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag restituirà tipi annidati specificati e non richiede altri flag di qualsiasi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1782">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9fb9c-1783">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1783">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1784">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i tipi annidati del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1784">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1785">Se un tipo annidato è generico, questo metodo restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1785">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9fb9c-1786">Questo vale anche se il tipo generico contenitore è un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1786">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1787">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico definito in c#, Visual Basic o C++, i relativi tipi annidati sono tutti generici, anche se non dispongono di propri parametri generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1787">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9fb9c-1788">Ciò non avviene necessariamente di tipi annidati definiti in assembly dinamici o compilati con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1788">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9fb9c-1789">Per informazioni sui tipi generici annidati e sulla costruzione di tipi generici annidati dalle definizioni di tipo generico, vedere <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1789">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1790">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1790">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1791">Ottiene i tipi annidati all'interno dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1791">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1792">Restituisce i tipi pubblici annidati all'interno dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1792">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1793">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta i tipi pubblici annidati nell'oggetto <see cref="T:System.Type" /> corrente (la ricerca non è ricorsiva), oppure matrice vuota di tipo <see cref="T:System.Type" /> se nessun tipo pubblico è annidato nell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1793">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1794">Il <xref:System.Type.GetNestedTypes%2A> metodo non restituisce i tipi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1794">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1795">Il codice non deve dipendere dall'ordine in cui vengono restituiti tipi perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1795">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1796">Vengono restituiti solo i tipi pubblici annidati immediatamente nel tipo corrente; la ricerca non è ricorsiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1796">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="9fb9c-1797">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1797">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1798">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1798">Member Type</span></span>|<span data-ttu-id="9fb9c-1799">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1799">Static</span></span>|<span data-ttu-id="9fb9c-1800">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1800">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1801">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1801">Constructor</span></span>|<span data-ttu-id="9fb9c-1802">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1802">No</span></span>|<span data-ttu-id="9fb9c-1803">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1803">No</span></span>|  
|<span data-ttu-id="9fb9c-1804">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1804">Field</span></span>|<span data-ttu-id="9fb9c-1805">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1805">No</span></span>|<span data-ttu-id="9fb9c-1806">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1806">Yes.</span></span> <span data-ttu-id="9fb9c-1807">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1807">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1808">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1808">Event</span></span>|<span data-ttu-id="9fb9c-1809">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1809">Not applicable</span></span>|<span data-ttu-id="9fb9c-1810">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1810">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1811">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1811">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1812">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1812">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1813">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1813">Method</span></span>|<span data-ttu-id="9fb9c-1814">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1814">No</span></span>|<span data-ttu-id="9fb9c-1815">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1815">Yes.</span></span> <span data-ttu-id="9fb9c-1816">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1816">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1817">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1817">Nested Type</span></span>|<span data-ttu-id="9fb9c-1818">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1818">No</span></span>|<span data-ttu-id="9fb9c-1819">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1819">No</span></span>|  
|<span data-ttu-id="9fb9c-1820">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1820">Property</span></span>|<span data-ttu-id="9fb9c-1821">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1821">Not applicable</span></span>|<span data-ttu-id="9fb9c-1822">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1822">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1823">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1823">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1824">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1824">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1825">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1825">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1826">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1826">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1827">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1827">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1828">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1828">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1829">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1829">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1830">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i tipi annidati del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1830">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1831">Se un tipo annidato è generico, questo metodo restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1831">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9fb9c-1832">Questo vale anche se il tipo generico contenitore è un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1832">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1833">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico definito in c#, Visual Basic o C++, i relativi tipi annidati sono tutti generici, anche se non dispongono di propri parametri generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1833">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9fb9c-1834">Ciò non avviene necessariamente di tipi annidati definiti in assembly dinamici o compilati con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1834">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9fb9c-1835">Per informazioni sui tipi generici annidati e sulla costruzione di tipi generici annidati dalle definizioni di tipo generico, vedere <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1835">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1836">L'esempio seguente definisce una classe annidata e `struct` in `MyClass`e quindi Ottiene gli oggetti di tipi annidati mediante il tipo di `MyClass`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1836">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1837">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1837">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1838">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1838">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1839">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1839">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1840">Quando ne viene eseguito l'override in una classe derivata, cerca i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1840">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1841">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta tutti i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente che corrispondono ai vincoli di binding specificati (la ricerca non è ricorsiva), oppure matrice vuota di tipo <see cref="T:System.Type" />, se non viene trovato alcun tipo annidato che corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1841">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1842">La ricerca per i tipi annidati non è ricorsiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1842">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="9fb9c-1843">Il <xref:System.Type.GetNestedTypes%2A> metodo non restituisce i tipi in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1843">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1844">Il codice non deve dipendere dall'ordine in cui vengono restituiti tipi perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1844">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1845">Le operazioni seguenti <xref:System.Reflection.BindingFlags> filtro flag possono essere utilizzati per definire annidati di tipi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1845">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1846">È necessario specificare <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> o <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1846">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1847">Specificare <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> per includere i tipi annidati pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1847">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1848">Specificare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> per includere nella ricerca i tipi annidati pubblici (vale a dire, privati, interni e protetti tipi annidati).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1848">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="9fb9c-1849">Questo metodo restituisce solo i tipi annidati del tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1849">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="9fb9c-1850">Non esegue la ricerca di classi di base del tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1850">It does not search the base classes of the current type.</span></span> <span data-ttu-id="9fb9c-1851">Per individuare i tipi nidificati nelle classi di base, è necessario seguire la gerarchia di ereditarietà, la chiamata <xref:System.Type.GetNestedTypes%2A> a ogni livello.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1851">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="9fb9c-1852"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> e <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1852"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-1853">Chiamare questo metodo solo con il <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag o solo il <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag restituirà tipi annidati specificati e non richiede altri flag di qualsiasi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1853">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="9fb9c-1854">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1854">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1855">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca i tipi annidati del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1855">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1856">Se un tipo annidato è generico, questo metodo restituisce la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1856">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="9fb9c-1857">Questo vale anche se il tipo generico contenitore è un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1857">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-1858">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico definito in c#, Visual Basic o C++, i relativi tipi annidati sono tutti generici, anche se non dispongono di propri parametri generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1858">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="9fb9c-1859">Ciò non avviene necessariamente di tipi annidati definiti in assembly dinamici o compilati con il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1859">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="9fb9c-1860">Per informazioni sui tipi generici annidati e sulla costruzione di tipi generici annidati dalle definizioni di tipo generico, vedere <xref:System.Type.MakeGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1860">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1861">Nell'esempio seguente crea due classi pubbliche annidate e due classi nidificate protette e visualizza le informazioni per le classi che corrisponde ai vincoli di associazione specificati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1861">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1862">Ottiene le proprietà dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1862">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1863">Restituisce tutte le proprietà pubbliche dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1863">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1864">Matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresentano tutte le proprietà pubbliche dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1864">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="9fb9c-1865">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1865">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1866">Matrice vuota di tipo <see cref="T:System.Reflection.PropertyInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non possiede delle proprietà pubbliche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1866">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1867">Chiamare questo overload equivale alla chiamata di <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> eseguire l'overload con un `bindingAttr` uguale all'argomento `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in c# e `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1867">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="9fb9c-1868">Restituisce tutte le istanza pubblica e le proprietà statiche, sia quelli definiti dal tipo rappresentato dall'oggetto corrente <xref:System.Type> oggetto nonché quelle ereditate dai relativi tipi di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1868">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="9fb9c-1869">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1869">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-1870">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1870">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-1871">Il <xref:System.Type.GetProperties%2A> metodo non restituisce le proprietà in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1871">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1872">Il codice non deve dipendere dall'ordine in cui vengono restituite le proprietà, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1872">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1873">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1873">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-1874">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1874">Member Type</span></span>|<span data-ttu-id="9fb9c-1875">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1875">Static</span></span>|<span data-ttu-id="9fb9c-1876">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1876">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-1877">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1877">Constructor</span></span>|<span data-ttu-id="9fb9c-1878">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1878">No</span></span>|<span data-ttu-id="9fb9c-1879">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1879">No</span></span>|  
|<span data-ttu-id="9fb9c-1880">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1880">Field</span></span>|<span data-ttu-id="9fb9c-1881">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1881">No</span></span>|<span data-ttu-id="9fb9c-1882">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1882">Yes.</span></span> <span data-ttu-id="9fb9c-1883">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1883">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1884">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1884">Event</span></span>|<span data-ttu-id="9fb9c-1885">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1885">Not applicable</span></span>|<span data-ttu-id="9fb9c-1886">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1886">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1887">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1887">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1888">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1888">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-1889">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1889">Method</span></span>|<span data-ttu-id="9fb9c-1890">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1890">No</span></span>|<span data-ttu-id="9fb9c-1891">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1891">Yes.</span></span> <span data-ttu-id="9fb9c-1892">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1892">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-1893">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1893">Nested Type</span></span>|<span data-ttu-id="9fb9c-1894">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1894">No</span></span>|<span data-ttu-id="9fb9c-1895">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1895">No</span></span>|  
|<span data-ttu-id="9fb9c-1896">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1896">Property</span></span>|<span data-ttu-id="9fb9c-1897">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1897">Not applicable</span></span>|<span data-ttu-id="9fb9c-1898">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1898">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-1899">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1899">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1900">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1900">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-1901">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1901">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-1902">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1902">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-1903">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1903">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-1904">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1904">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-1905">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1905">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-1906">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1906">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1907">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1907">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1908">Nell'esempio seguente viene illustrato l'uso del metodo `GetProperties`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1908">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1909">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1909">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1910">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1910">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1911">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1911">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1912">Quando ne viene eseguito l'override in una classe derivata, cerca le proprietà dell'oggetto <see cref="T:System.Type" /> corrente, usando i vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1912">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1913">Matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresenta tutte le proprietà dell'oggetto <see cref="T:System.Type" /> corrente corrispondenti ai vincoli di binding specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1913">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="9fb9c-1914">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1914">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1915">Matrice vuota di tipo <see cref="T:System.Reflection.PropertyInfo" />, se l'oggetto <see cref="T:System.Type" /> corrente non dispone di proprietà oppure se nessuna delle proprietà corrisponde ai vincoli di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1915">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1916">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1916">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-1917">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1917">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-1918">Il <xref:System.Type.GetProperties%2A> metodo non restituisce le proprietà in un ordine specifico, ad esempio in ordine alfabetico o ordine di dichiarazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1918">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="9fb9c-1919">Il codice non deve dipendere dall'ordine in cui vengono restituite le proprietà, perché tale ordine varia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1919">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="9fb9c-1920">Le operazioni seguenti <xref:System.Reflection.BindingFlags> filtro flag possono essere utilizzati per definire annidati di tipi da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1920">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1921">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1921">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1922">Specificare `BindingFlags.Public` per includere le proprietà pubbliche nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1922">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1923">Specificare `BindingFlags.NonPublic` per includere proprietà pubblici (proprietà, private, interne e protette) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1923">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="9fb9c-1924">Solo protetti e vengono restituite le proprietà interne delle classi di base; le proprietà private delle classi base non vengono restituite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1924">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="9fb9c-1925">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1925">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1926">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1926">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1927">`BindingFlags.DeclaredOnly` eseguire la ricerca solo le proprietà dichiarate sul <xref:System.Type>, non proprietà quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1927">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1928">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1928">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1929">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1929">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-1930">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1930">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-1931">Se l'oggetto T:System.Type corrente rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> oggetti con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1931">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1932">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1932">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1933">L'esempio seguente definisce una classe denominata `PropertyClass` che include sei proprietà: due sono pubblici, uno è privato, uno è protetto, uno è interno (`Friend` in Visual Basic), e uno è protected internal (`Protected Friend` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1933">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1934">Vengono quindi visualizzate alcune informazioni di proprietà di base (il nome della proprietà e il tipo, se è in lettura/scrittura e la visibilità del relativo `get` e `set` le funzioni di accesso) per le proprietà che corrispondono ai vincoli di associazione specificati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1934">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-1935">Ottiene una proprietà specifica dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1935">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1936">Stringa che contiene il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1936">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1937">Cerca la proprietà pubblica con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1937">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1938">Oggetto che rappresenta la proprietà pubblica con il nome specificato, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1938">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1939">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1939">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-1940">La ricerca include proprietà di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1940">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9fb9c-1941">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1941">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-1942">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1942">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-1943">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1943">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1944">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1944">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1945">Situazioni in cui <xref:System.Reflection.AmbiguousMatchException> si verifica includono quanto segue:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1945">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="9fb9c-1946">Un tipo contiene due proprietà indicizzate con lo stesso nome ma diversi numeri di parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1946">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="9fb9c-1947">Per risolvere l'ambiguità, utilizzare l'overload del metodo di <xref:System.Type.GetProperty%2A> metodo che specifica i tipi di parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1947">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="9fb9c-1948">Un tipo derivato dichiara una proprietà che nasconde una proprietà ereditata con lo stesso nome, utilizzando il `new` modificatore (`Shadows` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1948">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1949">Per risolvere l'ambiguità, utilizzare il <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> l'overload di metodo e aggiungere il <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag per restringere la ricerca di membri che non vengono ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1949">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-1950">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1950">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-1951">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1951">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-1952">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1952">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-1953">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1953">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-1954">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1954">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-1955">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1955">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-1956">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1956">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-1957">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1957">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-1958">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1958">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-1959">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1959">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-1960">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1960">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-1961">Nell'esempio seguente viene recuperato il `Type` oggetto di una classe definita dall'utente, viene recuperata una proprietà di tale classe e visualizza il nome della proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1961">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="9fb9c-1962">Internamente, questa proprietà è definita nei metadati con il nome "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1962">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="9fb9c-1963">Qualsiasi tentativo di ottenere `PropertyInfo` tramite reflection è necessario specificare il nome interno per restituire correttamente la `PropertyInfo` proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1963">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-1964">È stata trovata più di una proprietà con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1964">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-1965">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1965">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-1966">Stringa che contiene il nome della proprietà da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1966">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-1967">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1967">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-1968">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1968">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-1969">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1969">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-1970">Cerca la proprietà specificata, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1970">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-1971">Oggetto che rappresenta la proprietà corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-1971">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-1972">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1972">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-1973">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1973">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-1974">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire le proprietà da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1974">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-1975">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1975">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-1976">Specificare `BindingFlags.Public` per includere le proprietà pubbliche nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1976">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1977">Specificare `BindingFlags.NonPublic` per includere proprietà pubblici (proprietà, private, interne e protette) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1977">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-1978">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1978">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-1979">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1979">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-1980">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1980">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-1981">`BindingFlags.DeclaredOnly` eseguire la ricerca solo le proprietà dichiarate sul <xref:System.Type>, non proprietà quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1981">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-1982">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1982">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-1983">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1983">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-1984">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1984">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="9fb9c-1985">Situazioni in cui <xref:System.Reflection.AmbiguousMatchException> si verifica includono quanto segue:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1985">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="9fb9c-1986">Un tipo contiene due proprietà indicizzate con lo stesso nome ma diversi numeri di parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1986">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="9fb9c-1987">Per risolvere l'ambiguità, utilizzare l'overload del metodo di <xref:System.Type.GetProperty%2A> metodo che specifica i tipi di parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1987">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="9fb9c-1988">Un tipo derivato dichiara una proprietà che nasconde una proprietà ereditata con lo stesso nome, utilizzando il `new` modificatore (`Shadows` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1988">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-1989">Per risolvere l'ambiguità, includere <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> per restringere la ricerca di membri che non vengono ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1989">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-1990">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1990">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-1991">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1991">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-1992">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1992">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-1993">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1993">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-1994">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1994">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-1995">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1995">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-1996">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1996">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-1997">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1997">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-1998">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1998">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-1999">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-1999">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2000">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2000">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2001">Nell'esempio seguente recupera il tipo di una classe definita dall'utente, viene recuperata una proprietà di tale classe e visualizza il nome della proprietà in base ai vincoli di associazione specificati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2001">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2002">È stata trovata più di una proprietà con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2002">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2003">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2003">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2004">Stringa che contiene il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2004">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9fb9c-2005">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2005">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2006">Cerca la proprietà pubblica con il nome e il tipo restituito specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2006">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2007">Oggetto che rappresenta la proprietà pubblica con il nome specificato, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2007">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2008">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2008">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-2009">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2009">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-2010">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2010">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-2011">La ricerca include proprietà di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2011">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9fb9c-2012">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2012">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-2013">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2013">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-2014">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2014">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-2015">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2015">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-2016">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2016">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-2017">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2017">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-2018">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2018">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-2019">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2019">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-2020">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2020">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-2021">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2021">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-2022">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2022">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-2023">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2023">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2024">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2024">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2025">Nell'esempio seguente viene definita una classe con una proprietà e recupera il nome e il tipo della proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2025">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2026">È stata trovata più di una proprietà con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2026">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2027">
            <paramref name="name" /> è <see langword="null" /> o <paramref name="returnType" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2027">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2028">Stringa che contiene il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2028">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-2029">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2029">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2030">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2030">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2031">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2031">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2032">Cerca la proprietà pubblica specificata i cui parametri corrispondono ai tipi di argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2032">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2033">Oggetto che rappresenta la proprietà pubblica i cui parametri corrispondono ai tipi di argomenti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2033">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2034">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2034">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-2035">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2035">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-2036">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2036">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-2037">La ricerca include proprietà di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2037">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9fb9c-2038">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2038">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-2039">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2039">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-2040">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2040">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-2041">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2041">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-2042">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2042">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-2043">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2043">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-2044">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2044">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-2045">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2045">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-2046">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2046">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-2047">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2047">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-2048">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2048">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-2049">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2049">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2050">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2050">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2051">Nell'esempio seguente viene recuperato il `Type` oggetto di una classe definita dall'utente, viene recuperata la proprietà di tale classe e visualizza il nome della proprietà e il tipo della proprietà come specificato dagli argomenti passati a `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2051">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2052">È stata trovata più di una proprietà con il nome specificato e corrispondente ai tipi di argomento specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2052">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2053">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2053">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2054">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2054">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2055">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2055">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2056">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2056">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="9fb9c-2057">Un elemento di <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2057">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2058">Stringa che contiene il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2058">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9fb9c-2059">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2059">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-2060">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2060">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2061">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2061">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2062">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2062">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2063">Cerca la proprietà pubblica specificata i cui parametri corrispondono ai tipi di argomenti specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2063">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2064">Oggetto che rappresenta la proprietà pubblica i cui parametri corrispondono ai tipi di argomenti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2064">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2065">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2065">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-2066">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2066">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-2067">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2067">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-2068">La ricerca include proprietà di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2068">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9fb9c-2069">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2069">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-2070">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2070">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-2071">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2071">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-2072">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2072">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-2073">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2073">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-2074">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2074">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-2075">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2075">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-2076">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2076">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-2077">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2077">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-2078">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2078">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-2079">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2079">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-2080">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2080">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2081">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2081">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2082">È stata trovata più di una proprietà con il nome specificato e corrispondente ai tipi di argomento specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2082">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2083">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2083">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2084">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2084">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2085">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2085">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2086">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2086">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="9fb9c-2087">Un elemento di <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2087">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2088">Stringa che contiene il nome della proprietà pubblica da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2088">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9fb9c-2089">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2089">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-2090">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2090">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2091">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2091">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2092">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2092">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-2093">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2093">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-2094">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2094">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2095">Cerca la proprietà pubblica specificata i cui parametri corrispondono ai tipi di argomenti e ai modificatori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2095">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2096">Oggetto che rappresenta la proprietà pubblica corrispondente ai requisiti specificati, se è stato trovato; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2096">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2097">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2097">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-2098">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2098">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-2099">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2099">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-2100">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2100">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-2101">La ricerca di `name` tra maiuscole e minuscole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2101">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="9fb9c-2102">La ricerca include proprietà di istanza pubblico statico e pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2102">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="9fb9c-2103">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2103">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-2104">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2104">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-2105">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2105">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-2106">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2106">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-2107">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2107">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-2108">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2108">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-2109">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2109">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-2110">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2110">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-2111">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2111">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-2112">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2112">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-2113">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2113">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-2114">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2114">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2115">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2115">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2116">Nell'esempio seguente viene ottenuto un `Type` oggetto corrispondente a `MyPropertyClass`, e la proprietà indicizzata di questa classe viene recuperata utilizzando gli argomenti passati al `GetProperty` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2116">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2117">È stata trovata più di una proprietà con il nome specificato e corrispondente ai tipi di argomento e modificatori specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2117">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2118">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2118">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2119">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2119">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2120">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2120">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2121">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2121">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2122">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2122">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2123">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2123">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2124">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2124">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2125">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2125">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="9fb9c-2126">Un elemento di <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2126">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2127">Stringa che contiene il nome della proprietà da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2127">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-2128">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2128">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-2129">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2129">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2130">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2130">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-2131">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2131">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-2132">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2132">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2133">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2133">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9fb9c-2134">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2134">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-2135">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2135">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2136">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2136">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2137">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2137">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-2138">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2138">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-2139">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2139">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2140">Cerca la proprietà specificata i cui parametri corrispondono ai tipi di argomenti e ai modificatori specificati, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2140">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2141">Oggetto che rappresenta la proprietà corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2141">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2142">Una proprietà è considerata pubblica per la reflection se dispone di almeno una funzione di accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2142">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="9fb9c-2143">In caso contrario, la proprietà viene considerata privata ed è necessario utilizzare <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combinare i valori utilizzando `Or`) per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2143">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="9fb9c-2144">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2144">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-2145">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2145">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-2146">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2146">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-2147">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2147">Member Type</span></span>|<span data-ttu-id="9fb9c-2148">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2148">Static</span></span>|<span data-ttu-id="9fb9c-2149">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2149">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-2150">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2150">Constructor</span></span>|<span data-ttu-id="9fb9c-2151">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2151">No</span></span>|<span data-ttu-id="9fb9c-2152">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2152">No</span></span>|  
|<span data-ttu-id="9fb9c-2153">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2153">Field</span></span>|<span data-ttu-id="9fb9c-2154">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2154">No</span></span>|<span data-ttu-id="9fb9c-2155">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2155">Yes.</span></span> <span data-ttu-id="9fb9c-2156">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2156">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2157">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2157">Event</span></span>|<span data-ttu-id="9fb9c-2158">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2158">Not applicable</span></span>|<span data-ttu-id="9fb9c-2159">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2159">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2160">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2160">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2161">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2161">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-2162">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2162">Method</span></span>|<span data-ttu-id="9fb9c-2163">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2163">No</span></span>|<span data-ttu-id="9fb9c-2164">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2164">Yes.</span></span> <span data-ttu-id="9fb9c-2165">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2165">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2166">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2166">Nested Type</span></span>|<span data-ttu-id="9fb9c-2167">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2167">No</span></span>|<span data-ttu-id="9fb9c-2168">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2168">No</span></span>|  
|<span data-ttu-id="9fb9c-2169">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2169">Property</span></span>|<span data-ttu-id="9fb9c-2170">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2170">Not applicable</span></span>|<span data-ttu-id="9fb9c-2171">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2171">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2172">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2172">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2173">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2173">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-2174">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2174">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-2175">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2175">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-2176">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2176">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2177">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2177">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-2178">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2178">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-2179">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire le proprietà da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2179">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-2180">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2180">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-2181">Specificare `BindingFlags.Public` per includere le proprietà pubbliche nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2181">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-2182">Specificare `BindingFlags.NonPublic` per includere proprietà pubblici (proprietà, private, interne e protette) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2182">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-2183">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2183">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-2184">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2184">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-2185">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2185">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-2186">`BindingFlags.DeclaredOnly` eseguire la ricerca solo le proprietà dichiarate sul <xref:System.Type>, non proprietà quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2186">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-2187">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2187">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-2188">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questo metodo restituisce il <xref:System.Reflection.PropertyInfo> con i parametri di tipo sostituiti dagli argomenti di tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2188">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-2189">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, questo metodo cerca le proprietà del vincolo di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2189">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="9fb9c-2190">Gli indicizzatori e le proprietà predefinite</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2190">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="9fb9c-2191">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], e [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] hanno la sintassi semplificata per l'accesso alle proprietà indicizzate e consentire una proprietà indicizzata da un valore predefinito per il relativo tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2191">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="9fb9c-2192">Ad esempio, se la variabile `myList` fa riferimento a un <xref:System.Collections.ArrayList>, la sintassi `myList[3]` (`myList(3)` in Visual Basic) recupera l'elemento con indice 3.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2192">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="9fb9c-2193">È possibile eseguire l'overload di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2193">You can overload the property.</span></span>  
  
 <span data-ttu-id="9fb9c-2194">In c#, questa funzionalità viene chiamata un indicizzatore e non è possibile farvi riferimento in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2194">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="9fb9c-2195">Per impostazione predefinita, un indicizzatore c# presente nei metadati come una proprietà indicizzata denominata "Item".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2195">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="9fb9c-2196">Tuttavia, uno sviluppatore di libreria di classi è possibile utilizzare il <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attributo per modificare il nome dell'indicizzatore nei metadati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2196">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="9fb9c-2197">Ad esempio, il <xref:System.String> classe dispone di un indicizzatore denominato <xref:System.String.Chars%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2197">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="9fb9c-2198">Proprietà indicizzate create utilizzando linguaggi diversi da c# possono avere nomi diversi da elementi, nonché.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2198">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="9fb9c-2199">Per determinare se un tipo ha una proprietà predefinita, utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> metodo da testare per la <xref:System.Reflection.DefaultMemberAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2199">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="9fb9c-2200">Se il tipo ha <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> proprietà restituisce il nome della proprietà predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2200">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2201">È stata trovata più di una proprietà con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2201">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2202">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2202">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2203">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2203">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2204">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2204">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2205">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2205">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2206">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2206">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2207">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2207">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2208">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2208">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2209">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2209">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="9fb9c-2210">Un elemento di <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2210">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-2211">Stringa che contiene il nome della proprietà da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2211">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="9fb9c-2212">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2212">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-2213">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2213">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2214">Zero, per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2214">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-2215">Oggetto che definisce un set di proprietà e consente l'associazione, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2215">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-2216">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2216">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2217">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2217">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="9fb9c-2218">Tipo restituito della proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2218">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="9fb9c-2219">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano numero, ordine e tipo dei parametri relativi alla proprietà indicizzata da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2219">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2220">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2220">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2221">Matrice vuota di tipo <see cref="T:System.Type" /> (ovvero, Type[] types = new Type[0]) per ottenere una proprietà non indicizzata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2221">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-2222">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresenta gli attributi associati all'elemento corrispondente nella matrice <c>types</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2222">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-2223">Questo parametro non viene elaborato dal binder predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2223">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2224">Quando ne viene eseguito l'override in una classe derivata, cerca la proprietà specificata i cui parametri corrispondono ai modificatori e ai tipi di argomenti definiti, usando i vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2224">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2225">Oggetto che rappresenta la proprietà corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2225">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2226">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> (il `modifiers` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2226">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="9fb9c-2227">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2227">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-2228">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire le proprietà da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2228">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-2229">È necessario specificare `BindingFlags.Instance` o `BindingFlags.Static` per ottenere un risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2229">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="9fb9c-2230">Specificare `BindingFlags.Public` per includere le proprietà pubbliche nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2230">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-2231">Specificare `BindingFlags.NonPublic` per includere proprietà pubblici (proprietà, private, interne e protette) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2231">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-2232">Specificare `BindingFlags.FlattenHierarchy` includere `public` e `protected` membri statici nella gerarchia; `private` membri statici nelle classi ereditate non sono inclusi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2232">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="9fb9c-2233">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2233">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-2234">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2234">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-2235">`BindingFlags.DeclaredOnly` eseguire la ricerca solo le proprietà dichiarate sul <xref:System.Type>, non proprietà quelli ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2235">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-2236">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2236">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-2237">È stata trovata più di una proprietà con il nome specificato e corrispondente ai vincoli di associazione specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2237">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2238">
            <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2238">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2239">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2239">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2240">
            <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2240">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2241">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2241">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2242">Uno degli elementi in <paramref name="types" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2242">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2243">
            <paramref name="types" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2243">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2244">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2244">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2245">
            <paramref name="modifiers" /> è multidimensionale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2245">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="9fb9c-2246">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2246">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2247">
            <paramref name="types" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2247">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-2248">Il tipo corrente è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> o <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2248">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-2249">Ottiene un oggetto <see cref="T:System.Type" /> che rappresenta il tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2249">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-2250">Ottiene l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2250">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2251">Oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2251">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2252">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2252">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2253">Nome qualificato dall'assembly del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2253">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2254">Vedere <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2254">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2255">Se il tipo è incluso nell'assembly attualmente in esecuzione o in Mscorlib.dll, è sufficiente specificare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2255">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2256">Ottiene l'oggetto <see cref="T:System.Type" /> con il nome specificato, eseguendo una ricerca con distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2256">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2257">Tipo con il nome specificato, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2257">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2258">È possibile utilizzare il <xref:System.Type.GetType%2A> per ottenere un <xref:System.Type> dell'oggetto per un tipo in un altro assembly, se si conosce il nome completo dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2258">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its namespace-qualified name.</span></span> <span data-ttu-id="9fb9c-2259"><xref:System.Type.GetType%2A> causa il caricamento dell'assembly specificato in `typeName`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2259"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9fb9c-2260">È inoltre possibile caricare un assembly mediante il <xref:System.Reflection.Assembly.Load%2A> (metodo) e quindi utilizzare il <xref:System.Type.GetType%2A> o <xref:System.Reflection.Assembly.GetTypes%2A> metodi del <xref:System.Reflection.Assembly> classe per ottenere <xref:System.Type> oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2260">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9fb9c-2261">Se un tipo in un assembly noto al programma in fase di compilazione, è preferibile utilizzare in c#, <xref:System.Type.GetType%2A> in Visual Basic o c++.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2261">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2262">Se `typeName` non viene trovato, la chiamata al <xref:System.Type.GetType%28System.String%29> restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2262">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="9fb9c-2263">Non generare un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2263">It does not throw an exception.</span></span> <span data-ttu-id="9fb9c-2264">Per controllare se viene generata un'eccezione, chiamare l'overload del metodo di <xref:System.Type.GetType%2A> metodo che presenta un `throwOnError` parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2264">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-2265"><xref:System.Type.GetType%2A> funziona solo su assembly caricati dal disco.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2265"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9fb9c-2266">Se si chiama <xref:System.Type.GetType%2A> per cercare un tipo definito in un assembly dinamico mediante il <xref:System.Reflection.Emit> services, è possibile ottenere un comportamento incoerente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2266">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9fb9c-2267">Il comportamento varia a seconda che l'assembly dinamico persistente, vale a dire, creata utilizzando il `RunAndSave` o `Save` modalità di accesso di <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2267">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9fb9c-2268">Se l'assembly dinamico è permanente ed è stato scritto su disco prima `GetType` viene chiamato, il caricatore trova l'assembly salvato su disco, carica l'assembly e recupera il tipo di tale assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2268">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9fb9c-2269">Se l'assembly non è stato salvato su disco quando `GetType` viene chiamato il metodo restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2269">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9fb9c-2270">`GetType` non riconosce gli assembly dinamici temporanei; Pertanto, la chiamata `GetType` per recuperare un tipo di un temporaneo restituisce l'assembly dinamico `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2270">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9fb9c-2271">Per utilizzare `GetType` su un modulo dinamico, sottoscrivere il <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventi e chiamate `GetType` prima del salvataggio.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2271">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9fb9c-2272">In caso contrario, si otterrà due copie dell'assembly in memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2272">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-2273">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2273">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-2274">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2274">Member Type</span></span>|<span data-ttu-id="9fb9c-2275">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2275">Static</span></span>|<span data-ttu-id="9fb9c-2276">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2276">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-2277">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2277">Constructor</span></span>|<span data-ttu-id="9fb9c-2278">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2278">No</span></span>|<span data-ttu-id="9fb9c-2279">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2279">No</span></span>|  
|<span data-ttu-id="9fb9c-2280">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2280">Field</span></span>|<span data-ttu-id="9fb9c-2281">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2281">No</span></span>|<span data-ttu-id="9fb9c-2282">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2282">Yes.</span></span> <span data-ttu-id="9fb9c-2283">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2283">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2284">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2284">Event</span></span>|<span data-ttu-id="9fb9c-2285">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2285">Not applicable</span></span>|<span data-ttu-id="9fb9c-2286">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2286">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2287">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2287">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2288">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2288">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-2289">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2289">Method</span></span>|<span data-ttu-id="9fb9c-2290">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2290">No</span></span>|<span data-ttu-id="9fb9c-2291">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2291">Yes.</span></span> <span data-ttu-id="9fb9c-2292">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2292">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2293">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2293">Nested Type</span></span>|<span data-ttu-id="9fb9c-2294">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2294">No</span></span>|<span data-ttu-id="9fb9c-2295">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2295">No</span></span>|  
|<span data-ttu-id="9fb9c-2296">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2296">Property</span></span>|<span data-ttu-id="9fb9c-2297">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2297">Not applicable</span></span>|<span data-ttu-id="9fb9c-2298">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2298">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2299">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2299">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2300">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2300">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-2301">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2301">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-2302">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2302">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-2303">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2303">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2304">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2304">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-2305">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2305">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-2306">Le matrici o tipi COM non vengono cercati a meno che non sono già stati caricati nella tabella delle classi disponibili.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2306">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9fb9c-2307">`typeName` può essere il nome del tipo qualificato dal relativo spazio dei nomi o un nome completo dell'assembly che include una specifica di nome di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2307">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9fb9c-2308">Vedere <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2308">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-2309">Se `typeName` include lo spazio dei nomi ma non il nome dell'assembly, questo metodo cerca solo assembly dell'oggetto chiamante e mscorlib. dll, nell'ordine.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2309">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9fb9c-2310">Se typeName è un nome completo con il nome parziale o completo dell'assembly, questo metodo cerca nell'assembly specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2310">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9fb9c-2311">Se l'assembly dispone di un nome sicuro, è necessario un nome di assembly completo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2311">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9fb9c-2312">Il <xref:System.Type.AssemblyQualifiedName%2A> proprietà restituisce un nome completo del tipo, inclusi i tipi annidati, il nome dell'assembly e argomenti di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2312">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="9fb9c-2313">Tutti i compilatori che supportano common language runtime creeranno il nome semplice di una classe annidata, e reflection quando richiesta, in conformità con le seguenti convenzioni di un nome alterato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2313">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2314">In .NET Framework versione 2.0, l'architettura del processore viene aggiunto all'identità dell'assembly e può essere specificato come parte di stringhe di nomi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2314">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9fb9c-2315">Ad esempio, "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2315">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9fb9c-2316">Tuttavia, non è incluso nella stringa restituita dal <xref:System.Type.AssemblyQualifiedName%2A> proprietà, per motivi di compatibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2316">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9fb9c-2317">È inoltre possibile caricare tipi creando un <xref:System.Reflection.AssemblyName> oggetto e passarlo a un overload appropriato del <xref:System.Reflection.Assembly.Load%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2317">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9fb9c-2318">È quindi possibile utilizzare il <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> per caricare i tipi dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2318">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9fb9c-2319">Vedere anche <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2319">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9fb9c-2320">delimitatore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2320">Delimiter</span></span>|<span data-ttu-id="9fb9c-2321">Significato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2321">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9fb9c-2322">Barra rovesciata (\\)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2322">Backslash (\\)</span></span>|<span data-ttu-id="9fb9c-2323">Carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2323">Escape character.</span></span>|  
|<span data-ttu-id="9fb9c-2324">Apice inverso (')</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2324">Backtick (\`)</span></span>|<span data-ttu-id="9fb9c-2325">Precede una o più cifre che rappresenta il numero di parametri di tipo, alla fine del nome di un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2325">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9fb9c-2326">parentesi quadre ([])</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2326">Brackets ([])</span></span>|<span data-ttu-id="9fb9c-2327">Racchiudere un elenco di argomenti di tipo generico, per un tipo generico costruito. all'interno di un elenco di argomenti, racchiudere un tipo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2327">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9fb9c-2328">Comma (,)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2328">Comma (,)</span></span>|<span data-ttu-id="9fb9c-2329">Precede il nome dell'Assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2329">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9fb9c-2330">Punto (.)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2330">Period (.)</span></span>|<span data-ttu-id="9fb9c-2331">Indica gli identificatori dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2331">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9fb9c-2332">Segno più (+)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2332">Plus sign (+)</span></span>|<span data-ttu-id="9fb9c-2333">Precede una classe annidata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2333">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9fb9c-2334">Il nome completo per una classe, ad esempio, potrebbe essere simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2334">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2335">Se lo spazio dei nomi sono stati TopNamespace.Sub+Namespace, quindi la stringa sarebbe necessario anteporre il segno più (+) con un carattere di escape (\\) per evitare che venga interpretato come un separatore di annidamento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2335">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9fb9c-2336">Reflection genera questa stringa, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2336">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2337">A "+" diventa "\\+\\+" e un "\\"diventa"\\\\".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2337">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9fb9c-2338">Questo nome completo può essere persistente e successivamente utilizzato per caricare il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2338">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9fb9c-2339">Per cercare e caricare un <xref:System.Type>, utilizzare <xref:System.Type.GetType%2A> o con il tipo di nome solo oppure con il nome di tipo completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2339">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9fb9c-2340"><xref:System.Type.GetType%2A> con il tipo di nome solo cercherà il <xref:System.Type> nell'assembly del chiamante, quindi nell'assembly System.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2340"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9fb9c-2341"><xref:System.Type.GetType%2A> con l'assembly completo del tipo cercherà il <xref:System.Type> in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2341"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9fb9c-2342">I nomi dei tipi possono includere caratteri finali che indicano informazioni aggiuntive sul tipo, ad esempio se il tipo è un tipo riferimento, un tipo di puntatore o un tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2342">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9fb9c-2343">Per recuperare il nome del tipo senza caratteri finali, utilizzare `t.GetElementType().ToString()`, dove `t` è il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2343">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9fb9c-2344">Gli spazi sono rilevanti in tutti i componenti di nome di tipo tranne il nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2344">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9fb9c-2345">Il nome di assembly, spazi che precedono il separatore ',' sono rilevanti, ma gli spazi dopo il separatore ',' vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2345">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-2346">Il nome di un tipo generico termina con un apice inverso (\`) seguito da cifre che rappresenta il numero di argomenti di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2346">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9fb9c-2347">Lo scopo di questo tipo di modifica dei nomi è consentire ai compilatori di supportare i tipi generici con lo stesso nome ma con un numero diverso di parametri di tipo, che si verificano nello stesso ambito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2347">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9fb9c-2348">Ad esempio, la reflection restituisce i nomi alterati `Tuple`1` and `tupla`2` uno dei metodi generici `Tuple(Of T)` e `Tuple(Of T0, T1)` in Visual Basic o `Tuple<T>` tupla e`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2348">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9fb9c-2349">Per i tipi generici, l'elenco di argomenti di tipo è racchiuso tra parentesi e gli argomenti di tipo sono separati da virgole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2349">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9fb9c-2350">Ad esempio, un oggetto generico <xref:System.Collections.Generic.Dictionary%602> presenta due parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2350">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9fb9c-2351">Oggetto <xref:System.Collections.Generic.Dictionary%602> di `MyType` con chiavi di tipo <xref:System.String> potrebbe essere rappresentato nel modo seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2351">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9fb9c-2352">Per specificare un tipo qualificato dall'assembly all'interno di un elenco di argomenti, racchiudere il tipo completo dell'assembly all'interno di parentesi quadre.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2352">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9fb9c-2353">In caso contrario, le virgole per separare le parti del nome completo dell'assembly vengono interpretate come delimitatori ulteriori argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2353">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9fb9c-2354">Ad esempio, un <xref:System.Collections.Generic.Dictionary%602> di `MyType` fromMyAssembly.dll, con chiavi di tipo <xref:System.String>, può essere specificato come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2354">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2355">Un tipo qualificato dall'assembly può essere racchiuso tra parentesi quadre solo quando viene visualizzato all'interno di un elenco di parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2355">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9fb9c-2356">Le regole per la ricerca di assembly per i tipi completi e non qualificati in elenchi di parametri di tipo sono come le regole per i tipi non generici non qualificati e completi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2356">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9fb9c-2357">Tipi nullable sono un tipo speciale di tipi generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2357">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9fb9c-2358">Ad esempio, un valore nullable <xref:System.Int32> è rappresentato dalla stringa "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2358">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2359">In c#, C++ e Visual Basic è inoltre possibile ottenere i tipi nullable che utilizzano operatori di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2359">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9fb9c-2360">Ad esempio, il valore nullable <xref:System.Boolean> tipo restituito dal `typeof(Nullable<bool>)` in c#, da `Nullable<Boolean>::typeid` in C++ e da `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2360">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9fb9c-2361">La tabella seguente illustra la sintassi da utilizzare con `GetType` per vari tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2361">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9fb9c-2362">Per ottenere</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2362">To Get</span></span>|<span data-ttu-id="9fb9c-2363">Usa</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2363">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9fb9c-2364">Un valore nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9fb9c-2364">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="9fb9c-2365">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2365">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2366">Un puntatore non gestito a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2366">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9fb9c-2367">Un puntatore non gestito a un puntatore a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2367">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9fb9c-2368">Un puntatore gestito o un riferimento a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2368">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9fb9c-2369">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2369">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9fb9c-2370">Si noti che, a differenza dei puntatori, i riferimenti sono limitati a un solo livello.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2370">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9fb9c-2371">Una classe padre e una classe annidata</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2371">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9fb9c-2372">Una matrice unidimensionale con limite inferiore pari a 0</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2372">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="9fb9c-2373">Una matrice unidimensionale con limite inferiore sconosciuto</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2373">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="9fb9c-2374">Una matrice di n-dimensionale</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2374">An n-dimensional array</span></span>|<span data-ttu-id="9fb9c-2375">Una virgola (,) all'interno delle parentesi un totale di volte in cui n-1.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2375">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9fb9c-2376">Ad esempio, `System.Object[,,]` rappresenta un oggetto tridimensionale `Object` matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2376">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9fb9c-2377">Matrice di matrici unidimensionali</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2377">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="9fb9c-2378">Una matrice bidimensionale rettangolare con limiti inferiori sconosciuti</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2378">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="9fb9c-2379">Un tipo generico con un argomento di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2379">A generic type with one type argument</span></span>|<span data-ttu-id="9fb9c-2380">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2380">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2381">Un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2381">A generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2382">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2382">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2383">Un tipo generico con due argomenti di tipo qualificato dall'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2383">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="9fb9c-2384">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2384">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2385">Un tipo generico con un argomento di tipo qualificato dall'assembly completo dell'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2385">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="9fb9c-2386">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2386">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="9fb9c-2387">Un tipo generico il cui argomento di tipo è un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2387">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2388">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2388">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2389">Nell'esempio seguente recupera il tipo di `System.Int32` e utilizza tale oggetto di tipo per visualizzare il <xref:System.Type.FullName%2A> proprietà `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2389">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2390">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2390">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2391">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2391">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2392">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2392">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2393">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2393">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2394">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2394">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2395">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2395">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2396">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2396">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2397">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2397">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="9fb9c-2398">In [.NET per app di Windows Store](http://go.microsoft.com/fwlink/?LinkID=247912) o nella [libreria di classi portabile](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) rilevare invece l'eccezione della classe di base, <see cref="T:System.IO.IOException" />.</span>
              <span class="sxs-lookup">
                <span data-stu-id="9fb9c-2398">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="9fb9c-2399">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2399">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-2400">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2400">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-2401">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2401">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2402">Attualmente è caricata la versione 2.0 o successiva di Common Language Runtime e l'assembly è stato compilato con una versione successiva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2402">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2403">Nome qualificato dall'assembly del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2403">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2404">Vedere <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2404">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2405">Se il tipo è incluso nell'assembly attualmente in esecuzione o in Mscorlib.dll, è sufficiente specificare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2405">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-2406">
            <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; <see langword="false" /> per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2406">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2407">Se si specifica <see langword="false" /> vengono eliminate alcune condizioni di eccezione, ma non tutte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2407">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="9fb9c-2408">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2408">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2409">Ottiene l'oggetto <see cref="T:System.Type" /> con il nome specificato, eseguendo una ricerca con distinzione tra maiuscole e minuscole e specificando se generare un'eccezione in caso il tipo non venga trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2409">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2410">Tipo con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2410">The type with the specified name.</span>
          </span>
          <span data-ttu-id="9fb9c-2411">Se il tipo non viene trovato, il parametro <paramref name="throwOnError" /> specifica se viene restituito <see langword="null" /> o se viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2411">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="9fb9c-2412">In alcuni casi, viene generata un'eccezione indipendentemente dal valore di <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2412">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2413">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2413">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2414">È possibile utilizzare il <xref:System.Type.GetType%2A> per ottenere un <xref:System.Type> dell'oggetto per un tipo in un altro assembly, se si conosce il nome completo dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2414">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name.</span></span> <span data-ttu-id="9fb9c-2415"><xref:System.Type.GetType%2A> causa il caricamento dell'assembly specificato in `typeName`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2415"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9fb9c-2416">È inoltre possibile caricare un assembly mediante il <xref:System.Reflection.Assembly.Load%2A> (metodo) e quindi utilizzare il <xref:System.Type.GetType%2A> o <xref:System.Reflection.Assembly.GetTypes%2A> metodi del <xref:System.Reflection.Assembly> classe per ottenere <xref:System.Type> oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2416">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9fb9c-2417">Se un tipo in un assembly noto al programma in fase di compilazione, è preferibile utilizzare `typeof` in c#, <xref:System.Type.GetType%2A> in Visual Basic o `typeid` in C++.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2417">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="9fb9c-2418">`GetType` funziona solo su assembly caricati dal disco.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2418">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9fb9c-2419">Se si chiama `GetType` per cercare un tipo definito in un assembly dinamico mediante il <xref:System.Reflection.Emit> services, è possibile ottenere un comportamento incoerente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2419">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9fb9c-2420">Il comportamento varia a seconda che l'assembly dinamico persistente, vale a dire, creata utilizzando il `RunAndSave` o `Save` modalità di accesso di <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2420">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9fb9c-2421">Se l'assembly dinamico è permanente ed è stato scritto su disco prima `GetType` viene chiamato, il caricatore trova l'assembly salvato su disco, carica l'assembly e recupera il tipo di tale assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2421">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9fb9c-2422">Se l'assembly non è stato salvato su disco quando `GetType` viene chiamato il metodo restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2422">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9fb9c-2423">`GetType` non riconosce gli assembly dinamici temporanei; Pertanto, la chiamata `GetType` per recuperare un tipo di un temporaneo restituisce l'assembly dinamico `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2423">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9fb9c-2424">Per utilizzare `GetType` su un modulo dinamico, sottoscrivere il <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventi e chiamate `GetType` prima del salvataggio.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2424">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9fb9c-2425">In caso contrario, si otterrà due copie dell'assembly in memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2425">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-2426">Il `throwOnError` parametro specifica che cosa avviene quando non viene trovato, il tipo e vengono eliminate alcune condizioni di eccezione, come descritto nella sezione eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2426">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9fb9c-2427">Alcune eccezioni vengono generate indipendentemente dal valore di `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2427">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="9fb9c-2428">Se il tipo è stato trovato ma non può essere caricato, ad esempio un <xref:System.TypeLoadException> viene generata anche se `throwOnError` è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2428">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-2429">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2429">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-2430">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2430">Member Type</span></span>|<span data-ttu-id="9fb9c-2431">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2431">Static</span></span>|<span data-ttu-id="9fb9c-2432">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2432">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-2433">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2433">Constructor</span></span>|<span data-ttu-id="9fb9c-2434">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2434">No</span></span>|<span data-ttu-id="9fb9c-2435">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2435">No</span></span>|  
|<span data-ttu-id="9fb9c-2436">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2436">Field</span></span>|<span data-ttu-id="9fb9c-2437">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2437">No</span></span>|<span data-ttu-id="9fb9c-2438">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2438">Yes.</span></span> <span data-ttu-id="9fb9c-2439">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2439">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2440">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2440">Event</span></span>|<span data-ttu-id="9fb9c-2441">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2441">Not applicable</span></span>|<span data-ttu-id="9fb9c-2442">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2442">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2443">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2443">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2444">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2444">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-2445">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2445">Method</span></span>|<span data-ttu-id="9fb9c-2446">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2446">No</span></span>|<span data-ttu-id="9fb9c-2447">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2447">Yes.</span></span> <span data-ttu-id="9fb9c-2448">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2448">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2449">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2449">Nested Type</span></span>|<span data-ttu-id="9fb9c-2450">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2450">No</span></span>|<span data-ttu-id="9fb9c-2451">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2451">No</span></span>|  
|<span data-ttu-id="9fb9c-2452">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2452">Property</span></span>|<span data-ttu-id="9fb9c-2453">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2453">Not applicable</span></span>|<span data-ttu-id="9fb9c-2454">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2454">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2455">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2455">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2456">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2456">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-2457">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2457">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-2458">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2458">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-2459">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2459">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2460">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2460">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-2461">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2461">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-2462">Le matrici o tipi COM non vengono cercati a meno che non sono già stati caricati nella tabella delle classi disponibili.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2462">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9fb9c-2463">`typeName` può essere il nome del tipo qualificato dal relativo spazio dei nomi o un nome completo dell'assembly che include una specifica di nome di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2463">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9fb9c-2464">Vedere <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2464">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-2465">Se `typeName` include lo spazio dei nomi ma non il nome dell'assembly, questo metodo cerca solo assembly dell'oggetto chiamante e mscorlib. dll, nell'ordine.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2465">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9fb9c-2466">Se typeName è un nome completo con il nome parziale o completo dell'assembly, questo metodo cerca nell'assembly specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2466">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9fb9c-2467">Se l'assembly dispone di un nome sicuro, è necessario un nome di assembly completo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2467">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9fb9c-2468">Il <xref:System.Type.AssemblyQualifiedName%2A> proprietà restituisce un nome completo del tipo, inclusi i tipi annidati, il nome dell'assembly e argomenti generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2468">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="9fb9c-2469">Tutti i compilatori che supportano common language runtime creeranno il nome semplice di una classe annidata, e reflection quando richiesta, in conformità con le seguenti convenzioni di un nome alterato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2469">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2470">In .NET Framework versione 2.0, l'architettura del processore viene aggiunto all'identità dell'assembly e può essere specificato come parte di stringhe di nomi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2470">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9fb9c-2471">Ad esempio, "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2471">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9fb9c-2472">Tuttavia, non è incluso nella stringa restituita dal <xref:System.Type.AssemblyQualifiedName%2A> proprietà, per motivi di compatibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2472">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9fb9c-2473">È inoltre possibile caricare tipi creando un <xref:System.Reflection.AssemblyName> oggetto e passarlo a un overload appropriato del <xref:System.Reflection.Assembly.Load%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2473">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9fb9c-2474">È quindi possibile utilizzare il <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> per caricare i tipi dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2474">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9fb9c-2475">Vedere anche <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2475">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9fb9c-2476">delimitatore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2476">Delimiter</span></span>|<span data-ttu-id="9fb9c-2477">Significato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2477">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9fb9c-2478">Barra rovesciata (\\)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2478">Backslash (\\)</span></span>|<span data-ttu-id="9fb9c-2479">Carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2479">Escape character.</span></span>|  
|<span data-ttu-id="9fb9c-2480">Apice inverso (')</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2480">Backtick (\`)</span></span>|<span data-ttu-id="9fb9c-2481">Precede una o più cifre che rappresenta il numero di parametri di tipo, alla fine del nome di un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2481">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9fb9c-2482">parentesi quadre ([])</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2482">Brackets ([])</span></span>|<span data-ttu-id="9fb9c-2483">Racchiudere un elenco di argomenti di tipo generico, per un tipo generico costruito. all'interno di un elenco di argomenti, racchiudere un tipo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2483">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9fb9c-2484">Comma (,)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2484">Comma (,)</span></span>|<span data-ttu-id="9fb9c-2485">Precede il nome dell'Assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2485">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9fb9c-2486">Punto (.)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2486">Period (.)</span></span>|<span data-ttu-id="9fb9c-2487">Indica gli identificatori dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2487">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9fb9c-2488">Segno più (+)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2488">Plus sign (+)</span></span>|<span data-ttu-id="9fb9c-2489">Precede una classe annidata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2489">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9fb9c-2490">Il nome completo per una classe, ad esempio, potrebbe essere simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2490">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2491">Se lo spazio dei nomi sono stati TopNamespace.Sub+Namespace, quindi la stringa sarebbe necessario anteporre il segno più (+) con un carattere di escape (\\) per evitare che venga interpretato come un separatore di annidamento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2491">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9fb9c-2492">Reflection genera questa stringa, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2492">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2493">A "+" diventa "\\+\\+" e un "\\"diventa"\\\\".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2493">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9fb9c-2494">Questo nome completo può essere persistente e successivamente utilizzato per caricare il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2494">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9fb9c-2495">Per cercare e caricare un <xref:System.Type>, utilizzare <xref:System.Type.GetType%2A> o con il tipo di nome solo oppure con il nome di tipo completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2495">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9fb9c-2496"><xref:System.Type.GetType%2A> con il tipo di nome solo cercherà il <xref:System.Type> nell'assembly del chiamante, quindi nell'assembly System.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2496"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9fb9c-2497"><xref:System.Type.GetType%2A> con l'assembly completo del tipo cercherà il <xref:System.Type> in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2497"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9fb9c-2498">I nomi dei tipi possono includere caratteri finali che indicano informazioni aggiuntive sul tipo, ad esempio se il tipo è un tipo riferimento, un tipo di puntatore o un tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2498">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9fb9c-2499">Per recuperare il nome del tipo senza caratteri finali, utilizzare `t.GetElementType().ToString()`, dove `t` è il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2499">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9fb9c-2500">Gli spazi sono rilevanti in tutti i componenti di nome di tipo tranne il nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2500">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9fb9c-2501">Il nome di assembly, spazi che precedono il separatore ',' sono rilevanti, ma gli spazi dopo il separatore ',' vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2501">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-2502">Il nome di un tipo generico termina con un apice inverso (\`) seguito da cifre che rappresenta il numero di argomenti di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2502">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9fb9c-2503">Lo scopo di questo tipo di modifica dei nomi è consentire ai compilatori di supportare i tipi generici con lo stesso nome ma con un numero diverso di parametri di tipo, che si verificano nello stesso ambito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2503">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9fb9c-2504">Ad esempio, la reflection restituisce i nomi alterati `Tuple`1` and `tupla`2` uno dei metodi generici `Tuple(Of T)` e `Tuple(Of T0, T1)` in Visual Basic o `Tuple<T>` tupla e`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2504">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9fb9c-2505">Per i tipi generici, l'elenco di argomenti di tipo è racchiuso tra parentesi e gli argomenti di tipo sono separati da virgole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2505">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9fb9c-2506">Ad esempio, un oggetto generico <xref:System.Collections.Generic.Dictionary%602> presenta due parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2506">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9fb9c-2507">Oggetto <xref:System.Collections.Generic.Dictionary%602> di `MyType` con chiavi di tipo <xref:System.String> potrebbe essere rappresentato nel modo seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2507">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9fb9c-2508">Per specificare un tipo qualificato dall'assembly all'interno di un elenco di argomenti, racchiudere il tipo completo dell'assembly all'interno di parentesi quadre.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2508">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9fb9c-2509">In caso contrario, le virgole per separare le parti del nome completo dell'assembly vengono interpretate come delimitatori ulteriori argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2509">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9fb9c-2510">Ad esempio, un <xref:System.Collections.Generic.Dictionary%602> di `MyType` da MyAssembly. dll, con chiavi di tipo <xref:System.String>, può essere specificato come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2510">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2511">Un tipo qualificato dall'assembly può essere racchiuso tra parentesi quadre solo quando viene visualizzato all'interno di un elenco di parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2511">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9fb9c-2512">Le regole per la ricerca di assembly per i tipi completi e non qualificati in elenchi di parametri di tipo sono come le regole per i tipi non generici non qualificati e completi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2512">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9fb9c-2513">Tipi nullable sono un tipo speciale di tipi generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2513">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9fb9c-2514">Ad esempio, un valore nullable <xref:System.Int32> è rappresentato dalla stringa "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2514">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2515">In c#, C++ e Visual Basic è inoltre possibile ottenere i tipi nullable che utilizzano operatori di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2515">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9fb9c-2516">Ad esempio, il valore nullable <xref:System.Boolean> tipo restituito dal `typeof(Nullable<bool>)` in c#, da `Nullable<Boolean>::typeid` in C++ e da `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2516">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9fb9c-2517">La tabella seguente illustra la sintassi da utilizzare con `GetType` per vari tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2517">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9fb9c-2518">Per ottenere</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2518">To Get</span></span>|<span data-ttu-id="9fb9c-2519">Usa</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2519">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9fb9c-2520">Un valore nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9fb9c-2520">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="9fb9c-2521">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2521">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2522">Un puntatore non gestito a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2522">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9fb9c-2523">Un puntatore non gestito a un puntatore a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2523">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9fb9c-2524">Un puntatore gestito o un riferimento a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2524">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9fb9c-2525">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2525">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9fb9c-2526">Si noti che, a differenza dei puntatori, i riferimenti sono limitati a un solo livello.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2526">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9fb9c-2527">Una classe padre e una classe annidata</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2527">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9fb9c-2528">Una matrice unidimensionale con limite inferiore pari a 0</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2528">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="9fb9c-2529">Una matrice unidimensionale con limite inferiore sconosciuto</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2529">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="9fb9c-2530">Una matrice di n-dimensionale</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2530">An n-dimensional array</span></span>|<span data-ttu-id="9fb9c-2531">Una virgola (,) all'interno delle parentesi un totale di volte in cui n-1.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2531">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9fb9c-2532">Ad esempio, `System.Object[,,]` rappresenta un oggetto tridimensionale `Object` matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2532">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9fb9c-2533">Una matrice bidimensionale</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2533">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="9fb9c-2534">Una matrice bidimensionale rettangolare con limiti inferiori sconosciuti</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2534">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="9fb9c-2535">Un tipo generico con un argomento di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2535">A generic type with one type argument</span></span>|<span data-ttu-id="9fb9c-2536">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2536">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2537">Un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2537">A generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2538">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2538">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2539">Un tipo generico con due argomenti di tipo qualificato dall'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2539">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="9fb9c-2540">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2540">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2541">Un tipo generico con un argomento di tipo qualificato dall'assembly completo dell'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2541">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="9fb9c-2542">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2542">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="9fb9c-2543">Un tipo generico il cui argomento di tipo è un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2543">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2544">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2544">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-2545">Nell'esempio seguente recupera il tipo di `System.Int32` e utilizza tale oggetto di tipo per visualizzare il <xref:System.Type.FullName%2A> proprietà `System.Int32`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2545">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="9fb9c-2546">Se un oggetto di tipo fa riferimento a un assembly che non esiste, questo esempio genera un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2546">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2547">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2547">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2548">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2548">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2549">
            <paramref name="throwOnError" /> è <see langword="true" /> e il tipo non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2549">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-2550">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2550">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2551">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene caratteri non validi, ad esempio una scheda incorporata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2551">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="9fb9c-2552">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2552">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2553">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2553">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="9fb9c-2554">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2554">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2555">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> rappresenta un tipo di matrice con una dimensione non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2555">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="9fb9c-2556">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2556">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2557">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2557">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2558">
            <paramref name="throwOnError" /> è <see langword="true" /> e la sintassi di <paramref name="typeName" /> non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2558">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="9fb9c-2559">Ad esempio: "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2559">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="9fb9c-2560">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2560">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2561">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2561">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2562">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2562">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2563">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2563">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2564">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2564">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2565">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2565">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9fb9c-2566">
            <paramref name="throwOnError" /> è <see langword="true" /> e l'assembly o una delle sue dipendenze non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2566">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="9fb9c-2567">In [.NET per app di Windows Store](http://go.microsoft.com/fwlink/?LinkID=247912) o nella [libreria di classi portabile](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md) rilevare invece l'eccezione della classe di base, <see cref="T:System.IO.IOException" />.</span>
              <span class="sxs-lookup">
                <span data-stu-id="9fb9c-2567">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="9fb9c-2568">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2568">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-2569">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2569">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-2570">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2570">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2571">Attualmente è caricata la versione 2.0 o successiva di Common Language Runtime e l'assembly è stato compilato con una versione successiva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2571">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2572">Nome qualificato dall'assembly del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2572">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2573">Vedere <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2573">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2574">Se il tipo è incluso nell'assembly attualmente in esecuzione o in Mscorlib.dll, è sufficiente specificare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2574">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-2575">
            <see langword="true" /> per generare un'eccezione se il tipo non viene trovato; <see langword="false" /> per restituire <see langword="null" />. Specificando <see langword="false" /> inoltre si eliminano alcune condizioni dell'eccezione, ma non tutte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2575">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="9fb9c-2576">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2576">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9fb9c-2577">
            <see langword="true" /> per eseguire una ricerca di <c>typeName</c> senza distinzione tra maiuscole e minuscole, <see langword="false" /> per eseguire una ricerca di <c>typeName</c> con distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2577">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2578">Ottiene l'oggetto <see cref="T:System.Type" /> con il nome specificato, che indica se generare un'eccezione quando viene trovato il tipo e se eseguire una ricerca con distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2578">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2579">Tipo con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2579">The type with the specified name.</span>
          </span>
          <span data-ttu-id="9fb9c-2580">Se il tipo non viene trovato, il parametro <paramref name="throwOnError" /> specifica se viene restituito <see langword="null" /> o se viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2580">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="9fb9c-2581">In alcuni casi, viene generata un'eccezione indipendentemente dal valore di <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2581">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2582">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2582">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2583">È possibile utilizzare il <xref:System.Type.GetType%2A> per ottenere un <xref:System.Type> dell'oggetto per un tipo in un altro assembly, se si conosce il nome completo dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2583">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name.</span></span> <span data-ttu-id="9fb9c-2584"><xref:System.Type.GetType%2A> causa il caricamento dell'assembly specificato in `typeName`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2584"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="9fb9c-2585">È inoltre possibile caricare un assembly mediante il <xref:System.Reflection.Assembly.Load%2A> (metodo) e quindi utilizzare il <xref:System.Type.GetType%2A> o <xref:System.Reflection.Assembly.GetTypes%2A> metodi del <xref:System.Reflection.Assembly> classe per ottenere <xref:System.Type> oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2585">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="9fb9c-2586">Se un tipo in un assembly noto al programma in fase di compilazione, è preferibile utilizzare `typeof` in c#, <xref:System.Type.GetType%2A> in Visual Basic o `typeid` in C++.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2586">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="9fb9c-2587">`GetType` funziona solo su assembly caricati dal disco.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2587">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="9fb9c-2588">Se si chiama `GetType` per cercare un tipo definito in un assembly dinamico mediante il <xref:System.Reflection.Emit> services, è possibile ottenere un comportamento incoerente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2588">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="9fb9c-2589">Il comportamento varia a seconda che l'assembly dinamico persistente, vale a dire, creata utilizzando il `RunAndSave` o `Save` modalità di accesso di <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2589">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="9fb9c-2590">Se l'assembly dinamico è permanente ed è stato scritto su disco prima `GetType` viene chiamato, il caricatore trova l'assembly salvato su disco, carica l'assembly e recupera il tipo di tale assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2590">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="9fb9c-2591">Se l'assembly non è stato salvato su disco quando `GetType` viene chiamato il metodo restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2591">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="9fb9c-2592">`GetType` non riconosce gli assembly dinamici temporanei; Pertanto, la chiamata `GetType` per recuperare un tipo di un temporaneo restituisce l'assembly dinamico `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2592">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="9fb9c-2593">Per utilizzare `GetType` su un modulo dinamico, sottoscrivere il <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> eventi e chiamate `GetType` prima del salvataggio.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2593">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="9fb9c-2594">In caso contrario, si otterrà due copie dell'assembly in memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2594">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-2595">Il `throwOnError` parametro specifica che cosa avviene quando non viene trovato, il tipo e vengono eliminate alcune condizioni di eccezione, come descritto nella sezione eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2595">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9fb9c-2596">Alcune eccezioni vengono generate indipendentemente dal valore di `throwOnError`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2596">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="9fb9c-2597">Se il tipo è stato trovato ma non può essere caricato, ad esempio un <xref:System.TypeLoadException> viene generata anche se `throwOnError` è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2597">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-2598">La tabella seguente mostra quali vengono restituiti dai membri di una classe di base di `Get` metodi durante la reflection su un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2598">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="9fb9c-2599">Tipo di membro</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2599">Member Type</span></span>|<span data-ttu-id="9fb9c-2600">Static</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2600">Static</span></span>|<span data-ttu-id="9fb9c-2601">Non statico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2601">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="9fb9c-2602">Costruttore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2602">Constructor</span></span>|<span data-ttu-id="9fb9c-2603">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2603">No</span></span>|<span data-ttu-id="9fb9c-2604">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2604">No</span></span>|  
|<span data-ttu-id="9fb9c-2605">Campo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2605">Field</span></span>|<span data-ttu-id="9fb9c-2606">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2606">No</span></span>|<span data-ttu-id="9fb9c-2607">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2607">Yes.</span></span> <span data-ttu-id="9fb9c-2608">Un campo è sempre Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2608">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2609">event</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2609">Event</span></span>|<span data-ttu-id="9fb9c-2610">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2610">Not applicable</span></span>|<span data-ttu-id="9fb9c-2611">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2611">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2612">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2612">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2613">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2613">See note 2 below.</span></span>|  
|<span data-ttu-id="9fb9c-2614">Metodo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2614">Method</span></span>|<span data-ttu-id="9fb9c-2615">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2615">No</span></span>|<span data-ttu-id="9fb9c-2616">Sì.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2616">Yes.</span></span> <span data-ttu-id="9fb9c-2617">Un metodo (virtuale e non virtuale) può essere hide-by-name o Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2617">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="9fb9c-2618">Tipo annidato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2618">Nested Type</span></span>|<span data-ttu-id="9fb9c-2619">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2619">No</span></span>|<span data-ttu-id="9fb9c-2620">No</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2620">No</span></span>|  
|<span data-ttu-id="9fb9c-2621">Proprietà</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2621">Property</span></span>|<span data-ttu-id="9fb9c-2622">Non applicabile</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2622">Not applicable</span></span>|<span data-ttu-id="9fb9c-2623">La regola di sistema di tipo comune è che l'ereditarietà è uguale a quello dei metodi che implementa la proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2623">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="9fb9c-2624">La reflection gestisce proprietà come Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2624">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2625">Vedere la nota 2 di seguito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2625">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="9fb9c-2626">Nascondi in base al nome e-firma prende in considerazione tutte le parti della firma, compresi i modificatori personalizzati, restituire tipi, tipi di parametri, elementi sentinel e convenzioni di chiamata non gestite.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2626">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="9fb9c-2627">Si tratta di un confronto binario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2627">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="9fb9c-2628">Per la reflection, proprietà ed eventi sono Nascondi in base al nome e-firma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2628">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="9fb9c-2629">Se si dispone di una proprietà con sia un'operazione get e set nella classe base, ma la classe derivata contiene solo una funzione di accesso get, la proprietà della classe derivata nasconde la proprietà di classe di base e non sarà in grado di accedere il setter sulla classe di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2629">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="9fb9c-2630">Attributi personalizzati non fanno parte di common type system.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2630">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="9fb9c-2631">Le matrici o tipi COM non vengono cercati a meno che non sono già stati caricati nella tabella delle classi disponibili.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2631">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="9fb9c-2632">`typeName` può essere il nome del tipo qualificato dal relativo spazio dei nomi o un nome completo dell'assembly che include una specifica di nome di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2632">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="9fb9c-2633">Vedere <xref:System.Type.AssemblyQualifiedName%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2633">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-2634">Se `typeName` include lo spazio dei nomi ma non il nome dell'assembly, questo metodo cerca solo assembly dell'oggetto chiamante e mscorlib. dll, nell'ordine.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2634">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="9fb9c-2635">Se typeName è un nome completo con il nome parziale o completo dell'assembly, questo metodo cerca nell'assembly specificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2635">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="9fb9c-2636">Se l'assembly dispone di un nome sicuro, è necessario un nome di assembly completo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2636">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="9fb9c-2637">Il <xref:System.Type.AssemblyQualifiedName%2A> proprietà restituisce un nome completo del tipo, inclusi i tipi annidati, il nome dell'assembly e gli argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2637">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="9fb9c-2638">Tutti i compilatori che supportano common language runtime creeranno il nome semplice di una classe annidata, e reflection quando richiesta, in conformità con le seguenti convenzioni di un nome alterato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2638">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2639">In .NET Framework versione 2.0, l'architettura del processore viene aggiunto all'identità dell'assembly e può essere specificato come parte di stringhe di nomi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2639">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="9fb9c-2640">Ad esempio, "ProcessorArchitecture = msil".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2640">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="9fb9c-2641">Tuttavia, non è incluso nella stringa restituita dal <xref:System.Type.AssemblyQualifiedName%2A> proprietà, per motivi di compatibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2641">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="9fb9c-2642">È inoltre possibile caricare tipi creando un <xref:System.Reflection.AssemblyName> oggetto e passarlo a un overload appropriato del <xref:System.Reflection.Assembly.Load%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2642">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="9fb9c-2643">È quindi possibile utilizzare il <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> per caricare i tipi dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2643">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="9fb9c-2644">Vedere anche <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2644">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="9fb9c-2645">delimitatore</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2645">Delimiter</span></span>|<span data-ttu-id="9fb9c-2646">Significato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2646">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9fb9c-2647">Barra rovesciata (\\)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2647">Backslash (\\)</span></span>|<span data-ttu-id="9fb9c-2648">Carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2648">Escape character.</span></span>|  
|<span data-ttu-id="9fb9c-2649">Apice inverso (')</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2649">Backtick (\`)</span></span>|<span data-ttu-id="9fb9c-2650">Precede una o più cifre che rappresenta il numero di parametri di tipo, alla fine del nome di un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2650">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="9fb9c-2651">parentesi quadre ([])</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2651">Brackets ([])</span></span>|<span data-ttu-id="9fb9c-2652">Racchiudere un elenco di argomenti di tipo generico, per un tipo generico costruito. all'interno di un elenco di argomenti, racchiudere un tipo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2652">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="9fb9c-2653">Comma (,)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2653">Comma (,)</span></span>|<span data-ttu-id="9fb9c-2654">Precede il nome dell'Assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2654">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="9fb9c-2655">Punto (.)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2655">Period (.)</span></span>|<span data-ttu-id="9fb9c-2656">Indica gli identificatori dello spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2656">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="9fb9c-2657">Segno più (+)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2657">Plus sign (+)</span></span>|<span data-ttu-id="9fb9c-2658">Precede una classe annidata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2658">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="9fb9c-2659">Il nome completo per una classe, ad esempio, potrebbe essere simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2659">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2660">Se lo spazio dei nomi sono stati TopNamespace.Sub+Namespace, quindi la stringa sarebbe necessario anteporre il segno più (+) con un carattere di escape (\\) per evitare che venga interpretato come un separatore di annidamento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2660">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="9fb9c-2661">Reflection genera questa stringa, come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2661">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="9fb9c-2662">A "+" diventa "\\+\\+" e un "\\"diventa"\\\\".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2662">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="9fb9c-2663">Questo nome completo può essere persistente e successivamente utilizzato per caricare il <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2663">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="9fb9c-2664">Per cercare e caricare un <xref:System.Type>, utilizzare <xref:System.Type.GetType%2A> o con il tipo di nome solo oppure con il nome di tipo completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2664">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="9fb9c-2665"><xref:System.Type.GetType%2A> con il tipo di nome solo cercherà il <xref:System.Type> nell'assembly del chiamante, quindi nell'assembly System.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2665"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="9fb9c-2666"><xref:System.Type.GetType%2A> con l'assembly completo del tipo cercherà il <xref:System.Type> in qualsiasi assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2666"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="9fb9c-2667">I nomi dei tipi possono includere caratteri finali che indicano informazioni aggiuntive sul tipo, ad esempio se il tipo è un tipo riferimento, un tipo di puntatore o un tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2667">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="9fb9c-2668">Per recuperare il nome del tipo senza caratteri finali, utilizzare `t.GetElementType().ToString()`, dove `t` è il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2668">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="9fb9c-2669">Gli spazi sono rilevanti in tutti i componenti di nome di tipo tranne il nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2669">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="9fb9c-2670">Il nome di assembly, spazi che precedono il separatore ',' sono rilevanti, ma gli spazi dopo il separatore ',' vengono ignorati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2670">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-2671">Il nome di un tipo generico termina con un apice inverso (\`) seguito da cifre che rappresenta il numero di argomenti di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2671">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="9fb9c-2672">Lo scopo di questo tipo di modifica dei nomi è consentire ai compilatori di supportare i tipi generici con lo stesso nome ma con un numero diverso di parametri di tipo, che si verificano nello stesso ambito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2672">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="9fb9c-2673">Ad esempio, la reflection restituisce i nomi alterati `Tuple`1` and `tupla`2` uno dei metodi generici `Tuple(Of T)` e `Tuple(Of T0, T1)` in Visual Basic o `Tuple<T>` tupla e`\<T0, T1>` in Visual c#.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2673">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="9fb9c-2674">Per i tipi generici, l'elenco di argomenti di tipo è racchiuso tra parentesi e gli argomenti di tipo sono separati da virgole.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2674">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="9fb9c-2675">Ad esempio, un oggetto generico <xref:System.Collections.Generic.Dictionary%602> presenta due parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2675">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="9fb9c-2676">Oggetto <xref:System.Collections.Generic.Dictionary%602> di `MyType` con chiavi di tipo <xref:System.String> potrebbe essere rappresentato nel modo seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2676">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="9fb9c-2677">Per specificare un tipo qualificato dall'assembly all'interno di un elenco di argomenti, racchiudere il tipo completo dell'assembly all'interno di parentesi quadre.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2677">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="9fb9c-2678">In caso contrario, le virgole per separare le parti del nome completo dell'assembly vengono interpretate come delimitatori ulteriori argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2678">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="9fb9c-2679">Ad esempio, un <xref:System.Collections.Generic.Dictionary%602> di `MyType` da MyAssembly. dll, con chiavi di tipo <xref:System.String>, può essere specificato come indicato di seguito:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2679">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2680">Un tipo qualificato dall'assembly può essere racchiuso tra parentesi quadre solo quando viene visualizzato all'interno di un elenco di parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2680">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="9fb9c-2681">Le regole per la ricerca di assembly per i tipi completi e non qualificati in elenchi di parametri di tipo sono come le regole per i tipi non generici non qualificati e completi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2681">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="9fb9c-2682">Tipi nullable sono un tipo speciale di tipi generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2682">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="9fb9c-2683">Ad esempio, un valore nullable <xref:System.Int32> è rappresentato dalla stringa "System.Nullable'1[System.Int32]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2683">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2684">In c#, C++ e Visual Basic è inoltre possibile ottenere i tipi nullable che utilizzano operatori di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2684">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="9fb9c-2685">Ad esempio, il valore nullable <xref:System.Boolean> tipo restituito dal `typeof(Nullable<bool>)` in c#, da `Nullable<Boolean>::typeid` in C++ e da `GetType(Nullable(Of Boolean))` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2685">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="9fb9c-2686">La tabella seguente illustra la sintassi da utilizzare con `GetType` per vari tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2686">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="9fb9c-2687">Per ottenere</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2687">To Get</span></span>|<span data-ttu-id="9fb9c-2688">Usa</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2688">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="9fb9c-2689">Un valore nullable <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="9fb9c-2689">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="9fb9c-2690">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2690">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2691">Un puntatore non gestito a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2691">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="9fb9c-2692">Un puntatore non gestito a un puntatore a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2692">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="9fb9c-2693">Un puntatore gestito o un riferimento a `MyType`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2693">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="9fb9c-2694">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2694">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="9fb9c-2695">Si noti che, a differenza dei puntatori, i riferimenti sono limitati a un solo livello.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2695">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="9fb9c-2696">Una classe padre e una classe annidata</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2696">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="9fb9c-2697">Una matrice unidimensionale con limite inferiore pari a 0</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2697">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="9fb9c-2698">Una matrice unidimensionale con limite inferiore sconosciuto</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2698">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="9fb9c-2699">Una matrice di n-dimensionale</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2699">An n-dimensional array</span></span>|<span data-ttu-id="9fb9c-2700">Una virgola (,) all'interno delle parentesi un totale di volte in cui n-1.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2700">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="9fb9c-2701">Ad esempio, `System.Object[,,]` rappresenta un oggetto tridimensionale `Object` matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2701">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="9fb9c-2702">Una matrice bidimensionale</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2702">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="9fb9c-2703">Una matrice bidimensionale rettangolare con limiti inferiori sconosciuti</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2703">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="9fb9c-2704">Un tipo generico con un argomento di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2704">A generic type with one type argument</span></span>|<span data-ttu-id="9fb9c-2705">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2705">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2706">Un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2706">A generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2707">`Type.GetType("MyGenericType`2[MyType,AnotherType]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2707">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2708">Un tipo generico con due argomenti di tipo qualificato dall'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2708">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="9fb9c-2709">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2709">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="9fb9c-2710">Un tipo generico con un argomento di tipo qualificato dall'assembly completo dell'assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2710">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="9fb9c-2711">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")'</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2711">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="9fb9c-2712">Un tipo generico il cui argomento di tipo è un tipo generico con due argomenti di tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2712">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="9fb9c-2713">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2713">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2714">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2714">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2715">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2715">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2716">
            <paramref name="throwOnError" /> è <see langword="true" /> e il tipo non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2716">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-2717">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2717">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2718">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene caratteri non validi, ad esempio una scheda incorporata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2718">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="9fb9c-2719">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2719">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2720">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2720">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="9fb9c-2721">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2721">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2722">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> rappresenta un tipo di matrice con una dimensione non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2722">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="9fb9c-2723">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2723">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2724">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2724">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2725">
            <paramref name="throwOnError" /> è <see langword="true" /> e la sintassi di <paramref name="typeName" /> non è valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2725">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="9fb9c-2726">Ad esempio: "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2726">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="9fb9c-2727">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2727">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2728">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2728">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2729">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2729">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2730">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2730">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2731">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2731">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2732">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2732">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9fb9c-2733">
            <paramref name="throwOnError" /> è <see langword="true" /> e l'assembly o una delle sue dipendenze non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2733">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="9fb9c-2734">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2734">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-2735">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2735">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-2736">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2736">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2737">Attualmente è caricata la versione 2.0 o successiva di Common Language Runtime e l'assembly è stato compilato con una versione successiva.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2737">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2738">Nome del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2738">The name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2739">Se viene specificato il parametro <c>typeResolver</c>, il nome del tipo può essere qualsiasi stringa che <c>typeResolver</c> è in grado di risolvere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2739">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="9fb9c-2740">Se viene specificato il parametro <c>assemblyResolver</c> o viene usata la risoluzione del tipo standard, <c>typeName</c> deve essere un nome qualificato dall'assembly (vedere <see cref="P:System.Type.AssemblyQualifiedName" />), a meno che il tipo non si trovi nell'assembly attualmente in esecuzione o in Mscorlib.dll, nel qual caso è sufficiente indicare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2740">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="9fb9c-2741">Metodo che individua e restituisce l'assembly specificato in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2741">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="9fb9c-2742">Il nome dell'assembly viene passato ad <c>assemblyResolver</c> come oggetto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2742">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="9fb9c-2743">Se <c>typeName</c> non contiene il nome di un assembly, <c>assemblyResolver</c> non viene chiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2743">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="9fb9c-2744">Se non si specifica <c>assemblyResolver</c>, viene eseguita la risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2744">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="9fb9c-2745">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2745">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="9fb9c-2746">In caso contrario, potrebbe verificarsi un'elevazione di privilegi per codice dannoso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2746">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="9fb9c-2747">Usare solo i metodi forniti o con cui si ha dimestichezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2747">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="9fb9c-2748">Metodo che individua e restituisce il tipo specificato da <c>typeName</c> dall'assembly restituito da <c>assemblyResolver</c> o dalla risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2748">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="9fb9c-2749">Se non viene indicato alcun assembly, il metodo <c>typeResolver</c> può specificarne uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2749">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="9fb9c-2750">Il metodo accetta inoltre un parametro che specifica se eseguire una ricerca senza fare distinzione tra maiuscole e minuscole. <see langword="false" /> viene passato al parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2750">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-2751">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2751">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2752">Ottiene il tipo con il nome specificato, fornendo facoltativamente metodi personalizzati per risolvere l'assembly e il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2752">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2753">Tipo con il nome specificato, oppure <see langword="null" /> se il tipo non viene trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2753">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2754">Gli scenari di questo metodo e i dettagli sull'utilizzo di `assemblyResolver` e `typeResolver` parametri possono essere trovati nel <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2754">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2755">Se `typeName` non viene trovato, la chiamata al <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2755">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="9fb9c-2756">Non generare un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2756">It does not throw an exception.</span></span> <span data-ttu-id="9fb9c-2757">Per controllare se viene generata un'eccezione, chiamare l'overload del metodo di <xref:System.Type.GetType%2A> metodo che presenta un `throwOnError` parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2757">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-2758">Chiamare questo overload del metodo corrisponde al chiamante di <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo e specificando `false` per il `throwOnError` e `ignoreCase` parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2758">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2759">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2759">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2760">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2760">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2761">Si verifica un errore quando <paramref name="typeName" /> viene analizzato in un nome del tipo e un nome dell'assembly (ad esempio, quando il nome del tipo semplice include un carattere speciale senza codice di escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2761">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="9fb9c-2762">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2762">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2763">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2763">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2764">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2764">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2765">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2765">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2766">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2766">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2767">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2767">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2768">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2768">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="9fb9c-2769">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2769">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="9fb9c-2770">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2770">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2771">
            <paramref name="typeName" /> contiene un nome dell'assembly non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2771">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="9fb9c-2772">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2772">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2773">
            <paramref name="typeName" /> è un nome dell'assembly valido senza un nome di tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2773">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-2774">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2774">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-2775">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2775">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2776">L'assembly è stato compilato con una versione successiva di Common Language Runtime rispetto alla versione attualmente caricata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2776">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2777">Nome del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2777">The name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2778">Se viene specificato il parametro <c>typeResolver</c>, il nome del tipo può essere qualsiasi stringa che <c>typeResolver</c> è in grado di risolvere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2778">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="9fb9c-2779">Se viene specificato il parametro <c>assemblyResolver</c> o viene usata la risoluzione del tipo standard, <c>typeName</c> deve essere un nome qualificato dall'assembly (vedere <see cref="P:System.Type.AssemblyQualifiedName" />), a meno che il tipo non si trovi nell'assembly attualmente in esecuzione o in Mscorlib.dll, nel qual caso è sufficiente indicare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2779">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="9fb9c-2780">Metodo che individua e restituisce l'assembly specificato in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2780">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="9fb9c-2781">Il nome dell'assembly viene passato ad <c>assemblyResolver</c> come oggetto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2781">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="9fb9c-2782">Se <c>typeName</c> non contiene il nome di un assembly, <c>assemblyResolver</c> non viene chiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2782">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="9fb9c-2783">Se non si specifica <c>assemblyResolver</c>, viene eseguita la risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2783">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="9fb9c-2784">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2784">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="9fb9c-2785">In caso contrario, potrebbe verificarsi un'elevazione di privilegi per codice dannoso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2785">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="9fb9c-2786">Usare solo i metodi forniti o con cui si ha dimestichezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2786">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="9fb9c-2787">Metodo che individua e restituisce il tipo specificato da <c>typeName</c> dall'assembly restituito da <c>assemblyResolver</c> o dalla risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2787">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="9fb9c-2788">Se non viene fornito alcun assembly, il metodo può fornirne uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2788">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="9fb9c-2789">Il metodo accetta inoltre un parametro che specifica se eseguire una ricerca senza fare distinzione tra maiuscole e minuscole. <see langword="false" /> viene passato al parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2789">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-2790">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2790">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-2791">
            <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; <see langword="false" /> per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2791">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2792">Se si specifica <see langword="false" /> vengono eliminate alcune condizioni di eccezione, ma non tutte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2792">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="9fb9c-2793">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2793">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2794">Ottiene il tipo con il nome specificato, indicando se generare un'eccezione se il tipo non viene trovato e fornendo facoltativamente metodi personalizzati per risolvere l'assembly e il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2794">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2795">Tipo con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2795">The type with the specified name.</span>
          </span>
          <span data-ttu-id="9fb9c-2796">Se il tipo non viene trovato, il parametro <paramref name="throwOnError" /> specifica se viene restituito <see langword="null" /> o se viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2796">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="9fb9c-2797">In alcuni casi, viene generata un'eccezione indipendentemente dal valore di <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2797">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2798">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2798">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2799">Gli scenari di questo metodo e i dettagli sull'utilizzo di `assemblyResolver` e `typeResolver` parametri possono essere trovati nel <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2799">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="9fb9c-2800">Chiamare questo overload del metodo corrisponde al chiamante di <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo e specificando `false` per il `ignoreCase` parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2800">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2801">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2801">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2802">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2802">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2803">
            <paramref name="throwOnError" /> è <see langword="true" /> e il tipo non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2803">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-2804">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2804">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2805">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene caratteri non validi, ad esempio una scheda incorporata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2805">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="9fb9c-2806">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2806">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2807">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2807">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="9fb9c-2808">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2808">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2809">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> rappresenta un tipo di matrice con una dimensione non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2809">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="9fb9c-2810">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2810">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2811">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2811">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-2812">Si verifica un errore quando <paramref name="typeName" /> viene analizzato in un nome del tipo e un nome dell'assembly (ad esempio, quando il nome del tipo semplice include un carattere speciale senza codice di escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2812">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="9fb9c-2813">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2813">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2814">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene sintassi non valida (ad esempio, "MyType [,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2814">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="9fb9c-2815">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2815">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2816">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2816">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2817">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2817">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2818">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2818">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-2819">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2819">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2820">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2820">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9fb9c-2821">
            <paramref name="throwOnError" /> è <see langword="true" /> e l'assembly o una delle sue dipendenze non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2821">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="9fb9c-2822">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2822">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2823">
            <paramref name="typeName" /> contiene un nome dell'assembly non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2823">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="9fb9c-2824">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2824">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2825">
            <paramref name="typeName" /> è un nome dell'assembly valido senza un nome di tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2825">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="9fb9c-2826">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2826">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-2827">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2827">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-2828">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2828">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2829">L'assembly è stato compilato con una versione successiva di Common Language Runtime rispetto alla versione attualmente caricata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2829">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-2830">Nome del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2830">The name of the type to get.</span>
          </span>
          <span data-ttu-id="9fb9c-2831">Se viene specificato il parametro <c>typeResolver</c>, il nome del tipo può essere qualsiasi stringa che <c>typeResolver</c> è in grado di risolvere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2831">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="9fb9c-2832">Se viene specificato il parametro <c>assemblyResolver</c> o viene usata la risoluzione del tipo standard, <c>typeName</c> deve essere un nome qualificato dall'assembly (vedere <see cref="P:System.Type.AssemblyQualifiedName" />), a meno che il tipo non si trovi nell'assembly attualmente in esecuzione o in Mscorlib.dll, nel qual caso è sufficiente indicare il nome del tipo qualificato in base al relativo spazio dei nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2832">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="9fb9c-2833">Metodo che individua e restituisce l'assembly specificato in <c>typeName</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2833">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="9fb9c-2834">Il nome dell'assembly viene passato ad <c>assemblyResolver</c> come oggetto <see cref="T:System.Reflection.AssemblyName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2834">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="9fb9c-2835">Se <c>typeName</c> non contiene il nome di un assembly, <c>assemblyResolver</c> non viene chiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2835">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="9fb9c-2836">Se non si specifica <c>assemblyResolver</c>, viene eseguita la risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2836">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="9fb9c-2837">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2837">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="9fb9c-2838">In caso contrario, potrebbe verificarsi un'elevazione di privilegi per codice dannoso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2838">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="9fb9c-2839">Usare solo i metodi forniti o con cui si ha dimestichezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2839">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="9fb9c-2840">Metodo che individua e restituisce il tipo specificato da <c>typeName</c> dall'assembly restituito da <c>assemblyResolver</c> o dalla risoluzione dell'assembly standard.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2840">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="9fb9c-2841">Se non viene fornito alcun assembly, il metodo può fornirne uno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2841">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="9fb9c-2842">Il metodo accetta inoltre un parametro che specifica se eseguire una ricerca senza fare distinzione tra maiuscole e minuscole. Il valore di <c>ignoreCase</c> viene passato a quel parametro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2842">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="9fb9c-2843">Attenzione   Non passare metodi da chiamanti non noti o non attendibili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2843">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-2844">
            <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; <see langword="false" /> per restituire <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2844">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2845">Se si specifica <see langword="false" /> vengono eliminate alcune condizioni di eccezione, ma non tutte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2845">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="9fb9c-2846">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2846">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9fb9c-2847">
            <see langword="true" /> per eseguire una ricerca di <c>typeName</c> senza distinzione tra maiuscole e minuscole, <see langword="false" /> per eseguire una ricerca di <c>typeName</c> con distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2847">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-2848">Ottiene il tipo con il nome specificato, indicando se eseguire una ricerca facendo distinzione tra maiuscole e minuscole e se generare un'eccezione se il tipo non viene trovato e fornendo facoltativamente metodi personalizzati per risolvere l'assembly e il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2848">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-2849">Tipo con il nome specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2849">The type with the specified name.</span>
          </span>
          <span data-ttu-id="9fb9c-2850">Se il tipo non viene trovato, il parametro <paramref name="throwOnError" /> specifica se viene restituito <see langword="null" /> o se viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2850">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="9fb9c-2851">In alcuni casi, viene generata un'eccezione indipendentemente dal valore di <paramref name="throwOnError" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2851">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="9fb9c-2852">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2852">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-2853">Utilizzare questo overload del metodo e gli overload associati (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> e <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) per sostituire l'implementazione predefinita del <xref:System.Type.GetType%2A> (metodo) con implementazioni più flessibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2853">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="9fb9c-2854">Fornendo i propri metodi di cui risolvere i nomi dei tipi e i nomi degli assembly che li contengono, è possibile eseguire le operazioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2854">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="9fb9c-2855">Controllare la versione di un assembly con un tipo viene caricato da.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2855">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="9fb9c-2856">Fornire un'altra posizione per cercare un nome di tipo che non include un nome di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2856">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="9fb9c-2857">Caricare gli assembly con nomi di assembly parziali.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2857">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="9fb9c-2858">Restituire le sottoclassi di <xref:System.Type?displayProperty=nameWithType> che non vengono creati da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2858">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="9fb9c-2859">Ad esempio, di serializzazione a tolleranza di versione questo metodo consente di cercare un assembly con nome "adatta" con un nome parziale.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2859">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="9fb9c-2860">Altri overload di <xref:System.Type.GetType%2A> metodo richiede un nome di tipo qualificato dall'assembly, che include il numero di versione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2860">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="9fb9c-2861">Potrebbe essere necessario implementazioni alternative del sistema di tipi restituire le sottoclassi di <xref:System.Type?displayProperty=nameWithType> che non vengono create da CLR, tutti i tipi che vengono restituiti da altri overload di <xref:System.Type.GetType%2A> metodo sono tipi di runtime.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2861">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="9fb9c-2862">Note sull'utilizzo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2862">Usage Notes</span></span>  
 <span data-ttu-id="9fb9c-2863">Questo overload del metodo e gli overload associati analizzano `typeName` nel nome di un tipo e il nome di un assembly e quindi la risoluzione dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2863">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="9fb9c-2864">Risoluzione del nome dell'assembly si verifica prima della risoluzione del nome del tipo, perché un nome di tipo deve essere risolto nel contesto di un assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2864">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2865">Se non si ha familiarità con il concetto di nomi di tipo qualificato dall'assembly, vedere il <xref:System.Type.AssemblyQualifiedName%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2865">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="9fb9c-2866">Se `typeName` non è un nome completo dell'assembly, la risoluzione dell'assembly viene ignorata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2866">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="9fb9c-2867">I nomi dei tipi non qualificati possono essere risolti nel contesto di mscorlib. dll o assembly attualmente in esecuzione o, facoltativamente, è possibile specificare un assembly nel `typeResolver` parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2867">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="9fb9c-2868">Gli effetti di inclusione o omettere il nome dell'assembly per tipi diversi di risoluzione dei nomi vengono visualizzati come una tabella di [Risoluzione mista](#mixed_name_resolution) sezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2868">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="9fb9c-2869">Note sull'utilizzo generale:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2869">General usage notes:</span></span>  
  
-   <span data-ttu-id="9fb9c-2870">Non passare metodi da `assemblyResolver` o `typeResolver` se provengono da chiamanti non noti o non attendibili.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2870">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="9fb9c-2871">Usare solo i metodi forniti o con cui si ha dimestichezza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2871">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="9fb9c-2872">Con i metodi da chiamanti non noti o non attendibili potrebbe causare l'elevazione dei privilegi per codice dannoso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2872">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="9fb9c-2873">Se si omette il `assemblyResolver` e/o `typeResolver` parametri, il valore della `throwOnError` parametro viene passato ai metodi che eseguono la risoluzione predefinita.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2873">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="9fb9c-2874">Se `throwOnError` è `true`, questo metodo genera un <xref:System.TypeLoadException> quando `typeResolver` restituisce `null`e un <xref:System.IO.FileNotFoundException> quando `assemblyResolver` restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2874">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="9fb9c-2875">Questo metodo non intercetta le eccezioni generate dalle `assemblyResolver` e `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2875">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="9fb9c-2876">Si è responsabili di eventuali eccezioni generate dai metodi di sistema di risoluzione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2876">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="9fb9c-2877">Risoluzione degli assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2877">Resolving Assemblies</span></span>  
 <span data-ttu-id="9fb9c-2878">Il `assemblyResolver` metodo riceve un <xref:System.Reflection.AssemblyName> oggetto, che viene generato analizzando il nome dell'assembly incluso nella stringa `typeName`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2878">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="9fb9c-2879">Se `typeName` non contiene un nome di assembly, `assemblyResolver` non viene chiamato e `null` viene passato a `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2879">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="9fb9c-2880">Se `assemblyResolver` non è fornito, standard di assembly di probe viene utilizzato per individuare l'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2880">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="9fb9c-2881">Se `assemblyResolver` viene fornito il <xref:System.Type.GetType%2A> metodo non esegue una ricerca standard; in tal caso è necessario assicurarsi che il `assemblyResolver` in grado di gestire tutti gli assembly vengono passati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2881">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="9fb9c-2882">Il `assemblyResolver` metodo dovrebbe restituire `null` se l'assembly non può essere risolto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2882">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="9fb9c-2883">Se `assemblyResolver` restituisce `null`, `typeResolver` non viene chiamato e si verifica alcuna ulteriore elaborazione; inoltre, se `throwOnError` è `true`, <xref:System.IO.FileNotFoundException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2883">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="9fb9c-2884">Se il <xref:System.Reflection.AssemblyName> che viene passata a `assemblyResolver` è un elemento parziale sono nome, uno o più delle relative parti `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2884">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="9fb9c-2885">Ad esempio, se dispone di alcuna versione, il <xref:System.Reflection.AssemblyName.Version%2A> proprietà `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2885">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="9fb9c-2886">Se il <xref:System.Reflection.AssemblyName.Version%2A> proprietà, il <xref:System.Reflection.AssemblyName.CultureInfo%2A> , proprietà e <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> metodo tutte restituito `null`, quindi solo il nome semplice dell'assembly è stato fornito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2886">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="9fb9c-2887">Il `assemblyResolver` metodo può usare o ignorare tutte le parti del nome dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2887">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="9fb9c-2888">Gli effetti delle opzioni di risoluzione assembly diversi vengono visualizzati come una tabella di [Risoluzione mista](#mixed_name_resolution) sezione, per i nomi di tipo semplice e completo di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2888">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="9fb9c-2889">Risoluzione dei tipi</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2889">Resolving Types</span></span>  
 <span data-ttu-id="9fb9c-2890">Se `typeName` non specifica un nome di assembly, `typeResolver` viene sempre chiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2890">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="9fb9c-2891">Se `typeName` specifica un nome di assembly, `typeResolver` viene chiamato solo quando il nome dell'assembly è stato risolto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2891">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="9fb9c-2892">Se `assemblyResolver` o dell'assembly standard restituisce `null`, `typeResolver` non viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2892">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="9fb9c-2893">Il `typeResolver` metodo riceve tre argomenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2893">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="9fb9c-2894">L'assembly da cercare o `null` se `typeName` non contiene un nome di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2894">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="9fb9c-2895">Il nome del tipo semplice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2895">The simple name of the type.</span></span> <span data-ttu-id="9fb9c-2896">Nel caso di un tipo annidato, questo è il tipo di contenitore più esterno.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2896">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="9fb9c-2897">Nel caso di un tipo generico, questo è il nome semplice di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2897">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="9fb9c-2898">Un valore booleano che è `true` se nel caso di nomi di tipo viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2898">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="9fb9c-2899">L'implementazione determina il modo in cui che vengono utilizzati questi argomenti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2899">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="9fb9c-2900">Il `typeResolver` metodo dovrebbe restituire `null` se risulta impossibile risolvere il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2900">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="9fb9c-2901">Se `typeResolver` restituisce `null` e `throwOnError` è `true`, questo overload di <xref:System.Type.GetType%2A> genera un <xref:System.TypeLoadException>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2901">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="9fb9c-2902">Gli effetti delle opzioni di risoluzione di diverso tipo vengono visualizzati come una tabella di [Risoluzione mista](#mixed_name_resolution) sezione, per i nomi di tipo semplice e completo di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2902">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="9fb9c-2903">Risoluzione dei tipi annidati</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2903">Resolving Nested Types</span></span>  
 <span data-ttu-id="9fb9c-2904">Se `typeName` è un tipo annidato, solo il nome del contenuto più esterno contenente il tipo viene passato a `typeResolver`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2904">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="9fb9c-2905">Quando `typeResolver` restituisce questo tipo, il <xref:System.Type.GetNestedType%2A> metodo viene chiamato in modo ricorsivo fino a quando il tipo annidato più interno è stato risolto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2905">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="9fb9c-2906">Risoluzione di tipi generici</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2906">Resolving Generic Types</span></span>  
 <span data-ttu-id="9fb9c-2907">Il <xref:System.Type.GetType%2A> viene chiamato in modo ricorsivo per risolvere i tipi generici: per risolvere il tipo generico stesso e quindi di risolvere i relativi argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2907">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="9fb9c-2908">Se un argomento di tipo è generico, <xref:System.Type.GetType%2A> viene chiamato in modo ricorsivo per risolvere i relativi argomenti di tipo e così via.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2908">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="9fb9c-2909">La combinazione di `assemblyResolver` e `typeResolver` forniti deve essere in grado di risolvere tutti i livelli di questo tipo di ricorsione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2909">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="9fb9c-2910">Ad esempio, si supponga di fornire un `assemblyResolver` che controlla il caricamento di `MyAssembly`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2910">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="9fb9c-2911">Si supponga che si desidera risolvere il tipo generico `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2911">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-2912">È possibile passare il nome di tipo generico seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2912">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="9fb9c-2913">Si noti che `MyType` è l'argomento di tipo solo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2913">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="9fb9c-2914">I nomi del <xref:System.Collections.Generic.Dictionary%602> e <xref:System.String> classi non sono completi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2914">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="9fb9c-2915">Il `typeResolver` deve essere in grado di gestire un assembly o `null`, perché riceverà `null` per <xref:System.Collections.Generic.Dictionary%602> e <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2915">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="9fb9c-2916">È possibile gestire tale caso chiamando un overload di <xref:System.Type.GetType%2A> metodo che accetta una stringa, poiché entrambi i nomi dei tipi non qualificati sono in mscorlib. dll:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2916">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="9fb9c-2917">Il `assemblyResolver` metodo non viene chiamato per il tipo di dizionario e il tipo di stringa, perché i nomi di tipo non sono completi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2917">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="9fb9c-2918">Si supponga ora che invece di `System.String`, il primo tipo di argomento generico è `YourType`, da `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2918">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="9fb9c-2919">Poiché questo assembly è mscorlib né nell'assembly attualmente in esecuzione, è possibile risolvere `YourType` senza un nome completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2919">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="9fb9c-2920">Poiché il `assemblyResolve` sarà chiamato in modo ricorsivo, deve essere in grado di gestire questa situazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2920">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="9fb9c-2921">Anziché restituire `null` per gli assembly diverso da `MyAssembly`, esegue il caricamento di un assembly utilizzando l'interfaccia fornita <xref:System.Reflection.AssemblyName> oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2921">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="9fb9c-2922">Torna alla [note sull'utilizzo](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2922">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="9fb9c-2923">Risoluzione dei nomi di tipo con caratteri speciali</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2923">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="9fb9c-2924">Alcuni caratteri hanno significati speciali nei nomi completi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2924">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="9fb9c-2925">Se un nome di tipo semplice contiene questi caratteri, i caratteri provocano errori di analisi quando il nome semplice fa parte di un nome completo dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2925">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="9fb9c-2926">Per evitare gli errori di analisi, è necessario eseguire l'escape dei caratteri speciali con una barra rovesciata prima di poter passare il nome completo dell'assembly per il <xref:System.Type.GetType%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2926">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="9fb9c-2927">Ad esempio, se un tipo è denominato `Strange]Type`, il carattere di escape deve essere aggiunto prima la parentesi quadra come segue: `Strange\]Type`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2927">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-2928">I nomi con caratteri speciali non possono essere creati in Visual Basic o c#, ma possono essere creati utilizzando Microsoft intermediate language (MSIL) o creazione di assembly dinamici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2928">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="9fb9c-2929">Nella tabella seguente mostra i caratteri speciali per i nomi dei tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2929">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="9fb9c-2930">Carattere</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2930">Character</span></span>|<span data-ttu-id="9fb9c-2931">Significato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2931">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="9fb9c-2932">`,` (virgola)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2932">`,` (comma)</span></span>|<span data-ttu-id="9fb9c-2933">Delimitatore per i nomi completi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2933">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="9fb9c-2934">`[]` (le parentesi quadre)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2934">`[]` (square brackets)</span></span>|<span data-ttu-id="9fb9c-2935">Come una coppia di suffisso, indica un tipo di matrice. come una coppia di delimitatori racchiude elenchi di argomenti generici e nomi completi di assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2935">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="9fb9c-2936">`&` e commerciale (&)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2936">`&` (ampersand)</span></span>|<span data-ttu-id="9fb9c-2937">Come un suffisso, indica che un tipo è un tipo di riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2937">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="9fb9c-2938">`*` (asterisco)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2938">`*` (asterisk)</span></span>|<span data-ttu-id="9fb9c-2939">Come un suffisso, indica che un tipo è un tipo di puntatore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2939">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="9fb9c-2940">`+` (più)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2940">`+` (plus)</span></span>|<span data-ttu-id="9fb9c-2941">Delimitatore per i tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2941">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="9fb9c-2942">`\` (barra rovesciata)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2942">`\` (backslash)</span></span>|<span data-ttu-id="9fb9c-2943">Carattere di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2943">Escape character.</span></span>|  
  
 <span data-ttu-id="9fb9c-2944">Proprietà, ad esempio <xref:System.Type.AssemblyQualifiedName%2A> restituito corretto carattere di escape stringhe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2944">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="9fb9c-2945">È necessario passare stringhe con caratteri di escape in modo corretto per il <xref:System.Type.GetType%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2945">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="9fb9c-2946">A sua volta, il <xref:System.Type.GetType%2A> metodo passa i nomi correttamente forzati a `typeResolver` e per i metodi di risoluzione del tipo predefinito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2946">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="9fb9c-2947">Se è necessario confrontare un nome a un nome senza caratteri escape in `typeResolver`, è necessario rimuovere i caratteri di escape.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2947">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="9fb9c-2948">Torna alla [note sull'utilizzo](#usage_notes).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2948">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="9fb9c-2949">Risoluzione dei nomi misto</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2949">Mixed Name Resolution</span></span>  
 <span data-ttu-id="9fb9c-2950">Nella tabella seguente sono riepilogate le interazioni tra `assemblyResolver`, `typeResolver`e la risoluzione dei nomi predefinito per tutte le combinazioni di nome del tipo e assembly in `typeName`:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2950">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="9fb9c-2951">Contenuto del nome del tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2951">Contents of type name</span></span>|<span data-ttu-id="9fb9c-2952">Metodo resolver degli assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2952">Assembly resolver method</span></span>|<span data-ttu-id="9fb9c-2953">Metodo con tipo di sistema di risoluzione</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2953">Type resolver method</span></span>|<span data-ttu-id="9fb9c-2954">Risultato</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2954">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="9fb9c-2955">tipo di assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2955">type, assembly</span></span>|<span data-ttu-id="9fb9c-2956">Null</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2956">null</span></span>|<span data-ttu-id="9fb9c-2957">Null</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2957">null</span></span>|<span data-ttu-id="9fb9c-2958">Equivale a chiamare il <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2958">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="9fb9c-2959">tipo di assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2959">type, assembly</span></span>|<span data-ttu-id="9fb9c-2960">fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2960">provided</span></span>|<span data-ttu-id="9fb9c-2961">Null</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2961">null</span></span>|<span data-ttu-id="9fb9c-2962">`assemblyResolver` Restituisce l'assembly oppure `null` se risulta impossibile risolvere l'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2962">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="9fb9c-2963">Se l'assembly viene risolto, il <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> overload del metodo viene utilizzato per caricare il tipo dell'assembly; in caso contrario, non viene eseguito alcun tentativo per risolvere il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2963">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9fb9c-2964">tipo di assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2964">type, assembly</span></span>|<span data-ttu-id="9fb9c-2965">Null</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2965">null</span></span>|<span data-ttu-id="9fb9c-2966">fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2966">provided</span></span>|<span data-ttu-id="9fb9c-2967">Equivale alla conversione il nome dell'assembly in un <xref:System.Reflection.AssemblyName> oggetto e la chiamata di <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> overload del metodo per ottenere l'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2967">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="9fb9c-2968">Se l'assembly viene risolto, viene passato a `typeResolver`; in caso contrario, `typeResolver` non viene chiamato e non esiste nessun ulteriore tentativo di risolvere il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2968">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9fb9c-2969">tipo di assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2969">type, assembly</span></span>|<span data-ttu-id="9fb9c-2970">fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2970">provided</span></span>|<span data-ttu-id="9fb9c-2971">fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2971">provided</span></span>|<span data-ttu-id="9fb9c-2972">`assemblyResolver` Restituisce l'assembly oppure `null` se risulta impossibile risolvere l'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2972">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="9fb9c-2973">Se l'assembly viene risolto, viene passato a `typeResolver`; in caso contrario, `typeResolver` non viene chiamato e non esiste nessun ulteriore tentativo di risolvere il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2973">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="9fb9c-2974">tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2974">type</span></span>|<span data-ttu-id="9fb9c-2975">null, fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2975">null, provided</span></span>|<span data-ttu-id="9fb9c-2976">Null</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2976">null</span></span>|<span data-ttu-id="9fb9c-2977">Equivale a chiamare il <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2977">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="9fb9c-2978">Poiché il nome dell'assembly non viene fornito, viene effettuata la ricerca solo mscorlib. dll e assembly attualmente in esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2978">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="9fb9c-2979">Se `assemblyResolver` viene fornito, viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2979">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="9fb9c-2980">tipo</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2980">type</span></span>|<span data-ttu-id="9fb9c-2981">null, fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2981">null, provided</span></span>|<span data-ttu-id="9fb9c-2982">fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2982">provided</span></span>|<span data-ttu-id="9fb9c-2983">`typeResolver` viene chiamato e `null` viene passato per l'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2983">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="9fb9c-2984">`typeResolver` può fornire un tipo da qualsiasi assembly, inclusi gli assembly caricati per lo scopo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2984">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="9fb9c-2985">Se `assemblyResolver` viene fornito, viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2985">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="9fb9c-2986">assembly</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2986">assembly</span></span>|<span data-ttu-id="9fb9c-2987">null, fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2987">null, provided</span></span>|<span data-ttu-id="9fb9c-2988">null, fornito</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2988">null, provided</span></span>|<span data-ttu-id="9fb9c-2989">Oggetto <xref:System.IO.FileLoadException> viene generata, perché il nome dell'assembly viene analizzato come se fosse un nome di tipo qualificato dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2989">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="9fb9c-2990">Ciò comporta un nome di assembly non valido.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2990">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="9fb9c-2991">Torna alla: [note sull'utilizzo](#usage_notes), [risoluzione degli assembly](#resolving_assemblies), [la risoluzione dei tipi](#resolving_types).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-2991">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-2992">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2992">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-2993">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2993">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-2994">
            <paramref name="throwOnError" /> è <see langword="true" /> e il tipo non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2994">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-2995">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2995">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2996">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene caratteri non validi, ad esempio una scheda incorporata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2996">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="9fb9c-2997">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2997">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-2998">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2998">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="9fb9c-2999">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-2999">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3000">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> rappresenta un tipo di matrice con una dimensione non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3000">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="9fb9c-3001">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3001">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3002">
            <paramref name="typeName" /> rappresenta una matrice di <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3002">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3003">Si verifica un errore quando <paramref name="typeName" /> viene analizzato in un nome del tipo e un nome dell'assembly (ad esempio, quando il nome del tipo semplice include un carattere speciale senza codice di escape).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3003">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="9fb9c-3004">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3004">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3005">
            <paramref name="throwOnError" /> è <see langword="true" /> e <paramref name="typeName" /> contiene sintassi non valida (ad esempio, "MyType [,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3005">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="9fb9c-3006">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3006">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3007">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3007">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-3008">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3008">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3009">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3009">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-3010">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3010">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3011">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3011">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9fb9c-3012">
            <paramref name="throwOnError" /> è <see langword="true" /> e l'assembly o una delle sue dipendenze non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3012">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="9fb9c-3013">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3013">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="9fb9c-3014">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3014">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3015">
            <paramref name="typeName" /> contiene un nome dell'assembly non valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3015">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="9fb9c-3016">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3016">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3017">
            <paramref name="typeName" /> è un nome dell'assembly valido senza un nome di tipi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3017">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-3018">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3018">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-3019">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3019">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3020">L'assembly è stato compilato con una versione successiva di Common Language Runtime rispetto alla versione attualmente caricata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3020">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="9fb9c-3021">Matrice di oggetti i cui tipi devono essere determinati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3021">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3022">Ottiene i tipi di oggetti nella matrice specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3022">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3023">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano i tipi degli elementi corrispondenti in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3023">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9fb9c-3024">Esempio di codice seguente viene illustrato come utilizzare il <xref:System.Type.GetTypeArray%2A> metodo elenco dei tipi degli elementi della matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3024">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3025">
            <paramref name="args" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3025">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3026">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3026">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3027">Uno o più degli elementi in <paramref name="args" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3027">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-3028">Gli inizializzatori di classi vengono richiamati e almeno uno genera un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3028">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="9fb9c-3029">Tipo il cui codice di tipo sottostante deve essere ottenuto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3029">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3030">Ottiene il codice di tipo sottostante dell'oggetto <see cref="T:System.Type" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3030">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3031">Codice del tipo sottostante o <see cref="F:System.TypeCode.Empty" /> se <paramref name="type" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3031">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3032">Quando si eredita da <xref:System.Type>, è possibile modificare il comportamento di questo metodo eseguendo l'override di <xref:System.Type.GetTypeCodeImpl%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3032">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3033">Esempio di codice riportato di seguito viene illustrato come la <xref:System.TypeCode> enumerazione può essere utilizzata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3033">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="9fb9c-3034">In un blocco decisionale all'interno di `WriteObjectInfo` (metodo), il <xref:System.TypeCode> di un <xref:System.Object> parametro viene esaminato e viene scritto un messaggio appropriato nella console.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3034">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3035">Restituisce il codice del tipo sottostante di questa istanza di <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3035">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3036">Codice del tipo sottostante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3036">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3037">Questo metodo fornisce l'implementazione per il `static` (in c#) o `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3037">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="9fb9c-3038">Quando si eredita da <xref:System.Type>, è possibile eseguire l'override di questo metodo per fornire la propria implementazione di <xref:System.Type.GetTypeCode%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3038">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3039">Ottiene il tipo associato all'identificatore di classe specificato (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3039">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="9fb9c-3040">CLSID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3040">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3041">Ottiene il tipo associato all'identificatore di classe specificato (CLSID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3041">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3042">
            <see langword="System.__ComObject" /> indipendentemente dalla validità del CLSID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3042">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3043">Il <xref:System.Type.GetTypeFromCLSID%2A> metodo supporta l'accesso ad associazione tardiva a oggetti COM non gestiti da applicazioni .NET Framework quando si conosce l'identificatore di classe dell'oggetto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3043">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9fb9c-3044">L'identificatore di classe per le classi COM è definito nella chiave HKEY_CLASSES_ROOT\CLSID del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3044">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9fb9c-3045">È possibile recuperare il valore di <xref:System.Type.IsCOMObject%2A> proprietà per determinare se il tipo restituito da questo metodo è un oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3045">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9fb9c-3046">È possibile chiamare il <xref:System.Type.GetTypeFromProgID%2A> metodo per l'accesso ad associazione tardiva a COM il cui identificatore programmatico (ProgID) si è certi di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3046">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9fb9c-3047">Creazione di un oggetto COM non gestito dal relativo CLSID è un processo in due passaggi:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3047">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9fb9c-3048">Ottenere un <xref:System.Type> oggetto che rappresenta il`__ComObject` che corrisponde al CLSID chiamando il <xref:System.Type.GetTypeFromCLSID%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3048">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9fb9c-3049">Chiamare il <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodo per creare un'istanza dell'oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3049">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9fb9c-3050">Vedere l'esempio per un'illustrazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3050">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="9fb9c-3051">Il <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignora qualsiasi eccezione che può verificarsi quando si crea un <xref:System.Type> basato sul `clsid` argomento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3051">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="9fb9c-3052">Si noti che viene generata alcuna eccezione se `clsid` non viene trovato nel Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3052">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3053">Nell'esempio seguente usa il CLSID di Microsoft Word [oggetto applicazione](http://msdn.microsoft.com/library/office/ff838565.aspx) per recuperare un tipo COM che rappresenta l'applicazione di Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3053">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="9fb9c-3054">Quindi creata un'istanza del tipo chiamando il <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (metodo) e chiude chiamando il [Application. Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) (metodo).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3054">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="9fb9c-3055">Questo metodo è destinato all'uso quando si lavora con gli oggetti COM, non con gli oggetti di .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3055">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="9fb9c-3056">Tutti oggetti gestiti, inclusi quelli che sono visibili a COM (vale a dire i <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attributo è <see langword="true" />) un GUID che viene restituito dal <see cref="P:System.Type.GUID" /> proprietà.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3056">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="9fb9c-3057">Anche se il metodo restituisce un <see cref="T:System.Type" /> oggetto che corrisponde al GUID di .NET Framework gli oggetti, non è possibile utilizzare <see cref="T:System.Type" /> oggetto per creare un'istanza del tipo chiamando il <see cref="M:System.Activator.CreateInstance(System.Type)" /> metodo, come illustrato nell'esempio seguente.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3057">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="9fb9c-3058">Al contrario, il <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> deve essere utilizzata solo per recuperare il GUID di un oggetto COM non gestito e il valore risultante <see cref="T:System.Type" /> oggetto passato per il <see cref="M:System.Activator.CreateInstance(System.Type)" /> method deve rappresentare un oggetto COM non gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3058">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="9fb9c-3059">CLSID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3059">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-3060">
            <see langword="true" /> per generare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3060">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="9fb9c-3061">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3061">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3062">
            <see langword="false" /> per ignorare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3062">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3063">Ottiene il tipo associato all'identificatore di classe specificato (CLSID) e indica se generare un'eccezione qualora si verifichi un errore durante il caricamento del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3063">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3064">
            <see langword="System.__ComObject" /> indipendentemente dalla validità del CLSID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3064">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3065">Il <xref:System.Type.GetTypeFromCLSID%2A> metodo supporta l'accesso ad associazione tardiva a oggetti COM non gestiti da applicazioni .NET Framework quando si conosce l'identificatore di classe dell'oggetto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3065">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9fb9c-3066">L'identificatore di classe per le classi COM è definito nella chiave HKEY_CLASSES_ROOT\CLSID del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3066">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9fb9c-3067">È possibile recuperare il valore di <xref:System.Type.IsCOMObject%2A> proprietà per determinare se il tipo restituito da questo metodo è un oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3067">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9fb9c-3068">È possibile chiamare il <xref:System.Type.GetTypeFromProgID%2A> metodo per l'accesso ad associazione tardiva a COM il cui identificatore programmatico (ProgID) si è certi di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3068">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9fb9c-3069">Creazione di un oggetto COM non gestito dal relativo CLSID è un processo in due passaggi:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3069">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9fb9c-3070">Ottenere un <xref:System.Type> oggetto che rappresenta il `__ComObject` che corrisponde al CLSID chiamando il <xref:System.Type.GetTypeFromCLSID%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3070">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9fb9c-3071">Chiamare il <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodo per creare un'istanza dell'oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3071">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9fb9c-3072">Vedere l'esempio per un'illustrazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3072">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="9fb9c-3073">Eccezioni, ad esempio <xref:System.OutOfMemoryException> viene generata quando si specifica `true` per `throwOnError`, ma non avrà esito negativo per il CLSID di annullare la registrazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3073">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3074">Nell'esempio seguente usa il CLSID di Microsoft Word [oggetto applicazione](http://msdn.microsoft.com/library/office/ff838565.aspx) per recuperare un tipo COM che rappresenta l'applicazione di Microsoft Word.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3074">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="9fb9c-3075">Quindi creata un'istanza del tipo chiamando il <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (metodo) e chiude chiamando il [Application. Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) (metodo).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3075">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="9fb9c-3076">Se si verifica un errore durante il caricamento del tipo, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3076">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="9fb9c-3077">Questo metodo è destinato all'uso quando si lavora con gli oggetti COM, non con gli oggetti di .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3077">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="9fb9c-3078">Tutti oggetti gestiti, inclusi quelli che sono visibili a COM (vale a dire i <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attributo è <see langword="true" />) un GUID che viene restituito dal <see cref="P:System.Type.GUID" /> proprietà.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3078">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="9fb9c-3079">Anche se il metodo restituisce un <see cref="T:System.Type" /> oggetto che corrisponde al GUID di .NET Framework gli oggetti, non è possibile utilizzare <see cref="T:System.Type" /> oggetto per creare un'istanza del tipo chiamando il <see cref="M:System.Activator.CreateInstance(System.Type)" /> metodo, come illustrato nell'esempio seguente.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3079">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="9fb9c-3080">Al contrario, il <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> deve essere utilizzata solo per recuperare il GUID di un oggetto COM non gestito e il valore risultante <see cref="T:System.Type" /> oggetto passato per il <see cref="M:System.Activator.CreateInstance(System.Type)" /> method deve rappresentare un oggetto COM non gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3080">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="9fb9c-3081">CLSID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3081">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="9fb9c-3082">Server da cui caricare il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3082">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="9fb9c-3083">Se il nome del server è <see langword="null" />, il metodo verrà automaticamente ripristinato sul computer locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3083">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3084">Ottiene il tipo associato all'identificatore di classe specificato (CLSID) dal server specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3084">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3085">
            <see langword="System.__ComObject" /> indipendentemente dalla validità del CLSID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3085">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3086">Il <xref:System.Type.GetTypeFromCLSID%2A> metodo supporta l'accesso ad associazione tardiva a oggetti COM non gestiti da applicazioni .NET Framework quando si conosce l'identificatore di classe dell'oggetto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3086">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9fb9c-3087">L'identificatore di classe per le classi COM è definito nella chiave HKEY_CLASSES_ROOT\CLSID del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3087">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9fb9c-3088">È possibile recuperare il valore di <xref:System.Type.IsCOMObject%2A> proprietà per determinare se il tipo restituito da questo metodo è un oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3088">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9fb9c-3089">È possibile chiamare il <xref:System.Type.GetTypeFromProgID%2A> metodo per l'accesso ad associazione tardiva a COM il cui identificatore programmatico (ProgID) si è certi di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3089">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9fb9c-3090">Creazione di un oggetto COM non gestito dal relativo CLSID è un processo in due passaggi:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3090">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9fb9c-3091">Ottenere un <xref:System.Type> oggetto che rappresenta il `__ComObject` che corrisponde al CLSID chiamando il <xref:System.Type.GetTypeFromCLSID%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3091">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9fb9c-3092">Chiamare il <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodo per creare un'istanza dell'oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3092">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3093">Nell'esempio seguente usa il CLSID di Microsoft Word [oggetto applicazione](http://msdn.microsoft.com/library/office/ff838565.aspx) per recuperare un tipo COM che rappresenta l'applicazione di Microsoft Word da un server denominato computer17.central.contoso.com. Quindi creata un'istanza del tipo chiamando il <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (metodo) e chiude chiamando il [Application. Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) (metodo).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3093">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="9fb9c-3094">Questo metodo è destinato all'uso quando si lavora con gli oggetti COM, non con gli oggetti di .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3094">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="9fb9c-3095">Tutti oggetti gestiti, inclusi quelli che sono visibili a COM (vale a dire i <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attributo è <see langword="true" />) un GUID che viene restituito dal <see cref="P:System.Type.GUID" /> proprietà.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3095">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="9fb9c-3096">Anche se il metodo restituisce un <see cref="T:System.Type" /> oggetto che corrisponde al GUID di .NET Framework gli oggetti, non è possibile utilizzare <see cref="T:System.Type" /> oggetto per creare un'istanza del tipo chiamando il <see cref="M:System.Activator.CreateInstance(System.Type)" /> metodo, come illustrato nell'esempio seguente.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3096">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="9fb9c-3097">Al contrario, il <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> deve essere utilizzata solo per recuperare il GUID di un oggetto COM non gestito e il valore risultante <see cref="T:System.Type" /> oggetto passato per il <see cref="M:System.Activator.CreateInstance(System.Type)" /> method deve rappresentare un oggetto COM non gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3097">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="9fb9c-3098">CLSID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3098">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="9fb9c-3099">Server da cui caricare il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3099">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="9fb9c-3100">Se il nome del server è <see langword="null" />, il metodo verrà automaticamente ripristinato sul computer locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3100">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-3101">
            <see langword="true" /> per generare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3101">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="9fb9c-3102">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3102">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3103">
            <see langword="false" /> per ignorare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3103">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3104">Ottiene il tipo associato all'identificatore di classe specificato (CLSID) dal server specificato e indica se generare un'eccezione in caso di errore durante il caricamento del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3104">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3105">
            <see langword="System.__ComObject" /> indipendentemente dalla validità del CLSID.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3105">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3106">Il <xref:System.Type.GetTypeFromCLSID%2A> metodo supporta l'accesso ad associazione tardiva a oggetti COM non gestiti da applicazioni .NET Framework quando si conosce l'identificatore di classe dell'oggetto COM (CLSID).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3106">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="9fb9c-3107">L'identificatore di classe per le classi COM è definito nella chiave HKEY_CLASSES_ROOT\CLSID del Registro di sistema.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3107">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="9fb9c-3108">È possibile recuperare il valore di <xref:System.Type.IsCOMObject%2A> proprietà per determinare se il tipo restituito da questo metodo è un oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3108">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="9fb9c-3109">È possibile chiamare il <xref:System.Type.GetTypeFromProgID%2A> metodo per l'accesso ad associazione tardiva a COM il cui identificatore programmatico (ProgID) si è certi di oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3109">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="9fb9c-3110">Creazione di un oggetto COM non gestito dal relativo CLSID è un processo in due passaggi:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3110">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="9fb9c-3111">Ottenere un <xref:System.Type> oggetto che rappresenta il `__ComObject` che corrisponde al CLSID chiamando il <xref:System.Type.GetTypeFromCLSID%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3111">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="9fb9c-3112">Chiamare il <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> metodo per creare un'istanza dell'oggetto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3112">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="9fb9c-3113">Eccezioni, ad esempio <xref:System.OutOfMemoryException> viene generata quando si specifica `true` per `throwOnError`, ma non avrà esito negativo per il CLSID di annullare la registrazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3113">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3114">Nell'esempio seguente usa il CLSID di Microsoft Word [oggetto applicazione](http://msdn.microsoft.com/library/office/ff838565.aspx) per recuperare un tipo COM che rappresenta l'applicazione di Microsoft Word da un server denominato computer17.central.contoso.com. Quindi creata un'istanza del tipo chiamando il <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> (metodo) e chiude chiamando il [Application. Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) (metodo).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3114">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="9fb9c-3115">Se si verifica un errore durante il caricamento del tipo, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3115">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="9fb9c-3116">Questo metodo è destinato all'uso quando si lavora con gli oggetti COM, non con gli oggetti di .NET Framework.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3116">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="9fb9c-3117">Tutti oggetti gestiti, inclusi quelli che sono visibili a COM (vale a dire i <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attributo è <see langword="true" />) un GUID che viene restituito dal <see cref="P:System.Type.GUID" /> proprietà.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3117">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="9fb9c-3118">Sebbene il <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> metodo restituisce un <see cref="T:System.Type" /> oggetto che corrisponde al GUID di un determinato oggetto gestito, non è possibile utilizzare <see cref="T:System.Type" /> oggetto per creare un'istanza del tipo chiamando il <see cref="M:System.Activator.CreateInstance(System.Type)" /> metodo, come nell'esempio seguente Mostra.</span>
            <span class="sxs-lookup">
              <span data-stu-id="9fb9c-3118">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="9fb9c-3119">Al contrario, il <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> deve essere utilizzata solo per recuperare il GUID di un oggetto COM non gestito e il valore risultante <see cref="T:System.Type" /> oggetto passato per il <see cref="M:System.Activator.CreateInstance(System.Type)" /> method deve rappresentare un oggetto COM non gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3119">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="9fb9c-3120">Oggetto che fa riferimento al tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3120">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3121">Ottiene il tipo a cui fa riferimento l'handle del tipo specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3121">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3122">Tipo al quale l'oggetto <see cref="T:System.RuntimeTypeHandle" /> specificato fa riferimento, oppure <see langword="null" /> se la proprietà <see cref="P:System.RuntimeTypeHandle.Value" /> di <paramref name="handle" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3122">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3123">Gli handle sono validi solo nel dominio dell'applicazione in cui sono stati ottenuti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3123">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3124">L'esempio seguente usa il <xref:System.Type.GetTypeFromHandle%2A> metodo per ottenere un <xref:System.Type> dell'oggetto da un <xref:System.RuntimeTypeHandle> fornito dal <xref:System.Type.GetTypeHandle%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3124">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-3125">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3125">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3126">Ottiene il tipo associato all'ID di programma specificato (ProgID).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3126">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="9fb9c-3127">ProgID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3127">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3128">Ottiene il tipo associato all'ID di programma specificato (ProgID), restituendo Null se si verifica un errore durante il caricamento dell'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3128">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3129">Tipo associato al ProgID specificato, se <paramref name="progID" /> è una voce valida del Registro di sistema e vi è associato un tipo; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3129">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3130">Questo metodo è fornito per il supporto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3130">This method is provided for COM support.</span></span> <span data-ttu-id="9fb9c-3131">ProgID non sono utilizzati in Microsoft .NET Framework, perché sono stati sostituiti dal concetto di spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3131">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3132">
            <paramref name="progID" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3132">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="9fb9c-3133">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3133">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="9fb9c-3134">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3134">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="9fb9c-3135">ProgID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3135">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-3136">
            <see langword="true" /> per generare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3136">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="9fb9c-3137">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3137">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3138">
            <see langword="false" /> per ignorare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3138">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3139">Ottiene il tipo associato all'ID di programma specificato (ProgID) e indica se generare un'eccezione qualora si verifichi un errore durante il caricamento del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3139">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3140">Tipo associato all'ID di programma specificato (ProgID) se <paramref name="progID" /> è una voce valida del Registro di sistema e vi è associato un tipo; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3140">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3141">Questo metodo è fornito per il supporto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3141">This method is provided for COM support.</span></span> <span data-ttu-id="9fb9c-3142">Gli ID di programma non sono utilizzati in Microsoft .NET Framework, perché sono stati sostituiti dal concetto di spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3142">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3143">Nell'esempio seguente recupera un tipo passando un ProgID, che specifica se generare un'eccezione se il valore ProgID non valido.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3143">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="9fb9c-3144">Viene quindi visualizzato il ClassID relativa al ProgID, insieme a eventuali messaggi di eccezione applicabili.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3144">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3145">
            <paramref name="progID" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3145">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="9fb9c-3146">Il ProgID specificato non è registrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3146">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="9fb9c-3147">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3147">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="9fb9c-3148">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3148">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="9fb9c-3149">ProgID del tipo da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3149">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="9fb9c-3150">Server da cui caricare il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3150">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="9fb9c-3151">Se il nome del server è <see langword="null" />, il metodo verrà automaticamente ripristinato sul computer locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3151">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3152">Ottiene il tipo associato all'ID di programma (ProgID) specificato dal server specificato, restituendo Null se si verifica un errore durante il caricamento del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3152">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3153">Tipo associato all'ID di programma specificato (ProgID) se <paramref name="progID" /> è una voce valida del Registro di sistema e vi è associato un tipo; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3153">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3154">Questo metodo è fornito per il supporto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3154">This method is provided for COM support.</span></span> <span data-ttu-id="9fb9c-3155">Gli ID di programma non sono utilizzati in Microsoft .NET Framework, perché sono stati sostituiti dal concetto di spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3155">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3156">Nell'esempio seguente recupera un tipo passando un nome del ProgID e un server.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3156">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="9fb9c-3157">Nell'esempio viene quindi visualizzato il ClassID correlato al ProgID o genera un'eccezione se il valore ProgID o il nome del server non è valido.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3157">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3158">
            <paramref name="prodID" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3158">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="9fb9c-3159">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3159">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="9fb9c-3160">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3160">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="9fb9c-3161">ProgID dell'oggetto <see cref="T:System.Type" /> da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3161">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="9fb9c-3162">Server da cui caricare il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3162">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="9fb9c-3163">Se il nome del server è <see langword="null" />, il metodo verrà automaticamente ripristinato sul computer locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3163">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="9fb9c-3164">
            <see langword="true" /> per generare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3164">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="9fb9c-3165">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3165">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3166">
            <see langword="false" /> per ignorare qualsiasi eccezione si verifichi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3166">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3167">Ottiene il tipo associato all'ID di programma specificato (ProgID) dal server specificato e indica se generare un'eccezione qualora si verifichi un errore durante il caricamento del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3167">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3168">Tipo associato all'ID di programma specificato (ProgID) se <paramref name="progID" /> è una voce valida del Registro di sistema e vi è associato un tipo; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3168">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3169">Questo metodo è fornito per il supporto COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3169">This method is provided for COM support.</span></span> <span data-ttu-id="9fb9c-3170">Gli ID di programma non sono utilizzati in Microsoft .NET Framework, perché sono stati sostituiti dal concetto di spazio dei nomi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3170">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3171">Nell'esempio seguente recupera un tipo passando un nome del ProgID e un server.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3171">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="9fb9c-3172">Viene quindi visualizzato il ClassID relativa al ProgID, che specifica se generare un'eccezione se il valore ProgID o il nome del server non è valido.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3172">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3173">
            <paramref name="progID" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3173">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="9fb9c-3174">Il progID specificato non è registrato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3174">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="9fb9c-3175">richiede l'attendibilità totale per il chiamante immediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3175">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="9fb9c-3176">Questo membro non può essere utilizzato da codice parzialmente attendibile o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3176">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="9fb9c-3177">Oggetto per il quale ottenere l'handle di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3177">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3178">Ottiene l'handle per l'oggetto <see cref="T:System.Type" /> di un oggetto specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3178">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3179">Handle per l'oggetto <see cref="T:System.Type" /> del <see cref="T:System.Object" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3179">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3180">Gli handle sono validi solo nel dominio dell'applicazione in cui sono stati ottenuti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3180">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3181">L'esempio seguente definisce la classe `MyClass1`, ottiene un'istanza e recupera l'handle di runtime dell'oggetto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3181">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3182">
            <paramref name="o" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3182">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3183">Ottiene il GUID associato all'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3183">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3184">GUID associato all'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3184">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3185">Un GUID è associato un tipo utilizzando il <xref:System.Runtime.InteropServices.GuidAttribute> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3185">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3186">L'esempio seguente crea la classe `MyClass1` con un metodo pubblico, viene creato un `Type` oggetto corrispondente a `MyClass1`e ottiene il <xref:System.Guid> struttura utilizzando il `GUID` proprietà del `Type` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3186">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3187">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> corrente comprende o si riferisce a un altro tipo, ovvero se l'oggetto <see cref="T:System.Type" /> corrente è una matrice, un puntatore o viene passato per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3187">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3188">
            <see langword="true" /> se <see cref="T:System.Type" /> è una matrice, un puntatore oppure è passato per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3188">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3189">Ad esempio, Type.GetType("Int32[]"). HasElementType restituisce `true`, ma Type.GetType("Int32"). HasElementType restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3189">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="9fb9c-3190">HasElementType restituisce `true` per "Int32 \*" e "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3190">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="9fb9c-3191">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico o un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3191">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3192">L'esempio seguente restituisce `true` o `false` a seconda se l'oggetto è una matrice, un tipo riferimento o puntatore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3192">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3193">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.HasElementType" /> e determina se l'oggetto <see cref="T:System.Type" /> corrente include o contiene riferimenti a un altro tipo, ovvero se l'oggetto <see cref="T:System.Type" /> corrente è costituito da una matrice o da un puntatore o è passato come riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3193">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3194">
            <see langword="true" /> se <see cref="T:System.Type" /> è una matrice, un puntatore oppure è passato per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3194">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3195">Ad esempio, Type.GetType("Int32[]"). HasElementTypeImpl restituisce `true`, ma Type.GetType("Int32"). HasElementTypeImpl restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3195">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="9fb9c-3196">HasElementTypeImpl restituisce `true` per "Int32 \*" e "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3196">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3197">L'esempio seguente definisce la classe `MyTypeDelegator`, che esegue l'override di `HasElementTypeImpl` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3197">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="9fb9c-3198">La classe principale cerca di `HasElementType` proprietà e consente di visualizzare il tipo di elemento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3198">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3199">Richiama un membro specifico dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3199">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-3200">Stringa che contiene il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3200">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="9fb9c-3201">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3201">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3202">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3202">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="9fb9c-3203">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3203">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3204">Per i membri <see langword="IDispatch" />, stringa che rappresenta DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3204">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="9fb9c-3205">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3205">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-3206">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3206">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="9fb9c-3207">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3207">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="9fb9c-3208">Se il tipo di ricerca viene omesso, vengono usati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3208">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-3209">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3209">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-3210">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3210">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3211">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3211">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3212">Si noti che potrebbe essere necessario definire in modo esplicito un oggetto <see cref="T:System.Reflection.Binder" /> per richiamare correttamente overload di metodo con argomenti variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3212">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9fb9c-3213">Oggetto su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3213">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="9fb9c-3214">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3214">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3215">Chiama il membro specificato, usando i vincoli di associazione specificati e associando l'elenco di argomenti specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3215">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3216">Oggetto che rappresenta il valore restituito di un membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3216">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3217">Non è possibile utilizzare <xref:System.Type.InvokeMember%2A> per richiamare un metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3217">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9fb9c-3218">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3218">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-3219">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3219">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3220">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3220">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3221">Specificare `BindingFlags.FlattenHierarchy` per includere i membri statici nella gerarchia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3221">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9fb9c-3222">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3222">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-3223">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3223">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3224">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3224">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-3225">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di chiamata può essere utilizzato per indicare l'azione da intraprendere con il membro:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3225">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9fb9c-3226">`CreateInstance` per richiamare un costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3226">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9fb9c-3227">`name` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3227">`name` is ignored.</span></span> <span data-ttu-id="9fb9c-3228">Non è valido con altri flag di chiamata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3228">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9fb9c-3229">`InvokeMethod` per richiamare un metodo, ma non un costruttore o un inizializzatore di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3229">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9fb9c-3230">Non è valido con `SetField` o `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3230">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9fb9c-3231">Se `InvokeMethod` è specificato da solo, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` vengono inclusi automaticamente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3231">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9fb9c-3232">`GetField` Per ottenere il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3232">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9fb9c-3233">Non è valido con `SetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3233">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3234">`SetField` Per impostare il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3234">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9fb9c-3235">Non è valido con `GetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3235">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3236">`GetProperty` Per ottenere una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3236">`GetProperty` to get a property.</span></span> <span data-ttu-id="9fb9c-3237">Non è valido con `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3237">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3238">`SetProperty` Per impostare una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3238">`SetProperty` to set a property.</span></span> <span data-ttu-id="9fb9c-3239">Non è valido con `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3239">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9fb9c-3240">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3240">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-3241">Verrà richiamato un metodo se si verificano entrambe le condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3241">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9fb9c-3242">Il numero di parametri della dichiarazione del metodo è uguale al numero di argomenti in di `args` matrice (a meno che gli argomenti predefiniti vengono definiti sul membro e `BindingFlags.OptionalParamBinding` è specificato).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3242">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9fb9c-3243">Il tipo di ciascun argomento può essere convertito dal gestore di associazione per il tipo del parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3243">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-3244">Lo strumento di associazione troverà tutti i metodi di corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3244">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9fb9c-3245">Questi metodi vengono rilevati in base al tipo di associazione richiesta (<xref:System.Reflection.BindingFlags> valori `InvokeMethod`, `GetProperty`e così via).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3245">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9fb9c-3246">Il set di metodi verrà filtrato per il nome, numero di argomenti e un set di modificatori di ricerca definiti nel gestore di associazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3246">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9fb9c-3247">Dopo aver selezionato il metodo, viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3247">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9fb9c-3248">A questo punto viene controllato l'accesso facilitato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3248">Accessibility is checked at that point.</span></span> <span data-ttu-id="9fb9c-3249">È possibile specificare quale set di metodi vengono ricercati in base all'attributo di accessibilità associato al metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3249">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9fb9c-3250">Il <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> metodo il <xref:System.Reflection.Binder> è responsabile della selezione del metodo da richiamare.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3250">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9fb9c-3251">Il binder predefinito consente di selezionare la corrispondenza più specifica.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3251">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9fb9c-3252">Restrizioni di accesso vengono ignorate per il codice completamente attendibile. ovvero costruttori privati, metodi, campi e proprietà accessibili e richiamate tramite <xref:System.Reflection> ogni volta che il codice è completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3252">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9fb9c-3253">È possibile utilizzare `Type.InvokeMember` per impostare un campo a un determinato valore specificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3253">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9fb9c-3254">Ad esempio, se si desidera impostare un campo di istanza pubblica denominato F sulla classe C e F è un `String`, è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3254">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="9fb9c-3255">Se F è un `String[]`, è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3255">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="9fb9c-3256">in modo da inizializzare il campo F su questa nuova matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3256">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9fb9c-3257">È inoltre possibile utilizzare `Type.InvokeMember` per impostare una posizione in una matrice fornendo l'indice del valore e quindi il valore successivo utilizzando codice simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3257">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="9fb9c-3258">Stringa "z" nella matrice che contiene F alla stringa "b" verrà modificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3258">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="9fb9c-3259">Quando si richiama un `IDispatch` membro, è possibile specificare il DispID anziché il nome di membro, utilizzando il formato della stringa "[DispID = # #]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3259">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9fb9c-3260">Ad esempio, se il DispID di MyComMethod è 3, è possibile specificare la stringa "[DispID = 3]" anziché "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3260">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9fb9c-3261">Richiamare un membro da DispID è più veloce rispetto alla ricerca del membro in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3261">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9fb9c-3262">In scenari complessi di aggregazione, talvolta il DispID è l'unico modo per richiamare il membro desiderato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3262">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3263">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3263">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9fb9c-3264">(Vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3264">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9fb9c-3265">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3265">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3266">L'esempio seguente usa `InvokeMember` per accedere ai membri di un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3266">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3267">
            <paramref name="invokeAttr" /> non contiene <see langword="CreateInstance" /> e <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3267">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3268">
            <paramref name="invokeAttr" /> non è un attributo valido di <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3268">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="9fb9c-3269">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3269">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3270">
            <paramref name="invokeAttr" /> non contiene uno dei flag di binding seguenti: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3270">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3271">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3271">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3272">
            <paramref name="invokeAttr" /> contiene <see langword="CreateInstance" /> in combinazione con <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3272">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3273">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3273">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3274">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetField" /> che <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3274">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3275">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3275">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3276">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetProperty" /> che <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3276">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3277">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3277">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3278">
            <paramref name="invokeAttr" /> contiene <see langword="InvokeMethod" /> in combinazione con <see langword="SetField" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3278">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3279">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3279">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3280">
            <paramref name="invokeAttr" /> contiene <see langword="SetField" /> e <paramref name="args" /> include più elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3280">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="9fb9c-3281">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3281">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3282">Questo metodo è stato chiamato su un oggetto COM e uno dei flag di binding seguenti non è stato passato: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> o <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3282">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3283">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3283">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3284">Una delle matrici di parametri denominati contiene una stringa <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3284">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9fb9c-3285">Il membro specificato è un inizializzatore di classi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3285">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="9fb9c-3286">Non è possibile trovare il campo o la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3286">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9fb9c-3287">Non è possibile trovare metodi corrispondenti agli argomenti in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3287">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3288">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3288">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3289">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo che contiene parametri di tipo open, ovvero <see cref="P:System.Type.ContainsGenericParameters" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3289">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="9fb9c-3290">Non è possibile richiamare il metodo specificato su <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3290">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-3291">Più di un metodo corrisponde ai criteri di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3291">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-3292">Questo metodo non è attualmente supportato in .NET Compact Framework.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3292">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-3293">Il metodo rappresentato da <paramref name="name" /> include uno o più parametri di tipo generico non specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3293">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-3294">In altri termini, la proprietà <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> del metodo restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3294">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9fb9c-3295">per l'accesso a membri non pubblici indipendentemente dalle autorizzazioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3295">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="9fb9c-3296">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3296">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9fb9c-3297">per chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3297">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="9fb9c-3298">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3298">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-3299">Stringa che contiene il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3299">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="9fb9c-3300">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3300">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3301">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3301">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="9fb9c-3302">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3302">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3303">Per i membri <see langword="IDispatch" />, stringa che rappresenta DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3303">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="9fb9c-3304">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3304">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-3305">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3305">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="9fb9c-3306">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3306">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="9fb9c-3307">Se il tipo di ricerca viene omesso, vengono usati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3307">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-3308">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3308">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-3309">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3309">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3310">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3310">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3311">Si noti che potrebbe essere necessario definire in modo esplicito un oggetto <see cref="T:System.Reflection.Binder" /> per richiamare correttamente overload di metodo con argomenti variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3311">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9fb9c-3312">Oggetto su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3312">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="9fb9c-3313">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3313">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="9fb9c-3314">Oggetto che rappresenta le impostazioni locali di globalizzazione da usare, che possono essere necessarie per conversioni specifiche delle impostazioni locali, ad esempio la conversione di un oggetto <see cref="T:System.String" /> numerico in <see cref="T:System.Double" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3314">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3315">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3315">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3316">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso dell'oggetto <see cref="T:System.Globalization.CultureInfo" /> del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3316">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3317">Chiama il membro specificato, usando i vincoli di binding specificati e associando l'elenco di argomenti specificati e le impostazioni cultura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3317">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3318">Oggetto che rappresenta il valore restituito di un membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3318">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3319">Anche se il binder predefinito elabora <xref:System.Globalization.CultureInfo> (il `culture` parametro), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `culture`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3319">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3320">Non è possibile utilizzare <xref:System.Type.InvokeMember%2A> per richiamare un metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3320">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9fb9c-3321">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3321">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-3322">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3322">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3323">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3323">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3324">Specificare `BindingFlags.FlattenHierarchy` per includere i membri statici nella gerarchia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3324">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9fb9c-3325">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3325">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-3326">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3326">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3327">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3327">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-3328">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di chiamata può essere utilizzato per indicare l'azione da intraprendere con il membro:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3328">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9fb9c-3329">`CreateInstance` per richiamare un costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3329">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9fb9c-3330">`name` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3330">`name` is ignored.</span></span> <span data-ttu-id="9fb9c-3331">Non è valido con altri flag di chiamata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3331">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9fb9c-3332">`InvokeMethod` per richiamare un metodo, ma non un costruttore o un inizializzatore di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3332">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9fb9c-3333">Non è valido con `SetField` o `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3333">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9fb9c-3334">Se `InvokeMethod` è specificato da solo, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` vengono inclusi automaticamente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3334">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9fb9c-3335">`GetField` Per ottenere il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3335">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9fb9c-3336">Non è valido con `SetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3336">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3337">`SetField` Per impostare il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3337">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9fb9c-3338">Non è valido con `GetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3338">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3339">`GetProperty` Per ottenere una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3339">`GetProperty` to get a property.</span></span> <span data-ttu-id="9fb9c-3340">Non è valido con `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3340">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3341">`SetProperty` Per impostare una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3341">`SetProperty` to set a property.</span></span> <span data-ttu-id="9fb9c-3342">Non è valido con `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3342">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9fb9c-3343">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3343">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-3344">Verrà richiamato un metodo se si verificano entrambe le condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3344">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9fb9c-3345">Il numero di parametri della dichiarazione del metodo è uguale al numero di argomenti in di `args` matrice (a meno che gli argomenti predefiniti vengono definiti sul membro e `BindingFlags.OptionalParamBinding` è specificato).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3345">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9fb9c-3346">Il tipo di ciascun argomento può essere convertito dal gestore di associazione per il tipo del parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3346">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-3347">Lo strumento di associazione troverà tutti i metodi di corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3347">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9fb9c-3348">Questi metodi vengono rilevati in base al tipo di associazione richiesta (<xref:System.Reflection.BindingFlags> valori `InvokeMethod`, `GetProperty`e così via).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3348">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9fb9c-3349">Il set di metodi verrà filtrato per il nome, numero di argomenti e un set di modificatori di ricerca definiti nel gestore di associazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3349">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9fb9c-3350">Dopo aver selezionato il metodo, viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3350">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9fb9c-3351">A questo punto viene controllato l'accesso facilitato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3351">Accessibility is checked at that point.</span></span> <span data-ttu-id="9fb9c-3352">È possibile specificare quale set di metodi vengono ricercati in base all'attributo di accessibilità associato al metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3352">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9fb9c-3353">Il <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> metodo il <xref:System.Reflection.Binder> è responsabile della selezione del metodo da richiamare.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3353">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9fb9c-3354">Il binder predefinito consente di selezionare la corrispondenza più specifica.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3354">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9fb9c-3355">Restrizioni di accesso vengono ignorate per il codice completamente attendibile. vale a dire, proprietà, metodi, campi e costruttori privati accessibili e richiamate tramite Reflection, ogni volta che il codice è completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3355">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9fb9c-3356">È possibile utilizzare `Type.InvokeMember` per impostare un campo a un determinato valore specificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3356">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9fb9c-3357">Ad esempio, se si desidera impostare un campo di istanza pubblica denominato F sulla classe C e F è un `String` è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3357">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="9fb9c-3358">Se F è un `String[]`, è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3358">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="9fb9c-3359">in modo da inizializzare il campo F su questa nuova matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3359">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9fb9c-3360">È inoltre possibile utilizzare `Type.InvokeMember` per impostare una posizione in una matrice fornendo l'indice del valore e quindi il valore successivo utilizzando codice simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3360">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="9fb9c-3361">Stringa "z" nella matrice che contiene F alla stringa "b" verrà modificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3361">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="9fb9c-3362">Quando si richiama un `IDispatch` membro è possibile specificare il DispID anziché il nome di membro, utilizzando il formato della stringa "[DispID = # #]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3362">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9fb9c-3363">Ad esempio, se il DispID di MyComMethod è 3, è possibile specificare la stringa "[DispID = 3]" anziché "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3363">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9fb9c-3364">Richiamare un membro da DispID è più veloce rispetto alla ricerca del membro in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3364">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9fb9c-3365">In scenari complessi di aggregazione, talvolta il DispID è l'unico modo per richiamare il membro desiderato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3365">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3366">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3366">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9fb9c-3367">(Vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3367">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9fb9c-3368">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3368">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3369">
            <paramref name="invokeAttr" /> non contiene <see langword="CreateInstance" /> e <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3369">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3370">
            <paramref name="invokeAttr" /> non è un attributo valido di <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3370">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="9fb9c-3371">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3371">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3372">
            <paramref name="invokeAttr" /> non contiene uno dei flag di binding seguenti: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3372">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3373">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3373">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3374">
            <paramref name="invokeAttr" /> contiene <see langword="CreateInstance" /> in combinazione con <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3374">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3375">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3375">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3376">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetField" /> che <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3376">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3377">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3377">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3378">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetProperty" /> che <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3378">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3379">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3379">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3380">
            <paramref name="invokeAttr" /> contiene <see langword="InvokeMethod" /> in combinazione con <see langword="SetField" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3380">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3381">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3381">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3382">
            <paramref name="invokeAttr" /> contiene <see langword="SetField" /> e <paramref name="args" /> include più elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3382">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="9fb9c-3383">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3383">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3384">Questo metodo è stato chiamato su un oggetto COM e uno dei flag di binding seguenti non è stato passato: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> o <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3384">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3385">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3385">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3386">Una delle matrici di parametri denominati contiene una stringa <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3386">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9fb9c-3387">Il membro specificato è un inizializzatore di classi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3387">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="9fb9c-3388">Non è possibile trovare il campo o la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3388">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9fb9c-3389">Non è possibile trovare metodi corrispondenti agli argomenti in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3389">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3390">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3390">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3391">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo che contiene parametri di tipo open, ovvero <see cref="P:System.Type.ContainsGenericParameters" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3391">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="9fb9c-3392">Non è possibile richiamare il metodo specificato su <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3392">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-3393">Più di un metodo corrisponde ai criteri di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3393">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-3394">Il metodo rappresentato da <paramref name="name" /> include uno o più parametri di tipo generico non specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3394">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-3395">In altri termini, la proprietà <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> del metodo restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3395">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9fb9c-3396">per l'accesso a membri non pubblici indipendentemente dalle autorizzazioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3396">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="9fb9c-3397">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3397">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9fb9c-3398">per chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3398">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="9fb9c-3399">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3399">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9fb9c-3400">Stringa che contiene il nome del costruttore, del metodo, della proprietà o del membro del campo da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3400">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="9fb9c-3401">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3401">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3402">Stringa vuota ("") per richiamare il membro predefinito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3402">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="9fb9c-3403">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3403">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3404">Per i membri <see langword="IDispatch" />, stringa che rappresenta DispID, ad esempio "[DispID=3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3404">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="9fb9c-3405">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3405">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="9fb9c-3406">L'accesso può essere uno dei <see langword="BindingFlags" />, ad esempio <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" /> e così via.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3406">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="9fb9c-3407">Il tipo di ricerca non deve essere specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3407">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="9fb9c-3408">Se il tipo di ricerca viene omesso, vengono usati <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3408">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="9fb9c-3409">Oggetto che definisce una serie di proprietà e permette il binding, che può implicare la scelta di un metodo di overload, la coercizione di tipi di argomento e la chiamata di un membro mediante reflection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3409">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="9fb9c-3410">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3410">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3411">Riferimento Null (Nothing in Visual Basic) per l'uso di <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3411">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3412">Si noti che potrebbe essere necessario definire in modo esplicito un oggetto <see cref="T:System.Reflection.Binder" /> per richiamare correttamente overload di metodo con argomenti variabili.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3412">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="9fb9c-3413">Oggetto su cui richiamare il membro specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3413">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="9fb9c-3414">Matrice che contiene gli argomenti da passare al membro da richiamare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3414">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="9fb9c-3415">Matrice di oggetti <see cref="T:System.Reflection.ParameterModifier" /> che rappresentano gli attributi associati all'elemento corrispondente nella matrice <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3415">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="9fb9c-3416">Gli attributi associati di un parametro sono archiviati nella firma digitale del membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3416">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="9fb9c-3417">Il binder predefinito elabora questo parametro solo quando si chiama un componente COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3417">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="9fb9c-3418">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che rappresenta le impostazioni locali da usare, che possono essere necessarie per conversioni specifiche delle impostazioni locali, ad esempio la conversione di un valore numerico da String a Double.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3418">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="9fb9c-3419">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3419">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3420">Riferimento Null (<see langword="Nothing" /> in Visual Basic) per l'uso dell'oggetto <see cref="T:System.Globalization.CultureInfo" /> del thread corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3420">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="9fb9c-3421">Matrice contenente i nomi dei parametri a cui sono passati i valori della matrice <c>args</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3421">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3422">Quando ne viene eseguito l'override in una classe derivata, richiama il membro specificato, usando i vincoli di binding specificati e associando l'elenco di argomenti, i modificatori e le impostazioni cultura specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3422">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3423">Oggetto che rappresenta il valore restituito di un membro richiamato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3423">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3424">`InvokeMember` chiama un membro di costruttore o un metodo, ottiene o imposta una proprietà del membro, ottiene o imposta un membro di campo di dati, o Ottiene o imposta un elemento di un membro di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3424">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3425">Non è possibile utilizzare <xref:System.Type.InvokeMember%2A> per richiamare un metodo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3425">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="9fb9c-3426">Quando si richiama un `IDispatch` membro è possibile specificare il DispID anziché il nome di membro, utilizzando il formato della stringa "[DispID = # #]".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3426">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="9fb9c-3427">Ad esempio, se il DispID di MyComMethod è 3, è possibile specificare la stringa "[DispID = 3]" anziché "MyComMethod".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3427">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="9fb9c-3428">Richiamare un membro da DispID è più veloce rispetto alla ricerca del membro in base al nome.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3428">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="9fb9c-3429">In scenari complessi di aggregazione, talvolta il DispID è l'unico modo per richiamare il membro desiderato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3429">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="9fb9c-3430">Anche se il binder predefinito elabora <xref:System.Reflection.ParameterModifier> o <xref:System.Globalization.CultureInfo> (il `modifiers` e `culture` parametri), è possibile utilizzare la classe astratta <xref:System.Reflection.Binder?displayProperty=nameWithType> classe per la scrittura di un gestore di associazione personalizzato che elaborano `modifiers` e `culture`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3430">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="9fb9c-3431">`ParameterModifier` viene utilizzato solo quando una chiamata tramite l'interoperabilità COM, e vengono gestiti solo i parametri che vengono passati per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3431">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="9fb9c-3432">Tutti i parametri nella matrice `namedParameters` ottengono il valore nell'elemento corrispondente della matrice `args`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3432">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="9fb9c-3433">Se la lunghezza di `args` è superiore a quella di `namedParameters`, i valori degli argomenti rimanenti vengono passati in ordine.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3433">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="9fb9c-3434">Il `namedParameters` matrice può essere utilizzata per modificare l'ordine degli argomenti in una matrice di input.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3434">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="9fb9c-3435">Ad esempio, poiché il metodo `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) e la matrice di input `{ 42, "x" }`, la matrice di input può essere passata invariata per `args` se la matrice `{ "b", "a" }` fornito per `namedParameters`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3435">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="9fb9c-3436">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag del filtro possono essere utilizzati per definire i membri da includere nella ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3436">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="9fb9c-3437">Specificare `BindingFlags.Public` per includere i membri pubblici nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3437">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3438">Specificare `BindingFlags.NonPublic` per includere i membri non pubblici (ovvero, i membri privati, interni e protetti) nella ricerca.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3438">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="9fb9c-3439">Specificare `BindingFlags.FlattenHierarchy` per includere i membri statici nella gerarchia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3439">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="9fb9c-3440">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di modifica consente di modificare le modalità di ricerca:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3440">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="9fb9c-3441">`BindingFlags.IgnoreCase` per ignorare la distinzione di `name`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3441">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3442">`BindingFlags.DeclaredOnly` Per cercare solo i membri dichiarati nel <xref:System.Type>, non i membri sono stati ereditati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3442">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="9fb9c-3443">Le operazioni seguenti <xref:System.Reflection.BindingFlags> flag di chiamata può essere utilizzato per indicare l'azione da intraprendere con il membro:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3443">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="9fb9c-3444">`CreateInstance` per richiamare un costruttore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3444">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="9fb9c-3445">`name` viene ignorato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3445">`name` is ignored.</span></span> <span data-ttu-id="9fb9c-3446">Non è valido con altri flag di chiamata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3446">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="9fb9c-3447">`InvokeMethod` per richiamare un metodo, ma non un costruttore o un inizializzatore di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3447">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="9fb9c-3448">Non è valido con `SetField` o `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3448">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="9fb9c-3449">Se `InvokeMethod` è specificato da solo, `BindingFlags.Public`, `BindingFlags.Instance`, e `BindingFlags.Static` vengono inclusi automaticamente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3449">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="9fb9c-3450">`GetField` Per ottenere il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3450">`GetField` to get the value of a field.</span></span> <span data-ttu-id="9fb9c-3451">Non è valido con `SetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3451">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3452">`SetField` Per impostare il valore di un campo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3452">`SetField` to set the value of a field.</span></span> <span data-ttu-id="9fb9c-3453">Non è valido con `GetField`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3453">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3454">`GetProperty` Per ottenere una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3454">`GetProperty` to get a property.</span></span> <span data-ttu-id="9fb9c-3455">Non è valido con `SetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3455">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3456">`SetProperty` Per impostare una proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3456">`SetProperty` to set a property.</span></span> <span data-ttu-id="9fb9c-3457">Non è valido con `GetProperty`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3457">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="9fb9c-3458">Per altre informazioni, vedere <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3458">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="9fb9c-3459">Verrà richiamato un metodo se si verificano entrambe le condizioni seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3459">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="9fb9c-3460">Il numero di parametri della dichiarazione del metodo è uguale al numero di argomenti in di `args` matrice (a meno che gli argomenti predefiniti vengono definiti sul membro e `BindingFlags.OptionalParamBinding` è specificato).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3460">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="9fb9c-3461">Il tipo di ciascun argomento può essere convertito dal gestore di associazione per il tipo del parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3461">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-3462">Lo strumento di associazione troverà tutti i metodi di corrispondenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3462">The binder will find all of the matching methods.</span></span> <span data-ttu-id="9fb9c-3463">Questi metodi vengono rilevati in base al tipo di associazione richiesta (<xref:System.Reflection.BindingFlags> valori `InvokeMethod`, `GetProperty`e così via).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3463">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="9fb9c-3464">Il set di metodi verrà filtrato per il nome, numero di argomenti e un set di modificatori di ricerca definiti nel gestore di associazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3464">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="9fb9c-3465">Dopo aver selezionato il metodo, viene richiamato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3465">After the method is selected, it is invoked.</span></span> <span data-ttu-id="9fb9c-3466">A questo punto viene controllato l'accesso facilitato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3466">Accessibility is checked at that point.</span></span> <span data-ttu-id="9fb9c-3467">È possibile specificare quale set di metodi vengono ricercati in base all'attributo di accessibilità associato al metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3467">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="9fb9c-3468">Il <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> metodo il <xref:System.Reflection.Binder> è responsabile della selezione del metodo da richiamare.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3468">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="9fb9c-3469">Il binder predefinito consente di selezionare la corrispondenza più specifica.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3469">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="9fb9c-3470">`InvokeMember` può essere utilizzato per richiamare metodi con parametri che hanno valori predefiniti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3470">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="9fb9c-3471">Per associare a questi metodi, la Reflection richiede <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> specificare.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3471">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="9fb9c-3472">Per un parametro che ha un valore predefinito, è possibile specificare un valore diverso o fornire <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> per utilizzare il valore predefinito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3472">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="9fb9c-3473">Si consideri ad esempio un metodo, ad esempio MyMethod (int x, y float = 2.0).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3473">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="9fb9c-3474">Per richiamare questo metodo con il primo argomento come MyMethod (4), passare uno dei flag di associazione precedente e passare due argomenti, vale a dire, 4 per il primo argomento e `Missing.Value` per il secondo argomento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3474">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="9fb9c-3475">Se non si utilizza `Missing.Value`, non è possibile omettere i parametri facoltativi di `Invoke` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3475">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="9fb9c-3476">Se necessario, utilizzare `InvokeMember` invece.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3476">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="9fb9c-3477">Restrizioni di accesso vengono ignorate per il codice completamente attendibile. ovvero costruttori privati, metodi, campi e proprietà accessibili e richiamate tramite <xref:System.Reflection> ogni volta che il codice è completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3477">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="9fb9c-3478">È possibile utilizzare `Type.InvokeMember` per impostare un campo a un determinato valore specificando <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3478">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9fb9c-3479">Ad esempio, se si desidera impostare un campo di istanza pubblica denominato F sulla classe C e F è un `String`, è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3479">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="9fb9c-3480">Se F è un `String[]`, è possibile usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3480">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="9fb9c-3481">in modo da inizializzare il campo F su questa nuova matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3481">which will initialize the field F to this new array.</span></span> <span data-ttu-id="9fb9c-3482">È inoltre possibile utilizzare `Type.InvokeMember` per impostare una posizione in una matrice fornendo l'indice del valore e quindi il valore successivo utilizzando codice simile al seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3482">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="9fb9c-3483">Stringa "z" nella matrice che contiene F alla stringa "b" verrà modificato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3483">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3484">A partire dal [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], questo metodo può essere utilizzato per accedere a membri pubblici, se il chiamante è stato concesso <xref:System.Security.Permissions.ReflectionPermission> con il <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag e se il set di concessioni dei membri non pubblici è limitato al chiamante o a un sottoinsieme Questi due elementi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3484">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="9fb9c-3485">(Vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3485">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="9fb9c-3486">Per usare questa funzionalità, l'applicazione deve essere destinata a [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o versione successiva.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3486">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3487">
            <paramref name="invokeAttr" /> non contiene <see langword="CreateInstance" /> e <paramref name="name" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3487">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3488">
            <paramref name="args" /> e <paramref name="modifiers" /> non hanno la stessa lunghezza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3488">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="9fb9c-3489">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3489">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3490">
            <paramref name="invokeAttr" /> non è un attributo valido di <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3490">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="9fb9c-3491">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3491">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3492">
            <paramref name="invokeAttr" /> non contiene uno dei flag di binding seguenti: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3492">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3493">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3493">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3494">
            <paramref name="invokeAttr" /> contiene <see langword="CreateInstance" /> in combinazione con <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3494">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3495">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3495">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3496">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetField" /> che <see langword="SetField" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3496">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3497">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3497">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3498">
            <paramref name="invokeAttr" /> contiene sia <see langword="GetProperty" /> che <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3498">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3499">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3499">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3500">
            <paramref name="invokeAttr" /> contiene <see langword="InvokeMethod" /> in combinazione con <see langword="SetField" /> o <see langword="SetProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3500">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3501">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3501">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3502">
            <paramref name="invokeAttr" /> contiene <see langword="SetField" /> e <paramref name="args" /> include più elementi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3502">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="9fb9c-3503">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3503">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3504">La matrice di parametri denominata è più grande della matrice di argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3504">The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="9fb9c-3505">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3505">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3506">Questo metodo è stato chiamato su un oggetto COM e uno dei flag di binding seguenti non è stato passato: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> o <see langword="BindingFlags.PutRefDispProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3506">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3507">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3507">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3508">Una delle matrici di parametri denominati contiene una stringa <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3508">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="9fb9c-3509">Il membro specificato è un inizializzatore di classi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3509">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="9fb9c-3510">Non è possibile trovare il campo o la proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3510">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="9fb9c-3511">Non è possibile trovare metodi corrispondenti agli argomenti in <paramref name="args" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3511">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3512">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3512">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3513">Non è possibile trovare membri con i nomi di argomento forniti in <paramref name="namedParameters" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3513">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3514">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3514">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-3515">L'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo che contiene parametri di tipo open, ovvero <see cref="P:System.Type.ContainsGenericParameters" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3515">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="9fb9c-3516">Non è possibile richiamare il metodo specificato su <paramref name="target" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3516">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="9fb9c-3517">Più di un metodo corrisponde ai criteri di binding.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3517">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-3518">Il metodo rappresentato da <paramref name="name" /> include uno o più parametri di tipo generico non specificati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3518">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="9fb9c-3519">In altri termini, la proprietà <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> del metodo restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3519">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="9fb9c-3520">per l'accesso a membri non pubblici indipendentemente dalle autorizzazioni impostate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3520">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="9fb9c-3521">Enumerazione associata: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3521">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9fb9c-3522">per chiamare codice non gestito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3522">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="9fb9c-3523">Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3523">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3524">Ottiene un valore che indica se <see cref="T:System.Type" /> è astratto e se è necessario eseguirne l'override.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3524">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3525">
            <see langword="true" /> se il <see cref="T:System.Type" /> è astratto. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3525">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3526">Il <xref:System.Type.IsAbstract%2A> restituisce proprietà `true` nei casi seguenti:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3526">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="9fb9c-3527">Il tipo corrente è astratto. ovvero, non è possibile creare un'istanza, ma può essere utilizzato solo come classe base per le classi derivate.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3527">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="9fb9c-3528">In c#, classi astratte sono contrassegnate con il [astratta](~/docs/csharp/language-reference/keywords/abstract.md) (parola chiave); in Visual Basic vengono contrassegnati con il [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) (parola chiave).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3528">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="9fb9c-3529">Il tipo corrente è un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3529">The current type is an interface.</span></span>  
  
 <span data-ttu-id="9fb9c-3530">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3530">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3531">L'esempio seguente crea una matrice di <xref:System.Type> gli oggetti che rappresentano i seguenti tipi: tipo restituisce contiene `true` se l'oggetto specificato è `abstract`; in caso contrario, restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3531">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3532">`AbstractClass`, una classe astratta (una classe contrassegnata come `abstract` in c# e `MustInherit` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3532">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="9fb9c-3533">`DerivedClass`, una classe che eredita da `AbstractClass`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3533">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="9fb9c-3534">`SingleClass`, una classe NotInheritable.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3534">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="9fb9c-3535">Viene definito come `sealed` in c# e `NotInheritable` in Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3535">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="9fb9c-3536">`ITypeInfo`, un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3536">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="9fb9c-3537">`ImplementingClass`, una classe che implementa il `ITypeInfo` interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3537">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="9fb9c-3538">Il metodo restituisce `true` solo per `AbstractClass`, la classe astratta, e `ITypeInfo`, l'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3538">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3539">Ottiene un valore che indica se l'attributo di formato della stringa <see langword="AnsiClass" /> è selezionato per <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3539">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3540">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="AnsiClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3540">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3541">Il <xref:System.Reflection.TypeAttributes.StringFormatMask> consente di selezionare gli attributi di formato della stringa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3541">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="9fb9c-3542">Gli attributi del formato di stringa migliorano l'interoperabilità definendo come interpretare le stringhe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3542">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9fb9c-3543">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico, questa proprietà si riferisce alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3543">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3544">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3544">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3545">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3545">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3546">Nell'esempio seguente ottiene le informazioni sui campi e verifica la presenza di `AnsiClass` attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3546">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3547">Ottiene un valore che indica se il tipo è una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3547">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3548">
            <see langword="true" /> se il tipo corrente è una matrice; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3548">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3549">Il <xref:System.Type.IsArray%2A> restituisce proprietà `false` per la <xref:System.Array> classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3549">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="9fb9c-3550">Restituisce inoltre `false` se l'istanza corrente è un <xref:System.Type> oggetto che rappresenta un tipo di raccolta o un'interfaccia progettato per funzionare con le raccolte, ad esempio <xref:System.Collections.IEnumerable> o <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3550">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="9fb9c-3551">Per verificare se una matrice, usare codice, ad esempio:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3551">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="9fb9c-3552">Se il tipo corrente rappresenta un tipo generico o un parametro di tipo nella definizione di un tipo o metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3552">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3553">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3553">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3554">Nell'esempio seguente viene illustrato l'utilizzo di <xref:System.Type.IsArray%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3554">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3555">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.IsArray" /> e determina se l'oggetto <see cref="T:System.Type" /> è una matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3555">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3556">
            <see langword="true" /> se <see cref="T:System.Type" /> è una matrice. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3556">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3557">Un'istanza di <xref:System.Array> deve restituire classe `false` perché è un oggetto, non è una matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3557">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3558">Nell'esempio seguente esegue l'override di `IsArrayImpl` metodo il `MyTypeDelegator` classe controlla se una variabile è una matrice e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3558">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="9fb9c-3559">Tipo da confrontare con il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3559">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3560">Determina se un'istanza di un tipo specificato può essere assegnata a un'istanza del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3560">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3561">
            <see langword="true" /> se una o più delle condizioni seguenti sono vere:</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3561">
              <see langword="true" /> if any of the following conditions is true:</span>
          </span>  
  
-   <span data-ttu-id="9fb9c-3562"><paramref name="c" /> e l'istanza corrente rappresentano lo stesso tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3562"><paramref name="c" /> and the current instance represent the same type.</span></span>  
  
-   <span data-ttu-id="9fb9c-3563"><paramref name="c" /> deriva direttamente o indirettamente dall'istanza corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3563"><paramref name="c" /> is derived either directly or indirectly from the current instance.</span></span><span data-ttu-id="9fb9c-3564"><paramref name="c" /> deriva direttamente dall'istanza corrente se eredita dall'istanza corrente. <paramref name="c" /> deriva indirettamente dall'istanza corrente se eredita da una successione di una o più classi che ereditano dall'istanza corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3564"><paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span></span>  
  
-   <span data-ttu-id="9fb9c-3565">L'istanza corrente è un'interfaccia implementata da <paramref name="c" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3565">The current instance is an interface that <paramref name="c" /> implements.</span></span>  
  
-   <span data-ttu-id="9fb9c-3566"><paramref name="c" /> è un parametro di tipo generico e l'istanza corrente rappresenta uno dei vincoli di <paramref name="c" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3566"><paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span></span><span data-ttu-id="9fb9c-3567">Nell'esempio seguente, l'istanza corrente è un oggetto <see cref="T:System.Type" /> che rappresenta la classe <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3567">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span></span><span data-ttu-id="9fb9c-3568"><c>GenericWithConstraint</c> è un tipo generico il cui parametro di tipo generico deve essere di tipo <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3568"><c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span></span><span data-ttu-id="9fb9c-3569">Passando il parametro di tipo generico a <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> si indica che un'istanza del parametro di tipo generico può essere assegnata a un oggetto <see cref="T:System.IO.Stream" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3569">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span></span>  
  
     [!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)]
     [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]  
  
-   <span data-ttu-id="9fb9c-3570"><paramref name="c" /> rappresenta un tipo valore e l'istanza corrente rappresenta <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3570"><paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span></span><span data-ttu-id="9fb9c-3571"><see langword="false" /> se non viene soddisfatta nessuna di queste condizioni oppure se <paramref name="c" /> è <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3571"><see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3572">Il <xref:System.Type.IsAssignableFrom%2A> metodo può essere utilizzato per determinare se un'istanza di `c` può essere assegnato a un'istanza del tipo corrente, il metodo è particolarmente utile quando si gestisce gli oggetti i cui tipi non sono noti in fase di progettazione e consente di condizionale assegnazione, come nell'esempio seguente viene illustrato come.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3572">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="9fb9c-3573">Questo metodo garantisce pertanto che una riga di codice, come nell'esempio verrà eseguito in fase di esecuzione senza generare un <xref:System.InvalidCastException> eccezione o un'eccezione simile:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3573">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="9fb9c-3574">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3574">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3575">Una definizione di tipo generico non è assegnabile da un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3575">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="9fb9c-3576">Ovvero, non è possibile assegnare il tipo costruito chiuso `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) a una variabile di tipo `MyGenericList<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3576">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3577">Se il `c` parametro è di tipo <xref:System.Reflection.Emit.TypeBuilder>, il risultato sarà basato sul tipo che deve essere compilato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3577">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="9fb9c-3578">Esempio di codice riportato di seguito viene illustrato questo utilizzando un tipo incorporato denominato `B`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3578">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3579">Nell'esempio seguente viene illustrato il `IsAssignableFrom` metodo utilizzando le classi, matrici di valori integer e generics definiti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3579">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3580">Ottiene un valore che indica se l'attributo di formato della stringa <see langword="AutoClass" /> è selezionato per <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3580">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3581">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="AutoClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3581">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3582">Il <xref:System.Reflection.TypeAttributes.StringFormatMask> consente di selezionare gli attributi di formato della stringa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3582">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="9fb9c-3583">Gli attributi del formato di stringa migliorano l'interoperabilità definendo come interpretare le stringhe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3583">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9fb9c-3584">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3584">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3585">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3585">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3586">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3586">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3587">Ottiene un valore che indica se i campi del tipo corrente sono disposti automaticamente dal Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3587">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3588">
            <see langword="true" /> se la proprietà <see cref="P:System.Type.Attributes" /> del tipo corrente include <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3588">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3589">Questa proprietà viene fornita per praticità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3589">This property is provided as a convenience.</span></span> <span data-ttu-id="9fb9c-3590">In alternativa, è possibile utilizzare il <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> il valore di enumerazione per selezionare tutti gli attributi di layout e quindi testare se <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> è impostata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3590">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9fb9c-3591">Il <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valori dell'enumerazione indicano il modo in cui i campi del tipo vengono disposti nella memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3591">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-3592">Per i tipi dinamici, è possibile specificare <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> quando si crea il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3592">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9fb9c-3593">Nel codice, applicare il <xref:System.Runtime.InteropServices.StructLayoutAttribute> attributo con il <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> il valore di enumerazione al tipo, per inviare al runtime di determinare il modo più appropriato per il layout della classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3593">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3594">Non è possibile utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodo per determinare se il <xref:System.Runtime.InteropServices.StructLayoutAttribute> è stato applicato a un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3594">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9fb9c-3595">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3595">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3596">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3596">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="9fb9c-3597">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3597">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3598">Nell'esempio seguente viene creata un'istanza del tipo e visualizza il <xref:System.Type.IsAutoLayout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3598">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3599">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> viene passato per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3599">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3600">
            <see langword="true" /> se <see cref="T:System.Type" /> viene passato per riferimento. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3600">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3601">Per ottenere il tipo effettivo, dereferenziare il tipo passato per riferimento e quindi chiamare <xref:System.Type.GetElementType%2A> su tale tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3601">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3602">Nell'esempio seguente viene illustrato un utilizzo del `IsByRef` proprietà per controllare se un tipo specificato viene passato per riferimento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3602">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="9fb9c-3603">Nell'esempio viene definita la classe `MyTypeDelegator`, che esegue l'override di `HasElementTypeImpl` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3603">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="9fb9c-3604">La classe principale cerca di `HasElementType` proprietà e consente di visualizzare il tipo di elemento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3604">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3605">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.IsByRef" /> e determina se l'oggetto <see cref="T:System.Type" /> viene passato per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3605">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3606">
            <see langword="true" /> se <see cref="T:System.Type" /> viene passato per riferimento. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3606">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3607">Ottiene un valore che indica se <see cref="T:System.Type" /> è una classe o un delegato, ovvero se non è un tipo di valore o un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3607">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3608">
            <see langword="true" /> se il <see cref="T:System.Type" /> è una classe. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3608">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3609">Questa proprietà restituisce `true` per classi, nonché i delegati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3609">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="9fb9c-3610">Restituisce `false` per i tipi di valore (per le strutture ed enumerazioni) anche se essi vengono sottoposti a boxing.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3610">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="9fb9c-3611">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `true`. Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà restituisce `true` se la definizione di tipo generico è una definizione di classe; ovvero, non definisce un'interfaccia o un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3611">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3612">Questa proprietà restituisce `true` per `Type` istanze che rappresentano il <xref:System.Enum> e <xref:System.ValueType> classi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3612">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="9fb9c-3613">Queste due classi sono rispettivamente i tipi di base per le enumerazioni e tipi di valore, ma non sono i tipi di valore o di enumerazioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3613">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="9fb9c-3614">Per ulteriori informazioni, vedere il <xref:System.Type.IsValueType%2A> e <xref:System.Type.IsEnum%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3614">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="9fb9c-3615">Il <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valore di enumerazione distingue una dichiarazione di tipo classe o interfaccia. Tuttavia, i tipi valore e classi sono contrassegnati con il <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attributo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3615">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="9fb9c-3616">Se si recupera il valore della proprietà di attributi e utilizzare un tipo di <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> valore per determinare se un tipo è una classe anziché un tipo di valore, è necessario chiamare anche il <xref:System.Type.IsValueType%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3616">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="9fb9c-3617">L'esempio per il <xref:System.Reflection.TypeAttributes> enumerazione contiene informazioni aggiuntive, nonché anexample.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3617">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="9fb9c-3618">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3618">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3619">Nell'esempio seguente viene creata un'istanza di un tipo e indica se il tipo è una classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3619">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3620">Ottiene un valore che indica se <see cref="T:System.Type" /> è un oggetto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3620">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3621">
            <see langword="true" /> se <see cref="T:System.Type" /> è un oggetto COM; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3621">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3622">Questo metodo restituisce `false` per interfacce COM perché non sono oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3622">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="9fb9c-3623">COM (interfacce) possono essere implementate da oggetti Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3623">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="9fb9c-3624">È anche possibile caricare una classe COM e ottenere un `Type` oggetto per la classe COM utilizzando il [Tlbimp.exe (utilità di importazione di tipo libreria)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) strumento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3624">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="9fb9c-3625">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3625">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3626">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3626">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3627">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3627">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3628">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.IsCOMObject" /> e determina se <see cref="T:System.Type" /> è un oggetto COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3628">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3629">
            <see langword="true" /> se <see cref="T:System.Type" /> è un oggetto COM; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3629">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3630">Questo metodo restituisce `false` per interfacce COM perché non sono oggetti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3630">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="9fb9c-3631">COM (interfacce) possono essere implementate da oggetti Microsoft .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3631">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3632">Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3632">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="9fb9c-3633">È possibile creare istanze di un tipo generico costruito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3633">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3634">
            <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3634">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3635">Un tipo generico costruito ha tipi espliciti specificati per tutti i relativi parametri di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3635">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="9fb9c-3636">E viene anche definito per un tipo generico chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3636">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="9fb9c-3637">Quando questa proprietà è `true`, è possibile creare istanze del tipo corrente, quando è `false`, non è possibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3637">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3638">Ottiene un valore che indica se è possibile includere <see cref="T:System.Type" /> in un contesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3638">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3639">
            <see langword="true" /> se <see cref="T:System.Type" /> può essere contenuto in un contesto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3639">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3640">Un contesto intercetta le chiamate ai membri della classe e impone i criteri vengono applicati alla classe, ad esempio la sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3640">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="9fb9c-3641">Per ulteriori informazioni sui contesti remoti, vedere <xref:System.Runtime.Remoting.Contexts.Context>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3641">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="9fb9c-3642">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3642">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3643">Nell'esempio seguente viene illustrato il `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> proprietà la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3643">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9fb9c-3644">Controlla se il tipo specificato può essere contenuto nel contesto, se è possibile effettuare il marshalling per riferimento e, se il tipo è un tipo di dati primitivi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3644">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3645">Implementa la proprietà <see cref="P:System.Type.IsContextful" /> e determina se <see cref="T:System.Type" /> può essere contenuto in un contesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3645">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3646">
            <see langword="true" /> se <see cref="T:System.Type" /> può essere contenuto in un contesto; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3646">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3647">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3647">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="9fb9c-3648">Un contesto intercetta le chiamate ai membri della classe e applicare i criteri che vengono applicati alla classe, ad esempio la sincronizzazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3648">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3649">Nell'esempio seguente viene illustrato un utilizzo del `IsContextfulImpl` metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3649">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3650">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3650">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3651">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> corrente è un'enumerazione; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3651">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3652">Questa proprietà restituisce `true` per un'enumerazione, ma non per il <xref:System.Enum> tipo stesso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3652">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="9fb9c-3653">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3653">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3654">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3654">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3655">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3655">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3656">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3656">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3657">Nell'esempio seguente viene illustrato come utilizzare il `IsEnum` proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3657">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="9fb9c-3658">Valore da verificare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3658">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3659">Restituisce un valore che indica se il valore specificato esiste nel tipo di enumerazione corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3659">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3660">
            <see langword="true" /> se il valore specificato è un membro del tipo di enumerazione corrente; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3660">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-3661">Il tipo corrente non è un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3661">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-3662">
            <paramref name="value" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3662">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-3663">Il tipo di <paramref name="value" /> non può essere il tipo sottostante di un'enumerazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3663">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="9fb9c-3664">Tipo COM di cui si verifica l'equivalenza con il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3664">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3665">Determina se due tipi COM presentano la stessa identità e sono idonei per l'equivalenza di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3665">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3666">
            <see langword="true" /> se i tipi COM sono equivalenti; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3666">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9fb9c-3667">Questo metodo restituisce <see langword="false" /> anche se un tipo si trova in un assembly caricato per l'esecuzione e l'altro si trova in un assembly caricato nel contesto ReflectionOnly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3667">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3668">A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], common language runtime supporta l'incorporamento di informazioni sui tipi COM direttamente negli assembly gestiti, anziché richiedere gli assembly gestiti ottenere informazioni sui tipi COM di interoperabilità assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3668">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="9fb9c-3669">Dato che le informazioni sui tipi incorporate includono solo i tipi e membri che vengono effettivamente usati da un assembly gestito, due assembly gestiti potrebbero avere viste diverse dello stesso tipo COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3669">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="9fb9c-3670">Ogni assembly gestito a un oggetto <xref:System.Type> diverso per rappresentare la vista specifica del tipo COM.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3670">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="9fb9c-3671">Common Language Runtime supporta l'equivalenza del tipo tra queste viste diverse per interfacce, strutture, enumerazioni e delegati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3671">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="9fb9c-3672">Equivalenza del tipo significa che è possibile eseguire il cast di un oggetto COM passato da un assembly gestito a un altro sul tipo gestito appropriato nell'assembly ricevente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3672">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="9fb9c-3673">Il <xref:System.Type.IsEquivalentTo%2A> metodo consente a un assembly determinare che un oggetto COM ottenuto da un altro assembly ha la stessa identità COM come uno dei tipi di interoperabilità prima dell'assembly personalizzati incorporati e pertanto può eseguire il cast al tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3673">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="9fb9c-3674">Per ulteriori informazioni, vedere [equivalenza del tipo e i tipi di interoperabilità incorporati](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3674">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3675">Ottiene un valore che indica se i campi del tipo corrente sono disposti a offset specificati in modo esplicito.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3675">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3676">
            <see langword="true" /> se la proprietà <see cref="P:System.Type.Attributes" /> del tipo corrente include <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3676">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3677">Questa proprietà viene fornita per praticità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3677">This property is provided as a convenience.</span></span> <span data-ttu-id="9fb9c-3678">In alternativa, è possibile utilizzare il <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> il valore di enumerazione per selezionare tutti gli attributi di layout e quindi testare se <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> è impostata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3678">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9fb9c-3679">Il <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valori dell'enumerazione indicano il modo in cui i campi del tipo vengono disposti nella memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3679">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-3680">Per i tipi dinamici, è possibile specificare <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> quando si crea il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3680">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9fb9c-3681">Nel codice, applicare il <xref:System.Runtime.InteropServices.StructLayoutAttribute> attributo con il <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> il valore di enumerazione al tipo, per specificare gli offset in corrispondenza del quale avviare i campi sono specificati in modo esplicito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3681">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3682">Non è possibile utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodo per determinare se il <xref:System.Runtime.InteropServices.StructLayoutAttribute> è stato applicato a un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3682">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9fb9c-3683">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3683">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3684">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3684">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3685">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3685">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3686">Nell'esempio seguente viene creata un'istanza di un tipo e visualizza il valore della relativa <xref:System.Type.IsExplicitLayout%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3686">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="9fb9c-3687">Usa il `MySystemTime` (classe), che è anche nell'esempio di codice per <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3687">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3688">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> corrente rappresenta un parametro di tipo nella definizione di un tipo o metodo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3688">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3689">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> rappresenta un parametro di tipo di una definizione di tipo o metodo generico. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3689">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3690"><xref:System.Type> gli oggetti che rappresentano i parametri di tipo generico possono essere ottenuti chiamando il <xref:System.Type.GetGenericArguments%2A> metodo di un <xref:System.Type> oggetto che rappresenta una definizione di tipo generico, o <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> metodo di un <xref:System.Reflection.MethodInfo> oggetto che rappresenta un metodo generico definizione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3690"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="9fb9c-3691">Per un tipo generico o la definizione di metodo di <xref:System.Type.IsGenericParameter%2A> restituisce proprietà `true` per ogni elemento della matrice risultante.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3691">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="9fb9c-3692">Per un tipo costruito chiuso o un metodo, il <xref:System.Type.IsGenericParameter%2A> restituisce proprietà `false` per ogni elemento della matrice restituita dal <xref:System.Type.GetGenericArguments%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3692">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="9fb9c-3693">Per un metodo o un tipo costruito aperto, alcuni elementi della matrice siano tipi specifici e così via potrebbero essere parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3693">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="9fb9c-3694"><xref:System.Type.IsGenericParameter%2A> Restituisce `false` per i tipi e `true` per i parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3694"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="9fb9c-3695">L'esempio di codice per il <xref:System.Type.ContainsGenericParameters%2A> proprietà illustra una classe generica con una combinazione di tipi e parametri di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3695">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="9fb9c-3696">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3696">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3697">L'esempio seguente usa il <xref:System.Type.IsGenericParameter%2A> proprietà per eseguire il test per i parametri di tipo generico in un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3697">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3698">Ottiene un valore che indica se il tipo corrente è un tipo generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3698">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3699">
            <see langword="true" /> Se il tipo corrente è un tipo generico. in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3699">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3700">Utilizzare il <xref:System.Type.IsGenericType%2A> proprietà per determinare se un <xref:System.Type> oggetto rappresenta un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3700">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="9fb9c-3701">Utilizzare il <xref:System.Type.ContainsGenericParameters%2A> proprietà per determinare se un <xref:System.Type> oggetto rappresenta un tipo costruito aperto o chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3701">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3702">Il <xref:System.Type.IsGenericType%2A> restituisce proprietà `false` se il tipo di controllo immediato non è generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3702">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="9fb9c-3703">Ad esempio, una matrice i cui elementi sono di tipo `A<int>` (`A(Of Integer)` in Visual Basic) non è un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3703">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="9fb9c-3704">Nella tabella seguente sono riepilogate le condizioni invariante per termini comuni usati nella reflection generica.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3704">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="9fb9c-3705">Termine</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3705">Term</span></span>|<span data-ttu-id="9fb9c-3706">Invariante</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3706">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="9fb9c-3707">definizione di tipo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3707">generic type definition</span></span>|<span data-ttu-id="9fb9c-3708">La proprietà <xref:System.Type.IsGenericTypeDefinition%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3708">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3709">Definisce un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3709">Defines a generic type.</span></span> <span data-ttu-id="9fb9c-3710">Viene creato un tipo costruito chiamando il <xref:System.Type.MakeGenericType%2A> metodo su un <xref:System.Type> dell'oggetto che rappresenta una definizione di tipo generico e specificando una matrice di argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3710">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="9fb9c-3711"><xref:System.Type.MakeGenericType%2A> può essere chiamato solo in definizioni di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3711"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="9fb9c-3712">Qualsiasi definizione di tipo generico è un tipo generico (il <xref:System.Type.IsGenericType%2A> proprietà `true`), ma non è vero il contrario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3712">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="9fb9c-3713">tipo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3713">generic type</span></span>|<span data-ttu-id="9fb9c-3714">La proprietà <xref:System.Type.IsGenericType%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3714">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3715">Può essere una definizione di tipo generico, un tipo costruito aperto o un tipo costruito chiuso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3715">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="9fb9c-3716">Si noti che una matrice di tipo il cui tipo di elemento sono di tipo generico non è un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3716">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="9fb9c-3717">Lo stesso vale per un <xref:System.Type> oggetto che rappresenta un puntatore a un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3717">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="9fb9c-3718">tipo costruito aperto</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3718">open constructed type</span></span>|<span data-ttu-id="9fb9c-3719">La proprietà <xref:System.Type.ContainsGenericParameters%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3719">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3720">Esempi sono un tipo generico non assegnati parametri di tipo, un tipo annidato in una definizione di tipo generico o in un tipo costruito aperto o un tipo generico che dispone di un argomento di tipo per cui il <xref:System.Type.ContainsGenericParameters%2A> proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3720">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3721">Non è possibile creare un'istanza di un tipo costruito aperto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3721">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="9fb9c-3722">Si noti che i tipi costruiti aperti non di tutti i generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3722">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="9fb9c-3723">Ad esempio, una matrice il cui tipo di elemento è una definizione di tipo generico non è generica e un puntatore a un tipo costruito aperto non è generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3723">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="9fb9c-3724">tipo costruito chiuso</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3724">closed constructed type</span></span>|<span data-ttu-id="9fb9c-3725">La proprietà <xref:System.Type.ContainsGenericParameters%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3725">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3726">Quando viene esaminato in modo ricorsivo, il tipo non dispone di alcun parametro generico non assegnati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3726">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="9fb9c-3727">parametro di tipo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3727">generic type parameter</span></span>|<span data-ttu-id="9fb9c-3728">La proprietà <xref:System.Type.IsGenericParameter%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3728">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3729">La proprietà <xref:System.Type.ContainsGenericParameters%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3729">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3730">In una definizione di tipo generico, un segnaposto per un tipo che verrà assegnato in un secondo momento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3730">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="9fb9c-3731">argomento di tipo generico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3731">generic type argument</span></span>|<span data-ttu-id="9fb9c-3732">Può essere qualsiasi tipo, incluso un parametro di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3732">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="9fb9c-3733">Gli argomenti di tipo vengono specificati come una matrice di <xref:System.Type> gli oggetti passati al <xref:System.Type.MakeGenericType%2A> metodo durante la creazione di un tipo generico costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3733">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="9fb9c-3734">Se vengono create, le istanze del tipo risultante il <xref:System.Type.ContainsGenericParameters%2A> proprietà deve essere `false` per tutti gli argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3734">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="9fb9c-3735">L'esempio di codice e la tabella seguenti illustrano alcune di queste condizioni e invarianti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3735">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="9fb9c-3736">La `Derived` classe è di particolare interesse, perché il tipo di base è un tipo costruito che dispone di una combinazione di tipi e parametri di tipo nell'elenco di argomenti tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3736">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="9fb9c-3737">Nella tabella seguente vengono illustrati alcuni esempi che utilizzano e compilare per le classi `Base`, `Derived`, e `G`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3737">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="9fb9c-3738">Quando il codice C++ e c# è la stessa, viene visualizzata una sola voce.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3738">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="9fb9c-3739">Esempio</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3739">Example</span></span>|<span data-ttu-id="9fb9c-3740">Invarianti</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3740">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="9fb9c-3741">Per questo tipo:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3741">For this type:</span></span><br /><br /> <span data-ttu-id="9fb9c-3742"><xref:System.Type.IsGenericType%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3742"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3743"><xref:System.Type.IsGenericTypeDefinition%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3743"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3744"><xref:System.Type.ContainsGenericParameters%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3744"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="9fb9c-3745">Per questo tipo:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3745">For this type:</span></span><br /><br /> <span data-ttu-id="9fb9c-3746"><xref:System.Type.IsGenericType%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3746"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3747"><xref:System.Type.IsGenericTypeDefinition%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3747"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3748"><xref:System.Type.ContainsGenericParameters%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3748"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="9fb9c-3749">Per il tipo di variabile `d`:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3749">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="9fb9c-3750"><xref:System.Type.IsGenericType%2A> è `false` perché `d` è una matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3750"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="9fb9c-3751"><xref:System.Type.IsGenericTypeDefinition%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3751"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3752"><xref:System.Type.ContainsGenericParameters%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3752"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="9fb9c-3753">`T`, `U`, e `V` (everywhere vengono visualizzati)</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3753">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="9fb9c-3754"><xref:System.Type.IsGenericParameter%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3754"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3755"><xref:System.Type.IsGenericType%2A> è `false` perché non è possibile vincolare un parametro di tipo a tipi generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3755"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="9fb9c-3756"><xref:System.Type.IsGenericTypeDefinition%2A> è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3756"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3757"><xref:System.Type.ContainsGenericParameters%2A> è `true` perché `T`, `U`, e `V` sono a loro volta parametri di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3757"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="9fb9c-3758">Ciò non implica necessariamente gli argomenti tipo che a loro assegnati in un secondo momento.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3758">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="9fb9c-3759">Il tipo di campo `F`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3759">The type of field `F`</span></span>|<span data-ttu-id="9fb9c-3760"><xref:System.Type.IsGenericType%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3760"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3761"><xref:System.Type.IsGenericTypeDefinition%2A> è `false` perché è stato assegnato un tipo per il parametro di tipo `G`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3761"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="9fb9c-3762">Si noti che questo è equivalente alla chiamata di <xref:System.Type.MakeGenericType%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3762">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="9fb9c-3763"><xref:System.Type.ContainsGenericParameters%2A> è `true` perché il tipo di campo `F` è un argomento di tipo che è un tipo costruito aperto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3763"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="9fb9c-3764">Il tipo costruito è aperto perché il relativo argomento di tipo (vale a dire `Base`) è una definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3764">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="9fb9c-3765">Mostra la natura ricorsiva della <xref:System.Type.IsGenericType%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3765">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="9fb9c-3766">La classe annidata `Nested`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3766">The nested class `Nested`</span></span>|<span data-ttu-id="9fb9c-3767"><xref:System.Type.IsGenericType%2A> è `true`, anche se la `Nested` classe non dispone di alcun parametro di tipo generico di un proprio, perché è annidata in un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3767"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="9fb9c-3768"><xref:System.Type.IsGenericTypeDefinition%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3768"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="9fb9c-3769">Ovvero, è possibile chiamare il <xref:System.Type.MakeGenericType%2A> metodo e fornire il parametro di tipo del tipo di inclusione, `Derived`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3769">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="9fb9c-3770"><xref:System.Type.ContainsGenericParameters%2A> è `true` poiché il tipo contenitore, `Derived`, dispone di parametri di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3770"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="9fb9c-3771">Mostra la natura ricorsiva della <xref:System.Type.ContainsGenericParameters%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3771">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3772">Esempio di codice seguente consente di visualizzare il valore di <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, e <xref:System.Type.ContainsGenericParameters%2A> proprietà per i tipi descritti nella sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3772">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="9fb9c-3773">Per una spiegazione dei valori di proprietà, vedere la tabella nella sezione Osservazioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3773">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3774">Ottiene un valore che indica se la classe <see cref="T:System.Type" /> corrente rappresenta una definizione di tipo generico, da cui è possibile costruire altri tipi generici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3774">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3775">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> rappresenta una definizione di tipo generico. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3775">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3776">Una definizione di tipo generico è un modello da cui è possibile costruire altri tipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3776">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="9fb9c-3777">Ad esempio, dalla definizione di tipo generico `G<T>` (espressi nella sintassi c#; `G(Of T)` in Visual Basic o `generic <typename T> ref class G` in C++) è possibile costruire e creare istanze del tipo `G<int>` (`G(Of Integer)` in Visual Basic), chiamando la <xref:System.Type.MakeGenericType%2A> metodo con un elenco di argomento generico che contiene il <xref:System.Int32> tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3777">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="9fb9c-3778">Dato un <xref:System.Type> oggetto che rappresenta questo tipo costruito, il <xref:System.Type.GetGenericTypeDefinition%2A> metodo ottiene la definizione di tipo generico nuovamente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3778">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="9fb9c-3779">Utilizzare il <xref:System.Type.IsGenericTypeDefinition%2A> proprietà per determinare se è possibile creare nuovi tipi dal tipo corrente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3779">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="9fb9c-3780">Se il <xref:System.Type.IsGenericTypeDefinition%2A> restituisce proprietà `true`, è possibile chiamare il <xref:System.Type.MakeGenericType%2A> metodo per creare nuovi tipi generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3780">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="9fb9c-3781">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3781">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3782">Nell'esempio seguente visualizza informazioni su un tipo, incluso o meno una definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3782">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="9fb9c-3783">Vengono visualizzate informazioni per un tipo costruito, la definizione di tipo generico e un tipo ordinario.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3783">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3784">Ottiene un valore che indica se <see cref="T:System.Type" /> dispone di un attributo <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> applicato, che ne indica l'importazione da una libreria di tipi COM.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3784">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3785">
            <see langword="true" /> se <see cref="T:System.Type" /> dispone di <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3785">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3786">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3786">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3787">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3787">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="9fb9c-3788">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3788">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="9fb9c-3789">Oggetto da confrontare con il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3789">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-3790">Determina se l'oggetto specificato è un'istanza dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3790">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3791">
            <see langword="true" /> se l'oggetto <see langword="Type" /> corrente è incluso nella gerarchia di ereditarietà dell'oggetto rappresentato da <paramref name="o" /> oppure se l'oggetto <see langword="Type" /> corrente è un'interfaccia implementata da <paramref name="o" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3791">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="9fb9c-3792">
            <see langword="false" /> se non viene soddisfatta nessuna di queste condizioni, se <paramref name="o" /> è <see langword="null" /> oppure se l'oggetto <see langword="Type" /> corrente è un tipo generico aperto, ovvero la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3792">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3793">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3793">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3794">Un tipo costruito non è un'istanza della relativa definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3794">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="9fb9c-3795">Vale a dire `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) non è un'istanza di `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3795">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3796">Nell'esempio seguente viene illustrato l'uso del metodo `IsInstanceOfType`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3796">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3797">Ottiene un valore che indica se <see cref="T:System.Type" /> è un'interfaccia, ovvero non è una classe né un tipo di valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3797">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3798">
            <see langword="true" /> se <see cref="T:System.Type" /> è un'interfaccia; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3798">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3799">Il <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distingue una dichiarazione di tipo classe, interfaccia o tipo valore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3799">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="9fb9c-3800">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3800">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3801">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3801">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3802">Nell'esempio seguente crea un'interfaccia, Cerca il tipo di interfaccia e indica se dispone di una classe di `IsInterface` set di proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3802">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3803">Ottiene un valore che indica se i campi del tipo corrente sono disposti in sequenza, nell'ordine in cui sono stati definiti o rilasciati ai metadati.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3803">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3804">
            <see langword="true" /> se la proprietà <see cref="P:System.Type.Attributes" /> del tipo corrente include <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3804">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3805">Questa proprietà viene fornita per praticità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3805">This property is provided as a convenience.</span></span> <span data-ttu-id="9fb9c-3806">In alternativa, è possibile utilizzare il <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> il valore di enumerazione per selezionare tutti gli attributi di layout e quindi testare se <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> è impostata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3806">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="9fb9c-3807">Il <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, e <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> valori dell'enumerazione indicano il modo in cui i campi del tipo vengono disposti nella memoria.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3807">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="9fb9c-3808">Per i tipi dinamici, è possibile specificare <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> quando si crea il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3808">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="9fb9c-3809">Nel codice, applicare il <xref:System.Runtime.InteropServices.StructLayoutAttribute> attributo con il <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> il valore di enumerazione al tipo, per specificare che il layout è sequenza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3809">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3810">Non è possibile utilizzare il <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodo per determinare se il <xref:System.Runtime.InteropServices.StructLayoutAttribute> è stato applicato a un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3810">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="9fb9c-3811">Per ulteriori informazioni, vedere la sezione 9.1.2 della specifica per la documentazione di Common Language Infrastructure (CLI), "Partizione II: metadati definizione e la semantica".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3811">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="9fb9c-3812">La documentazione è disponibile online; vedere [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (ECMA C# e standard di Common Language Infrastructure) in MSDN e [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) nel sito Web internazionale Ecma.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3812">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="9fb9c-3813">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3813">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3814">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3814">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3815">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3815">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3816">Nell'esempio seguente crea un'istanza di una classe per cui il <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> valore di enumerazione nel <xref:System.Runtime.InteropServices.StructLayoutAttribute> classe è stata impostata, verifica la presenza del <xref:System.Type.IsLayoutSequential%2A> , proprietà e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3816">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3817">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> viene sottoposto a marshalling per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3817">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3818">
            <see langword="true" /> se <see cref="T:System.Type" /> viene sottoposto a marshalling per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3818">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9fb9c-3819">Nell'esempio seguente viene illustrato il `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> proprietà la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3819">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9fb9c-3820">Controlla se il tipo specificato può essere contenuto nel contesto, se è possibile effettuare il marshalling per riferimento e, se il tipo è un tipo di dati primitivi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3820">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3821">Implementa la proprietà <see cref="P:System.Type.IsMarshalByRef" /> e determina se l'oggetto <see cref="T:System.Type" /> viene sottoposto a marshalling per riferimento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3821">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3822">
            <see langword="true" /> se <see cref="T:System.Type" /> viene sottoposto a marshalling per riferimento; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3822">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3823">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3823">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3824">Nell'esempio seguente determina se il tipo specificato viene sottoposto a marshalling per riferimento e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3824">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3825">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> corrente rappresenta un tipo la cui definizione è annidata all'interno della definizione di un altro tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3825">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3826">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> è annidato all'interno di un altro tipo; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3826">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3827">Il <xref:System.Type.IsNested%2A> restituisce proprietà `true` per tutti i tipi annidati, indipendentemente dalla visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3827">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="9fb9c-3828">Per testare l'annidamento e la visibilità nello stesso momento, utilizzare le proprietà correlate <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, o <xref:System.Type.IsNestedPublic%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3828">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3829">Il <xref:System.Reflection.TypeAttributes.VisibilityMask> membro di enumerazione seleziona gli attributi di visibilità per un tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3829">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3830">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3830">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3831">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3831">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3832">Ottiene un valore che indica se <see cref="T:System.Type" /> è annidato e visibile soltanto all'interno dell'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3832">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3833">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile soltanto all'interno dell'assembly; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3833">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3834">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3834">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3835"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3835"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3836">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3836">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3837">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3837">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3838">Ottiene un valore che indica se <see cref="T:System.Type" /> è annidato e visibile soltanto alle classi della stessa famiglia e dello stesso assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3838">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3839">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile soltanto alle classi della stessa famiglia e dello stesso assembly. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3839">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3840">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3840">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3841"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3841"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-3842">I linguaggi c# e Visual Basic non includono semantica che consentono di definire un tipo annidato è visibile solo per i tipi protetti nel proprio assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3842">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="9fb9c-3843">`protected internal` visibilità in c# e `Protected Friend` visibilità in Visual Basic definisce un tipo annidato è visibile per i tipi protetti e per i tipi nello stesso assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3843">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="9fb9c-3844">Oggetto <xref:System.Type> famiglia dell'oggetto è definita come tutti gli oggetti dello stesso <xref:System.Type> e dei relativi sottotipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3844">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3845">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3845">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3846">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3846">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3847">Ottiene un valore che indica se <see cref="T:System.Type" /> è annidato e visibile solo all'interno della famiglia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3847">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3848">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile solo all'interno della famiglia; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3848">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3849">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3849">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3850"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3850"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="9fb9c-3851">Oggetto <xref:System.Type> famiglia dell'oggetto è definita come tutti gli oggetti di uno stesso <xref:System.Type> e dei relativi sottotipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3851">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3852">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3852">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3853">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3853">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3854">Ottiene un valore che indica se <see cref="T:System.Type" /> è annidato e visibile solo alle classi della stessa famiglia o dello stesso assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3854">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3855">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e visibile solo alle classi della stessa famiglia o dello stesso assembly; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3855">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3856">Se la visibilità di un tipo è `protected internal` in c# o `Protected Friend` in Visual Basic il <xref:System.Type.IsNestedFamORAssem%2A> restituisce proprietà `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3856">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="9fb9c-3857">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3857">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="9fb9c-3859">Oggetto <xref:System.Type> famiglia dell'oggetto è definita come tutti gli oggetti di uno stesso <xref:System.Type> e dei relativi sottotipi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3859">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3860">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3860">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3861">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3861">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3862">Ottiene un valore che indica se <see cref="T:System.Type" /> è annidato e dichiarato privato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3862">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3863">
            <see langword="true" /> se <see cref="T:System.Type" /> è annidato e dichiarato privato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3863">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3864">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3864">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3865"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3865"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3866">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3866">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3867">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3867">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3868">Ottiene un valore che indica se una classe è annidata e dichiarata pubblica.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3868">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3869">
            <see langword="true" /> se la classe è annidata e dichiarata pubblica. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3869">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3870">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3870">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3871"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3871"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3872">L'esempio seguente crea una classe esterna con un numero di classi annidate che hanno tipi diversi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3872">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="9fb9c-3873">Viene quindi recuperato il valore di un numero di correlate alla visibilità <xref:System.Type> le proprietà per il tipo padre e ciascuno dei relativi tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3873">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3874">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> non è dichiarato pubblico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3874">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3875">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> non è dichiarato pubblico e non è un tipo annidato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3875">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3876">Non utilizzare questa proprietà con i tipi annidati; Utilizzare il <xref:System.Type.IsNestedPublic%2A> proprietà invece.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3876">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="9fb9c-3877">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3878">Questo esempio usesthe `IsNotPublic` proprietà da ottenere la visibilità del tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3878">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="9fb9c-3879">Esempio di codice seguente viene illustrato perché non è possibile utilizzare `IsPublic` e `IsNotPublic` per le classi annidate.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3879">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="9fb9c-3880">Per le classi annidate, ignorare i risultati di `IsPublic` e `IsNotPublic` e tenere in considerazione solo i risultati di `IsNestedPublic` e `IsNestedPrivate`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3880">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="9fb9c-3881">L'output di reflection per questo frammento di codice sarà come segue:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3881">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="9fb9c-3882">Classe</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3882">Class</span></span>|<span data-ttu-id="9fb9c-3883">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3883">IsNotPublic</span></span>|<span data-ttu-id="9fb9c-3884">IsPublic</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3884">IsPublic</span></span>|<span data-ttu-id="9fb9c-3885">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3885">IsNestedPublic</span></span>|<span data-ttu-id="9fb9c-3886">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3886">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="9fb9c-3887">A</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3887">A</span></span>|<span data-ttu-id="9fb9c-3888">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3888">FALSE</span></span>|<span data-ttu-id="9fb9c-3889">true</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3889">TRUE</span></span>|<span data-ttu-id="9fb9c-3890">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3890">FALSE</span></span>|<span data-ttu-id="9fb9c-3891">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3891">FALSE</span></span>|  
|<span data-ttu-id="9fb9c-3892">B</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3892">B</span></span>|<span data-ttu-id="9fb9c-3893">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3893">FALSE</span></span>|<span data-ttu-id="9fb9c-3894">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3894">FALSE</span></span>|<span data-ttu-id="9fb9c-3895">true</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3895">TRUE</span></span>|<span data-ttu-id="9fb9c-3896">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3896">FALSE</span></span>|  
|<span data-ttu-id="9fb9c-3897">C</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3897">C</span></span>|<span data-ttu-id="9fb9c-3898">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3898">FALSE</span></span>|<span data-ttu-id="9fb9c-3899">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3899">FALSE</span></span>|<span data-ttu-id="9fb9c-3900">false</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3900">FALSE</span></span>|<span data-ttu-id="9fb9c-3901">true</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3901">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3902">Ottiene un valore che indica se <see cref="T:System.Type" /> è un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3902">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3903">
            <see langword="true" /> se <see cref="T:System.Type" /> è un puntatore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3903">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3904">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico o un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3904">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3905">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3905">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3906">Nell'esempio seguente viene illustrato un utilizzo della `IsPointer` proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3906">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3907">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.IsPointer" /> e determina se l'oggetto <see cref="T:System.Type" /> è un puntatore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3907">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3908">
            <see langword="true" /> se <see cref="T:System.Type" /> è un puntatore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3908">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3909">Ottiene un valore che indica se <see cref="T:System.Type" /> è uno dei tipi primitivi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3909">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3910">
            <see langword="true" /> se <see cref="T:System.Type" /> è uno dei tipi primitivi. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3910">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3911">I tipi primitivi sono <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, e <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3911">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="9fb9c-3912">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico o un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3912">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3913">Nell'esempio seguente viene illustrato il `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, e <xref:System.Type.IsPrimitive%2A> proprietà la <xref:System.Type> classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3913">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="9fb9c-3914">Controlla se il tipo specificato può essere contenuto nel contesto, se è possibile effettuare il marshalling per riferimento e, se il tipo è un tipo di dati primitivi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3914">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3915">Quando ne viene eseguito l'override in una classe derivata, implementa la proprietà <see cref="P:System.Type.IsPrimitive" /> e determina se l'oggetto <see cref="T:System.Type" /> corrisponde a uno dei tipi primitivi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3915">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-3916">
            <see langword="true" /> se <see cref="T:System.Type" /> è uno dei tipi primitivi. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3916">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3917">I tipi primitivi sono <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, e <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3917">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3918">Nell'esempio seguente determina se il tipo specificato è un tipo primitivo e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3918">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3919">Ottiene un valore che indica se l'oggetto <see cref="T:System.Type" /> è dichiarato pubblico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3919">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3920">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> è dichiarato pubblico e non è un tipo annidato; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3920">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3921">Non utilizzare con i tipi annidati; Utilizzare <xref:System.Type.IsNestedPublic%2A> invece.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3921">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="9fb9c-3922">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3922">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="9fb9c-3923"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> Consente di selezionare gli attributi di visibilità.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3923"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3924">L'esempio seguente crea un'istanza di `MyTestClass`, verifica la presenza di `IsPublic` proprietà e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3924">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="9fb9c-3925">Per le classi annidate, ignorare i risultati di `IsPublic` e `IsNotPublic` e tenere in considerazione solo i risultati di <xref:System.Type.IsNestedPublic%2A> e <xref:System.Type.IsNestedPrivate%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3925">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3926">Ottiene un valore che indica se <see cref="T:System.Type" /> è dichiarato sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3926">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3927">
            <see langword="true" /> se <see cref="T:System.Type" /> è dichiarato sealed; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3927">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3928">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo di un tipo generico, questa proprietà restituisce sempre `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3928">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3929">L'esempio seguente crea un'istanza di un `sealed` classe, Cerca il `IsSealed` , proprietà e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3929">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3930">Ottiene un valore che indica se il tipo corrente è SecurityCritical o SecuritySafeCritical al livello di attendibilità corrente e può pertanto eseguire operazioni critiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3930">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3931">
            <see langword="true" /> se il tipo corrente è SecurityCritical o SecuritySafeCritical al livello di attendibilità corrente, <see langword="false" /> se è trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3931">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3932">Il <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> riportano il livello di trasparenza del tipo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3932">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9fb9c-3933">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3933">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9fb9c-3934">Livello di sicurezza</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3934">Security level</span></span>|<span data-ttu-id="9fb9c-3935">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3935">IsSecurityCritical</span></span>|<span data-ttu-id="9fb9c-3936">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3936">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9fb9c-3937">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3937">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9fb9c-3938">Critico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3938">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9fb9c-3939">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3939">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9fb9c-3940">Trasparente</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3940">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9fb9c-3941">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3941">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9fb9c-3942">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3942">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9fb9c-3943">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3943">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9fb9c-3944">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3944">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9fb9c-3945">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3945">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9fb9c-3946">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3946">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9fb9c-3947">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3947">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9fb9c-3948">Per ulteriori informazioni sulla reflection e trasparenza, vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3948">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9fb9c-3949">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3949">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3950">Ottiene un valore che indica se il tipo corrente è SecuritySafeCritical al livello di attendibilità corrente, vale a dire se può eseguire operazioni critiche e se è possibile accedervi tramite codice trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3950">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3951">
            <see langword="true" /> se il tipo corrente è SecuritySafeCritical al livello di attendibilità corrente, <see langword="false" /> se è SecurityCritical o trasparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3951">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3952">Il <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> riportano il livello di trasparenza del tipo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3952">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9fb9c-3953">Le combinazioni di queste proprietà vengono visualizzate nella tabella seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3953">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="9fb9c-3954">Livello di sicurezza</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3954">Security level</span></span>|<span data-ttu-id="9fb9c-3955">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3955">IsSecurityCritical</span></span>|<span data-ttu-id="9fb9c-3956">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3956">IsSecuritySafeCritical</span></span>|<span data-ttu-id="9fb9c-3957">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3957">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="9fb9c-3958">Critico</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3958">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="9fb9c-3959">Critico per la sicurezza</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3959">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="9fb9c-3960">Trasparente</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3960">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="9fb9c-3961">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3961">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9fb9c-3962">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3962">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9fb9c-3963">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3963">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9fb9c-3964">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3964">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9fb9c-3965">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3965">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9fb9c-3966">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3966">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9fb9c-3967">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3967">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9fb9c-3968">Per ulteriori informazioni sulla reflection e trasparenza, vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3968">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9fb9c-3969">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3969">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3970">Ottiene un valore che indica se il tipo corrente è trasparente al livello di attendibilità corrente e non può quindi eseguire operazioni critiche.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3970">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3971">
            <see langword="true" /> se il tipo è SecurityTransparent al livello di attendibilità corrente; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3971">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3972">Se questa proprietà restituisce `true`, <xref:System.Type.IsSecurityCritical%2A> e <xref:System.Type.IsSecuritySafeCritical%2A> restituiscono `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3972">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-3973">Il <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, e <xref:System.Type.IsSecurityTransparent%2A> riportano il livello di trasparenza del tipo al livello di attendibilità corrente, come determinato da common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3973">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="9fb9c-3974">Usare queste proprietà è molto più semplice che non esaminare le annotazioni di sicurezza di un assembly e dei suoi tipi, controllare il livello di attendibilità corrente e tentare di duplicare le regole del runtime.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3974">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9fb9c-3975">Per gli assembly parzialmente attendibile, il valore di questa proprietà dipende dal livello di attendibilità corrente dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3975">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="9fb9c-3976">Se l'assembly viene caricato in un dominio di applicazione parzialmente attendibile (ad esempio, in un dominio applicazione creato mediante sandbox), il runtime ignora le annotazioni di sicurezza dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3976">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="9fb9c-3977">L'assembly e tutti i relativi tipi vengono considerati come trasparente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3977">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="9fb9c-3978">Il runtime presta attenzione per le annotazioni di sicurezza di un assembly con attendibilità parziale solo quando l'assembly viene caricato in un dominio applicazione completamente attendibile (ad esempio, nel dominio applicazione predefinito di un'applicazione desktop).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3978">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="9fb9c-3979">Al contrario, un assembly attendibile (vale a dire un assembly con nome sicuro che viene installato nella global assembly cache) è sempre caricato con attendibilità indipendentemente dal livello di trust del dominio dell'applicazione, pertanto il relativo livello di attendibilità corrente è sempre completamente attendibile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3979">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="9fb9c-3980">È possibile determinare i livelli di attendibilità corrente di domini applicazione e assembly utilizzando il <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> e <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3980">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="9fb9c-3981">Per ulteriori informazioni sulla reflection e trasparenza, vedere [considerazioni sulla sicurezza per la Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3981">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="9fb9c-3982">Per informazioni su trasparenza, vedere [modifiche della sicurezza](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3982">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3983">Ottiene un valore che indica se <see cref="T:System.Type" /> è serializzabile.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3983">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3984">
            <see langword="true" /> se <see cref="T:System.Type" /> è serializzabile; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3984">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="9fb9c-3985">Tipi definiti nello Standard .NET non contrassegnati con <xref:System.SerializableAttribute>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3985">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="9fb9c-3986">Ogni implementazione di .NET, invece, determina se un tipo è serializzabile.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3986">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="9fb9c-3987">In fase di esecuzione, è possibile utilizzare il <xref:System.Type.IsSerializable%2A> proprietà per determinare se tale implementazione supporta la serializzazione di un'istanza del tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3987">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="9fb9c-3988">Per ulteriori informazioni e un esempio, vedere [come determinare se un oggetto .NET Standard è serializzabile](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3988">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="9fb9c-3989">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3989">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3990">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3990">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3991">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3991">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-3992">L'esempio seguente crea un'istanza di `MyTestClass` (classe), imposta l'attributo [Serializable] e controlla il `IsSerializable` proprietà `true` o `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3992">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-3993">Ottiene un valore che indica se per il nome del tipo richiede una gestione speciale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3993">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-3994">
            <see langword="true" /> se il nome del tipo richiede una gestione speciale; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3994">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-3995">I nomi che iniziano con o contengono un carattere di sottolineatura (_), funzioni di accesso a proprietà e metodi di overload dell'operatore sono esempi di tipi che possono richiedere un trattamento speciale da alcuni compilatori.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3995">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="9fb9c-3996">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3996">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-3997">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3997">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-3998">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-3998">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="9fb9c-3999">Tipo da confrontare con il tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-3999">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4000">Determina se l'oggetto <see cref="T:System.Type" /> corrente deriva dall'oggetto <see cref="T:System.Type" /> specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4000">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4001">
            <see langword="true" /> se l'oggetto <see langword="Type" /> corrente deriva da <paramref name="c" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4001">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4002">Questo metodo restituisce anche <see langword="false" /> se <paramref name="c" /> e l'oggetto <see langword="Type" /> corrente sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4002">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4003">È possibile chiamare il <xref:System.Type.IsSubclassOf%2A> metodo per determinare le seguenti operazioni:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4003">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="9fb9c-4004">Una classe che deriva da un altro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4004">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="9fb9c-4005">Se un tipo deriva da <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4005">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="9fb9c-4006">Tuttavia, il <xref:System.Type.IsValueType%2A> è un modo più efficace per determinare se un tipo è un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4006">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="9fb9c-4007">Se un tipo deriva da <xref:System.Enum>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4007">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="9fb9c-4008">Tuttavia, il <xref:System.Type.IsEnum%2A> metodo è un modo più efficace per determinare se un tipo è un'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4008">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="9fb9c-4009">Se un tipo è un delegato, ovvero se deriva da uno <xref:System.Delegate> o <xref:System.MulticastDelegate>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4009">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="9fb9c-4010">Il <xref:System.Type.IsSubclassOf%2A> metodo non può essere utilizzato per determinare se un'interfaccia deriva da un'altra interfaccia, o se una classe implementa un'interfaccia.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4010">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="9fb9c-4011">Utilizzare il <xref:System.Type.IsAssignableFrom%2A> metodo a tale scopo, come illustrato nell'esempio seguente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4011">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="9fb9c-4012">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo o metodo generico, deriva dal relativo vincolo di classe oppure da <xref:System.Object?displayProperty=nameWithType> se non sono presenti vincoli di classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4012">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-4013">Tranne quando è usato con le interfacce, <xref:System.Type.IsSubclassOf%2A> è il contrario di <xref:System.Type.IsAssignableFrom%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4013">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="9fb9c-4014">Vale a dire se `t1.IsSubclassOf(t2)` è `true`, quindi `t2.IsAssignableFrom(t1)` anche `true`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4014">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="9fb9c-4015">Questo metodo può essere sottoposto a override da una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4015">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4016">Nell'esempio seguente viene creata una classe denominata `Class1` e una classe derivata denominata `DerivedC1`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4016">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="9fb9c-4017">Chiama il <xref:System.Type.IsSubclassOf%2A> metodo per verificare che `DerivedC1` è una sottoclasse di `Class1`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4017">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-4018">
            <paramref name="c" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4018">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4019">Ottiene un valore che indica se l'attributo di formato della stringa <see langword="UnicodeClass" /> è selezionato per <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4019">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4020">
            <see langword="true" /> se l'attributo di formato della stringa <see langword="UnicodeClass" /> è selezionato per <see cref="T:System.Type" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4020">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4021">Il <xref:System.Reflection.TypeAttributes.StringFormatMask> consente di selezionare gli attributi di formato della stringa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4021">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="9fb9c-4022">Gli attributi del formato di stringa migliorano l'interoperabilità definendo come interpretare le stringhe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4022">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="9fb9c-4023">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4023">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-4024">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4024">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-4025">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4025">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4026">Ottiene un valore che indica se <see cref="T:System.Type" /> è un tipo di valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4026">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4027">
            <see langword="true" /> se <see cref="T:System.Type" /> è un tipo di valore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4027">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4028">Tipi di valore sono tipi che sono rappresentati come sequenze di bit; tipi di valore non sono classi o interfacce.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4028">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="9fb9c-4029">Tipi di valore sono definiti come "struct" in alcuni linguaggi di programmazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4029">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="9fb9c-4030">Le enumerazioni sono un tipo speciale di tipi di valore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4030">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="9fb9c-4031">Questa proprietà restituisce `false` per il <xref:System.ValueType> classe, perché <xref:System.ValueType> non è un tipo di valore stesso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4031">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="9fb9c-4032">È la classe base per tutti i tipi di valore e, pertanto qualsiasi tipo di valore può essere assegnato a esso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4032">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="9fb9c-4033">Ciò non sarebbe possibile se <xref:System.ValueType> stesso stato di un tipo di valore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4033">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="9fb9c-4034">Tipi di valore sono boxed quando vengono assegnate a un campo di tipo <xref:System.ValueType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4034">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="9fb9c-4035">Questa proprietà restituisce `true` per le enumerazioni, ma non per il <xref:System.Enum> tipo stesso.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4035">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="9fb9c-4036">Per un esempio che illustri questo comportamento, vedere <xref:System.Type.IsEnum%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4036">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="9fb9c-4037">Questa proprietà è di sola lettura.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4037">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4038">Nell'esempio seguente viene creata una variabile di tipo `MyEnum`, verifica la presenza di `IsValueType` , proprietà e viene visualizzato il risultato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4038">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4039">Implementa la proprietà <see cref="P:System.Type.IsValueType" /> e determina se l'oggetto <see cref="T:System.Type" /> è un tipo di valore, ovvero, non una classe o un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4039">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4040">
            <see langword="true" /> se <see cref="T:System.Type" /> è un tipo di valore. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4040">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4041">Questo metodo è fornito per abilitare l'implementazione di sistemi di tipi alternativo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4041">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="9fb9c-4042">Non è in genere utilizzato nel codice dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4042">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4043">Ottiene un valore che indica se è possibile accedere a <see cref="T:System.Type" /> da codice esterno all'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4043">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4044">
            <see langword="true" /> se l'oggetto <see cref="T:System.Type" /> corrente è un tipo pubblico o un tipo pubblico annidato in modo che tutti i tipi contenitore siano pubblici; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4044">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4045">Utilizzare questa proprietà per determinare se un tipo fa parte dell'interfaccia pubblica di un assembly del componente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4045">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4046">Nell'esempio seguente verifica due classi, solo uno dei quali è visibile all'esterno dell'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4046">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4047">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4047">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4048">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4048">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4049">Oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4049">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4050">Il <xref:System.Type.MakeArrayType%2A> metodo fornisce un modo per generare i tipi matrice i cui tipi di elemento vengono calcolati in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4050">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="9fb9c-4051">**Nota** common language runtime viene fatta distinzione tra vettori (vale a dire matrici unidimensionali che sono sempre in base zero) e le matrici multidimensionali.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4051">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="9fb9c-4052">Un vettore, che è sempre una sola dimensione, non corrisponde una matrice multidimensionale che dispone di una sola dimensione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4052">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="9fb9c-4053">Overload di questo metodo consente solo di creare tipi vettore, ed è l'unico modo per creare un tipo di vettore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4053">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="9fb9c-4054">Utilizzare il <xref:System.Type.MakeArrayType%28System.Int32%29> overload del metodo per creare tipi di matrici multidimensionali.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4054">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4055">Esempio di codice seguente crea una matrice, `ref` (`ByRef` in Visual Basic) e i tipi di puntatore per il `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4055">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4056">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4056">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="9fb9c-4057">Le classi derivate devono fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4057">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-4058">Il tipo corrente è <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4058">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4059">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4059">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4060">Il tipo corrente è <see langword="ByRef" />,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4060">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="9fb9c-4061">Ciò significa che <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4061">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="9fb9c-4062">Numero di dimensioni della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4062">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="9fb9c-4063">Il numero deve essere minore o uguale a 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4063">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4064">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4064">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4065">Oggetto che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4065">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4066">Il <xref:System.Type.MakeArrayType%2A> metodo fornisce un modo per generare i tipi matrice i cui tipi di elemento vengono calcolati in fase di esecuzione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4066">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-4067">Common language runtime viene fatta distinzione tra vettori (vale a dire matrici unidimensionali che sono sempre in base zero) e le matrici multidimensionali.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4067">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="9fb9c-4068">Un vettore, che è sempre una sola dimensione, non corrisponde una matrice multidimensionale che dispone di una sola dimensione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4068">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="9fb9c-4069">È possibile utilizzare questo overload del metodo per creare un tipo di vettore. Se `rank` è 1, overload di questo metodo restituisce un tipo di matrice multidimensionale che dispone di una dimensione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4069">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="9fb9c-4070">Utilizzare il <xref:System.Type.MakeArrayType> overload del metodo per creare tipi di vettore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4070">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4071">Esempio di codice seguente crea una matrice, `ref` (`ByRef` in Visual Basic) e i tipi di puntatore per il `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4071">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="9fb9c-4072">
            <paramref name="rank" /> non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4072">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="9fb9c-4073">Ad esempio, 0 o negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4073">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4074">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4074">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-4075">Il tipo corrente è <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4075">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4076">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4076">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4077">Il tipo corrente è <see langword="ByRef" />,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4077">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="9fb9c-4078">Ciò significa che <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4078">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4079">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4079">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4080">
            <paramref name="rank" /> è maggiore di 32.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4080">
              <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4081">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (parametro <see langword="ByRef" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4081">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4082">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (parametro <see langword="ByRef" /> in Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4082">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4083">Il <xref:System.Type.MakeByRefType%2A> metodo fornisce un modo per generare `ref` tipi (`ByRef` in Visual Basic) per elenchi di parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4083">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="9fb9c-4084">Utilizzando la sintassi di Microsoft intermediate language (MSIL), se l'oggetto corrente <xref:System.Type> oggetto <xref:System.Int32>, questo metodo restituisce un <xref:System.Type> che rappresenta l'oggetto `Int32&`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4084">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4085">Esempio di codice seguente crea una matrice, `ref` (`ByRef` in Visual Basic) e i tipi di puntatore per il `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4085">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4086">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4086">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-4087">Il tipo corrente è <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4087">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4088">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4088">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4089">Il tipo corrente è <see langword="ByRef" />,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4089">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="9fb9c-4090">Ciò significa che <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4090">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="9fb9c-4091">Matrice di tipi con cui sostituire i parametri di tipo del tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4091">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4092">Sostituisce gli elementi di una matrice di tipi ai parametri di tipo della definizione di tipo generico corrente e restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo costruito risultante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4092">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4093">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo costruito ottenuto sostituendo i parametri di tipo del tipo generico corrente con gli elementi di <paramref name="typeArguments" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4093">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4094">Il <xref:System.Type.MakeGenericType%2A> metodo consente di scrivere codice per tipi specifici di assegnare ai parametri di tipo di una definizione di tipo generico, creando così un <xref:System.Type> oggetto che rappresenta un determinato tipo costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4094">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="9fb9c-4095">È possibile utilizzare questo <xref:System.Type> oggetto per creare istanze di runtime del tipo costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4095">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="9fb9c-4096">Tipi costruiti con <xref:System.Type.MakeGenericType%2A> possono essere aperti, vale a dire alcuni dei relativi argomenti di tipo possono essere parametri di tipo di metodi generici o tipi di contenitore.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4096">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="9fb9c-4097">È possibile utilizzare tali tipi costruiti aperti quando si generano assembly dinamici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4097">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="9fb9c-4098">Si consideri ad esempio le classi `Base` e `Derived` nel codice seguente.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4098">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="9fb9c-4099">Per generare `Derived` in un assembly dinamico, è necessario costruire il tipo di base.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4099">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="9fb9c-4100">A tale scopo, chiamare il <xref:System.Type.MakeGenericType%2A> metodo su un <xref:System.Type> oggetto che rappresenta la classe `Base`, usando gli argomenti di tipo generico <xref:System.Int32> e il parametro di tipo `V` da `Derived`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4100">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="9fb9c-4101">Poiché i tipi e parametri di tipo generico sono rappresentati da <xref:System.Type> oggetti, è possibile passare una matrice contenente entrambi i <xref:System.Type.MakeGenericType%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4101">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-4102">Un tipo costruito, ad esempio `Base<int, V>` è utile quando la creazione di codice, ma non è possibile chiamare il <xref:System.Type.MakeGenericType%2A> metodo su questo tipo perché non è una definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4102">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="9fb9c-4103">Per creare un tipo costruito chiuso che può essere creata un'istanza, chiamare innanzitutto il <xref:System.Type.GetGenericTypeDefinition%2A> metodo per ottenere un <xref:System.Type> dell'oggetto che rappresenta la definizione di tipo generico e quindi chiamare <xref:System.Type.MakeGenericType%2A> con gli argomenti di tipo desiderato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4103">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="9fb9c-4104">Il <xref:System.Type> oggetto restituito da <xref:System.Type.MakeGenericType%2A> equivale il <xref:System.Type> ottenuto chiamando il <xref:System.Object.GetType%2A> metodo dell'oggetto risultante tipo costruito, o <xref:System.Object.GetType%2A> metodo di qualsiasi tipo è stato creato dalla stessa generico costruito definizione del tipo utilizzando gli stessi argomenti di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4104">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9fb9c-4105">Una matrice di tipi generici non è un tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4105">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="9fb9c-4106">Non è possibile chiamare <xref:System.Type.MakeGenericType%2A> su un tipo matrice, ad esempio `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4106">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="9fb9c-4107">Per costruire un tipo generico chiuso da `C<T>[]`, chiamare <xref:System.Type.GetElementType%2A> per ottenere la definizione di tipo generico `C<T>`; chiamare <xref:System.Type.MakeGenericType%2A> sulla definizione di tipo generico per creare il tipo costruito; e infine chiamare il <xref:System.Type.MakeArrayType%2A> su (metodo) il tipo costruito per creare il tipo di matrice.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4107">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="9fb9c-4108">Lo stesso vale per i tipi di puntatore e `ref` tipi (`ByRef` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4108">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="9fb9c-4109">Per un elenco delle condizioni invariabili relative ai termini usati dal processo di reflection generico, vedere i commenti sulla proprietà <xref:System.Type.IsGenericType%2A>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4109">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="9fb9c-4110">Tipi annidati</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4110">Nested Types</span></span>  
 <span data-ttu-id="9fb9c-4111">Se un tipo generico è definito in c#, C++ o Visual Basic, i relativi tipi annidati sono tutti generici.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4111">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="9fb9c-4112">Questo vale anche se non dispongono di alcun parametro di tipo i propri, perché tutti e tre i linguaggi includono i parametri di tipo dei tipi in inclusione negli elenchi di parametri di tipo per i tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4112">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="9fb9c-4113">Prendere in considerazione le seguenti classi:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4113">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="9fb9c-4114">Elenco di parametri di tipo della classe annidata `Inner` presenta due parametri di tipo, `T` e `U`, il primo dei quali è il parametro di tipo della relativa classe che lo contiene.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4114">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="9fb9c-4115">Analogamente, l'elenco di parametri di tipo della classe annidata `Innermost1` presenta tre parametri di tipo, `T`, `U`, e `V`, con `T` e `U` che provengono dalle relative classi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4115">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="9fb9c-4116">La classe annidata `Innermost2` presenta due parametri di tipo, `T` e `U`, provenienti da classi che la contengono.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4116">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="9fb9c-4117">Se l'elenco di parametri del tipo di inclusione ha più di un parametro di tipo, tutti i parametri di tipo nell'ordine vengono incluse nell'elenco di parametri di tipo del tipo annidato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4117">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="9fb9c-4118">Per costruire un tipo generico dalla definizione del tipo generico per un tipo annidato, chiamare il <xref:System.Type.MakeGenericType%2A> (metodo) con la matrice formata concatenando le matrici di argomento del tipo di tutti i tipi in inclusione, che inizia con il tipo generico più esterno e terminando con il Digitare la matrice di argomenti di tipo annidato, se ha parametri di tipo propri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4118">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="9fb9c-4119">Per creare un'istanza di `Innermost1`, chiamare il <xref:System.Type.MakeGenericType%2A> (metodo) con una matrice contenente i tre tipi, per poter essere assegnati a T, U e V. Per creare un'istanza di `Innermost2`, chiamare il <xref:System.Type.MakeGenericType%2A> metodo con una matrice che contiene due tipi, per poter essere assegnati a T e U.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4119">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="9fb9c-4120">Le lingue propagano i parametri di tipo dei tipi in inclusione in questo modo, in modo è possibile utilizzare i parametri di tipo di un tipo di inclusione per definire i campi dei tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4120">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="9fb9c-4121">In caso contrario, i parametri di tipo non sarebbe nell'ambito dei tipi annidati.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4121">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="9fb9c-4122">È possibile definire i tipi annidati senza propagare i parametri di tipo tipi di inclusione, creazione di codice in un assembly dinamico o usando il [Ilasm.exe (Assembler IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4122">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="9fb9c-4123">Per l'assembler MSIL, esaminare il codice seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4123">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="9fb9c-4124">In questo esempio, non è possibile definire un campo di tipo `T` o `U` nella classe `Innermost`, in quanto tali parametri di tipo non sono presenti nell'ambito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4124">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="9fb9c-4125">Il codice assembler seguente definisce le classi annidate che presentano lo stesso comportamento che si verifica se è definito in C++, Visual Basic e c#:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4125">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="9fb9c-4126">È possibile utilizzare il [Ildasm.exe (Disassembler IL)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) per esaminare le classi annidate definite nei linguaggi di alto livello e osservare questo schema di denominazione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4126">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4127">L'esempio seguente usa il <xref:System.Type.MakeGenericType%2A> metodo per creare un tipo costruito dalla definizione del tipo generico per il <xref:System.Collections.Generic.Dictionary%602> tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4127">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="9fb9c-4128">Rappresenta il tipo costruito un <xref:System.Collections.Generic.Dictionary%602> di `Test` oggetti con chiavi di stringa.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4128">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="9fb9c-4129">Il tipo corrente non rappresenta una definizione di tipo generico,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4129">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="9fb9c-4130">Ciò significa che <see cref="P:System.Type.IsGenericTypeDefinition" /> restituisce <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4130">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-4131">
            <paramref name="typeArguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4131">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4132">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4132">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4133">Qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4133">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-4134">Il numero di elementi in <paramref name="typeArguments" /> non corrisponde al numero di parametri di tipo nella definizione di tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4134">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="9fb9c-4135">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4135">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4136">Nessun elemento di <paramref name="typeArguments" /> soddisfa i vincoli specificati per il parametro di tipo corrispondente del tipo generico corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4136">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="9fb9c-4137">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4137">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4138">
            <paramref name="typeArguments" /> contiene un elemento che è un tipo di puntatore (<see cref="P:System.Type.IsPointer" /> restituisce <see langword="true" />), un tipo by-ref (<see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />) o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4138">
              <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4139">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4139">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="9fb9c-4140">Le classi derivate devono fornire un'implementazione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4140">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4141">Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4141">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4142">Oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4142">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4143">Il <xref:System.Type.MakePointerType%2A> metodo fornisce un modo per generare i tipi di puntatore per elenchi di parametri.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4143">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="9fb9c-4144">Utilizzando la sintassi di Microsoft intermediate language (MSIL), se l'oggetto corrente <xref:System.Type> oggetto <xref:System.Int32>, questo metodo restituisce un <xref:System.Type> che rappresenta l'oggetto `Int32*`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4144">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4145">Esempio di codice seguente crea una matrice, `ref` (`ByRef` in Visual Basic) e i tipi di puntatore per il `Test` classe.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4145">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4146">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4146">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-4147">Il tipo corrente è <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4147">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4148">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4148">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4149">Il tipo corrente è <see langword="ByRef" />,</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4149">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="9fb9c-4150">Ciò significa che <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4150">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4151">Ottiene un valore <see cref="T:System.Reflection.MemberTypes" /> che indica che questo membro è un tipo o un tipo annidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4151">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4152">Valore <see cref="T:System.Reflection.MemberTypes" /> che indica che questo membro è un tipo o un tipo annidato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4152">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4153">Esegue l'override di questa proprietà <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4153">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9fb9c-4154">Pertanto, quando si esamina un set di <xref:System.Reflection.MemberInfo> oggetti, ad esempio, la matrice restituita dal <xref:System.Type.GetMembers%2A>: il <xref:System.Reflection.MemberInfo.MemberType%2A> restituisce proprietà <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> quando un membro specificato è un tipo annidato.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4154">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="9fb9c-4155">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà si applica alla definizione di tipo generico da cui il tipo è stato costruito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4155">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="9fb9c-4156">Ad esempio, se l'oggetto corrente <xref:System.Type> rappresenta `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), il valore di questa proprietà è determinato da `MyGenericType<T>`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4156">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="9fb9c-4157">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce sempre <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4157">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4158">Nell'esempio di codice riportato di seguito viene illustrato il `MemberType` campo come parametro per il `GetMember` metodo:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4158">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4159">Rappresenta un valore mancante nelle informazioni <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4159">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="9fb9c-4160">Questo campo è di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4160">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4161">Utilizzare il `Missing` campo per la chiamata tramite la reflection per ottenere il valore predefinito di un parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4161">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="9fb9c-4162">Se il `Missing` campo viene passato un valore del parametro e vi è alcun valore predefinito per tale parametro, un <xref:System.ArgumentException> viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4162">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4163">Esempio di codice seguente viene illustrato l'utilizzo del `Missing` campo per richiamare un metodo con gli argomenti predefiniti.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4163">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="9fb9c-4164">L'output del codice è il seguente:</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4164">This code produces the following output:</span></span>  
  
 <span data-ttu-id="9fb9c-4165">a = 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4165">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="9fb9c-4166">a = 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4166">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="9fb9c-4167">un = 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4167">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4168">Ottiene il modulo (DLL) in cui è definito l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4168">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4169">Modulo in cui è definito l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4169">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4170">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà restituisce il modulo in cui è stata definita la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4170">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="9fb9c-4171">Ad esempio, se si crea un'istanza di `MyGenericStack<int>`, <xref:System.Type.Module%2A> proprietà per il tipo costruito restituisce il modulo in cui `MyGenericStack<T>` è definito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4171">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="9fb9c-4172">Analogamente, se l'oggetto corrente <xref:System.Type> rappresenta un parametro generico `T`, questa proprietà restituisce l'assembly che contiene il tipo generico che definisce `T`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4172">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4173">Nell'esempio seguente viene illustrato un utilizzo del <xref:System.Type.Namespace%2A> e `Module` proprietà e <xref:System.Type.ToString%2A> metodo <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4173">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4174">Ottiene lo spazio dei nomi dell'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4174">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4175">Spazio dei nomi di <see cref="T:System.Type" />; <see langword="null" /> se l'istanza corrente non dispone di alcuno spazio dei nomi o rappresenta un parametro generico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4175">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4176">Uno spazio dei nomi è una comodità denominazione, in fase di progettazione logica viene utilizzata principalmente per definire l'ambito in un'applicazione e organizzare le classi e altri tipi in una singola struttura gerarchica.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4176">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="9fb9c-4177">Dal punto di vista del runtime, non ci sono spazi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4177">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="9fb9c-4178">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico costruito, questa proprietà restituisce lo spazio dei nomi che contiene la definizione di tipo generico.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4178">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="9fb9c-4179">Analogamente, se l'oggetto corrente <xref:System.Type> rappresenta un parametro generico `T`, questa proprietà restituisce lo spazio dei nomi che contiene la definizione di tipo generico che definisce `T`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4179">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="9fb9c-4180">Se l'oggetto corrente <xref:System.Type> oggetto rappresenta un parametro generico, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4180">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4181">Nell'esempio seguente viene illustrato un utilizzo del `Namespace` e <xref:System.Type.Module%2A> proprietà e <xref:System.Type.ToString%2A> metodo <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4181">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="9fb9c-4182">Primo oggetto da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4182">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="9fb9c-4183">Secondo oggetto da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4183">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4184">Indica se due oggetti <see cref="T:System.Type" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4184">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4185">
            <see langword="true" /> se <paramref name="left" /> è uguale a <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4185">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="9fb9c-4186">Primo oggetto da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4186">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="9fb9c-4187">Secondo oggetto da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4187">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4188">Indica se due oggetti <see cref="T:System.Type" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4188">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4189">
            <see langword="true" /> se <paramref name="left" /> non è uguale a <paramref name="right" />; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4189">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4190">Ottiene l'oggetto classe usato per ottenere questo membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4190">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4191">Oggetto <see langword="Type" /> tramite il quale è stato ottenuto questo oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4191">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4192">Per <xref:System.Type> oggetti, il valore di questa proprietà è sempre lo stesso valore di <xref:System.Type.DeclaringType%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4192">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4193">Questo esempio visualizza il tipo riflesso di una classe annidata.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4193">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="9fb9c-4194">Nome completo di assembly dell'oggetto <see cref="T:System.Type" /> da ottenere.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4194">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="9fb9c-4195">
            <see langword="true" /> per generare un'eccezione <see cref="T:System.TypeLoadException" /> se non è possibile trovare il tipo, <see langword="false" /> per restituire <see langword="null" /> se non è possibile trovare il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4195">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="9fb9c-4196">Se si specifica <see langword="false" /> vengono eliminate alcune condizioni di eccezione, ma non tutte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4196">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="9fb9c-4197">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4197">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="9fb9c-4198">
            <see langword="true" /> per eseguire una ricerca di <c>typeName</c> senza distinzione tra maiuscole e minuscole, <see langword="false" /> per eseguire una ricerca di <c>typeName</c> con distinzione tra maiuscole e minuscole.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4198">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4199">Ottiene l'oggetto <see cref="T:System.Type" /> con il nome specificato, indicando se eseguire una ricerca con distinzione tra maiuscole e minuscole e se generare un'eccezione in caso il tipo non venga trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4199">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-4200">Il tipo viene caricato a scopo di reflection, non per l'esecuzione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4200">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4201">Tipo con il nome specificato, se presente; in caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4201">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4202">Se il tipo non viene trovato, il parametro <paramref name="throwIfNotFound" /> specifica se viene restituito <see langword="null" /> o se viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4202">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="9fb9c-4203">In alcuni casi, viene generata un'eccezione indipendentemente dal valore di <paramref name="throwIfNotFound" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4203">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="9fb9c-4204">Vedere la sezione relativa alle eccezioni.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4204">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4205">Se l'assembly contenente il tipo non è già caricato nel contesto reflection-only, utilizzando il <xref:System.Type.ReflectionOnlyGetType%2A> metodo è equivalente al primo caricamento dell'assembly ReflectionOnly, utilizzando il <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> (metodo) e quindi il caricamento del tipo chiamando il assembly <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4205">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9fb9c-4206">Per informazioni sui nomi completi di assembly, vedere il <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4206">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="9fb9c-4207">Per ulteriori informazioni su come specificare i nomi dei tipi, vedere il <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> overload del metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4207">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="9fb9c-4208">Se l'assembly è già caricato per l'esecuzione, nel contesto reflection-only viene caricata la copia di un altro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4208">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="9fb9c-4209">Il `throwIfNotFound` parametro specifica che cosa avviene quando non viene trovato, il tipo e vengono eliminate alcune condizioni di eccezione, come descritto nella sezione eccezioni.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4209">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="9fb9c-4210">Alcune eccezioni vengono generate indipendentemente dal valore di `throwIfNotFound`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4210">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="9fb9c-4211">Se l'assembly non è valido, ad esempio un <xref:System.BadImageFormatException> viene generata anche se `throwIfNotFound` è `false`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4211">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="9fb9c-4212">Per ulteriori informazioni sull'utilizzo del contesto reflection-only, vedere [procedura: caricamento di assembly nel contesto di only](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4212">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9fb9c-4213">
            <paramref name="typeName" /> è <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4213">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="9fb9c-4214">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4214">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="9fb9c-4215">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e il tipo non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4215">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="9fb9c-4216">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4216">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4217">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e <paramref name="typeName" /> contiene caratteri non validi, ad esempio una scheda incorporata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4217">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="9fb9c-4218">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4218">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4219">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e <paramref name="typeName" /> è una stringa vuota.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4219">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="9fb9c-4220">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4220">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4221">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e <paramref name="typeName" /> rappresenta un tipo di matrice con una dimensione non valida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4221">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="9fb9c-4222">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4222">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4223">
            <paramref name="typeName" /> rappresenta una matrice di oggetti <see cref="T:System.TypedReference" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4223">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9fb9c-4224">
            <paramref name="typeName" /> non include il nome dell'assembly.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4224">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="9fb9c-4225">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4225">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4226">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e <paramref name="typeName" /> contiene sintassi non valida, ad esempio "MyType[,\*,]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4226">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="9fb9c-4227">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4227">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4228">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un tipo di puntatore, un tipo <see langword="ByRef" /> o <see cref="T:System.Void" /> tra i relativi argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4228">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-4229">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4229">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4230">
            <paramref name="typeName" /> rappresenta un tipo generico che ha un numero errato di argomenti di tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4230">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="9fb9c-4231">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4231">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4232">
            <paramref name="typeName" /> rappresenta un tipo generico e uno dei relativi argomenti di tipo non soddisfa i vincoli per il parametro di tipo corrispondente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4232">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="9fb9c-4233">
            <paramref name="throwIfNotFound" /> è <see langword="true" /> e l'assembly o una delle sue dipendenze non è stato trovato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4233">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="9fb9c-4234">L'assembly o una delle relative dipendenze è stato trovato, ma non può essere caricato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4234">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="9fb9c-4235">L'assembly o una delle relative dipendenze non è valido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4235">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="9fb9c-4236">oppure</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4236">-or-</span>
          </span>
          <span data-ttu-id="9fb9c-4237">L'assembly è stato compilato con una versione successiva di Common Language Runtime rispetto alla versione attualmente caricata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4237">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4238">Ottiene una classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> che descrive il layout del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4238">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4239">Ottiene una classe <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> che descrive le caratteristiche complessive di layout del tipo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4239">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4240"><xref:System.Runtime.InteropServices.StructLayoutAttribute> non viene restituito dal <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4240"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="9fb9c-4241">Utilizzare questa proprietà per ottenerlo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4241">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4242">L'esempio di codice seguente viene definita innanzitutto una classe, una struttura e una struttura con gli attributi di layout speciali (le strutture sono annidate all'interno della classe).</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4242">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="9fb9c-4243">Nell'esempio viene utilizzata la <xref:System.Type.StructLayoutAttribute%2A> proprietà per ottenere un <xref:System.Runtime.InteropServices.StructLayoutAttribute> per ogni tipo e vengono visualizzate le proprietà degli attributi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4243">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4244">Il metodo richiamato non è supportato nella classe base.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4244">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="9fb9c-4245">Riservato per utilizzi futuri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4245">Reserved for future use.</span>
          </span>
          <span data-ttu-id="9fb9c-4246">Deve essere IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4246">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="9fb9c-4247">Matrice di nomi passata di cui eseguire il mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4247">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="9fb9c-4248">Conteggio dei nomi di cui eseguire il mapping.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4248">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="9fb9c-4249">Contesto delle impostazioni locali in cui interpretare i nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4249">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="9fb9c-4250">Matrice allocata dal chiamante che riceve gli ID corrispondenti ai nomi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4250">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4251">Esegue il mapping di un set di nomi a un set corrispondente di ID dispatch.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4251">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4252">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4252">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9fb9c-4253">Per ulteriori informazioni su `IDispatch::GetIDsOfNames`, vedere MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4253">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="9fb9c-4254">L'accesso ad associazione tardiva usando l'interfaccia COM <c>IDispatch</c> non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4254">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="9fb9c-4255">Informazioni sul tipo da restituire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4255">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="9fb9c-4256">Identificatore delle impostazioni locali per le informazioni sul tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4256">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="9fb9c-4257">Puntatore all'oggetto di informazioni sul tipo richiesto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4257">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4258">Recupera le informazioni sul tipo relative a un oggetto che può quindi essere usato per ottenere informazioni sul tipo relative a un'interfaccia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4258">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4259">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9fb9c-4260">Per ulteriori informazioni su `IDispatch::GetTypeInfo`, vedere MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4260">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="9fb9c-4261">L'accesso ad associazione tardiva usando l'interfaccia COM <c>IDispatch</c> non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4261">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="9fb9c-4262">Punta a una posizione che riceve il numero di interfacce di informazioni sul tipo fornite dall'oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4262">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4263">Recupera il numero delle interfacce di informazioni sul tipo fornite da un oggetto (0 o 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4263">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4264">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4264">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9fb9c-4265">Per ulteriori informazioni su `IDispatch::GetTypeInfoCount`, vedere MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4265">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="9fb9c-4266">L'accesso ad associazione tardiva usando l'interfaccia COM <c>IDispatch</c> non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4266">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="9fb9c-4267">Identifica il membro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4267">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="9fb9c-4268">Riservato per utilizzi futuri.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4268">Reserved for future use.</span>
          </span>
          <span data-ttu-id="9fb9c-4269">Deve essere IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4269">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="9fb9c-4270">Contesto di impostazioni locali all'interno del quale devono essere interpretati gli argomenti.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4270">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="9fb9c-4271">Flag che descrivono il contesto della chiamata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4271">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="9fb9c-4272">Puntatore a una struttura contenente una matrice di argomenti, una matrice di DISPID per argomenti denominati e i conteggi del numero di elementi nelle matrici.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4272">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="9fb9c-4273">Puntatore alla posizione in cui deve essere archiviato il risultato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4273">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="9fb9c-4274">Puntatore a una struttura contenente informazioni sull'eccezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4274">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="9fb9c-4275">Indice del primo argomento che contiene un errore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4275">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9fb9c-4276">Fornisce l'accesso a proprietà e metodi esposti da un oggetto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4276">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4277">Questo metodo consente l'accesso alle classi gestite da codice non gestito e non deve essere chiamato da codice gestito.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4277">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="9fb9c-4278">Per ulteriori informazioni su `IDispatch::Invoke`, vedere MSDN Library.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4278">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="9fb9c-4279">L'accesso ad associazione tardiva usando l'interfaccia COM <c>IDispatch</c> non è supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4279">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4280">Restituisce un valore <see langword="String" /> che rappresenta il nome del <see langword="Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4280">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9fb9c-4281">Oggetto <see cref="T:System.String" /> che rappresenta il nome dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4281">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4282">Questo metodo restituisce il nome completo common language runtime lo spazio dei nomi e il nome per tutti i tipi primitivi.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4282">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="9fb9c-4283">Ad esempio, l'istruzione c#, `(long)0.Type().ToString()` restituisce "System. Int64" anziché semplicemente "Int64".</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4283">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="9fb9c-4284">Se l'oggetto corrente <xref:System.Type> rappresenta un tipo generico, il tipo e i relativi argomenti di tipo sono qualificati dallo spazio dei nomi e dal tipo annidato, ma non dall'assembly.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4284">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="9fb9c-4285">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questo metodo restituisce il nome non qualificato del parametro di tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4285">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4286">Nell'esempio seguente viene illustrato un utilizzo del <xref:System.Type.Namespace%2A> e <xref:System.Type.Module%2A> proprietà e `ToString` metodo <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4286">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="9fb9c-4287">L'esempio seguente confronta le stringhe restituite dal <xref:System.Type.ToString%2A> (metodo) e `Name`, <xref:System.Type.FullName%2A>, e <xref:System.Type.AssemblyQualifiedName%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4287">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4288">che rappresenta il nome dell'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4288">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4289">Handle per l'oggetto <see cref="T:System.Type" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4289">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4290">`TypeHandle` Incapsula un puntatore a una struttura dati interna che rappresenta il tipo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4290">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="9fb9c-4291">Questo handle è univoco nel corso della durata del processo.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4291">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="9fb9c-4292">L'handle è valido solo nel dominio dell'applicazione in cui è stato ottenuto.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4292">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9fb9c-4293">Nell'esempio seguente restituisce l'handle del tipo corrispondente e passa l'handle a un metodo che ottiene il tipo dall'handle e lo visualizza.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4293">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="9fb9c-4294">Questa proprietà non è attualmente supportata in .NET Compact Framework.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4294">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4295">Ottiene l'inizializzatore per il tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4295">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4296">Oggetto che contiene il nome del costruttore di classe per l'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4296">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9fb9c-4297">Gli inizializzatori di classi sono disponibili anche tramite il <xref:System.Type.FindMembers%2A> metodo, o tramite gli overload del <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, e <xref:System.Type.GetConstructors%2A> metodi che accettano <xref:System.Reflection.BindingFlags> come parametro.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4297">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="9fb9c-4298">Se l'oggetto corrente <xref:System.Type> rappresenta un parametro di tipo nella definizione di un tipo generico o un metodo generico, questa proprietà restituisce `null`.</span><span class="sxs-lookup"><span data-stu-id="9fb9c-4298">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9fb9c-4299">Indica il tipo fornito da Common Language Runtime che rappresenta questo tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4299">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9fb9c-4300">Tipo di sistema sottostante per l'oggetto <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9fb9c-4300">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>