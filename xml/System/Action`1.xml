<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd092c3c61377edf68a48487d8fa19cd17b06d55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433887" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Tipo del parametro del metodo incapsulato da questo delegato.</typeparam>
    <param name="obj">Parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che presenta un singolo parametro e non restituisce alcun valore.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Action%601> delegato per passare un metodo come un parametro senza dichiarare in modo esplicito un delegato personalizzato. Il metodo incapsulato deve corrispondere alla firma del metodo definita da questo delegato. Ciò significa che il metodo incapsulato deve avere un parametro che viene passato per valore e non deve essere restituito un valore. (In c#, il metodo deve restituire `void`. In Visual Basic, devono essere definito dal `Sub`...`End Sub` costrutto. Può essere anche un metodo che restituisce un valore che viene ignorato.) In genere, tale metodo consente di eseguire un'operazione.  
  
> [!NOTE]
>  Per fare riferimento a un metodo che presenta un parametro e restituisce un valore, utilizzare il metodo generico <xref:System.Func%602> delegato.  
  
 Quando si usa il <xref:System.Action%601> delegato, è necessario definire in modo esplicito un delegato che incapsula un metodo con un singolo parametro. Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato `DisplayMessage` e assegna un riferimento a uno il <xref:System.Console.WriteLine%2A> metodo o la `ShowWindowsMessage` metodo all'istanza di delegato.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 Nell'esempio seguente per semplificare questo codice creando il <xref:System.Action%601> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 È anche possibile usare il <xref:System.Action%601> delegato con i metodi anonimi nel linguaggio c#, come illustrato nell'esempio seguente. (Per un'introduzione ai metodi anonimi, vedere [metodi anonimi](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 È inoltre possibile assegnare un'espressione lambda a un <xref:System.Action%601> delegare istanza, come illustrato nell'esempio seguente. (Per un'introduzione alle espressioni lambda, vedere [espressioni Lambda](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 Il <xref:System.Collections.Generic.List%601.ForEach%2A> e <xref:System.Array.ForEach%2A> i metodi accettano un <xref:System.Action%601> delegato come parametro. Il metodo incapsulato da delegato consente di eseguire un'azione su ogni elemento nella matrice o elenco. Nell'esempio viene utilizzato il <xref:System.Collections.Generic.List%601.ForEach%2A> metodo per fornire un'illustrazione.  
  
   
  
## Examples  
 Nell'esempio seguente illustra l'uso del <xref:System.Action%601> delegato per stampare il contenuto di un <xref:System.Collections.Generic.List%601> oggetto. In questo esempio, il `Print` metodo viene utilizzato per visualizzare il contenuto dell'elenco nella console. Inoltre, nell'esempio c# viene inoltre illustrato l'utilizzo di metodi anonimi per visualizzare il contenuto nella console. Si noti che nell'esempio viene dichiarata in modo esplicito un <xref:System.Action%601> variabile. Al contrario, viene passato un riferimento a un metodo che accetta un singolo parametro e che non restituisce un valore per il <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> metodo, di cui l'unico parametro è un <xref:System.Action%601> delegare. Analogamente, nell'esempio c#, un' <xref:System.Action%601> delegato non viene creato in modo esplicito perché la firma del metodo anonimo corrisponde alla firma del <xref:System.Action%601> delegato previsto dal <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> (metodo).  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>