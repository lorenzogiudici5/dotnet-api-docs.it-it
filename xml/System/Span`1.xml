<Type Name="Span&lt;T&gt;" FullName="System.Span&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97ae6974f9b6629f2e67024771704f6e5772b3b8" />
    <Meta Name="ms.sourcegitcommit" Value="9d1bf7e4c6d697123f26c810c1a049a755634634" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="12/06/2018" />
    <Meta Name="ms.locfileid" Value="52981994" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Span`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class Span" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="83d5a-101">Il tipo di elementi nel <see cref="System.Span`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="83d5a-101">The type of items in the <see cref="System.Span`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="83d5a-102">Fornisce una rappresentazione indipendente dai tipi e dalla memoria di una regione contigua di memoria arbitraria.</span>
      <span class="sxs-lookup">
        <span data-stu-id="83d5a-102">Provides a type- and memory-safe representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-103">`Span<T>` è un [uno struct di riferimento](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) che viene allocata nello stack anziché nell'heap gestito.</span><span class="sxs-lookup"><span data-stu-id="83d5a-103">`Span<T>` is a [ref struct](~/docs/csharp/language-reference/keywords/ref.md#ref-struct-types) that is allocated on the stack rather than on the managed heap.</span></span> <span data-ttu-id="83d5a-104">I tipi struct ref hanno un numero di restrizioni per garantire che non può essere promosso nell'heap gestito, tra cui che essi non possono essere boxed, non possono essere assegnate a variabili di tipo <xref:System.Object>, `dynamic` o a qualsiasi tipo di interfaccia, non possono essere i campi in un tipo di riferimento e non possono essere usati tra `await` e `yield` limiti.</span><span class="sxs-lookup"><span data-stu-id="83d5a-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, they can't be assigned to variables of type <xref:System.Object>, `dynamic` or to any interface type, they can't be fields in a reference type, and they can't be used across `await` and `yield` boundaries.</span></span> <span data-ttu-id="83d5a-105">Inoltre, le chiamate a due metodi, <xref:System.Span%601.Equals(System.Object)> e <xref:System.Span%601.GetHashCode%2A>, generano un <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-105">In addition, calls to two methods, <xref:System.Span%601.Equals(System.Object)> and <xref:System.Span%601.GetHashCode%2A>, throw a <xref:System.NotSupportedException>.</span></span> 

> [!IMPORTANT]
> <span data-ttu-id="83d5a-106">Perché è un tipo di stack-only, `Span<T>` non è adatta per molti scenari che richiedono l'archiviazione di riferimenti ai buffer nell'heap.</span><span class="sxs-lookup"><span data-stu-id="83d5a-106">Because it is a stack-only type, `Span<T>` is unsuitable for many scenarios that require storing references to buffers on the heap.</span></span> <span data-ttu-id="83d5a-107">Ciò vale, ad esempio, le routine che effettuano chiamate ai metodi asynchrous.</span><span class="sxs-lookup"><span data-stu-id="83d5a-107">This is true, for example, of routines that make asynchrous method calls.</span></span> <span data-ttu-id="83d5a-108">Per questi scenari, è possibile usare il gratuiti <xref:System.Memory%601?displayProperty=nameWithType> e <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> tipi.</span><span class="sxs-lookup"><span data-stu-id="83d5a-108">For such scenarios, you can use the complimentary <xref:System.Memory%601?displayProperty=nameWithType> and <xref:System.ReadOnlyMemory%601?displayProperty=nameWithType> types.</span></span>

<span data-ttu-id="83d5a-109">Per gli intervalli che rappresentano le strutture non modificabile o di sola lettura, usare <xref:System.ReadOnlySpan%601?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-109">For spans that represent immutable or read-only structures, use <xref:System.ReadOnlySpan%601?displayProperty=nameWithType>.</span></span>

## <a name="spant-and-memory"></a><span data-ttu-id="83d5a-110">Intervallo\<T > e la memoria</span><span class="sxs-lookup"><span data-stu-id="83d5a-110">Span\<T> and memory</span></span>

<span data-ttu-id="83d5a-111">Oggetto `Span<T>` rappresenta una regione contigua di memoria arbitraria.</span><span class="sxs-lookup"><span data-stu-id="83d5a-111">A `Span<T>` represents a contiguous region of arbitrary memory.</span></span> <span data-ttu-id="83d5a-112">Oggetto `Span<T>` istanza viene spesso usata per contenere gli elementi di una matrice o una parte di una matrice.</span><span class="sxs-lookup"><span data-stu-id="83d5a-112">A `Span<T>` instance is often used to hold the elements of an array or a portion of an array.</span></span> <span data-ttu-id="83d5a-113">A differenza di una matrice, tuttavia, un `Span<T>` istanza può fare riferimento alla memoria gestita, della memoria nativa, o la memoria gestita su stack.</span><span class="sxs-lookup"><span data-stu-id="83d5a-113">Unlike an array, however, a `Span<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span> <span data-ttu-id="83d5a-114">L'esempio seguente crea un `Span<Byte>` da una matrice:</span><span class="sxs-lookup"><span data-stu-id="83d5a-114">The following example creates a `Span<Byte>` from an array:</span></span>

[!code-csharp[Creating a Span\<Byte> from an array](~/samples/snippets/csharp/api/system/span/program.cs#1)]
     
<span data-ttu-id="83d5a-115">L'esempio seguente crea un `Span<Byte>` da 100 byte della memoria nativa:</span><span class="sxs-lookup"><span data-stu-id="83d5a-115">The following example creates a `Span<Byte>` from 100 bytes of native memory:</span></span>

[!code-csharp[Creating a Span\<Byte> from native memory](~/samples/snippets/csharp/api/system/span/program.cs#2)]

<span data-ttu-id="83d5a-116">L'esempio seguente usa il C# [stackalloc](~/docs/csharp/language-reference/keywords/stackalloc.md) (parola chiave) da allocare 100 byte di memoria nello stack:</span><span class="sxs-lookup"><span data-stu-id="83d5a-116">The following example uses the C# [stackalloc](~/docs/csharp/language-reference/keywords/stackalloc.md) keyword to allocate 100 bytes of memory on the stack:</span></span>

[!code-csharp[Creating a Span\<Byte> from stack-allocated memory](~/samples/snippets/csharp/api/system/span/program.cs#3)]

<span data-ttu-id="83d5a-117">In quanto `Span<T>` è un'astrazione su un blocco di memoria, i metodi di arbitrario il `Span<T>` classi e metodi con `Span<T>` parametri operano su qualsiasi `Span<T>` oggetto indipendentemente dal tipo di memoria incapsula.</span><span class="sxs-lookup"><span data-stu-id="83d5a-117">Because `Span<T>` is an abstraction over an arbitrary block of memory, methods of the `Span<T>` class and methods with `Span<T>` parameters operate on any `Span<T>` object regardless of the kind of memory it encapsulates.</span></span> <span data-ttu-id="83d5a-118">Ad esempio, ognuna delle sezioni separate del codice che inizializzano l'intervallo e calcolare che la somma dei relativi elementi può essere modificata nell'inizializzazione singola e metodi di calcolo, come illustrato nell'esempio seguente viene illustrato:</span><span class="sxs-lookup"><span data-stu-id="83d5a-118">For example, each of the separate sections of code that initialize the span and calculate the sum of its elements can be changed into single initialization and calculation methods, as the following example illustrates:</span></span>

[!code-csharp[Creating a Span\<Byte> from stack-allocated memory](~/samples/snippets/csharp/api/system/span/program.cs#4)]

## <a name="spant-and-arrays"></a><span data-ttu-id="83d5a-119">Intervallo\<T > e matrici</span><span class="sxs-lookup"><span data-stu-id="83d5a-119">Span\<T> and arrays</span></span>

<span data-ttu-id="83d5a-120">Quando esegue il wrapping di una matrice `Span<T>` può eseguire il wrapping di un'intera matrice, come accadeva negli esempi del [Span\<T > e della memoria](#spant-and-memory) sezione.</span><span class="sxs-lookup"><span data-stu-id="83d5a-120">When it wraps an array, `Span<T>` can wrap an entire array, as it did in the examples in the [Span\<T> and memory](#spant-and-memory) section.</span></span> <span data-ttu-id="83d5a-121">Poiché supporta il sezionamento, `Span<T>` può puntare anche a qualsiasi intervallo contiguo all'interno della matrice.</span><span class="sxs-lookup"><span data-stu-id="83d5a-121">Because it supports slicing, `Span<T>` can also point to any contiguous range within the array.</span></span>  

<span data-ttu-id="83d5a-122">L'esempio seguente crea una sezione dei intermedi cinque elementi di una matrice di interi di 10 elementi.</span><span class="sxs-lookup"><span data-stu-id="83d5a-122">The following example creates a slice of the middle five elements of a 10-element integer array.</span></span> <span data-ttu-id="83d5a-123">Si noti che il codice raddoppia i valori di ogni intero nella sezione.</span><span class="sxs-lookup"><span data-stu-id="83d5a-123">Note that the code doubles the values of each integer in the slice.</span></span> <span data-ttu-id="83d5a-124">Come illustrato nell'output, le modifiche apportate dall'intervallo di vengono riflesse nei valori della matrice.</span><span class="sxs-lookup"><span data-stu-id="83d5a-124">As the output shows, the changes made by the span are reflected in the values of the array.</span></span>

[!code-csharp[Creating a slice from a portion of a span](~/samples/snippets/csharp/api/system/span/slice/program.cs)]

## <a name="spant-and-slices"></a><span data-ttu-id="83d5a-125">Intervallo\<T > e sulle sezioni</span><span class="sxs-lookup"><span data-stu-id="83d5a-125">Span\<T> and slices</span></span>

<span data-ttu-id="83d5a-126">`Span<T>` include due overload del <xref:System.Span%601.Slice%2A> metodo che formano una sezione all'esterno di intervallo corrente che inizia in corrispondenza dell'indice specificato.</span><span class="sxs-lookup"><span data-stu-id="83d5a-126">`Span<T>` includes two overloads of the <xref:System.Span%601.Slice%2A> method that form a slice out of the current span that starts at a specified index.</span></span> <span data-ttu-id="83d5a-127">Questo rende possibile trattare i dati in un `Span<T>` come un set di parti logiche che possono essere elaborati in base alle esigenze per parti di una pipeline di elaborazione dei dati con impatto minimo sulle prestazioni.</span><span class="sxs-lookup"><span data-stu-id="83d5a-127">This makes it possible to treat the data in a `Span<T>` as a set of logical chunks that can be processed as needed by portions of a data processing pipeline with minimal performance impact.</span></span> <span data-ttu-id="83d5a-128">Ad esempio, poiché i protocolli server moderni sono spesso basati su testo, la manipolazione delle stringhe e le sottostringhe è particolarmente importante.</span><span class="sxs-lookup"><span data-stu-id="83d5a-128">For example, since modern server protocols are often text-based, manipulation of strings and substrings is particularly important.</span></span> <span data-ttu-id="83d5a-129">Nel <xref:System.String> classe, il metodo principale per l'estrazione delle sottostringhe è <xref:System.String.Substring%2A>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-129">In the <xref:System.String> class, the major method for extracting substrings is <xref:System.String.Substring%2A>.</span></span> <span data-ttu-id="83d5a-130">Per le pipeline di dati che si basano su Modifica di stringhe estesa, l'uso offre alcuni effetti negativi sulle prestazioni, perché:</span><span class="sxs-lookup"><span data-stu-id="83d5a-130">For data pipelines that rely on extensive string manipulation, its use offers some performance penalties, since it:</span></span>

1. <span data-ttu-id="83d5a-131">Crea una nuova stringa per contenere la sottostringa.</span><span class="sxs-lookup"><span data-stu-id="83d5a-131">Creates a new string to hold the substring.</span></span>

2. <span data-ttu-id="83d5a-132">Copia un subset di caratteri dalla stringa originale per la nuova stringa.</span><span class="sxs-lookup"><span data-stu-id="83d5a-132">Copies a subset of the characters from the original string to the new string.</span></span>

<span data-ttu-id="83d5a-133">Questa operazione di allocazione e la copia può essere eliminata usando `Span<T>` o <xref:System.ReadOnlySpan%601>, come illustrato nell'esempio seguente:</span><span class="sxs-lookup"><span data-stu-id="83d5a-133">This allocation and copy operation can be eliminated by using either `Span<T>` or <xref:System.ReadOnlySpan%601>, as the following example shows:</span></span>

[!code-csharp[Creating a slice from a substring](~/samples/snippets/csharp/api/system/span/slice2/program.cs)]


      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : 'T[] -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="83d5a-134">La matrice da cui creare l'oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-134">The array from which to create the <see cref="T:System.Span`1" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-135">Crea un nuovo oggetto <see cref="T:System.Span`1" /> sull'intera matrice specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-135">Creates a new <see cref="T:System.Span`1" /> object over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-136">Se `array` viene `null`, questo costruttore restituisce un `null` `Span<T>`.</span><span class="sxs-lookup"><span data-stu-id="83d5a-136">If `array` is `null`, this constructor returns a `null` `Span<T>`.</span></span>

      ]]></format>
        </remarks>
        <exception cref="T:System.TypeMismatchException">
          <span data-ttu-id="83d5a-137">
            <paramref name="T" /> è un tipo riferimento e <paramref name="array" /> non è una matrice di tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-137">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="83d5a-138">Puntatore all'indirizzo iniziale di un numero specificato di byte nella memoria.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-138">A pointer to the starting address of a specified number of bytes in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="83d5a-139">Numero di byte da includere in <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-139">The number of bytes to be included in the <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-140">Crea un nuovo oggetto <see cref="T:System.Span`1" /> da un numero specificato di byte a partire da un indirizzo di memoria specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-140">Creates a new <see cref="T:System.Span`1" /> object  from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

        This constructor should be used with care, since it creates arbitrarily typed `T`s from a `void*`-typed block of memory, and `length` is not checked. However, if the constructor succeeds in creating a new <xref:System.Span%601> object, all subsequent uses are correct.        

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83d5a-141">
            <paramref name="T" /> è un tipo riferimento o contiene puntatori e pertanto non può essere archiviato nella memoria non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-141">
              <paramref name="T" /> is a reference type or contains pointers and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="83d5a-142">
            <paramref name="length" /> è negativo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-142">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Span (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new Span&lt;'T&gt; : 'T[] * int * int -&gt; Span&lt;'T&gt;" Usage="new System.Span&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="83d5a-143">Matrice di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-143">The source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="83d5a-144">Indice del primo elemento da includere nel nuovo oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-144">The index of the first element to include in the new <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="83d5a-145">Numero di elementi da includere nel nuovo oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-145">The number of elements to include in the new <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-146">Crea un nuovo oggetto <see cref="T:System.Span`1" /> che include un numero specificato di elementi di una matrice che iniziano in un indice specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-146">Creates a new <see cref="T:System.Span`1" /> object that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="83d5a-147">
            <paramref name="array" /> è <see langword="null" />, ma <paramref name="start" /> o <paramref name="length" /> è diverso da zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-147">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="83d5a-148">--oppure--</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-148">--or--</span>
          </span>
          <p />
          <span data-ttu-id="83d5a-149">
            <paramref name="start" /> non rientra nei limiti della matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-149">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="83d5a-150">--oppure--</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-150">--or--</span>
          </span>
          <p />
          <span data-ttu-id="83d5a-151">
            <paramref name="start" /> e <paramref name="length" /> superano il numero di elementi nella matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-151">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeMismatchException">
          <span data-ttu-id="83d5a-152">
            <paramref name="T" /> è un tipo riferimento e <paramref name="array" /> non è una matrice di tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-152">
              <paramref name="T" /> is a reference type, and <paramref name="array" /> is not an array of type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="span.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-153">Cancella il contenuto di questo oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-153">Clears the contents of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-154">Il `Clear` metodo imposta gli elementi di <xref:System.Span%601> oggetto sui valori predefiniti.</span><span class="sxs-lookup"><span data-stu-id="83d5a-154">The `Clear` method sets the items in the <xref:System.Span%601> object to their default values.</span></span> <span data-ttu-id="83d5a-155">Non rimuove gli elementi dal <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-155">It does not remove items from the <xref:System.Span%601>.</span></span>  

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="span.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <summary>
          <span data-ttu-id="83d5a-156">Copia il contenuto di questo <see cref="System.Span`1" /> in una destinazione <see cref="System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-156">Copies the contents of this <see cref="System.Span`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-157">Questo metodo copia tutto `source` al `destination` anche se `source` e `destination` si sovrappongono.</span><span class="sxs-lookup"><span data-stu-id="83d5a-157">This method copies all of `source` to `destination` even if `source` and `destination` overlap.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="83d5a-158">
            <paramref name="destination" /> è più breve dell'oggetto <see cref="System.Span`1" /> di origine.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-158">
              <paramref name="destination" /> is shorter than the source <see cref="System.Span`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Span`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Span&lt;T&gt; Empty { Span&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-159">Restituisce un oggetto <see cref="T:System.Span`1" /> vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-159">Returns an empty <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83d5a-160">Oggetto <see cref="T:System.Span`1" /> vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-160">An empty <see cref="T:System.Span`1" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="span.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("Equals() on Span will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="83d5a-161">Non supportato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-161">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-162">Le chiamate a questo metodo non sono supportate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-162">Calls to this method are not supported.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-163">Le chiamate a questo metodo non sono supportate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-163">Calls to this method are not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="83d5a-164">Le chiamate al <xref:System.Span%601.Equals%2A> (metodo) non sono supportati.</span><span class="sxs-lookup"><span data-stu-id="83d5a-164">Calls to the <xref:System.Span%601.Equals%2A> method are not supported.</span></span> <span data-ttu-id="83d5a-165">Le chiamate al < xref:System.Span%601.Equals%2A metodi producono una delle due risultati:</span><span class="sxs-lookup"><span data-stu-id="83d5a-165">Calls to the <xref:System.Span%601.Equals%2A methods produce either of two results:</span></span>

- <span data-ttu-id="83d5a-166">Se `obj` è un <xref:System.Span%601>, la chiamata al metodo genera l'errore del compilatore CS1503: "Impossibile convertire da 'System.Span' a 'object'." Infatti <xref:System.Span%601> è un [struct ref](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) che non possono essere boxed e pertanto non può essere convertito in un <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-166">If `obj` is a <xref:System.Span%601>, the method call generates compiler error CS1503: "cannot convert from 'System.Span' to 'object'." This is because <xref:System.Span%601> is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that cannot be boxed and therefore cannot be converted to an <xref:System.Object>.</span></span>

- <span data-ttu-id="83d5a-167">Se il tipo della `obj` non è un <xref:System.Span%601>, la chiamata al metodo genera un <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-167">If the type of `obj` is not a <xref:System.Span%601>, the method call throws a <xref:System.NotSupportedException>.</span></span> 

<span data-ttu-id="83d5a-168">Per confrontare due <xref:System.Span%601> gli oggetti per verificarne l'uguaglianza, usare il <xref:System.Span%601.op_Equality%2A> operatore di confronto.</span><span class="sxs-lookup"><span data-stu-id="83d5a-168">To compare two <xref:System.Span%601> objects for equality, use the <xref:System.Span%601.op_Equality%2A> comparison operator.</span></span>

        ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="83d5a-169">Le chiamate a questo metodo non sono supportate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-169">Calls to this method are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public void Fill (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Fill(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Fill(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Fill (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Fill(T value);" />
      <MemberSignature Language="F#" Value="member this.Fill : 'T -&gt; unit" Usage="span.Fill value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="83d5a-170">Valore da assegnare a ogni elemento dell'intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-170">The value to assign to each element of the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-171">Inserisce un valore specificato negli elementi di questo intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-171">Fills the elements of this span with a specified value.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As Span(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; Span&lt;'T&gt;.Enumerator" Usage="span.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-172">Restituisce un enumeratore per questo <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-172">Returns an enumerator for this <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-173">Enumeratore per questo intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-173">An enumerator for this span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="83d5a-174">Invece di chiamare il <xref:System.Span%601.GetEnumerator%2A> metodo direttamente, è possibile usare il codice c# `foreach` istruzione e Visual Basic `For Each`... `Next` costrutto per enumerare un <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-174">Instead of calling the <xref:System.Span%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.Span%601>.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="span.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2">
          <AttributeName>System.Obsolete("GetHashCode() on Span will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-175">Genera un oggetto <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-175">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-176">Le chiamate a questo metodo generano sempre <see cref="T:System.NotSupportedException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-176">Calls to this method always throw a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="83d5a-177">Le chiamate a questo metodo non sono supportate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-177">Calls to this method are not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public T GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; " Usage="span.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-178">Restituisce un riferimento all'elemento di <see cref="T:System.Span`1" /> in corrispondenza dell'indice zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-178">Returns a reference to the element of the <see cref="T:System.Span`1" /> at index zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-179">Riferimento all'elemento di <see cref="T:System.Span`1" /> in corrispondenza dell'indice zero, oppure <see langword="null" /> se <see cref="M:System.Span`1.IsEmpty" /> è <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-179">A reference to the element of the <see cref="T:System.Span`1" /> at index zero, or <see langword="null" /> if <see cref="M:System.Span`1.IsEmpty" /> is  <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-180">Il `GetPinnableReference` metodo restituisce un [struct ref](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span><span class="sxs-lookup"><span data-stu-id="83d5a-180">The `GetPinnableReference` method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="83d5a-181">Può essere utilizzato per l'aggiunta un <xref:System.Span%601> in memoria.</span><span class="sxs-lookup"><span data-stu-id="83d5a-181">It can be used for pinning a <xref:System.Span%601> in memory.</span></span> <span data-ttu-id="83d5a-182">È necessario per supportare l'uso di un <xref:System.Span%601> all'interno di un [fissa](~/docs/csharp/language-reference/keywords/fixed-statement.md) istruzione.</span><span class="sxs-lookup"><span data-stu-id="83d5a-182">It is required to support the use of a <xref:System.Span%601> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Span&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-183">Restituisce un valore che indica se l'oggetto <see cref="T:System.Span`1" /> corrente è vuoto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-183">Returns a value that indicates whether the current <see cref="T:System.Span`1" /> is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83d5a-184">
            <see langword="true" /> Se l'intervallo corrente è vuoto. in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-184">
              <see langword="true" /> if the current span is empty; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % default[int] { T % get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : " Usage="System.Span&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>
          <span data-ttu-id="83d5a-185">Ottiene o imposta l’elemento in corrispondenza dell'indice in base zero specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-185">Gets or sets the element at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83d5a-186">Elemento in corrispondenza dell'indice specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-186">The element at the specified index.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="83d5a-187">
            <paramref name="index" /> è minore di zero oppure è maggiore o uguale a <see cref="P:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-187">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Span&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-188">Restituisce la lunghezza dell'intervallo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-188">Returns the length of the current span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="83d5a-189">La lunghezza dell'intervallo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-189">The length of the current span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Span`1&lt;!T&gt; left, valuetype System.Span`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Span(Of T), right As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Span&lt;'T&gt; * Span&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Span&lt;T&gt;" />
        <Parameter Name="right" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="83d5a-190">Il primo intervallo da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-190">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="83d5a-191">Il secondo intervallo da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-191">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-192">Restituisce un valore che indica se due oggetti <see cref="T:System.Span`1" /> sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-192">Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-193">
            <see langword="true" /> se i due oggetti <see cref="T:System.Span`1" /> sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-193">
              <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-194">Due <xref:System.Span%601> gli oggetti sono uguali se hanno la stessa lunghezza e gli elementi corrispondenti dei `left` e `right` scegliere la stessa memoria.</span><span class="sxs-lookup"><span data-stu-id="83d5a-194">Two <xref:System.Span%601> objects are equal if they have the same length and the corresponding elements of `left` and `right` point to the same memory.</span></span> <span data-ttu-id="83d5a-195">Si noti che il test di uguaglianza *non* tenta di determinare se il contenuto è uguale.</span><span class="sxs-lookup"><span data-stu-id="83d5a-195">Note that the test for equality does *not* attempt to determine whether the contents are equal.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.Span`1&lt;!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (span As Span(Of T)) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : Span&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="span">
          <span data-ttu-id="83d5a-196">Oggetto da convertire in un oggetto <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-196">The object to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-197">Definisce una conversione implicita di un oggetto <see cref="T:System.Span`1" /> in un oggetto <see cref="T:System.ReadOnlySpan`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-197">Defines an implicit conversion of a <see cref="T:System.Span`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-198">Intervallo di sola lettura che corrisponde all'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-198">A read-only span that corresponds to the current instance.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(`0[])~System.Span{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="83d5a-199">Matrice da convertire in <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-199">The array to convert to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-200">Definisce una conversione implicita di una matrice in <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-200">Defines an implicit conversion of an array to a <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-201">Intervallo che corrisponde a <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-201">The span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As Span(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator Span&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Span`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0;netcore-2.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As Span(Of T)" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator Span&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; Span&lt;'T&gt;" Usage="System.Span&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="83d5a-202">Segmento di matrice da convertire in <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-202">The array segment to be converted to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="83d5a-203">Segmento di matrice da convertire in <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-203">The array segment to be converted to a <see cref="T:System.Span`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-204">Definisce una conversione implicita di un <see cref="T:System.ArraySegment`1" /> in un <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-204">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-205">Intervallo che corrisponde al segmento di matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-205">A span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Span`1&lt;!T&gt; left, valuetype System.Span`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Span(Of T), right As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Span&lt;T&gt; left, Span&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Span&lt;'T&gt; * Span&lt;'T&gt; -&gt; bool" Usage="System.Span&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Span&lt;T&gt;" />
        <Parameter Name="right" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="83d5a-206">Il primo intervallo da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-206">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="83d5a-207">Il secondo intervallo da confrontare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-207">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-208">Restituisce un valore che indica se due oggetti <see cref="T:System.Span`1" /> non sono uguali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-208">Returns a value that indicates whether two <see cref="T:System.Span`1" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-209">
            <see langword="true" /> se i due oggetti <see cref="T:System.Span`1" /> non sono uguali; in caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-209">
              <see langword="true" /> if the two <see cref="T:System.Span`1" /> objects are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-210">Due <xref:System.Span%601> gli oggetti sono uguali se hanno lunghezze diverse o se gli elementi corrispondenti dei `left` e `right` non puntano alla stessa memoria.</span><span class="sxs-lookup"><span data-stu-id="83d5a-210">Two <xref:System.Span%601> objects are equal if they have different lengths or if the corresponding elements of `left` and `right` do not point to the same memory.</span></span> 

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; Span&lt;'T&gt;" Usage="span.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="83d5a-211">Indice in corrispondenza del quale iniziare la sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-211">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-212">Crea una sezione dall'intervallo corrente che inizia in corrispondenza di un indice specificato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-212">Forms a slice out of the current span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-213">Un intervallo costituito da tutti gli elementi dell'intervallo corrente da <paramref name="index" /> alla fine dell'intervallo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-213">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="83d5a-214">
            <paramref name="index" /> è minore di zero oppure è maggiore o uguale a <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-214">
              <paramref name="index" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public Span&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Span`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Span&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; Span&lt;'T&gt;" Usage="span.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="83d5a-215">Indice in corrispondenza del quale iniziare la sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-215">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="83d5a-216">Lunghezza desiderata della sezione.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-216">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-217">Crea una sezione dall'intervallo corrente che inizia in corrispondenza di un indice specificato per una lunghezza specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-217">Forms a slice out of the current span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-218">&gt;Intervallo costituito da <paramref name="length" /> elementi dall'intervallo corrente a partire da <paramref name="index" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-218">&gt;A span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="83d5a-219">
            <paramref name="start" /> o <paramref name="start" /> + <paramref name="index" /> è minore di zero o maggiore di <see cref="T:System.Span`1.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-219">
              <paramref name="start" /> or <paramref name="start" /> + <paramref name="index" /> is less than zero or greater than <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="span.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-220">Copia il contenuto di questo intervallo in una nuova matrice.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-220">Copies the contents of this span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-221">Matrice che contiene i dati nell'intervallo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-221">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-222">Questo metodo esegue un'allocazione heap e pertanto deve essere evitato, se possibile.</span><span class="sxs-lookup"><span data-stu-id="83d5a-222">This method performs a heap allocation and therefore should be avoided if possible.</span></span> <span data-ttu-id="83d5a-223">È talvolta necessario quando le API che supportano <xref:System.Span%601> oggetti non sono disponibili ma sono le API che funzionano con le matrici.</span><span class="sxs-lookup"><span data-stu-id="83d5a-223">It it sometimes necessary when APIs that support <xref:System.Span%601> objects are not available but APIs that work with arrays are.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="span.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="83d5a-224">Restituisce la rappresentazione di stringa dell'oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-224">Returns the string representation of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-225">Rappresentazione di stringa dell'oggetto <see cref="T:System.Span`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-225">The string representation of this <see cref="T:System.Span`1" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
<span data-ttu-id="83d5a-226">Per un `Span<Char>`, il `ToString` metodo restituisce un <xref:System.String> che contiene i caratteri a cui punta il <xref:System.Span%601>.</span><span class="sxs-lookup"><span data-stu-id="83d5a-226">For a `Span<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the <xref:System.Span%601>.</span></span> <span data-ttu-id="83d5a-227">In caso contrario, restituisce un <xref:System.String> con il nome del tipo e il numero di elementi che il <xref:System.Span%601> contiene.</span><span class="sxs-lookup"><span data-stu-id="83d5a-227">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the <xref:System.Span%601> contains.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="span.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="83d5a-228">Destinazione dell'operazione di copia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-228">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="83d5a-229">Tenta di copiare l'oggetto <see cref="T:System.Span`1" /> corrente in un <see cref="T:System.Span`1" /> di destinazione e restituisce un valore che indica se l'operazione di copia ha avuto esito positivo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-229">Attempts to copy the current <see cref="T:System.Span`1" /> to a destination <see cref="T:System.Span`1" /> and returns a value that indicates whether the copy operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="83d5a-230">
            <see langword="true" /> se l'operazione ha esito positivo. In caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="83d5a-230">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="83d5a-231">Questo metodo copia tutto `source` al `destination` anche se `source` e `destination` si sovrappongono.</span><span class="sxs-lookup"><span data-stu-id="83d5a-231">This method copies all of `source` to `destination` even if `source` and `destination` overlap.</span></span>

<span data-ttu-id="83d5a-232">Se `destination` è minore di origine <xref:System.Span%601>, questo metodo restituisce `false`, e non viene scritto alcun dato `destination`.</span><span class="sxs-lookup"><span data-stu-id="83d5a-232">If `destination` is shorter than the source <xref:System.Span%601>, this method returns `false`, and no data is written to `destination`.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>