<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430253" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e0d89-101">Offre un meccanismo per il rilascio delle risorse non gestite.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e0d89-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d89-102">L'utilizzo principale di questa interfaccia è per rilasciare le risorse non gestite.</span><span class="sxs-lookup"><span data-stu-id="e0d89-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="e0d89-103">Il garbage collector rilascia automaticamente la memoria allocata a un oggetto gestito quando tale oggetto non viene più utilizzato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="e0d89-104">Non è tuttavia possibile prevedere quando verrà eseguita la garbage collection.</span><span class="sxs-lookup"><span data-stu-id="e0d89-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="e0d89-105">Inoltre, il garbage collector non è a conoscenza delle risorse non gestite, ad esempio gli handle di finestra o aprire file e flussi.</span><span class="sxs-lookup"><span data-stu-id="e0d89-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="e0d89-106">Utilizzare il <xref:System.IDisposable.Dispose%2A> metodo di questa interfaccia per rilasciare in modo esplicito le risorse non gestite in combinazione con il garbage collector.</span><span class="sxs-lookup"><span data-stu-id="e0d89-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="e0d89-107">Il consumer di un oggetto può chiamare questo metodo quando l'oggetto non è più necessario.</span><span class="sxs-lookup"><span data-stu-id="e0d89-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e0d89-108">È una modifica di rilievo per aggiungere il <xref:System.IDisposable> interfaccia a una classe esistente.</span><span class="sxs-lookup"><span data-stu-id="e0d89-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="e0d89-109">Poiché non è possibile chiamare preesistente consumer del tipo <xref:System.IDisposable.Dispose%2A>, è possibile essere certi che le risorse non gestite utilizzate dal tipo verranno rilasciate.</span><span class="sxs-lookup"><span data-stu-id="e0d89-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="e0d89-110">Perché il <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione viene chiamata dal consumer di un tipo quando le risorse di proprietà da un'istanza non sono più necessari, è necessario includere sia l'oggetto gestito in un <xref:System.Runtime.InteropServices.SafeHandle> (l'alternativa consigliata) o deve eseguire l'override <xref:System.Object.Finalize%2A?displayProperty=nameWithType>per liberare risorse non gestite nel caso in cui il consumer ometta di chiamare <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="e0d89-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d89-111">In .NET Framework, il compilatore C++ supporta l'eliminazione deterministica delle risorse e non consente l'implementazione diretta del <xref:System.IDisposable.Dispose%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e0d89-112">Per informazioni dettagliate su come questa interfaccia e il <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodo, vedere il [procedura di Garbage Collection](~/docs/standard/garbage-collection/index.md) e [che implementa un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) argomenti.</span><span class="sxs-lookup"><span data-stu-id="e0d89-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="e0d89-113">Uso di un oggetto che implementa IDisposable</span><span class="sxs-lookup"><span data-stu-id="e0d89-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="e0d89-114">Se l'app Usa semplicemente un oggetto che implementa il <xref:System.IDisposable> interfaccia, è necessario chiamare l'oggetto <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione quando si è terminato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="e0d89-115">A seconda del linguaggio di programmazione, è possibile farlo in uno dei due modi:</span><span class="sxs-lookup"><span data-stu-id="e0d89-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="e0d89-116">Tramite un linguaggio costruire, ad esempio il `using` istruzione in c# e Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e0d89-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="e0d89-117">Eseguendo il wrapping della chiamata ai <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione in una `try` / `finally` blocco.</span><span class="sxs-lookup"><span data-stu-id="e0d89-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e0d89-118">Documentazione per i tipi che implementano <xref:System.IDisposable> tenere presente ciò e includere un promemoria per chiamare il relativo <xref:System.IDisposable.Dispose%2A> implementazione.</span><span class="sxs-lookup"><span data-stu-id="e0d89-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="e0d89-119">L'istruzione c# e Visual Basic usano</span><span class="sxs-lookup"><span data-stu-id="e0d89-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="e0d89-120">Se il linguaggio supporta un costrutto, ad esempio il [mediante](~/docs/csharp/language-reference/keywords/using.md) istruzione nel linguaggio c# e il [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) istruzione in Visual Basic, è possibile usarlo invece di chiamare in modo esplicito <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> manualmente.</span><span class="sxs-lookup"><span data-stu-id="e0d89-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="e0d89-121">L'esempio seguente usa questo approccio nella definizione di un `WordCount` classe che mantiene le informazioni su un file e il numero di parole in essa contenuti.</span><span class="sxs-lookup"><span data-stu-id="e0d89-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="e0d89-122">Il `using` istruzione è effettivamente sintattica.</span><span class="sxs-lookup"><span data-stu-id="e0d89-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="e0d89-123">In fase di compilazione, il compilatore di linguaggio implementa il linguaggio intermedio (IL) per un `try` / `finally` blocco.</span><span class="sxs-lookup"><span data-stu-id="e0d89-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="e0d89-124">Per ulteriori informazioni sul `using` istruzione, vedere la [istruzione Using](~/docs/visual-basic/language-reference/statements/using-statement.md) o [istruzione using](~/docs/csharp/language-reference/keywords/using-statement.md) argomenti.</span><span class="sxs-lookup"><span data-stu-id="e0d89-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="e0d89-125">Il blocco Try/Finally</span><span class="sxs-lookup"><span data-stu-id="e0d89-125">The Try/Finally block</span></span>  
 <span data-ttu-id="e0d89-126">Se il linguaggio di programmazione non supporta un costrutto, ad esempio il `using` istruzione in c# o Visual Basic, oppure se si preferisce non utilizzarla, è possibile chiamare il <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione dal `finally` block di una `try` / `finally` istruzione.</span><span class="sxs-lookup"><span data-stu-id="e0d89-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="e0d89-127">Nel seguente esempio viene sostituito il `using` bloccare nell'esempio precedente con un `try` / `finally` blocco.</span><span class="sxs-lookup"><span data-stu-id="e0d89-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="e0d89-128">Per ulteriori informazioni sul `try` / `finally` di schema, vedere [Try... Catch... Istruzione finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), oppure [istruzione try-finally](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="e0d89-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="e0d89-129">Implementazione di IDisposable</span><span class="sxs-lookup"><span data-stu-id="e0d89-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="e0d89-130">È necessario implementare <xref:System.IDisposable> solo se il tipo di risorse non gestite viene utilizzato direttamente.</span><span class="sxs-lookup"><span data-stu-id="e0d89-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="e0d89-131">I consumer del tipo in uso possono chiamare il <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementazione per liberare risorse quando l'istanza non è più necessario.</span><span class="sxs-lookup"><span data-stu-id="e0d89-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="e0d89-132">Gestire i casi in cui è non riesca a chiamare <xref:System.IDisposable.Dispose%2A>, è necessario utilizzare una classe derivata da <xref:System.Runtime.InteropServices.SafeHandle> per eseguire il wrapping le risorse non gestite, oppure è necessario eseguire l'override di <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodo per un tipo riferimento.</span><span class="sxs-lookup"><span data-stu-id="e0d89-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="e0d89-133">In entrambi i casi, utilizzare il <xref:System.IDisposable.Dispose%2A> metodo per eseguire qualsiasi pulizia necessaria dopo aver utilizzato le risorse non gestite, ad esempio liberare, rilasciare o reimpostare risorse non gestite.</span><span class="sxs-lookup"><span data-stu-id="e0d89-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d89-134">Se si sta definendo una classe di base che utilizza le risorse non gestite e che ha o potrebbe avere, sottoclassi che devono essere eliminate, è necessario implementare la <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> metodo e fornire un overload del secondo `Dispose`, come descritto nella prossima sezione.</span><span class="sxs-lookup"><span data-stu-id="e0d89-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="e0d89-135">IDisposable e la gerarchia di ereditarietà</span><span class="sxs-lookup"><span data-stu-id="e0d89-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="e0d89-136">Deve implementare una classe base con sottoclassi che devono essere disposable <xref:System.IDisposable> come indicato di seguito.</span><span class="sxs-lookup"><span data-stu-id="e0d89-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="e0d89-137">È consigliabile utilizzare questo modello ogni volta che implementano <xref:System.IDisposable> su qualsiasi tipo che non sia `sealed` (`NotInheritable` in Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e0d89-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="e0d89-138">È necessario fornire una pubblica, non virtuale <xref:System.IDisposable.Dispose> metodo e protected virtuale `Dispose(Boolean disposing)` metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="e0d89-139">Il <xref:System.IDisposable.Dispose> metodo deve chiamare `Dispose(true)` e deve eliminare la finalizzazione per le prestazioni.</span><span class="sxs-lookup"><span data-stu-id="e0d89-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="e0d89-140">Il tipo di base non deve includere alcun finalizzatori.</span><span class="sxs-lookup"><span data-stu-id="e0d89-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="e0d89-141">Nel seguente frammento di codice riflette il modello dispose per le classi di base.</span><span class="sxs-lookup"><span data-stu-id="e0d89-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="e0d89-142">Si presuppone che il tipo non esegue l'override di <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="e0d89-143">Se si esegue l'override di <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodo, la classe deve implementare il modello seguente.</span><span class="sxs-lookup"><span data-stu-id="e0d89-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="e0d89-144">Le sottoclassi devono implementare il modello Disposable nel modo seguente:</span><span class="sxs-lookup"><span data-stu-id="e0d89-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="e0d89-145">Devono eseguire l'override di `Dispose(Boolean)` e chiamare l'implementazione `Dispose(Boolean)` della classe di base.</span><span class="sxs-lookup"><span data-stu-id="e0d89-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="e0d89-146">Se necessario, possono fornire un finalizzatore.</span><span class="sxs-lookup"><span data-stu-id="e0d89-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="e0d89-147">Il finalizzatore deve chiamare `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="e0d89-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="e0d89-148">Si noti che le classi derivate non possono implementare le <xref:System.IDisposable> l'interfaccia e non includere un costruttore <xref:System.IDisposable.Dispose%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e0d89-149">Sostituiscono solo la classe di base `Dispose(Boolean)` metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="e0d89-150">Nel seguente frammento di codice riflette il modello dispose per le classi derivate.</span><span class="sxs-lookup"><span data-stu-id="e0d89-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="e0d89-151">Si presuppone che il tipo non esegue l'override di <xref:System.Object.Finalize%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="e0d89-152">Nell'esempio seguente viene illustrato come creare una classe di risorse che implementa il <xref:System.IDisposable> interfaccia.</span><span class="sxs-lookup"><span data-stu-id="e0d89-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e0d89-153">Esegue attività definite dall'applicazione, come rilasciare o reimpostare risorse non gestite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e0d89-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0d89-154">Utilizzare questo metodo per chiudere o rilasciare le risorse non gestite, ad esempio file, flussi e handle, occupate da un'istanza della classe che implementa questa interfaccia.</span><span class="sxs-lookup"><span data-stu-id="e0d89-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="e0d89-155">Per convenzione, questo metodo viene utilizzato per tutte le attività relative al rilascio di risorse occupate da un oggetto o alla preparazione di un oggetto per il riutilizzo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e0d89-156">Se si utilizza una classe che implementa il <xref:System.IDisposable> interfaccia, è necessario chiamare il relativo <xref:System.IDisposable.Dispose%2A> dopo averli completati utilizzando la classe di implementazione.</span><span class="sxs-lookup"><span data-stu-id="e0d89-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="e0d89-157">Per altre informazioni, vedere la sezione "Utilizzo di un oggetto che implementa IDisposable" nel <xref:System.IDisposable> argomento.</span><span class="sxs-lookup"><span data-stu-id="e0d89-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e0d89-158">Quando si implementa questo metodo, verificare che tutte occupate le risorse vengano liberate dalla propagazione della chiamata tramite la gerarchia di contenimento.</span><span class="sxs-lookup"><span data-stu-id="e0d89-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="e0d89-159">Ad esempio, se un oggetto alloca un oggetto B e oggetto B alloca C, quindi A un oggetto <xref:System.IDisposable.Dispose%2A> implementazione deve chiamare <xref:System.IDisposable.Dispose%2A> sul B, che a sua volta deve chiamare <xref:System.IDisposable.Dispose%2A> in C.</span><span class="sxs-lookup"><span data-stu-id="e0d89-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e0d89-160">Il compilatore C++ supporta l'eliminazione deterministica delle risorse e non consente l'implementazione diretta del <xref:System.IDisposable.Dispose%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e0d89-161">Un oggetto deve chiamare anche il <xref:System.IDisposable.Dispose%2A> metodo della relativa classe base se la classe basa implementa <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="e0d89-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="e0d89-162">Per ulteriori informazioni sull'implementazione <xref:System.IDisposable> in una classe di base e delle relative sottoclassi, vedere la sezione "Gerarchia di ereditarietà e IDisposable" nel <xref:System.IDisposable> argomento.</span><span class="sxs-lookup"><span data-stu-id="e0d89-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e0d89-163">Se un oggetto <xref:System.IDisposable.Dispose%2A> metodo viene chiamato più volte, l'oggetto deve ignorare tutte le chiamate dopo la prima.</span><span class="sxs-lookup"><span data-stu-id="e0d89-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="e0d89-164">L'oggetto non deve generare un'eccezione se il relativo <xref:System.IDisposable.Dispose%2A> metodo viene chiamato più volte.</span><span class="sxs-lookup"><span data-stu-id="e0d89-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="e0d89-165">I metodi di istanza diverso da <xref:System.IDisposable.Dispose%2A> può generare un <xref:System.ObjectDisposedException> quando le risorse sono già state eliminate.</span><span class="sxs-lookup"><span data-stu-id="e0d89-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="e0d89-166">Gli utenti potrebbero prevedere un tipo di risorsa per usare una convenzione particolare per indicare uno stato allocato o uno stato liberato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="e0d89-167">Un esempio di questo oggetto è classi di flusso, che vengono tradizionalmente considerate aperte o chiuse.</span><span class="sxs-lookup"><span data-stu-id="e0d89-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="e0d89-168">Il responsabile dell'implementazione di una classe che ha una convenzione potrebbe scegliere di implementare un metodo pubblico con un nome personalizzato, ad esempio `Close`, che chiama il <xref:System.IDisposable.Dispose%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e0d89-169">Perché il <xref:System.IDisposable.Dispose%2A> metodo deve essere chiamato in modo esplicito, non vi è sempre un rischio che le risorse non gestite non sarà rilasciato, perché il consumer di un oggetto non riesce a chiamare il relativo <xref:System.IDisposable.Dispose%2A> (metodo).</span><span class="sxs-lookup"><span data-stu-id="e0d89-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e0d89-170">Esistono due modi per evitare questo problema:</span><span class="sxs-lookup"><span data-stu-id="e0d89-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="e0d89-171">Eseguire il wrapping della risorsa gestita in un oggetto derivato da <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e0d89-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e0d89-172">il <xref:System.IDisposable.Dispose%2A> quindi chiama il <xref:System.IDisposable.Dispose%2A> metodo il <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> istanze.</span><span class="sxs-lookup"><span data-stu-id="e0d89-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="e0d89-173">Per altre informazioni, vedere la sezione "Alternativa SafeHandle" nel <xref:System.Object.Finalize%2A?displayProperty=nameWithType> argomento.</span><span class="sxs-lookup"><span data-stu-id="e0d89-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="e0d89-174">Implementare un finalizzatore per liberare risorse quando <xref:System.IDisposable.Dispose%2A> non viene chiamato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="e0d89-175">Per impostazione predefinita, il garbage collector chiama automaticamente finalizzatore di un oggetto prima di recuperarne la memoria.</span><span class="sxs-lookup"><span data-stu-id="e0d89-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="e0d89-176">Tuttavia, se il <xref:System.IDisposable.Dispose%2A> metodo è stato chiamato, non è in genere necessaria per il garbage collector di chiamare il finalizzatore dell'oggetto è stato eliminato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="e0d89-177">Per impedire il completamento automatico, <xref:System.IDisposable.Dispose%2A> possono chiamare le implementazioni di <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e0d89-178">Quando si usa un oggetto che accede a risorse non gestite, ad esempio un <xref:System.IO.StreamWriter>, è consigliabile creare l'istanza con un `using` istruzione.</span><span class="sxs-lookup"><span data-stu-id="e0d89-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="e0d89-179">Il `using` istruzione chiude automaticamente il flusso e chiama <xref:System.IDisposable.Dispose%2A> per l'oggetto quando il codice in uso è stato completato.</span><span class="sxs-lookup"><span data-stu-id="e0d89-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="e0d89-180">Per un esempio, vedere il <xref:System.IO.StreamWriter> classe.</span><span class="sxs-lookup"><span data-stu-id="e0d89-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0d89-181">Nell'esempio seguente viene illustrato come sia possibile implementare il <xref:System.IDisposable.Dispose%2A> metodo.</span><span class="sxs-lookup"><span data-stu-id="e0d89-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>