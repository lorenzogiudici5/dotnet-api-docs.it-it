<Type Name="Converter&lt;TInput,TOutput&gt;" FullName="System.Converter&lt;TInput,TOutput&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="35291f6474b9904a6b2f9fac3055c24f40c4124d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36432242" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TOutput Converter&lt;in TInput,out TOutput&gt;(TInput input);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Converter`2&lt;- TInput, + TOutput&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Converter`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Converter(Of In TInput, Out TOutput)(input As TInput) As TOutput " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TInput, typename TOutput&gt;&#xA;public delegate TOutput Converter(TInput input);" />
  <TypeSignature Language="F#" Value="type Converter&lt;'Input, 'Output&gt; = delegate of 'Input -&gt; 'Output" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TOutput">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="input" Type="TInput" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TOutput</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TInput">Tipo di oggetto da convertire.</typeparam>
    <typeparam name="TOutput">Tipo in cui l'oggetto di input deve essere convertito.</typeparam>
    <param name="input">Oggetto da convertire.</param>
    <summary>Rappresenta un metodo che converte un oggetto da un tipo in un altro.</summary>
    <returns>Oggetto <typeparamref name="TOutput" /> che rappresenta l’oggetto <typeparamref name="TInput" /> convertito.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo delegato è utilizzato dal <xref:System.Array.ConvertAll%2A> metodo del <xref:System.Array> classe e il <xref:System.Collections.Generic.List`1.ConvertAll*> metodo del <xref:System.Collections.Generic.List%601> (classe) per convertire ogni elemento della raccolta da un tipo a altro.  
  
   
  
## Examples  
 In questa sezione contiene due esempi di codice. Nel primo esempio viene il <xref:System.Converter%602> delegato con il <xref:System.Array.ConvertAll%2A> metodo per il <xref:System.Array> (classe), mentre la seconda viene illustrato il delegato con il <xref:System.Collections.Generic.List`1.ConvertAll*> metodo del <xref:System.Collections.Generic.List%601> classe generica.  
  
 Esempio 1  
  
 L'esempio di codice seguente definisce un metodo denominato `PointFToPoint` che converte un <xref:System.Drawing.PointF> struttura in un <xref:System.Drawing.Point> struttura. Nell'esempio viene quindi creata una matrice di <xref:System.Drawing.PointF> strutture, crea un `Converter<PointF, Point>` delegare (`Converter(Of PointF, Point)` in Visual Basic) per rappresentare il `PointFToPoint` (metodo) e passa il delegato per il <xref:System.Array.ConvertAll%2A> metodo. Il <xref:System.Array.ConvertAll%2A> metodo passa ogni elemento dell'elenco di input per il `PointFToPoint` metodo e inserisce gli elementi convertiti in un nuovo elenco di <xref:System.Drawing.Point> strutture. Entrambi gli elenchi vengono visualizzati.  
  
 [!code-cpp[Array_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/Array_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[Array_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/Array_ConvertAll/cs/source.cs#1)]
 [!code-vb[Array_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Array_ConvertAll/vb/source.vb#1)]  
  
 Esempio 2  
  
 L'esempio di codice seguente definisce un metodo denominato `PointFToPoint` che converte un <xref:System.Drawing.PointF> struttura in un <xref:System.Drawing.Point> struttura. Nell'esempio viene quindi creata una <xref:System.Collections.Generic.List%601> di <xref:System.Drawing.PointF> strutture, crea un `Converter\<PointF, Point>` delegare (`Converter(Of PointF, Point)` in Visual Basic) per rappresentare il `PointFToPoint` (metodo) e passa il delegato per il <xref:System.Collections.Generic.List`1.ConvertAll*> (metodo). Il <xref:System.Collections.Generic.List`1.ConvertAll*> metodo passa ogni elemento dell'elenco di input per il `PointFToPoint` metodo e inserisce gli elementi convertiti in un nuovo elenco di <xref:System.Drawing.Point> strutture. Entrambi gli elenchi vengono visualizzati.  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>