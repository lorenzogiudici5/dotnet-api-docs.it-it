<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Func`3.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52cfb53b3f4c53549feceb61e81392b5b3965a5e1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2cfb53b3f4c53549feceb61e81392b5b3965a5e1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The type of the first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Tipo del primo parametro del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The type of the second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Tipo del secondo parametro del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The type of the return value of the method that this delegate encapsulates.</source>
          <target state="translated">Tipo del valore restituito del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Func`3">
          <source>The first parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Primo parametro del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.Func`3">
          <source>The second parameter of the method that this delegate encapsulates.</source>
          <target state="translated">Secondo parametro del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.Func`3">
          <source>Encapsulates a method that has two parameters and returns a value of the type specified by the <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph> parameter.</source>
          <target state="translated">Incapsula un metodo che dispone di due parametri e restituisce un valore del tipo specificato dal parametro <ph id="ph1">&lt;typeparamref name="TResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="T:System.Func`3">
          <source>The return value of the method that this delegate encapsulates.</source>
          <target state="translated">Valore restituito del metodo incapsulato da questo delegato.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">È possibile utilizzare questo delegato per rappresentare un metodo che può essere passato come parametro senza dichiarare in modo esplicito un delegato personalizzato.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">Il metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>This means that the encapsulated method must have two parameters, each of which is passed to it by value, and that it must return a value.</source>
          <target state="translated">Ciò significa che il metodo incapsulato deve avere due parametri, ognuno dei quali è passato per valore, e deve restituire un valore.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>To reference a method that has two parameters and returns <ph id="ph1">`void`</ph> (or in Visual Basic, that is declared as a <ph id="ph2">`Sub`</ph> rather than as a <ph id="ph3">`Function`</ph>), use the generic <ph id="ph4">&lt;xref:System.Action%602&gt;</ph> delegate instead.</source>
          <target state="translated">Per fare riferimento a un metodo che presenta due parametri e restituisce <ph id="ph1">`void`</ph> (o in Visual Basic, che è dichiarato come un <ph id="ph2">`Sub`</ph> piuttosto che come un <ph id="ph3">`Function`</ph>), utilizzare il metodo generico <ph id="ph4">&lt;xref:System.Action%602&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>When you use the <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate you do not have to explicitly define a delegate that encapsulates a method with two parameters.</source>
          <target state="translated">Quando si utilizza il <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegato non è necessario definire in modo esplicito un delegato che incapsula un metodo con due parametri.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`ExtractMethod`</ph> and assigns a reference to the <ph id="ph2">`ExtractWords`</ph> method to its delegate instance.</source>
          <target state="translated">Ad esempio, il codice seguente dichiara in modo esplicito un delegato denominato <ph id="ph1">`ExtractMethod`</ph> e assegna un riferimento di <ph id="ph2">`ExtractWords`</ph> metodo all'istanza di delegato.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The following example simplifies this code by instantiating a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">Nell'esempio seguente viene semplificato questo codice creando un <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegato anziché la definizione di un nuovo delegato e assegnarle un metodo denominato in modo esplicito.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>You can use the <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegato con i metodi anonimi in c#, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(Per un'introduzione ai metodi anonimi, vedere <bpt id="p1">[</bpt>metodi anonimi<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>You can also assign a lambda expression to a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate, as the following example illustrates.</source>
          <target state="translated">È inoltre possibile assegnare un'espressione lambda a un <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegare, come illustrato nell'esempio seguente.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id="p2">[</bpt>Lambda Expressions<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(Per un'introduzione alle espressioni lambda, vedere <bpt id="p1">[</bpt>espressioni Lambda<ept id="p1">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> e <bpt id="p2">[</bpt>espressioni Lambda<ept id="p2">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The underlying type of a lambda expression is one of the generic <ph id="ph1">`Func`</ph> delegates.</source>
          <target state="translated">Il tipo sottostante di un'espressione lambda è uno del tipo generico <ph id="ph1">`Func`</ph> delegati.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</source>
          <target state="translated">Questo rende possibile passare un'espressione lambda come un parametro senza l'assegnazione in modo esplicito a un delegato.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>In particular, because many methods of types in the <ph id="ph1">&lt;xref:System.Linq&gt;</ph> namespace have <ph id="ph2">&lt;xref:System.Func%603&gt;</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id="ph3">&lt;xref:System.Func%603&gt;</ph> delegate.</source>
          <target state="translated">In particolare, poiché molti metodi di tipi nel <ph id="ph1">&lt;xref:System.Linq&gt;</ph> dispone di spazio dei nomi <ph id="ph2">&lt;xref:System.Func%603&gt;</ph> parametri, è possibile passare questi metodi di un'espressione lambda senza creare l'istanza in modo esplicito un <ph id="ph3">&lt;xref:System.Func%603&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The following example demonstrates how to declare and use a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegate.</source>
          <target state="translated">Nell'esempio riportato di seguito viene illustrato come dichiarare e utilizzare un <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> delegato.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>This example declares a <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> variable and assigns it a lambda expression that takes a <ph id="ph2">&lt;xref:System.String&gt;</ph> value and an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> value as parameters.</source>
          <target state="translated">In questo esempio dichiara un <ph id="ph1">&lt;xref:System.Func%603&gt;</ph> variabile e assegna un'espressione lambda che accetta un <ph id="ph2">&lt;xref:System.String&gt;</ph> valore e un <ph id="ph3">&lt;xref:System.Int32&gt;</ph> valore come parametri.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The lambda expression returns <ph id="ph1">`true`</ph> if the length of the <ph id="ph2">&lt;xref:System.String&gt;</ph> parameter is equal to the value of the <ph id="ph3">&lt;xref:System.Int32&gt;</ph> parameter.</source>
          <target state="translated">L'espressione lambda restituisce <ph id="ph1">`true`</ph> se la lunghezza del <ph id="ph2">&lt;xref:System.String&gt;</ph> è uguale al valore del parametro di <ph id="ph3">&lt;xref:System.Int32&gt;</ph> parametro.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Func`3">
          <source>The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</source>
          <target state="translated">Il delegato che incapsula questo metodo viene successivamente utilizzato in una query per filtrare le stringhe in una matrice di stringhe.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>