<Type Name="Console" FullName="System.Console">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b006f3d9b207ce1cfdf984f93be8c753b8e073cc" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta i flussi di input, output e di errore standard per le applicazioni console. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La console è una finestra del sistema operativo in cui gli utenti interagiscono con il sistema operativo o con un'applicazione console basata su testo tramite l'immissione di input di testo tramite la tastiera del computer e leggendo l'output di testo dal terminale del computer. Nel sistema operativo Windows, ad esempio, la console viene chiamata il prompt dei comandi e accetta comandi MS-DOS. La <xref:System.Console> classe fornisce il supporto di base per le applicazioni che leggono e scrivono caratteri nella console.  
  
 Per informazioni sullo sviluppo con il <xref:System.Console> classe, vedere le sezioni seguenti:  
  
-   [Flussi i/o console](#Streams)  
  
-   [Buffer dello schermo e finestra della Console](#Buffer)  
  
-   [Supporto Unicode per la Console di](#Unicode)  
  
-   [Operazioni comuni](#Operations)  
  
-   [Note sulla base di .NET](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>Flussi i/o console  
 Quando si avvia un'applicazione console, il sistema operativo associa automaticamente tre flussi i/o la console: standard input stream, flusso di output standard e il flusso di output di errore standard. L'applicazione può leggere l'input dell'utente dal flusso di input standard; scrivere dati normale nel flusso di output standard. e scrivere i dati di errore nel flusso di output di errore standard. I flussi vengono passati all'applicazione come valori del <xref:System.Console.In%2A?displayProperty=nameWithType>, <xref:System.Console.Out%2A?displayProperty=nameWithType>, e <xref:System.Console.Error%2A?displayProperty=nameWithType> proprietà.  
  
 Per impostazione predefinita, il valore della <xref:System.Console.In%2A> proprietà è un <xref:System.IO.TextReader?displayProperty=nameWithType> oggetto che rappresenta la tastiera e i valori del <xref:System.Console.Out%2A> e <xref:System.Console.Error%2A> sono proprietà <xref:System.IO.TextWriter?displayProperty=nameWithType> gli oggetti che rappresentano una finestra della console. Tuttavia, è possibile impostare queste proprietà in flussi che non rappresentano la finestra della console o la tastiera; ad esempio, è possibile impostare queste proprietà in flussi che rappresentano i file. Per reindirizzare l'input standard, un output standard o un flusso di errore standard, chiamare il <xref:System.Console.SetIn%2A?displayProperty=nameWithType>, <xref:System.Console.SetOut%2A?displayProperty=nameWithType>, o <xref:System.Console.SetError%2A?displayProperty=nameWithType> (metodo), rispettivamente. Operazioni dei / o che utilizzano i flussi sono sincronizzate, il che significa che più thread possono leggere o scrivere i flussi. Ciò significa che i metodi che vengono in genere asincroni, ad esempio <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>, eseguire in modo sincrono, se l'oggetto rappresenta un flusso di console.  
  
> [!NOTE]
>  Non utilizzare il <xref:System.Console> classe per visualizzare l'output in applicazioni automatiche, ad esempio le applicazioni server. Le chiamate a metodi quali <xref:System.Console.Write%2A?displayProperty=nameWithType> e <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> non hanno alcun effetto in applicazioni GUI.  
  
 <xref:System.Console> membri di classe che funzionano normalmente durante il flusso sottostante viene indirizzato a una console potrebbero generare un'eccezione se il flusso viene reindirizzato, ad esempio, in un file. Programma l'applicazione per intercettare <xref:System.IO.IOException?displayProperty=nameWithType> eccezioni se si reindirizza un flusso standard. È inoltre possibile utilizzare il <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, e <xref:System.Console.IsErrorRedirected%2A> le proprietà per determinare se un flusso standard viene reindirizzato prima di eseguire un'operazione che genera un <xref:System.IO.IOException?displayProperty=nameWithType> eccezione.  
  
 È talvolta utile chiamare in modo esplicito i membri degli oggetti flusso rappresentati dal <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, e <xref:System.Console.Error%2A> proprietà. Ad esempio, per impostazione predefinita, il <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> metodo legge l'input dal flusso di input standard. Analogamente, il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo scrive i dati nel flusso di output standard e i dati sono seguiti dalla stringa di terminazione riga predefinito, ovvero un ritorno a capo e avanzamento riga ("\r\n"). Tuttavia, la <xref:System.Console> classe non fornisce un metodo corrispondente per scrivere i dati per il flusso di output di errore standard o una proprietà per modificare la stringa di terminazione di riga per i dati scritti in tale flusso.  
  
 È possibile risolvere questo problema impostando il <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> proprietà del <xref:System.Console.Out%2A> o <xref:System.Console.Error%2A> proprietà da un'altra stringa di terminazione di riga. L'istruzione c# riportata di seguito, ad esempio, imposta la stringa di terminazione di riga per il flusso di output di errore standard a due ritorno a capo e avanzamento delle sequenze di riga:  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 È quindi possibile chiamare in modo esplicito il <xref:System.IO.TextWriter.WriteLine%2A> metodo per l'oggetto flusso di output di errore, come l'istruzione c# riportata di seguito:  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>Buffer dello schermo e finestra della Console  
 Due funzioni strettamente correlate della console sono buffer dello schermo e la finestra della console. Testo viene effettivamente letto o scritto nei flussi della console, ma sembra essere lette o scritte in un'area della console denominata buffer dello schermo. Il buffer dello schermo è un attributo della console e è organizzato come una griglia rettangolare di righe e colonne in cui ogni intersezione di griglia, o una cella di carattere, può contenere un carattere. Ogni carattere ha un colore di primo piano e ogni cella di carattere ha un colore di sfondo.  
  
 Il buffer dello schermo viene visualizzato in un'area rettangolare denominata finestra della console. Nella finestra della console è un altro attributo della console; non è la console stessa, ovvero una finestra del sistema operativo. Nella finestra della console è disposti in righe e colonne, è minore o uguale alla dimensione del buffer dello schermo e può essere spostata per visualizzare aree diverse del buffer dello schermo sottostante. Se il buffer dello schermo è maggiore di finestra della console, la console visualizza automaticamente le barre di scorrimento in modo nella finestra della console può essere riposizionata sull'area del buffer dello schermo.  
  
 Un cursore indica la posizione del buffer dello schermo in cui il testo viene letta o scritto. Il cursore possa nascosto o rendere visibile e l'altezza può essere modificato. Se il cursore è visibile, è possibile che la posizione della finestra console viene spostata automaticamente in modo il cursore si trova sempre nella visualizzazione.  
  
 L'origine per le coordinate di celle di carattere nel buffer dello schermo è l'angolo superiore sinistro e le posizioni del cursore e nella finestra della console vengono misurate tale origine. Usare gli indici in base zero per specificare le posizioni; Ciò significa che è possibile specificare la riga più in alto come riga 0 e la colonna all'estrema sinistra come colonna 0. Il valore massimo per gli indici di riga e di colonna è <xref:System.Int16.MaxValue?displayProperty=nameWithType>.  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>Supporto Unicode per la Console di  
 In generale, la console legge l'input e scrive l'output tramite la tabella codici corrente di console, che definisce le impostazioni locali per impostazione predefinita. Una tabella codici può gestire solo un subset di caratteri Unicode disponibili, pertanto se si tenta di caratteri che non sono mappati da una particolare tabella codici, la console non sarà possibile visualizzare tutti i caratteri o li rappresentano in modo accurato. L'esempio seguente illustra questo problema. Tenta di visualizzare i caratteri dell'alfabeto cirillico da U + 0410 a U + 044F nella console. Se si esegue l'esempio in un sistema che utilizza la tabella codici 437 console, ogni carattere viene sostituito da un punto interrogativo (?), poiché i caratteri cirillici non eseguano il mapping per i caratteri nella tabella codici 437.  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 Oltre al supporto di tabelle codici, il <xref:System.Console> con la codifica UTF-8 supporta la classe di <xref:System.Text.UTF8Encoding> classe. A partire da .NET Framework 4.5, il <xref:System.Console> classe supporta anche con la codifica UTF-16 il <xref:System.Text.UnicodeEncoding> classe. Per visualizzare i caratteri Unicode nella console. impostare il <xref:System.Console.OutputEncoding%2A> una proprietà <xref:System.Text.UTF8Encoding> o <xref:System.Text.UnicodeEncoding>.  
  
 Supporto per i caratteri Unicode richiede il codificatore di riconoscere un particolare carattere Unicode e richiede anche un tipo di carattere che contiene le icone necessarie per eseguire il rendering di tale carattere. Per visualizzare correttamente i caratteri Unicode nella console, è necessario impostare il carattere della console a un tipo di carattere TrueType, ad esempio Consolas o Lucida Console o a non raster. Nell'esempio seguente viene illustrato come livello di codice modificare il tipo di carattere da un tipo di carattere raster Lucida Console.  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 Tuttavia, i tipi di carattere è possibile visualizzare solo un sottoinsieme di glifi. Ad esempio, il tipo di carattere Lucida Console visualizza solo 643 dei caratteri disponibili circa 64.000 da U + 0021 da U + FB02. Per vedere quali caratteri di un particolare tipo di carattere supporta, aprire il **caratteri** nel Pannello di controllo, scegliere il **trovare un carattere** opzione, quindi scegliere il tipo di carattere set il cui tipo di carattere che si desidera esaminare il ** Tipo di carattere** elenco il **mappa caratteri** finestra.  
  
 Windows Usa il collegamento per visualizzare icone che non sono disponibili in un particolare tipo di carattere. Per informazioni sul collegamento per visualizzare i set di caratteri aggiuntivi, vedere [la globalizzazione: i tipi di carattere](http://go.microsoft.com/fwlink/?LinkId=229111). Tipi di carattere collegati vengono definiti nella sottochiave del Registro di sistema HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink. Ogni voce associata a questa sottochiave corrisponde al nome di un carattere di base e il relativo valore è una matrice di stringhe che definisce i file di caratteri e i tipi di carattere sono collegati al tipo di carattere di base. Definisce un tipo di carattere collegato e assume il formato di ogni membro della matrice *nome-file-tipo di carattere*,*nome carattere*. Nell'esempio seguente viene illustrata la procedura a livello di codice per definire un tipo di carattere collegato denominato SimSun trovato in un file di tipo di carattere denominato simsun.ttc che visualizza i caratteri Han semplificato.  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 Supporto Unicode per la console presenta le limitazioni seguenti:  
  
-   Non è supportata la codifica UTF-32. Le codifiche sono UTF-8 e UTF-16, che sono rappresentate da Unicode è supportato esclusivamente il <xref:System.Text.UTF8Encoding> e <xref:System.Text.UnicodeEncoding> classi, rispettivamente.  
  
-   Output bidirezionale non è supportata.  
  
-   Visualizzazione di caratteri compreso nel Basic Multilingual Plane (vale a dire delle coppie di surrogati) non è supportato, anche se sono definiti in un file di tipo di carattere collegato.  
  
-   Visualizzazione di caratteri in lingue con alfabeti non è supportata.  
  
-   Le sequenze di caratteri di combinazione (vale a dire caratteri costituiti da un carattere di base e uno o più caratteri di unione) vengono visualizzate come caratteri distinti. Per aggirare questa limitazione, è possibile normalizzare la stringa da visualizzare tramite la chiamata di <xref:System.String.Normalize%2A?displayProperty=nameWithType> metodo prima di inviare l'output alla console. Nell'esempio seguente, una stringa che contiene il carattere di combinazione di U + 0061 sequenza U + 0308 viene visualizzato nella console come due caratteri prima che la stringa di output viene normalizzata e come un singolo carattere dopo la <xref:System.String.Normalize%2A?displayProperty=nameWithType> metodo viene chiamato.  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     Si noti che la normalizzazione è una soluzione praticabile solo se sequenza di caratteri standard per un modulo di pre-composto che corrisponde a un determinato combining che include il carattere Unicode.  
  
-   Se un tipo di carattere fornisce un glifo per un punto di codice nell'area uso privato, verrà visualizzato tale icona. Tuttavia, poiché i caratteri nell'area uso privato sono specifici dell'applicazione, potrebbe non trattarsi glifo del previsto.  
  
 Nell'esempio seguente visualizza un intervallo di caratteri Unicode nella console. Nell'esempio accetta tre parametri della riga di comando: l'inizio dell'intervallo da visualizzare, la fine dell'intervallo da visualizzare e se utilizzare la codifica di console corrente (`false`) o la codifica UTF-16 (`true`). Si presuppone che la console utilizza un tipo di carattere TrueType.  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>Operazioni comuni  
 La <xref:System.Console> classe contiene i metodi seguenti per la lettura di input della console e la scrittura dell'output di console:  
  
-   Gli overload di <xref:System.Console.ReadKey%2A> metodo leggere un singolo carattere.  
  
-   Il <xref:System.Console.ReadLine%2A> metodo consente di leggere un'intera riga di input.  
  
-   Il <xref:System.Console.Write%2A> convertire un'istanza di un tipo di valore, una matrice di caratteri o un set di oggetti in una stringa formattata o overload del metodo e quindi scrivere tale stringa nella console.  
  
-   Un parallelo set di <xref:System.Console.WriteLine%2A> overload del metodo output la stessa stringa come il <xref:System.Console.Write%2A> overload, ma anche di aggiungere una stringa di terminazione di riga.  
  
 La <xref:System.Console> classe contiene inoltre i metodi e proprietà per eseguire le operazioni seguenti:  
  
-   Ottiene o imposta le dimensioni del buffer dello schermo. Il <xref:System.Console.BufferHeight%2A> e <xref:System.Console.BufferWidth%2A> proprietà consentono di ottenere o impostare l'altezza di buffer e la larghezza, rispettivamente e <xref:System.Console.SetBufferSize%2A> metodo consente di impostare le dimensioni del buffer in una singola chiamata al metodo.  
  
-   Ottiene o imposta le dimensioni della finestra della console. Il <xref:System.Console.WindowHeight%2A> e <xref:System.Console.WindowWidth%2A> proprietà consentono di ottenere o impostare l'altezza della finestra e la larghezza, rispettivamente e <xref:System.Console.SetWindowSize%2A> metodo consente di impostare le dimensioni della finestra in una singola chiamata al metodo.  
  
-   Ottiene o imposta la dimensione del cursore. Il <xref:System.Console.CursorSize%2A> proprietà specifica l'altezza del cursore in una cella di carattere.  
  
-   Ottiene o imposta la posizione della finestra della console relativamente al buffer dello schermo. Il <xref:System.Console.WindowTop%2A> e <xref:System.Console.WindowLeft%2A> proprietà consentono di ottenere o impostare la riga superiore e la colonna più a sinistra del buffer dello schermo che viene visualizzato nella finestra della console, e <xref:System.Console.SetWindowPosition%2A> metodo consente di impostare questi valori in una singola chiamata al metodo.  
  
-   Ottiene o imposta la posizione del cursore da ottenere o impostare il <xref:System.Console.CursorTop%2A> e <xref:System.Console.CursorLeft%2A> proprietà oppure impostare la posizione del cursore chiamando il <xref:System.Console.SetCursorPosition%2A> metodo.  
  
-   Spostare o cancellare i dati nel buffer dello schermo chiamando il <xref:System.Console.MoveBufferArea%2A> o <xref:System.Console.Clear%2A> metodo.  
  
-   Ottenere o impostare i colori di primo piano e sfondo usando il <xref:System.Console.ForegroundColor%2A> e <xref:System.Console.BackgroundColor%2A> , proprietà o reimpostare lo sfondo e primo piano per i colori predefiniti chiamando il <xref:System.Console.ResetColor%2A> (metodo).  
  
-   Riproduci il suono di un segnale acustico usando l'altoparlante della console mediante la chiamata di <xref:System.Console.Beep%2A> metodo.  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] Note  
 In .NET Framework sul desktop, il <xref:System.Console> classe viene utilizzata la codifica restituito da `GetConsoleCP` e `GetConsoleOutputCP`, che in genere una tabella codici della codifica. Ad esempio codice, nei sistemi con le impostazioni cultura inglese (Stati Uniti), la tabella codici 437 è il tipo di codifica utilizzato per impostazione predefinita. Tuttavia, [!INCLUDE[net_core](~/includes/net-core-md.md)] può rendere disponibili solo un sottoinsieme limitato di queste codifiche. In questo caso, <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> viene utilizzato come la codifica predefinita per la console.  
  
 Se l'applicazione dipende da codifiche delle tabelle codici codice specifico, è possibile comunque renderli disponibili con le operazioni seguenti *prima* di chiamare qualsiasi <xref:System.Console> metodi:  
  
1.  Aggiungere un riferimento all'assembly System.Text.Encoding.CodePages.dll al progetto.  
  
2.  Recuperare il <xref:System.Text.EncodingProvider> dall'oggetto di <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> proprietà.  
  
3.  Passare il <xref:System.Text.EncodingProvider> dell'oggetto per il <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> per rendere le codifiche aggiuntive supportate dal provider di codifica disponibili.  
  
 Il <xref:System.Console> classe quindi automaticamente utilizzerà la codifica predefinita di sistema anziché UTF8, condizione che è stato registrato il provider di codifica prima di chiamare qualsiasi <xref:System.Console> metodi di output.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come leggere dati da e scrittura dei dati di input standard e i flussi di output. Si noti che i flussi possono essere reindirizzati utilizzando il <xref:System.Console.SetIn%2A> e <xref:System.Console.SetOut%2A> metodi.  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Questo tipo è thread-safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore di sfondo della console.</summary>
        <value>Valore che specifica il colore di sfondo della console; vale a dire il colore che viene visualizzato dietro ogni carattere. Il colore predefinito è nero.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una modifica di <xref:System.Console.BackgroundColor%2A> proprietà influisce solo output scritto in celle di singoli caratteri dopo avere modificato il colore di sfondo. Per modificare il colore di sfondo della finestra della console nel suo complesso, impostare il <xref:System.Console.BackgroundColor%2A> proprietà e chiamare il <xref:System.Console.Clear%2A> metodo. Nell'esempio seguente viene illustrato questo concetto.  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 Un'operazione get per un'applicazione basata su Windows, in cui una console non esiste, restituisce <xref:System.ConsoleColor.Black?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio seguente consente di salvare i valori del <xref:System.ConsoleColor> enumerazione in una matrice e archivia i valori correnti del <xref:System.Console.BackgroundColor%2A> e <xref:System.Console.ForegroundColor%2A> proprietà alle variabili. Modifica quindi il colore primo piano per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde allo sfondo corrente e modifica il colore di sfondo per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde il in primo piano corrente. (Se il colore primo piano corrisponde al colore di sfondo, il testo non è visibile.) Infine, chiama il <xref:System.Console.ResetColor%2A> per ripristinare i colori della console originale.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il colore specificato in un'operazione set non è un membro valido di <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Riproduce il suono di un segnale acustico usando l'altoparlante della console.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Riproduce il suono di un segnale acustico usando l'altoparlante della console.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il segnale acustico viene riprodotto una frequenza di 800 hertz per una durata pari a 200 millisecondi.  
  
> [!NOTE]
>  Il <xref:System.Console.Beep%2A> metodo non è supportato nelle edizioni a 64 bit di Windows Vista e Windows XP.  
  
 <xref:System.Console.Beep%2A> esegue il wrapping di una chiamata a Windows [funzione Beep](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Se <xref:System.Console.Beep%2A> produce un suono in versioni di Windows prima di Windows 7 dipende dalla presenza di un chip del timer intervallo programmabile 8254. A partire da Windows 7, dipende dal dispositivo audio predefinito.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.Beep%2A> metodo. Nell'esempio accetta un numero compreso tra 1 e 9 come un argomento della riga di comando e riproduce il segnale acustico tale numero di volte.  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">Questo metodo è stato eseguito in un server, ad esempio SQL Server, che non consente l'accesso all'interfaccia utente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">Frequenza del segnale acustico, compresa fra 37 e 32767 hertz.</param>
        <param name="duration">Durata del segnale acustico, misurata in millisecondi.</param>
        <summary>Riproduce il suono di un segnale acustico a una frequenza e durata specificate usando l'altoparlante della console.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> esegue il wrapping di una chiamata a Windows [funzione Beep](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx). Se <xref:System.Console.Beep%2A> produce un suono in versioni di Windows prima di Windows 7 dipende dalla presenza di un chip del timer intervallo programmabile 8254. A partire da Windows 7, dipende dal dispositivo audio predefinito.  
  
> [!NOTE]
>  Il <xref:System.Console.Beep%2A> metodo non è supportato nelle edizioni a 64 bit di Windows Vista e Windows XP.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.Beep%2A> metodo riproducendo le prime note di un brano usando l'altoparlante della console.  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> è minore di 37 o maggiore di 32767 hertz.  
  
 oppure  
  
 <paramref name="duration" /> è minore o uguale a zero.</exception>
        <exception cref="T:System.Security.HostProtectionException">Questo metodo è stato eseguito in un server, ad esempio SQL Server, che non consente l'accesso alla console.</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'altezza dell'area del buffer.</summary>
        <value>Altezza corrente, in righe, dell'area del buffer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà definisce il numero di righe (o righe) memorizzati nel buffer di cui si accede tramite una finestra della console. Al contrario, il <xref:System.Console.WindowHeight%2A> proprietà definisce il numero di righe effettivamente visualizzate nella finestra della console in un determinato momento. Se il numero di righe effettivamente scritti nel buffer supera il numero di righe definito dal <xref:System.Console.WindowHeight%2A> proprietà, è possibile scorrere verticalmente la finestra in modo che venga visualizzato un numero di righe che sono uguali a contiguo di <xref:System.Console.WindowHeight%2A> proprietà e sono disponibili in un punto qualsiasi nel buffer.  
  
 Se un'operazione set diminuisce il valore del <xref:System.Console.BufferHeight%2A> proprietà, le righe più in alto vengono rimosse. Ad esempio, se il numero di righe viene ridotto da 300 a 250, tra 0 e 49 righe vengono rimosse ed esistenti righe 50 e 299 diventano le righe 249 a 0.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.BufferHeight%2A> e <xref:System.Console.BufferWidth%2A> proprietà. Nell'esempio vengono restituite le dimensioni di una finestra del sistema operativo impostato su una dimensione del buffer di 300 righe e 85 colonne.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore in un'operazione set è minore o uguale a zero.  
  
 oppure  
  
 Il valore in un'operazione set è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 Il valore in un'operazione set è minore di <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la larghezza dell'area del buffer.</summary>
        <value>Larghezza corrente, in colonne, dell'area del buffer.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'operazione set diminuisce il valore del <xref:System.Console.BufferWidth%2A> proprietà, vengono rimosse le colonne all'estrema destra. Ad esempio, se il numero di colonne viene ridotto da 80 a 60, vengono rimosse colonne tra 60 e 79 di ogni riga.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.BufferHeight%2A> e <xref:System.Console.BufferWidth%2A> proprietà. Nell'esempio vengono restituite le dimensioni di una finestra del sistema operativo impostato su una dimensione del buffer di 300 righe e 85 colonne.  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore in un'operazione set è minore o uguale a zero.  
  
 oppure  
  
 Il valore in un'operazione set è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 Il valore in un'operazione set è minore di <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il tasto di modifica <see cref="F:System.ConsoleModifiers.Control" /> (CTRL) e il tasto della console <see cref="F:System.ConsoleKey.C" /> (C) o il tasto INTERR vengono premuti contemporaneamente (CTRL+C o CTRL+INTERR).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene utilizzato in combinazione con <xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType> e <xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>. Il <xref:System.Console.CancelKeyPress> evento consente di rilevare il segnale Ctrl + C, il gestore dell'evento consente di decidere se continuare l'esecuzione o terminare un'applicazione console. Per ulteriori informazioni sulla gestione degli eventi, vedere [gestione e generazione di eventi](~/docs/standard/events/index.md).  
  
 Quando l'utente preme Ctrl + C o Ctrl + INTERR il <xref:System.Console.CancelKeyPress> evento viene generato e l'applicazione <xref:System.ConsoleCancelEventHandler> esecuzione del gestore eventi. Il gestore dell'evento viene passato un <xref:System.ConsoleCancelEventArgs> oggetto che ha due proprietà utile:  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>, che consente di determinare se il gestore è stato richiamato in seguito l'utente premendo Ctrl + C (il valore della proprietà <xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) o Ctrl + INTERR (il valore della proprietà <xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>).  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>, che consente di determinare la modalità per l'applicazione deve rispondere all'utente premendo Ctrl + C o Ctrl + INTERR. Per impostazione predefinita, il <xref:System.ConsoleCancelEventArgs.Cancel%2A> proprietà `false`, che causa l'esecuzione quando il gestore eventi del programma. Modifica la proprietà su `true` specifica che l'applicazione deve continuare a eseguire.  
  
> [!TIP]
>  Se l'applicazione ha requisiti semplici, è possibile utilizzare il <xref:System.Console.TreatControlCAsInput%2A> proprietà invece di questo evento. Impostando questa proprietà su `false`, è possibile assicurarsi che l'applicazione sempre viene chiuso se l'utente preme Ctrl + C. Impostandola su `true`, è possibile assicurarsi che se si preme Ctrl + C non terminare l'applicazione.  
  
 Il gestore eventi per questo evento viene eseguito in un pool di thread.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come la <xref:System.Console.CancelKeyPress> l'evento viene utilizzato. Quando si preme Ctrl + C, l'operazione di lettura viene interrotta e `myHandler` viene richiamato il gestore di evento. Al momento dell'accesso al gestore dell'evento, il <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> proprietà `false`, il che significa che il processo corrente verrà interrotto quando termina il gestore dell'evento. Tuttavia, il gestore dell'evento imposta il <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType> proprietà `true`, il che significa che il processo non verrà interrotto e verrà ripreso l'operazione di lettura.  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il tasto di alternanza BLOC MAIUSC è attivato o disattivato.</summary>
        <value>
          <see langword="true" /> se BLOC MAIUSC è attivato; <see langword="false" /> se BLOC MAIUSC è disattivato.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancella dal buffer della console e dalla rispettiva finestra della console le informazioni visualizzate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzando il <xref:System.Console.Clear%2A> equivale a richiamare MS-DOS `cls` comando nella finestra del prompt dei comandi. Quando il <xref:System.Console.Clear%2A> metodo viene chiamato, il cursore scorre automaticamente nell'angolo superiore sinistro della finestra e il contenuto del buffer dello schermo viene impostato su spazi vuoti usando i colori di sfondo in primo piano corrente.  
  
> [!NOTE]
>  Il tentativo di chiamare il <xref:System.Console.Clear%2A> metodo quando viene reindirizzato l'output di un'applicazione console in un file genera una <xref:System.IO.IOException>. Per evitare questo problema, eseguire sempre il wrapping di una chiamata al <xref:System.Console.Clear%2A> metodo in un `try`...`catch` blocco.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Console.Clear%2A> metodo per chiudere la console prima di eseguire un ciclo, viene richiesto all'utente di selezionare un colore di sfondo e primo piano e di immettere una stringa da visualizzare. Se l'utente sceglie di non chiudere il programma, vengono ripristinati i colori di sfondo e primo piano originali della console e <xref:System.Console.Clear%2A> metodo viene chiamato prima di eseguire nuovamente il ciclo.  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 Nell'esempio si basa su un `GetKeyPress` metodo per convalidare la selezione dell'utente di un colore di sfondo e primo piano.  
  
 Questo esempio viene illustrato il <xref:System.Console.CursorLeft%2A> e <xref:System.Console.CursorTop%2A> , proprietà e <xref:System.Console.SetCursorPosition%2A> e <xref:System.Console.Clear%2A> metodi. Nell'esempio di posizionare il cursore, che determina il punto in cui si verificherà l'operazione di scrittura successiva, per disegnare un carattere 5 rettangolo per 5 caratteri utilizzando una combinazione di "+", "&#124;", e "-" stringhe. Si noti che è stato disegnato il rettangolo in pochi passaggi utilizzando una combinazione di altre stringhe.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione della colonna del cursore all'interno dell'area del buffer.</summary>
        <value>Posizione corrente, in colonne, del cursore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.CursorLeft%2A> e <xref:System.Console.CursorTop%2A> , proprietà e <xref:System.Console.SetCursorPosition%2A> e <xref:System.Console.Clear%2A> metodi. Nell'esempio di posizionare il cursore, che determina il punto in cui si verificherà l'operazione di scrittura successiva, per disegnare un carattere 5 rettangolo per 5 caratteri utilizzando una combinazione di "+", "&#124;", e "-" stringhe. Si noti che è stato disegnato il rettangolo in pochi passaggi utilizzando una combinazione di altre stringhe.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore in un'operazione set è minore di zero.  
  
 oppure  
  
 Il valore in un'operazione set è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'altezza del cursore all'interno di una cella di carattere.</summary>
        <value>Dimensione del cursore espressa come percentuale dell'altezza di una cella di carattere. Il valore della proprietà varia da 1 a 100.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'aspetto del cursore varia, compreso tra una riga orizzontale nella parte inferiore della cella quando il valore della proprietà è 1, per riempire completamente la cella quando il valore della proprietà è 100.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.CursorSize%2A> proprietà. L'esempio aumenta la dimensione del cursore ogni volta che un tasto della console viene premuto, quindi Ripristina il cursore alla dimensione originale prima della chiusura.  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore specificato in un'operazione set è minore di 1 o maggiore di 100.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione della riga del cursore all'interno dell'area del buffer.</summary>
        <value>Posizione corrente, in righe, del cursore.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.CursorLeft%2A> e <xref:System.Console.CursorTop%2A> , proprietà e <xref:System.Console.SetCursorPosition%2A> e <xref:System.Console.Clear%2A> metodi. Nell'esempio di posizionare il cursore, che determina il punto in cui si verificherà l'operazione di scrittura successiva, per disegnare un carattere 5 rettangolo per 5 caratteri utilizzando una combinazione di "+", "&#124;", e "-" stringhe. Si noti che è stato disegnato il rettangolo in pochi passaggi utilizzando una combinazione di altre stringhe.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore in un'operazione set è minore di zero.  
  
 oppure  
  
 Il valore in un'operazione set è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se il cursore è visibile.</summary>
        <value>
          <see langword="true" /> se il cursore è visibile; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.CursorVisible%2A> proprietà. L'esempio rende il cursore è visibile se la prima colonna di input è un carattere '+' o invisibile se l'input è un '-' caratteri.  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il flusso di output di errore standard.</summary>
        <value>Oggetto <see cref="T:System.IO.TextWriter" /> che rappresenta il flusso di output di errore standard.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il flusso di errore standard è impostato nella console. È possibile impostare in un altro flusso con il <xref:System.Console.SetError%2A> metodo. Il flusso di errore standard viene reindirizzato, può essere riacquisito chiamando il <xref:System.Console.OpenStandardError%2A> metodo.  
  
 Nelle applicazioni di console il cui output informativo spesso viene reindirizzato a un file, l'errore standard del flusso disponibili tramite il <xref:System.Console.Error%2A> proprietà può essere utilizzata per visualizzare le informazioni nella console, anche se viene reindirizzato l'output. L'esempio seguente mostra le tabelle di prodotti per i 10 numeri in un momento a partire da 1. Dopo ogni set di 10 numeri, il <xref:System.Console.Error%2A> proprietà viene utilizzata per chiedere all'utente se si desidera visualizzare il set successivo. Se l'output standard viene reindirizzato a un file, l'utente è ancora richiesto se la routine deve generare il set successivo di prodotti.  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 L'esempio seguente è un'utilità della riga di comando denominata ExpandTabs che sostituisce i caratteri di tabulazione in un file di testo con quattro spazi, il valore definito per il `tabSize` variabile. Reindirizza l'input standard e i flussi ai file di output, ma utilizza il <xref:System.Console.Error%2A> proprietà per scrivere il flusso di errore standard nella console. Può essere avviata dalla riga di comando specificando il nome del file che contiene caratteri di tabulazione e il nome del file di output.  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 L'esempio seguente è un visualizzatore file di testo semplice che visualizza il contenuto di uno o più file di testo sulla console. Se non sono presenti argomenti della riga di comando o se tutti i file passati come argomenti della riga di comando non esiste, viene chiamato il <xref:System.Console.SetError%2A> metodo per reindirizzare le informazioni di errore in un file, chiama il <xref:System.Console.OpenStandardError%2A> in corso riacquisire l'errore standard (metodo) flusso e indica che le informazioni di errore è stato scritto in un file.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Si noti che il <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> è impostata su `true` prima riacquisire il flusso di errore. In questo modo si garantisce che output verrà inviato alla console immediatamente invece di essere memorizzato nel buffer.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il colore di primo piano della console.</summary>
        <value>Oggetto <see cref="T:System.ConsoleColor" /> che specifica il colore di primo piano della console; vale a dire il colore con cui viene visualizzato ogni carattere. Il colore predefinito è grigio.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un'operazione get per un'applicazione basata su Windows, in cui una console non esiste, restituisce <xref:System.ConsoleColor.Gray>.  
  
   
  
## Examples  
 Nell'esempio seguente controlla se il colore di sfondo della console è nero e, se è, assume il colore di sfondo rosso e il colore di primo piano su nero.  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 Nell'esempio seguente consente di salvare i valori del <xref:System.ConsoleColor> enumerazione in una matrice e archivia i valori correnti del <xref:System.Console.BackgroundColor%2A> e <xref:System.Console.ForegroundColor%2A> proprietà alle variabili. Modifica quindi il colore primo piano per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde allo sfondo corrente e modifica il colore di sfondo per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde il in primo piano corrente. (Se il colore primo piano corrisponde al colore di sfondo, il testo non è visibile.) Infine, chiama il <xref:System.Console.ResetColor%2A> per ripristinare i colori della console originale.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il colore specificato in un'operazione set non è un membro valido di <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il flusso di input standard.</summary>
        <value>Oggetto <see cref="T:System.IO.TextReader" /> che rappresenta il flusso di input standard.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questa proprietà è impostata sul flusso di input standard. Questa proprietà può essere impostata su un altro flusso con il <xref:System.Console.SetIn%2A> metodo.  
  
 Operazioni di lettura nel flusso di input standard vengono eseguite in modo sincrono. Ovvero, bloccata finché non viene completata l'operazione di lettura specificato. Questo vale anche se un metodo asincrono, ad esempio <xref:System.IO.TextReader.ReadLineAsync%2A>, viene chiamato sul <xref:System.IO.TextReader> oggetto restituito dal <xref:System.Console.In%2A> proprietà.  
  
   
  
## Examples  
 L'esempio seguente viene illustrato l'utilizzo del `In` proprietà.  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la codifica usata dalla console per leggere l'input.</summary>
        <value>Codifica usata per leggere l'input della console.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La console utilizza la codifica per convertire l'input da tastiera in un carattere corrispondente di input. La codifica di input incorpora una tabella codici 256 codici di carattere della tastiera viene eseguito il mapping a singoli caratteri. Diverse tabelle codici contengono caratteri speciali differenti, in genere personalizzati per un linguaggio o per un gruppo di linguaggi.  
  
 A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], un'operazione get di proprietà può restituire un valore memorizzato nella cache anziché la console input codifica corrente. Ciò può verificarsi se il valore della <xref:System.Console.InputEncoding%2A> viene modificata in modo diverso da un'assegnazione al <xref:System.Console.InputEncoding%2A> proprietà, ad esempio la chiamata di Windows `SetConsoleCP` funzione o tramite il `chcp` comando da uno script di PowerShell.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore della proprietà in un'operazione set è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante l'esecuzione dell'operazione.</exception>
        <exception cref="T:System.Security.SecurityException">L'applicazione non ha l'autorizzazione per eseguire questa operazione.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">lettura e scrittura per le finestre di primo livello e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il flusso di output errore è stato reindirizzato dal flusso di errore standard.</summary>
        <value>
          <see langword="true" /> se l'output di errore viene reindirizzato; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'input è stato reindirizzato dal flusso di input standard.</summary>
        <value>
          <see langword="true" /> se l'input viene reindirizzato; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'output è stato reindirizzato dal flusso di output standard.</summary>
        <value>
          <see langword="true" /> se l'output viene reindirizzato; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se nel flusso di input è stata rilevata la pressione di un tasto.</summary>
        <value>
          <see langword="true" /> se è stata rilevata la pressione di un tasto; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore della proprietà viene restituito immediatamente. vale a dire il <xref:System.Console.KeyAvailable%2A> proprietà input non si blocca fino a quando non è disponibile un tasto.  
  
 Utilizzare il <xref:System.Console.KeyAvailable%2A> proprietà in combinazione con solo il <xref:System.Console.ReadKey%2A> (metodo), non il <xref:System.Console.Read%2A> o <xref:System.Console.ReadLine%2A> metodi.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come utilizzare il <xref:System.Console.KeyAvailable%2A> proprietà per creare un ciclo che viene eseguito fino a quando non viene premuto un tasto.  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.InvalidOperationException">L'input standard viene reindirizzato a un file invece che alla tastiera.</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero massimo consentito di righe per la finestra della console, in base al tipo di carattere corrente e alla risoluzione dello schermo.</summary>
        <value>Altezza massima consentita per la finestra della console misurata in righe.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il numero massimo consentito di colonne della finestra della console, in base al tipo di carattere corrente e alla risoluzione dello schermo.</summary>
        <value>Larghezza massima consentita della finestra della console misurata in colonne.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia un'area di origine specificata del buffer dello schermo in un'area di destinazione specificata.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">Colonna più a sinistra dell'area di origine.</param>
        <param name="sourceTop">Riga più in alto dell'area di origine.</param>
        <param name="sourceWidth">Numero di colonne dell'area di origine.</param>
        <param name="sourceHeight">Numero di righe dell'area di origine.</param>
        <param name="targetLeft">Colonna più a sinistra dell'area di destinazione.</param>
        <param name="targetTop">Riga più in alto dell'area di destinazione.</param>
        <summary>Copia un'area di origine specificata del buffer dello schermo in un'area di destinazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se i parametri di origine e destinazione specificano una posizione che si trova fuori dei limiti del buffer dello schermo corrente, viene copiata solo la parte dell'area di origine che si adatta all'interno dell'area di destinazione. Ovvero, l'area di origine viene ritagliato per adattarlo buffer dello schermo corrente.  
  
 Il <xref:System.Console.MoveBufferArea%2A> metodo copia l'area di origine nell'area di destinazione. Se l'area di destinazione non si interseca l'area di origine, l'area di origine viene riempita con spazi vuoti utilizzando i colori di sfondo e primo piano correnti. In caso contrario, non viene riempita la parte intersecata dell'area di origine.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uno o più parametri sono minori di zero.  
  
 oppure  
  
 <paramref name="sourceLeft" /> o <paramref name="targetLeft" /> è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.  
  
 oppure  
  
 <paramref name="sourceTop" /> o <paramref name="targetTop" /> è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.  
  
 oppure  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.  
  
 oppure  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">Colonna più a sinistra dell'area di origine.</param>
        <param name="sourceTop">Riga più in alto dell'area di origine.</param>
        <param name="sourceWidth">Numero di colonne dell'area di origine.</param>
        <param name="sourceHeight">Numero di righe dell'area di origine.</param>
        <param name="targetLeft">Colonna più a sinistra dell'area di destinazione.</param>
        <param name="targetTop">Riga più in alto dell'area di destinazione.</param>
        <param name="sourceChar">Carattere usato per riempire l'area di origine.</param>
        <param name="sourceForeColor">Colore primo piano usato per riempire l'area di origine.</param>
        <param name="sourceBackColor">Colore di sfondo usato per riempire l'area di origine.</param>
        <summary>Copia un'area di origine specificata del buffer dello schermo in un'area di destinazione specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se i parametri di origine e destinazione specificano una posizione che si trova oltre i limiti del buffer dello schermo corrente, viene copiata solo la parte dell'area di origine che si adatta all'interno dell'area di destinazione. Ovvero, l'area di origine viene ritagliato per adattarlo buffer dello schermo corrente.  
  
 Il <xref:System.Console.MoveBufferArea%2A> metodo copia l'area di origine nell'area di destinazione. Se l'area di destinazione non si interseca l'area di origine, l'area di origine viene riempita con il carattere specificato da `sourceChar`, utilizzando i colori specificati da `sourceForeColor` e `sourceBackColor`. In caso contrario, non viene riempita la parte intersecata dell'area di origine.  
  
 Il <xref:System.Console.MoveBufferArea%2A> viene eseguita alcuna operazione se `sourceWidth` o `sourceHeight` è zero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Uno o più parametri sono minori di zero.  
  
 oppure  
  
 <paramref name="sourceLeft" /> o <paramref name="targetLeft" /> è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.  
  
 oppure  
  
 <paramref name="sourceTop" /> o <paramref name="targetTop" /> è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.  
  
 oppure  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.  
  
 oppure  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.ArgumentException">Uno o entrambi i parametri del colore non sono membri dell'enumerazione <see cref="T:System.ConsoleColor" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il tasto di alternanza BLOC NUM è attivato o disattivato.</summary>
        <value>
          <see langword="true" /> se BLOC NUM è attivato; <see langword="false" /> se BLOC NUM è disattivato.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquisisce il flusso di errore standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquisisce il flusso di errore standard.</summary>
        <returns>Flusso di errore standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di errore standard dopo che è stato modificato dal <xref:System.Console.SetError%2A> metodo.  
  
   
  
## Examples  
 L'esempio seguente è un visualizzatore file di testo semplice che visualizza il contenuto di uno o più file di testo sulla console. Se non sono presenti argomenti della riga di comando o se tutti i file passati come argomenti della riga di comando non esiste, viene chiamato il <xref:System.Console.SetError%2A> metodo per reindirizzare le informazioni di errore in un file, chiama il <xref:System.Console.OpenStandardError%2A> in corso riacquisire l'errore standard (metodo) flusso e indica che le informazioni di errore è stato scritto in un file.  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 Si noti che il <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> è impostata su `true` prima riacquisire il flusso di errore. In questo modo si garantisce che output verrà inviato alla console immediatamente invece di essere memorizzato nel buffer.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Dimensioni del buffer del flusso interno.</param>
        <summary>Acquisisce il flusso di errore standard, impostato su una determinata dimensione del buffer.</summary>
        <returns>Flusso di errore standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di errore standard dopo che è stato modificato dal <xref:System.Console.SetError%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> è minore o uguale a zero.</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquisisce il flusso di input standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquisisce il flusso di input standard.</summary>
        <returns>Flusso di input standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di input standard dopo che è stato modificato dal <xref:System.Console.SetIn%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del `OpenStandardInput` proprietà.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Dimensioni del buffer del flusso interno.</param>
        <summary>Acquisisce il flusso di input standard, impostato su una determinata dimensione del buffer.</summary>
        <returns>Flusso di input standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di output standard dopo che è stato modificato dal <xref:System.Console.SetIn%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del `OpenStandardInput` proprietà.  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> è minore o uguale a zero.</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Acquisisce il flusso di output standard.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Acquisisce il flusso di output standard.</summary>
        <returns>Flusso di output standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di output standard dopo che è stato modificato dal <xref:System.Console.SetOut%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Console.OpenStandardOutput%2A>. Sostituisce quattro spazi consecutivi in una stringa con un carattere di tabulazione. A questo scopo, è necessario fornire due argomenti della riga di comando. Il primo è il nome di un file di testo esistente a cui reindirizzare il flusso di input standard. Il secondo è il nome di un file a cui reindirizzare il flusso di output standard. Questo file non deve esistere. Se il file esiste verrà sovrascritto.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">Dimensioni del buffer del flusso interno.</param>
        <summary>Acquisisce il flusso di output standard, impostato su una determinata dimensione del buffer.</summary>
        <returns>Flusso di output standard.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato per riacquisire il flusso di output standard dopo che è stato modificato dal <xref:System.Console.SetOut%2A> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Console.OpenStandardOutput%2A>. Sostituisce quattro spazi consecutivi in una stringa con un carattere di tabulazione. A questo scopo, è necessario fornire due argomenti della riga di comando. Il primo è il nome di un file di testo esistente a cui reindirizzare il flusso di input standard. Il secondo è il nome di un file a cui reindirizzare il flusso di output standard. Questo file non deve esistere. Se il file esiste verrà sovrascritto.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> è minore o uguale a zero.</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene il flusso di output standard.</summary>
        <value>Oggetto <see cref="T:System.IO.TextWriter" /> che rappresenta il flusso di output standard.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, questa proprietà è impostata per il flusso di output standard. Questa proprietà può essere impostata su un altro flusso con il <xref:System.Console.SetOut%2A> metodo.  
  
 Si noti che le chiamate a `Console.Out.WriteLine` metodi sono equivalenti alle chiamate corrispondenti <xref:System.Console.WriteLine%2A> metodi.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Console.Out%2A> proprietà per visualizzare una matrice contenente i nomi dei file nella directory corrente dell'applicazione nel dispositivo di output standard. Imposta l'output standard in un file denominato Files. txt e quindi vengono elencati gli elementi della matrice per il file. Infine, imposta l'output nel flusso di output standard e nel dispositivo di output standard non visualizzerà gli elementi della matrice.  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la codifica usata dalla console per scrivere l'output.</summary>
        <value>Codifica usata per scrivere l'output dalla console.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La console utilizza la codifica di output per la conversione di caratteri scritti da un'applicazione nei corrispondenti caratteri di visualizzazione. La tabella codici predefinita che utilizza la console è determinata dalle impostazioni internazionali di sistema.  
  
 A partire dal [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], un'operazione get di proprietà può restituire un valore memorizzato nella cache anziché la codifica dell'output della console corrente. Ciò può verificarsi se il valore della <xref:System.Console.OutputEncoding%2A> viene modificata in modo diverso da un'assegnazione al <xref:System.Console.OutputEncoding%2A> proprietà, ad esempio la chiamata di Windows `SetConsoleOutputCP` (funzione).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore della proprietà in un'operazione set è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante l'esecuzione dell'operazione.</exception>
        <exception cref="T:System.Security.SecurityException">L'applicazione non ha l'autorizzazione per eseguire questa operazione.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">lettura e scrittura per le finestre di primo livello e secondarie.  Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Delle codifiche Unicode, il <see cref="T:System.Console" /> con la codifica UTF-8 supporta la classe di <see cref="T:System.Text.UTF8Encoding" /> classe e, a partire dal [!INCLUDE[net_v45](~/includes/net-v45-md.md)], supporta con la codifica UTF-16 il <see cref="T:System.Text.UnicodeEncoding" /> classe. Con la codifica UTF-32 la <see cref="T:System.Text.UTF32Encoding" /> classe non è supportata. Il tentativo di impostare la codifica di output su UTF-32 genera un <see cref="T:System.IO.IOException" />.  
  
 Si noti che correttamente la visualizzazione di caratteri Unicode nella console richiede il seguente:  
  
-   La console è necessario utilizzare un tipo di carattere TrueType, ad esempio Lucida Console o Consolas, per visualizzare i caratteri.  
  
-   Un tipo di carattere utilizzato dalla console di deve definire il glifo particolare o i glifi da visualizzare. La console si avvale del collegamento per visualizzare i glifi di tipi di carattere collegati se il tipo di carattere di base non contiene una definizione per tale icona.  
  
 Per ulteriori informazioni sul supporto per Unicode codifica mediante la console, vedere la sezione "Unicode il supporto per la Console di" nel <see cref="T:System.Console" /> classe.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge il carattere successivo dal flusso di input standard.</summary>
        <returns>Carattere successivo dal flusso di input oppure -1 se non ci sono altri caratteri da leggere.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Console.Read%2A> metodo non restituisce alcun valore durante la digitazione di caratteri di input; termina quando si preme il <xref:System.ConsoleKey.Enter> chiave. Premendo INVIO aggiunge una sequenza di terminazione della riga dipendente dalla piattaforma per l'input dell'utente (ad esempio, verrà aggiunto automaticamente una sequenza di ritorno a capo-avanzamento di riga restituito). Le chiamate successive al <xref:System.Console.Read%2A> metodo recuperare l'input di un carattere alla volta. Dopo aver recuperato il carattere finale, <xref:System.Console.Read%2A> non restituisce alcun valore nuovamente e il ciclo si ripete.  
  
> [!IMPORTANT]
>  Il <xref:System.Console.ReadLine%2A> metodo, o <xref:System.Console.KeyAvailable%2A> proprietà e <xref:System.Console.ReadKey%2A> metodo sono preferibili per l'utilizzo di <xref:System.Console.Read%2A> (metodo).  
  
 Si noti che il metodo non restituisce -1 a meno che non si esegue una delle azioni seguenti:  
  
-   Premere contemporaneamente il <xref:System.ConsoleModifiers.Control> tasto di modifica e <xref:System.ConsoleKey.Z> tasto della console (Ctrl + Z), che segnala la condizione di fine del file.  
  
-   Premere un tasto equivalente che segnala la condizione di fine del file, ad esempio il tasto funzione F6 in Windows.  
  
-   Reindirizzare il flusso di input a un'origine, ad esempio un file di testo che contiene un carattere di fine del file effettivo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.Read%2A> metodo.  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene il carattere successivo o il tasto funzione premuto dall'utente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ottiene il carattere successivo o il tasto funzione premuto dall'utente. Il tasto premuto viene visualizzato nella finestra della console.</summary>
        <returns>Oggetto che descrive la costante <see cref="T:System.ConsoleKey" /> e il carattere Unicode, se presente, che corrispondono al tasto premuto sulla console. L'oggetto <see cref="T:System.ConsoleKeyInfo" /> descrive inoltre, in una combinazione bit per bit di valori <see cref="T:System.ConsoleModifiers" />, se sono stati premuti contemporaneamente al tasto della console uno o più tasti di modifica MAIUSC, ALT o CTRL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Console.ReadKey%2A> metodo attende, vale a dire blocchi sul thread di esecuzione di <xref:System.Console.ReadKey%2A> (metodo), fino a quando non viene premuto un tasto carattere o una funzione. Possibile premere un tasto carattere o una funzione in combinazione con uno o più tasti di modifica MAIUSC, Alt o Ctrl. Tuttavia, premere un tasto di modifica da sola non comporterà la <xref:System.Console.ReadKey%2A> restituzione del metodo.  
  
 A seconda dell'applicazione, si potrebbe voler utilizzare la <xref:System.Console.ReadKey%2A> metodo in combinazione con la <xref:System.Console.KeyAvailable%2A> proprietà.  
  
 Il <xref:System.Console.ReadKey%2A> metodo legge da tastiera, anche se l'input standard viene reindirizzato a un file con il <xref:System.Console.SetIn%2A> metodo.  
  
   
  
## Examples  
 Uno dei più comuni Usa del <xref:System.Console.ReadKey> metodo consiste nell'interrompere l'esecuzione del programma fino a quando l'utente preme un tasto mentre l'app termina o Visualizza una finestra aggiuntiva di informazioni. L'esempio seguente usa il <xref:System.Console.ReadKey> metodo per attendere che l'utente prema INVIO prima di interrompere l'applicazione.  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 Si noti che questo overload del metodo di <xref:System.Console.ReadKey%2A> metodo per impostazione predefinita restituisce le chiavi visualizzabile che l'utente preme nella console. Per eliminarli, chiamare il <xref:System.Console.ReadKey%2A> metodo con un `intercept` argomento di `true`.  
  
 L'esempio seguente usa il <xref:System.Console.ReadKey> metodo per visualizzare le informazioni sulla chiave di cui l'utente ha premuto...  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Console.In" /> viene reindirizzata da un flusso diverso da quello della console.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">Determina se visualizzare il tasto premuto nella finestra della console. <see langword="true" /> per non visualizzare il tasto premuto; in caso contrario, <see langword="false" />.</param>
        <summary>Ottiene il carattere successivo o il tasto funzione premuto dall'utente. Il tasto premuto viene visualizzato facoltativamente nella finestra della console.</summary>
        <returns>Oggetto che descrive la costante <see cref="T:System.ConsoleKey" /> e il carattere Unicode, se presente, che corrispondono al tasto premuto sulla console. L'oggetto <see cref="T:System.ConsoleKeyInfo" /> descrive inoltre, in una combinazione bit per bit di valori <see cref="T:System.ConsoleModifiers" />, se sono stati premuti contemporaneamente al tasto della console uno o più tasti di modifica MAIUSC, ALT o CTRL.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Console.ReadKey%2A> metodo attende, vale a dire blocchi sul thread di esecuzione di <xref:System.Console.ReadKey%2A> (metodo), fino a quando non viene premuto un tasto carattere o una funzione. Possibile premere un tasto carattere o una funzione in combinazione con uno o più tasti di modifica MAIUSC, Alt o Ctrl. Tuttavia, premere un tasto di modifica da sola non comporterà la <xref:System.Console.ReadKey%2A> restituzione del metodo.  
  
 Se il `intercept` parametro `true`, il tasto premuto viene intercettato e non visualizzate nella finestra della console; in caso contrario, il tasto premuto viene visualizzato.  
  
 A seconda dell'applicazione, si potrebbe voler utilizzare la <xref:System.Console.ReadKey%2A> metodo in combinazione con la <xref:System.Console.KeyAvailable%2A> proprietà.  
  
 Il <xref:System.Console.ReadKey%2A> metodo legge da tastiera, anche se l'input standard viene reindirizzato a un file con il <xref:System.Console.SetIn%2A> metodo.  
  
   
  
## Examples  
 Uno dei più comuni Usa del <xref:System.Console.ReadKey%2A> metodo consiste nell'interrompere l'esecuzione del programma fino a quando l'utente preme un tasto mentre l'app termina o Visualizza una finestra aggiuntiva di informazioni. L'esempio seguente usa il <xref:System.Console.ReadKey%28System.Boolean%29> metodo per attendere che l'utente prema INVIO prima di interrompere l'applicazione. Si noti che, se l'utente preme un tasto qualsiasi, non è restituita alla console.  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 L'esempio seguente usa il <xref:System.Console.ReadKey%28System.Boolean%29> metodo per visualizzare informazioni sul tasto premuto dall'utente senza la restituzione di tale chiave per la console.  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La proprietà <see cref="P:System.Console.In" /> viene reindirizzata da un flusso diverso da quello della console.</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Legge la riga successiva di caratteri dal flusso di input standard.</summary>
        <returns>Riga successiva di caratteri dal flusso di input oppure <see langword="null" /> se non ci sono altre righe disponibili.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Console.ReadLine%2A> metodo legge una riga dal flusso di input standard. (Per la definizione di una riga, vedere il paragrafo dopo l'elenco seguente). Vale a dire che:  
  
-   Se il dispositivo di input standard è la tastiera, il <xref:System.Console.ReadLine%2A> metodo si blocca fino a quando l'utente preme il **invio** chiave.  
  
     Uno dei più comuni Usa del <xref:System.Console.ReadLine%2A> metodo è di sospendere l'esecuzione del programma prima di cancellare la console e visualizzazione nuove informazioni o per richiedere all'utente di premere il tasto INVIO prima di interrompere l'applicazione. Questa condizione è illustrata nell'esempio seguente.  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   Se l'input standard viene reindirizzato a un file, il <xref:System.Console.ReadLine%2A> metodo legge una riga di testo da un file. Di seguito è ad esempio, un file di testo denominato ReadLine1.txt:  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     L'esempio seguente usa il <xref:System.Console.ReadLine%2A> metodo per leggere l'input che viene reindirizzata da un file. Consente di terminare l'operazione di lettura quando il metodo restituisce `null`, che indica che nessuna riga rimarrà impostata per essere letti.  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     Dopo aver compilato l'esempio in un eseguibile ReadLine1.exe denominata, è possibile eseguirlo dalla riga di comando con la sintassi  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     per leggere il contenuto del file e visualizzarli nella console.  
  
 Una riga è definita come una sequenza di caratteri seguiti da un ritorno a capo (0x000d esadecimale), un avanzamento riga (esadecimale 0x000a) o il valore di <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> proprietà. La stringa restituita non contiene il carattere di terminazione. Per impostazione predefinita, il metodo legge l'input da un buffer di input di 256 caratteri. Poiché questo include la <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> caratteri validi, il metodo può leggere le righe contenenti un massimo di 254 caratteri. Per leggere più righe, chiamare il <xref:System.Console.OpenStandardInput%28System.Int32%29> metodo.  
  
 Il <xref:System.Console.ReadLine%2A> il metodo viene eseguito in modo sincrono. Ovvero, si blocca fino a quando non viene letta una riga o la combinazione di tasti Ctrl + Z viene premuta. Il <xref:System.Console.In%2A> proprietà restituisce un <xref:System.IO.TextReader> oggetto che rappresenta il flusso di input standard e che disponga sia sincrona <xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType> metodo e asincrono <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> metodo. Tuttavia, quando viene utilizzato come flusso di input della console standard, il <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType> esegue in modo sincrono anziché in modo asincrono e restituisce un `Task<String>` solo dopo che è stata completata l'operazione di lettura.  
  
 Se questo metodo genera un <xref:System.OutOfMemoryException> eccezione, la posizione del lettore nell'oggetto sottostante <xref:System.IO.Stream> avanzare l'oggetto per il numero di caratteri, il metodo è stato in grado di leggere, ma i caratteri già letti interno <xref:System.Console.ReadLine%2A> sono buffer rimossi. Poiché la posizione del lettore nel flusso non può essere modificata, i caratteri letti già sono irreversibili e accessibile solo reinizializzando il <xref:System.IO.TextReader>. Se la posizione iniziale all'interno del flusso è sconosciuta o il flusso non supporta la ricerca, sottostante <xref:System.IO.Stream> deve inoltre essere reinizializzata. Per evitare questa situazione e produrre codice efficiente, è necessario utilizzare il <xref:System.Console.KeyAvailable%2A> proprietà e <xref:System.Console.ReadKey%2A> (metodo) e store i caratteri di lettura in un buffer allocato precedentemente.  
  
 Se il carattere di Ctrl + Z viene premuto quando il metodo è di lettura di input dalla console, il metodo restituisce `null`. Questo consente all'utente di evitare tasti ulteriore input quando il <xref:System.Console.ReadLine%2A> metodo viene chiamato in un ciclo. Nell'esempio seguente viene illustrato questo scenario.  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 L'esempio seguente richiede due argomenti della riga di comando: il nome di un file di testo esistente e il nome di un file in cui scrivere l'output. Apre il file di testo esistente e reindirizza l'input da tastiera standard a tale file. Inoltre reindirizza l'output standard dalla console al file di output. Viene quindi utilizzato il <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> sostituisce ogni sequenza di quattro spazi con un carattere di tabulazione, per ogni riga del file, leggere e utilizza il <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> metodo per scrivere il risultato per il file di output.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.OutOfMemoryException">La memoria disponibile non è sufficiente per l’allocazione di un buffer per la stringa restituita.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di caratteri nella riga successiva è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Imposta i colori di primo piano e di sfondo della console sulle impostazioni predefinite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I colori di sfondo e primo piano vengono ripristinati i colori presenti all'inizio del processo corrente. Per ulteriori informazioni, vedere il <xref:System.Console.ForegroundColor%2A> e <xref:System.Console.BackgroundColor%2A> proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente consente di salvare i valori del <xref:System.ConsoleColor> enumerazione in una matrice e archivia i valori correnti del <xref:System.Console.BackgroundColor%2A> e <xref:System.Console.ForegroundColor%2A> proprietà alle variabili. Modifica quindi il colore primo piano per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde allo sfondo corrente e modifica il colore di sfondo per ogni colore il <xref:System.ConsoleColor> enumerazione tranne per il colore che corrisponde il in primo piano corrente. (Se il colore primo piano corrisponde al colore di sfondo, il testo non è visibile.) Infine, chiama il <xref:System.Console.ResetColor%2A> per ripristinare i colori della console originale.  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Larghezza dell'area del buffer misurata in colonne.</param>
        <param name="height">Altezza dell'area del buffer misurata in righe.</param>
        <summary>Imposta l'altezza e la larghezza dell'area del buffer dello schermo sui valori specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, e <xref:System.Console.CursorVisible%2A> proprietà; e <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, e <xref:System.Console.ReadKey%2A> metodi. Nell'esempio viene disegnata una griglia nel buffer dello schermo in base alla larghezza del buffer dello schermo. Viene quindi spostata una finestra della console in risposta a cui della freccia su, freccia giù, freccia sinistra o freccia destra chiavi console viene premuto. Il pattern grid consente di vedere lo spostamento della finestra della console relativamente al buffer dello schermo.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> o <paramref name="width" /> è minore o uguale a zero.  
  
 oppure  
  
 <paramref name="height" /> o <paramref name="width" /> è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 <paramref name="width" /> è minore di <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />.  
  
 oppure  
  
 <paramref name="height" /> è minore di <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">Posizione della colonna del cursore. Le colonne sono numerate da sinistra a destra a partire da 0.</param>
        <param name="top">Posizione della riga del cursore. Le righe sono numerate dall'alto verso il basso iniziando da 0.</param>
        <summary>Imposta la posizione del cursore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Console.SetCursorPosition%2A> metodo per specificare dove iniziare la successiva operazione di scrittura nella finestra della console. Se la posizione del cursore specificato è all'esterno dell'area che è attualmente visibile nella finestra della console, la finestra di origine viene modificata automaticamente per rendere visibile il cursore.  
  
 Il cursore viene spostato automaticamente alla posizione del carattere successiva ogni volta che un carattere è scritto alla finestra della console. Se il cursore si trova in corrispondenza della posizione di carattere corretto nella parte inferiore della finestra della console, la successiva operazione di scrittura farà finestra della console per scorrere in modo che rimanga visibile il cursore. Se si desidera scrivere un carattere alla posizione nella parte inferiore destra carattere senza finestra della console per lo scorrimento, utilizzare il <xref:System.Console.MoveBufferArea%2A> metodo per spostare un carattere in tale posizione.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.CursorLeft%2A> e <xref:System.Console.CursorTop%2A> , proprietà e <xref:System.Console.SetCursorPosition%2A> e <xref:System.Console.Clear%2A> metodi. Nell'esempio di posizionare il cursore, che determina il punto in cui si verificherà l'operazione di scrittura successiva, per disegnare un carattere 5 rettangolo per 5 caratteri utilizzando una combinazione di "+", "&#124;", e "-" stringhe. Si noti che è stato disegnato il rettangolo in pochi passaggi utilizzando una combinazione di altre stringhe.  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> o <paramref name="top" /> è minore di zero.  
  
 oppure  
  
 <paramref name="left" /> è maggiore o uguale a <see cref="P:System.Console.BufferWidth" />.  
  
 oppure  
  
 <paramref name="top" /> è maggiore o uguale a <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">Flusso che è il nuovo output di errore standard.</param>
        <summary>Imposta la proprietà <see cref="P:System.Console.Error" /> sull'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Console.Error%2A> proprietà è impostata per il flusso di output di errore standard.  
  
 Oggetto <xref:System.IO.StreamWriter> che incapsula un <xref:System.IO.FileStream> può essere utilizzato per inviare messaggi di errore a un file.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come reindirizzare il flusso di errore standard a un file.  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per chiamare codice non gestito. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">Flusso che è il nuovo input standard.</param>
        <summary>Imposta la proprietà <see cref="P:System.Console.In" /> sull'oggetto <see cref="T:System.IO.TextReader" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Console.In%2A> proprietà è impostata sul flusso di input standard.  
  
 Oggetto <xref:System.IO.StreamReader> che incapsula un <xref:System.IO.FileStream> può essere utilizzato per ricevere input da un file.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Console.SetIn%2A>. Sostituisce quattro spazi consecutivi in una stringa con un carattere di tabulazione. A questo scopo, è necessario fornire due argomenti della riga di comando. Il primo è il nome di un file di testo esistente a cui reindirizzare il flusso di input standard. Il secondo è il nome di un file a cui reindirizzare il flusso di output standard. Questo file non deve esistere. Se il file esiste verrà sovrascritto.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per chiamare codice non gestito. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">Flusso che è il nuovo output standard.</param>
        <summary>Imposta la proprietà <see cref="P:System.Console.Out" /> sull'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Console.Out%2A> è impostata su flusso di output standard.  
  
 Oggetto <xref:System.IO.StreamWriter> che incapsula un <xref:System.IO.FileStream> può essere usato per inviare l'output in un file. Ad esempio:  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Console.SetOut%2A>. Sostituisce quattro spazi consecutivi in una stringa con un carattere di tabulazione. A questo scopo, è necessario fornire due argomenti della riga di comando. Il primo è il nome di un file di testo esistente a cui reindirizzare il flusso di input standard. Il secondo è il nome di un file a cui reindirizzare il flusso di output standard. Questo file non deve esistere. Se il file esiste verrà sovrascritto.  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">per chiamare codice non gestito. Enumerazione associata: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">Posizione della colonna nell'angolo superiore sinistro della finestra della console.</param>
        <param name="top">Posizione della riga nell'angolo superiore sinistro della finestra della console.</param>
        <summary>Imposta la posizione della finestra della console rispetto al buffer dello schermo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nella finestra di sistema operativo viene visualizzato nella finestra della console e nella finestra della console viene visualizzata una parte del buffer dello schermo. Il <xref:System.Console.SetWindowPosition%2A> metodo influisce sulla posizione della finestra della console relativamente al buffer dello schermo, ma non modifica la posizione della finestra del sistema operativo rispetto al desktop.  
  
 La console e del sistema operativo windows in genere non interferiscano tra loro. Tuttavia, se il buffer dello schermo non può essere visualizzato entro i limiti correnti della finestra della console, il sistema operativo aggiunge automaticamente le barre di scorrimento alla finestra del sistema operativo. In tal caso, lo spostamento le barre di scorrimento della finestra del sistema operativo influisce sulla posizione della finestra della console e spostando la finestra della console con il <xref:System.Console.SetWindowPosition%2A> metodo influisce sulla posizione delle barre di scorrimento finestra sistema operativo.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, e <xref:System.Console.CursorVisible%2A> proprietà; e <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, e <xref:System.Console.ReadKey%2A> metodi. Nell'esempio viene disegnata una griglia nel buffer dello schermo in base alla larghezza del buffer dello schermo. Viene quindi spostata una finestra della console in risposta a cui della freccia su, freccia giù, freccia sinistra o freccia destra chiavi console viene premuto. Il pattern grid consente di vedere lo spostamento della finestra della console relativamente al buffer dello schermo.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> o <paramref name="top" /> è minore di zero.  
  
 oppure  
  
 <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> è maggiore di <see cref="P:System.Console.BufferWidth" />.  
  
 oppure  
  
 <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> è maggiore di <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Larghezza della finestra della console misurata in colonne.</param>
        <param name="height">Altezza della finestra della console misurata in righe.</param>
        <summary>Imposta l'altezza e la larghezza della finestra della console sui valori specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.SetWindowSize%2A> (metodo) e <xref:System.Console.WindowWidth%2A> e <xref:System.Console.WindowHeight%2A> proprietà. È necessario eseguire l'esempio per visualizzare l'effetto della modifica le dimensioni della finestra console completo.  
  
 Nell'esempio indica le dimensioni di una finestra della console impostate su 85 colonne e 43 righe, quindi attende un tasto premuto. Quando viene premuto un tasto qualsiasi, le dimensioni della finestra della console sono dimezzate, le nuove dimensioni vengono segnalate e l'esempio è in attesa di un altro tasto. Infine, quando viene premuto un tasto qualsiasi, la finestra della console viene ripristinata alle dimensioni originali e termina l'esempio.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> o <paramref name="height" /> è minore o uguale a zero.  
  
 oppure  
  
 La somma di <paramref name="width" /> e <see cref="P:System.Console.WindowLeft" /> o di <paramref name="height" /> e <see cref="P:System.Console.WindowTop" /> è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 <paramref name="width" /> o <paramref name="height" /> è maggiore rispettivamente della larghezza o dell'altezza massima consentita per la risoluzione corrente dello schermo e per il tipo di carattere della console.</exception>
        <exception cref="T:System.Security.SecurityException">L'utente non ha l'autorizzazione per eseguire questa azione.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il titolo da visualizzare nella barra del titolo della console.</summary>
        <value>Stringa da visualizzare nella barra del titolo della console. La lunghezza massima della stringa del titolo è di 24500 caratteri.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.Title%2A> proprietà. Nell'esempio viene visualizzato il titolo della finestra del sistema operativo corrente, in attesa di un tasto, quindi viene visualizzato un nuovo titolo.  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">In un'operazione get il titolo recuperato è più lungo di 24500 caratteri.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In un'operazione set il titolo specificato è più lungo di 24500 caratteri.</exception>
        <exception cref="T:System.ArgumentNullException">In un'operazione set il titolo specificato è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se la combinazione del tasto di modifica <see cref="F:System.ConsoleModifiers.Control" /> e del tasto della console <see cref="F:System.ConsoleKey.C" /> (CTRL+C) deve essere trattata come un input standard o come un'interruzione gestita dal sistema operativo.</summary>
        <value>
          <see langword="true" /> se CTRL+C è trattato come un input standard; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore di <xref:System.Console.TreatControlCAsInput%2A> proprietà `false` e si preme Ctrl + C, i tasti premuti non vengono memorizzati nel buffer di input e il sistema operativo termina il processo attualmente in esecuzione. Rappresenta il valore predefinito.  
  
> [!CAUTION]
>  Utilizzare questa proprietà con attenzione perché se è impostato su `true` ha effetti indesiderati. La maggior parte degli utenti prevedono Ctrl + C per terminare l'applicazione console. Se si disabilita l'effetto di Ctrl + C, l'utente deve ricordarsi di utilizzare Ctrl + INTERR per terminare l'applicazione, che è una combinazione di tasti meno comuni.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.TreatControlCAsInput%2A> proprietà.  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Non è possibile ottenere o impostare la modalità di input del buffer di input console.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'altezza dell'area della finestra della console.</summary>
        <value>Altezza della finestra della console misurata in righe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tentativo di impostare il valore della <xref:System.Console.WindowHeight%2A> genera un'eccezione quando viene reindirizzato l'output un <xref:System.ArgumentOutOfRangeException> o <xref:System.IO.IOException> eccezione. Per evitare un'eccezione, è possibile impostare il valore di questa proprietà solo se il <xref:System.Console.IsOutputRedirected%2A> restituisce proprietà `false`.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.SetWindowSize%2A> (metodo) e <xref:System.Console.WindowWidth%2A> e <xref:System.Console.WindowHeight%2A> proprietà. È necessario eseguire l'esempio per visualizzare l'effetto della modifica le dimensioni della finestra console completo.  
  
 Nell'esempio indica le dimensioni di una finestra della console impostate su 85 colonne e 43 righe, quindi attende un tasto. Quando viene premuto un tasto qualsiasi, le dimensioni della finestra della console sono dimezzate, le nuove dimensioni vengono segnalate e l'esempio è in attesa di un altro tasto. Infine, quando viene premuto un tasto qualsiasi nella finestra della console viene ripristinata alle dimensioni originali e termina l'esempio.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore della proprietà <see cref="P:System.Console.WindowWidth" /> oppure il valore della proprietà <see cref="P:System.Console.WindowHeight" /> è minore o uguale a 0.  
  
 oppure  
  
 La somma del valore della proprietà <see cref="P:System.Console.WindowHeight" /> e del valore della proprietà <see cref="P:System.Console.WindowTop" /> è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 Il valore della proprietà <see cref="P:System.Console.WindowWidth" /> o della proprietà <see cref="P:System.Console.WindowHeight" /> è maggiore della larghezza o dell'altezza massima possibile della finestra per la risoluzione dello schermo e il tipo di carattere della console correnti.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante la lettura o la scrittura delle informazioni.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione più a sinistra dell'area della finestra della console relativamente al buffer dello schermo.</summary>
        <value>Posizione più a sinistra della finestra della console misurata in colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La console rappresenta una finestra rettangolare in un'area rettangolare buffer più grande. Finestra e il buffer sono misurati verticalmente in base al numero di righe e orizzontalmente in base al numero di colonne. Le dimensioni dell'area del buffer vengono definite per il <xref:System.Console.BufferHeight%2A> e <xref:System.Console.BufferWidth%2A> proprietà. Le dimensioni dell'area della console vengono definite per il <xref:System.Console.WindowHeight%2A> e <xref:System.Console.WindowWidth%2A> proprietà. Il <xref:System.Console.WindowLeft%2A> proprietà determina a quale colonna dell'area del buffer viene visualizzata nella prima colonna della finestra della console. Il valore di <xref:System.Console.WindowLeft%2A> proprietà può variare da 0 a <xref:System.Console.BufferWidth%2A>  -  <xref:System.Console.WindowWidth%2A>. Il tentativo di impostarla su un valore di fuori di intervallo genera un <xref:System.ArgumentOutOfRangeException>.  
  
 Quando una finestra della console viene inizialmente aperta, il valore predefinito di <xref:System.Console.WindowLeft%2A> proprietà è zero, che indica che la prima colonna visualizzata dalla console corrisponde alla prima colonna (la colonna alla posizione zero) nell'area del buffer. La larghezza predefinita di finestra della console e l'area del buffer è 80 colonne. Ciò significa che il <xref:System.Console.WindowLeft%2A> proprietà può essere modificata solo se la finestra della console viene resa più stretta o l'area del buffer viene resa più ampia.  
  
 Si noti che se la larghezza dell'area del buffer supera la larghezza della finestra della console, il valore di <xref:System.Console.WindowLeft%2A> proprietà viene regolata automaticamente quando l'utente usa la barra di scorrimento orizzontale per definire la relazione della finestra dell'area del buffer.  
  
 Il tentativo di impostare il valore della <xref:System.Console.WindowLeft%2A> proprietà durante l'output viene reindirizzato genera un <xref:System.IO.IOException> eccezione. Per evitare l'eccezione, è possibile impostare il valore di questa proprietà solo se il <xref:System.Console.IsOutputRedirected%2A> restituisce proprietà `false`.  
  
   
  
## Examples  
 Nell'esempio seguente viene visualizzata una finestra della console 80 colonne e definisce un'area del buffer che è di 120 colonne. Visualizza le informazioni sulle dimensioni di finestra e del buffer e quindi attende che l'utente di premere il tasto freccia sinistra o il tasto freccia destra. Nel primo caso, si decrementa il valore della <xref:System.Console.WindowLeft%2A> proprietà di uno se il risultato è un valore valido. Nel secondo caso, aumenta il valore della <xref:System.Console.WindowLeft%2A> proprietà di uno se il risultato sarebbe valido. Si noti che l'esempio è necessario gestire un <xref:System.ArgumentOutOfRangeException>, in quanto verifica che il valore da assegnare al <xref:System.Console.WindowLeft%2A> proprietà non è negativa e non causa la somma del <xref:System.Console.WindowLeft%2A> e <xref:System.Console.WindowWidth%2A> proprietà supera il <xref:System.Console.BufferWidth%2A> valore della proprietà.  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In un'operazione set il valore da assegnare è minore di zero.  
  
 oppure  
  
 In seguito all'assegnazione, la somma di <see cref="P:System.Console.WindowLeft" /> e <see cref="P:System.Console.WindowWidth" /> supererebbe <see cref="P:System.Console.BufferWidth" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante la lettura o la scrittura delle informazioni.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione più in alto della finestra della console relativamente al buffer dello schermo.</summary>
        <value>Posizione più in alto della finestra della console misurata in righe.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La console rappresenta una finestra rettangolare in un'area rettangolare buffer più grande. Finestra e il buffer sono misurati verticalmente in base al numero di righe e orizzontalmente in base al numero di colonne. Le dimensioni dell'area del buffer vengono definite per il <xref:System.Console.BufferHeight%2A> e <xref:System.Console.BufferWidth%2A> proprietà. Le dimensioni dell'area della console vengono definite per il <xref:System.Console.WindowHeight%2A> e <xref:System.Console.WindowWidth%2A> proprietà. Il <xref:System.Console.WindowTop%2A> proprietà determina quale riga dell'area del buffer viene visualizzata nella prima colonna della finestra della console. Il valore di <xref:System.Console.WindowTop%2A> proprietà può variare da 0 a <xref:System.Console.BufferHeight%2A>  -  <xref:System.Console.WindowHeight%2A>. Il tentativo di impostarla su un valore di fuori di intervallo genera un <xref:System.ArgumentOutOfRangeException>.  
  
 Il tentativo di impostare il valore della <xref:System.Console.WindowTop%2A> proprietà durante l'output viene reindirizzato genera un <xref:System.IO.IOException> eccezione. Per evitare l'eccezione, è possibile impostare il valore di questa proprietà solo se il <xref:System.Console.IsOutputRedirected%2A> restituisce proprietà `false`.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, e <xref:System.Console.CursorVisible%2A> proprietà; e <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, e <xref:System.Console.ReadKey%2A> metodi. Nell'esempio viene disegnata una griglia nel buffer dello schermo in base alla larghezza del buffer dello schermo. Viene quindi spostata una finestra della console in risposta a cui della freccia su, freccia giù, freccia sinistra o freccia destra chiavi console viene premuto. Il pattern grid consente di vedere lo spostamento della finestra della console relativamente al buffer dello schermo.  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">In un'operazione set il valore da assegnare è minore di zero.  
  
 oppure  
  
 In seguito all'assegnazione, la somma di <see cref="P:System.Console.WindowTop" /> e <see cref="P:System.Console.WindowHeight" /> supererebbe <see cref="P:System.Console.BufferHeight" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante la lettura o la scrittura delle informazioni.</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la larghezza della finestra della console.</summary>
        <value>Larghezza della finestra della console misurata in colonne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il tentativo di impostare il valore della <xref:System.Console.WindowWidth%2A> genera un'eccezione quando viene reindirizzato l'output un <xref:System.ArgumentOutOfRangeException> o <xref:System.IO.IOException> eccezione. Per evitare un'eccezione, è possibile impostare il valore di questa proprietà solo se il <xref:System.Console.IsOutputRedirected%2A> restituisce proprietà `false`.  
  
   
  
## Examples  
 Questo esempio viene illustrato il <xref:System.Console.SetWindowSize%2A> (metodo) e <xref:System.Console.WindowWidth%2A> e <xref:System.Console.WindowHeight%2A> proprietà. È necessario eseguire l'esempio per visualizzare l'effetto della modifica le dimensioni della finestra console completo.  
  
 Nell'esempio indica le dimensioni di una finestra della console impostate su 85 colonne e 43 righe, quindi attende un tasto. Quando viene premuto un tasto qualsiasi, le dimensioni della finestra della console sono dimezzate, le nuove dimensioni vengono segnalate e l'esempio è in attesa di un altro tasto. Infine, quando viene premuto un tasto qualsiasi nella finestra della console viene ripristinata alle dimensioni originali e termina l'esempio.  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore della proprietà <see cref="P:System.Console.WindowWidth" /> oppure il valore della proprietà <see cref="P:System.Console.WindowHeight" /> è minore o uguale a 0.  
  
 oppure  
  
 La somma del valore della proprietà <see cref="P:System.Console.WindowHeight" /> e del valore della proprietà <see cref="P:System.Console.WindowTop" /> è maggiore o uguale a <see cref="F:System.Int16.MaxValue" />.  
  
 oppure  
  
 Il valore della proprietà <see cref="P:System.Console.WindowWidth" /> o della proprietà <see cref="P:System.Console.WindowHeight" /> è maggiore della larghezza o dell'altezza massima possibile della finestra per la risoluzione dello schermo e il tipo di carattere della console correnti.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante la lettura o la scrittura delle informazioni.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore o dei valori specificati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore Boolean specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando <xref:System.Boolean.ToString%2A?displayProperty=nameWithType>, che restituisce uno <xref:System.Boolean.TrueString?displayProperty=nameWithType> o <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard il valore del carattere Unicode specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri Unicode.</param>
        <summary>Scrive nel flusso di output standard una specifica matrice di caratteri Unicode.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Inserisce nel flusso di output standard la rappresentazione testo del valore <see cref="T:System.Decimal" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando <xref:System.Decimal.ToString%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore a virgola mobile e precisione doppia specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Double.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione di testo dell'intero con segno a 32 bit specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Int32.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione di testo dell'intero con segno a 64 bit specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Int64.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere oppure <see langword="null" />.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'oggetto specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `value` è `null`, viene scritto alcun dato e viene generata alcuna eccezione. In caso contrario, il `ToString` metodo `value` viene chiamato per generare la rappresentazione di stringa e la stringa risultante viene scritto nel flusso di output standard.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore a virgola mobile e precisione singola specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Single.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard il valore della stringa specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore è `null`, viene scritto alcun dato per il flusso di output standard.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'intero senza segno a 32 bit specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'intero senza segno a 64 bit specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> metodo.  
  
   
  
## Examples  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'oggetto specificato usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzato il metodo `WriteLine` per illustrare gli identificatori standard di formattazione per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo <xref:System.Console.Write%2A>.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg">Matrice di oggetti da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo della matrice di oggetti specificata usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Il `arg` parametro è una matrice di parametri. Gli argomenti possono essere passati al metodo come una matrice o come elenco di cinque o più elementi. Negli esempi vengono illustrati entrambi i formati di chiamata al metodo.  
  
   
  
## Examples  
 L'esempio seguente definisce un `Person` classe con un numero di proprietà che forniscono informazioni su una persona. Il relativo `GetDescription` metodo restituisce una matrice che contiene tutti i valori di proprietà tranne uno. Nell'esempio viene utilizzata la matrice restituita dal `GetDescription` metodo per visualizzare i valori dell'oggetto utente.  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 Si noti che nell'esempio viene chiamato il <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29> metodo anziché <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29> (metodo) perché tenta di visualizzare il valore della `Person.Remarks` proprietà sulla stessa riga. A tale scopo, esamina il valore di <xref:System.Console.CursorLeft%2A> e <xref:System.Console.WindowWidth%2A> proprietà per determinare se è presente spazio sufficiente per la nota per adattarla.  Se è presente, verrà visualizzata la riga. In caso contrario, scrive una riga, rientri tre spazi e visualizza l'indicatore.  
  
 L'esempio seguente è identico al primo, ad eccezione del fatto che viene fornito un elenco di cinque elementi come il `arg` argomento anziché una matrice di parametri.  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> o <paramref name="arg" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Questo metodo non viene chiamato da codice C++. Il compilatore C++ risolve le chiamate a [System.Console.Write](xref:System.Console.Write*) che includono una stringa e un elenco di quattro o più parametri dell'oggetto come una chiamata a <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />. Risolve le chiamate a [System.Console.Write](xref:System.Console.Write*) che includono una stringa e una matrice di oggetti come una chiamata a <see cref="M:System.Console.Write(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri Unicode.</param>
        <param name="index">Posizione iniziale nel <c>buffer</c>.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Scrive nel flusso di output standard una specifica sottomatrice di caratteri Unicode.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive `count` caratteri a partire dalla posizione `index` di `buffer` nel flusso di output standard.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.</exception>
        <exception cref="T:System.ArgumentException">
          La somma di <paramref name="index" /> e <paramref name="count" /> specifica una posizione esterna a <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo degli oggetti specificati usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzato il metodo `WriteLine` per illustrare gli identificatori standard di formattazione per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg2">Terzo oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo degli oggetti specificati usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene utilizzato il metodo `WriteLine` per illustrare gli identificatori standard di formattazione per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 Nell'esempio riportato di seguito viene illustrato l'utilizzo del metodo `Write`.  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg2">Terzo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg3">Quarto oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'elenco degli oggetti e dei parametri di lunghezza variabile specificati usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questa API non è conforme a CLS. L'alternativa conforme a CLS è <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. I compilatori c# e Visual Basic Risolvi automaticamente una chiamata a questo metodo come una chiamata a <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di parametri variabile con il <xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> metodo. Il metodo viene chiamato con una stringa di formato composto e cinque elementi di formato.  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Questo metodo è contrassegnato con il <see langword="vararg" /> (parola chiave), il che significa che supporta un numero variabile di parametri. Il metodo può essere chiamato da Visual C++, ma non può essere chiamato dal codice c# o Visual Basic. I compilatori c# e Visual Basic risolvere le chiamate ai <see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" /> come chiamate a <see cref="M:System.Console.Write(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scrive nel flusso di output standard i dati specificati, seguiti dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il terminatore di riga predefinito è una stringa il cui valore è un ritorno a capo seguito da un avanzamento riga ("\r\n" in c# o `vbCrLf` in Visual Basic). È possibile modificare il terminatore di riga impostando il <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> proprietà del <xref:System.Console.Out%2A> proprietà in un'altra stringa.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scrive nel flusso di output standard il terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il terminatore di riga predefinito è una stringa il cui valore è un ritorno a capo seguito da un avanzamento riga ("\r\n" in c# o `vbCrLf` in Visual Basic). È possibile modificare il terminatore di riga impostando il <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType> proprietà del <xref:System.Console.Out%2A> proprietà in un'altra stringa. Nell'esempio viene illustrata una situazione di questo tipo.  
  
   
  
## Examples  
 Nell'esempio viene modificato il terminatore di riga il valore predefinito di "\r\n" o `vbCrLf` a "\r\n\r\n" o `vbCrLf`  +  `vbCrLf`. Chiama quindi il <xref:System.Console.WriteLine> e <xref:System.Console.WriteLine%28System.String%29> metodi per visualizzare l'output alla console.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore Boolean specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 Nell'esempio seguente genera l'errore dieci integer casuali e utilizza il <xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType> metodo per indicare se sono pari.  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard il valore del carattere Unicode specificato, seguito dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri Unicode.</param>
        <summary>Scrive nel flusso di output standard la matrice di caratteri Unicode specificata, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore <see cref="T:System.Decimal" /> specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Decimal.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore a virgola mobile e precisione doppia specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Double.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione di testo dell'intero con segno a 32 bit specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Int32.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione di testo dell'intero con segno a 64 bit specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Int64.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'oggetto specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il parametro `value` è `null`, verrà scritto solo il terminatore di riga. In caso contrario, il `ToString` metodo `value` viene chiamato per generare la rappresentazione di stringa e la stringa risultante viene scritto nel flusso di output standard.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente usa il <xref:System.Console.WriteLine%28System.Object%29> metodo per visualizzare ogni valore in una matrice di oggetti nella console.  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo del valore a virgola mobile e precisione singola specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.Single.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard il valore della stringa specificato, seguito dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se il valore è `null`, viene scritto solo il terminatore di riga nel flusso di output standard.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine> metodo.  
  
   
  
## Examples  
 Nell'esempio viene modificato il terminatore di riga il valore predefinito di "\r\n" o `vbCrLf` a "\r\n\r\n" o `vbCrLf`  +  `vbCrLf`. Chiama quindi il <xref:System.Console.WriteLine> e <xref:System.Console.WriteLine%28System.String%29> metodi per visualizzare l'output alla console.  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'intero senza segno a 32 bit specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">Valore da scrivere.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'intero senza segno a 64 bit specificato, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La rappresentazione testo del `value` viene generata chiamando il <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'oggetto specificato, seguita dal terminatore di riga corrente, usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 L'esempio seguente chiama il <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> metodo per visualizzare cinque generato casualmente <xref:System.Boolean> valori.  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 L'esempio seguente chiama il <xref:System.Console.WriteLine%28System.String%2CSystem.Object%29> metodo per visualizzare la data corrente.   Si noti che il formato di elemento di `format` argomento utilizza "D" [stringa di formato di data e ora standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) per visualizzare la data nel formato data estesa delle impostazioni cultura correnti.  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg">Matrice di oggetti da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo della matrice di oggetti specificata, seguita dal terminatore di riga corrente, usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 Nell'esempio seguente vengono illustrati gli identificatori di formattazione standard per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> o <paramref name="arg" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Questo metodo non viene chiamato da codice C++. Il compilatore C++ risolve le chiamate a [System.Console.WriteLine](xref:System.Console.WriteLine*) che includono una stringa e un elenco di quattro o più parametri dell'oggetto come una chiamata a <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />. Risolve le chiamate a [System.Console.WriteLine](xref:System.Console.WriteLine*) che includono una stringa e una matrice di oggetti come una chiamata a <see cref="M:System.Console.WriteLine(System.String,System.Object)" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di caratteri Unicode.</param>
        <param name="index">Posizione iniziale nel <c>buffer</c>.</param>
        <param name="count">Numero di caratteri da scrivere.</param>
        <summary>Scrive nel flusso di output standard la sottomatrice di caratteri Unicode specificata, seguita dal terminatore di riga corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo scrive `count` caratteri a partire dalla posizione `index` di `buffer` nel flusso di output standard.  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> o <paramref name="count" /> è minore di zero.</exception>
        <exception cref="T:System.ArgumentException">
          La somma di <paramref name="index" /> e <paramref name="count" /> specifica una posizione esterna a <paramref name="buffer" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo degli oggetti specificati, seguita dal terminatore di riga corrente, usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 Nell'esempio seguente vengono illustrati gli identificatori di formattazione standard per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg2">Terzo oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo degli oggetti specificati, seguita dal terminatore di riga corrente, usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 Nell'esempio seguente vengono illustrati gli identificatori di formattazione standard per numeri, date ed enumerazioni.  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 L'esempio seguente è un suggerimento di calcolo che calcola un suggerimento di 18% e utilizza il <xref:System.Console.WriteLine%2A> metodo per visualizzare la quantità di carica iniziale, la quantità di punta e la quantità totale. L'esempio è un'applicazione console che richiede all'utente di specificare la quantità di carica iniziale come parametro della riga di comando.  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Stringa in formato composito.</param>
        <param name="arg0">Primo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg1">Secondo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg2">Terzo oggetto da scrivere usando il <c>formato</c>.</param>
        <param name="arg3">Quarto oggetto da scrivere usando il <c>formato</c>.</param>
        <summary>Scrive nel flusso di output standard la rappresentazione testo dell'elenco degli oggetti e dei parametri di lunghezza variabile specificati, seguiti dal terminatore di riga corrente, usando le informazioni di formato specificate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questa API non è conforme a CLS. L'alternativa conforme a CLS è <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. I compilatori c# e Visual Basic Risolvi automaticamente una chiamata a questo metodo come una chiamata a <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.  
  
 Questo metodo Usa il [funzionalità di formattazione composta](~/docs/standard/base-types/composite-formatting.md) di .NET Framework per convertire il valore di un oggetto nella relativa rappresentazione di testo e incorporare tale rappresentazione in una stringa. La stringa risultante viene scritto nel flusso di output.  
  
 Il `format` parametro è costituita da zero o più sequenze di testo combinato con zero o più segnaposto indicizzati, denominati elementi di formato, che corrispondono a un oggetto nell'elenco di parametri di questo metodo. Il processo di formattazione sostituisce ogni elemento di formato con la rappresentazione testo del valore dell'oggetto corrispondente.  
  
 La sintassi di un elemento di formato è `{` *indice*[`,`*allineamento*] [`:`*formatString*]`}`, che consente di specificare un indice obbligatorio, facoltativa lunghezza e l'allineamento del testo formattato e una stringa facoltativa di caratteri identificatori di formato che controllano come il valore dell'oggetto corrispondente dell'oggetto viene formattata.  
  
 .NET Framework fornisce supporto di formattazione completo, come descritto in maggior dettaglio negli argomenti seguenti di formattazione.  
  
-   Per ulteriori informazioni sulla funzionalità di formattazione composita supportata da metodi quali <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>e alcuni overload di <xref:System.Console.WriteLine%2A>, vedere [formattazione composita](~/docs/standard/base-types/composite-formatting.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato numerico, vedere [stringhe di formato numerico Standard](~/docs/standard/base-types/standard-numeric-format-strings.md) e [stringhe di formato numerico personalizzato](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Per ulteriori informazioni sulla data e ora identificatori di formato, vedere [stringhe di formato di ora e data Standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) e [stringhe di formato di ora e Data personalizzata](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Per ulteriori informazioni sugli identificatori di formato di enumerazione, vedere [stringhe di formato di enumerazione](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Per ulteriori informazioni sulla formattazione, vedere [formattazione dei tipi di](~/docs/standard/base-types/formatting-types.md).  
  
 Per ulteriori informazioni sul terminatore di riga, vedere la sezione Note del <xref:System.Console.WriteLine%2A> metodo che non accetta parametri.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di argomenti variabile con il <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> metodo. Il metodo viene chiamato con una stringa di formato composto e cinque elementi di formato.  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Si è verificato un errore di I/O.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> è <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La specifica del formato in <paramref name="format" /> non è valida.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Per modificare le finestre di primo livello sicuro e secondarie. Enumerazione associata: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Questo metodo è contrassegnato con il <see langword="vararg" /> (parola chiave), il che significa che supporta un numero variabile di parametri. Il metodo può essere chiamato da Visual C++, ma non può essere chiamato dal codice c# o Visual Basic. I compilatori c# e Visual Basic risolvere le chiamate ai <see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" /> come chiamate a <see cref="M:System.Console.WriteLine(System.String,System.Object[])" />.</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>