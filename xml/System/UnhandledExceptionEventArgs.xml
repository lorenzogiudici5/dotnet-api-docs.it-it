<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9811531194d62fd50310ad6baf15b7e5d3024df0" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37727022" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class UnhandledExceptionEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type UnhandledExceptionEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8c94b-101">Fornisce dati relativi all'evento generato quando si verifica un'eccezione non gestita in qualsiasi dominio di applicazione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8c94b-101">Provides data for the event that is raised when there is an exception that is not handled in any application domain.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c94b-102"><xref:System.UnhandledExceptionEventArgs> fornisce l'accesso per l'oggetto eccezione e un flag che indica se common language runtime sta terminando.</span><span class="sxs-lookup"><span data-stu-id="8c94b-102"><xref:System.UnhandledExceptionEventArgs> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</span></span> <span data-ttu-id="8c94b-103">Il <xref:System.UnhandledExceptionEventArgs> è uno dei parametri passati <xref:System.UnhandledExceptionEventHandler> per il <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> evento.</span><span class="sxs-lookup"><span data-stu-id="8c94b-103">The <xref:System.UnhandledExceptionEventArgs> is one of the parameters passed into <xref:System.UnhandledExceptionEventHandler> for the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
 <span data-ttu-id="8c94b-104">Per altre informazioni sui delegati del gestore eventi, vedere [la gestione e generazione di eventi](~/docs/standard/events/index.md).</span><span class="sxs-lookup"><span data-stu-id="8c94b-104">For more information about event handler delegates, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="E:System.AppDomain.UnhandledException" />
    <altmember cref="T:System.UnhandledExceptionEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (exception As Object, isTerminating As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UnhandledExceptionEventArgs(System::Object ^ exception, bool isTerminating);" />
      <MemberSignature Language="F#" Value="new UnhandledExceptionEventArgs : obj * bool -&gt; UnhandledExceptionEventArgs" Usage="new System.UnhandledExceptionEventArgs (exception, isTerminating)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception">
          <span data-ttu-id="8c94b-105">Eccezione non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-105">The exception that is not handled.</span>
          </span>
        </param>
        <param name="isTerminating">
          <span data-ttu-id="8c94b-106">
            <see langword="true" /> se la fase di esecuzione sta terminando; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-106">
              <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8c94b-107">Consente di inizializzare una nuova istanza della classe <see cref="T:System.UnhandledExceptionEventArgs" /> con l'oggetto eccezione e un flag di terminazione di Common Language Runtime.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-107">Initializes a new instance of the <see cref="T:System.UnhandledExceptionEventArgs" /> class with the exception object and a common language runtime termination flag.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExceptionObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ExceptionObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionObject : obj" Usage="System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c94b-108">Ottiene l'oggetto eccezione non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-108">Gets the unhandled exception object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c94b-109">Oggetto eccezione non gestita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-109">The unhandled exception object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c94b-110">Questa proprietà restituisce un oggetto di tipo <xref:System.Object> anziché una derivata da <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="8c94b-110">This property returns an object of type <xref:System.Object> rather than one derived from <xref:System.Exception>.</span></span> <span data-ttu-id="8c94b-111">Anche se Common Language Specification richiede che tutti i tipi di eccezione derivano da <xref:System.Exception>, è possibile chiamare i metodi generare eccezioni con gli oggetti non derivati da <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="8c94b-111">Although the Common Language Specification requires that all exception types derive from <xref:System.Exception>, it is possible for methods to throw exceptions with objects not derived from <xref:System.Exception>.</span></span> <span data-ttu-id="8c94b-112">È possibile eseguire le operazioni seguenti per lavorare con questa eccezione:</span><span class="sxs-lookup"><span data-stu-id="8c94b-112">You can do the following to work with this exception:</span></span>  
  
-   <span data-ttu-id="8c94b-113">Si applicano i <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> dell'attributo con un <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> pari a `true` all'assembly che contiene il gestore dell'evento.</span><span class="sxs-lookup"><span data-stu-id="8c94b-113">Apply the  <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> attribute with a <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> value of `true` to the assembly that contains the event handler.</span></span> <span data-ttu-id="8c94b-114">Si esegue il wrapping di tutte le eccezioni non derivate dal <xref:System.Exception> classe un <xref:System.Runtime.CompilerServices.RuntimeWrappedException> oggetto.</span><span class="sxs-lookup"><span data-stu-id="8c94b-114">This wraps all exceptions not derived from the <xref:System.Exception> class in a <xref:System.Runtime.CompilerServices.RuntimeWrappedException> object.</span></span> <span data-ttu-id="8c94b-115">È possibile quindi in modo sicuro il cast (in c#) o convertire (in Visual Basic) l'oggetto restituito da questa proprietà su un <xref:System.Exception> dell'oggetto e recuperare l'oggetto eccezione originale dal <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> proprietà.</span><span class="sxs-lookup"><span data-stu-id="8c94b-115">You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <xref:System.Exception> object, and retrieve the original exception object from the <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="8c94b-116">Si noti che alcuni compilatori, ad esempio i compilatori c# e Visual Basic, applicano automaticamente questo attributo.</span><span class="sxs-lookup"><span data-stu-id="8c94b-116">Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</span></span>  
  
-   <span data-ttu-id="8c94b-117">Il cast dell'oggetto restituito da questa proprietà su un <xref:System.Exception> oggetto.</span><span class="sxs-lookup"><span data-stu-id="8c94b-117">Cast the object returned by this property to an <xref:System.Exception> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8c94b-118">Nell'esempio seguente viene illustrato il <xref:System.AppDomain.UnhandledException> evento.</span><span class="sxs-lookup"><span data-stu-id="8c94b-118">The following example demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="8c94b-119">Definisce un gestore eventi, `MyHandler`, che viene richiamato ogni volta che viene generata un'eccezione non gestita nel dominio applicazione predefinito.</span><span class="sxs-lookup"><span data-stu-id="8c94b-119">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="8c94b-120">Genera quindi le due eccezioni.</span><span class="sxs-lookup"><span data-stu-id="8c94b-120">It then throws two exceptions.</span></span> <span data-ttu-id="8c94b-121">Il primo è gestito da un **try/catch** blocco.</span><span class="sxs-lookup"><span data-stu-id="8c94b-121">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="8c94b-122">La seconda non viene gestita e richiama il `MyHandle` routine prima che l'applicazione viene terminata.</span><span class="sxs-lookup"><span data-stu-id="8c94b-122">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" />
        <altmember cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" />
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool" Usage="System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="8c94b-123">Indica se Common Language Runtime sta terminando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-123">Indicates whether the common language runtime is terminating.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="8c94b-124">
            <see langword="true" /> se la fase di esecuzione sta terminando; in caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8c94b-124">
              <see langword="true" /> if the runtime is terminating; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8c94b-125">A partire da .NET Framework versione 2.0, questa proprietà restituisce `true` per la maggior parte di eccezioni non gestite, a meno che un flag di compatibilità dell'applicazione viene usato per ripristinare il comportamento delle versioni 1.0 e 1.1.</span><span class="sxs-lookup"><span data-stu-id="8c94b-125">Beginning with the .NET Framework version 2.0, this property returns `true` for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</span></span> <span data-ttu-id="8c94b-126">Il motivo è che è consentite proseguire normalmente, più eccezioni non gestite nei thread, tra cui pool di thread, in genere un conseguente chiusura dell'applicazione.</span><span class="sxs-lookup"><span data-stu-id="8c94b-126">The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</span></span> <span data-ttu-id="8c94b-127">Per altre informazioni, incluso un elenco di casi in cui il runtime non viene terminato, vedere [eccezioni in thread gestiti](~/docs/standard/threading/exceptions-in-managed-threads.md).</span><span class="sxs-lookup"><span data-stu-id="8c94b-127">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="8c94b-128">Informazioni sulla versione</span><span class="sxs-lookup"><span data-stu-id="8c94b-128">Version Information</span></span>  
 <span data-ttu-id="8c94b-129">Quanto segue si applica alle versioni di .NET Framework 1.0 e 1.1: questa proprietà restituisce `true` quando viene ricevuta in, un'eccezione ma non è gestita da, thread principale di un'applicazione.</span><span class="sxs-lookup"><span data-stu-id="8c94b-129">The following applies to the .NET Framework versions 1.0 and 1.1: This property returns `true` when an exception is received in, but not handled by, an application's main thread.</span></span> <span data-ttu-id="8c94b-130">Questa proprietà restituisce inoltre `true` se un thread non gestito è in esecuzione il codice gestito e riceve un'eccezione non gestita.</span><span class="sxs-lookup"><span data-stu-id="8c94b-130">This property also returns `true` if an unmanaged thread is executing managed code and receives an unhandled exception.</span></span> <span data-ttu-id="8c94b-131">Infine, questa proprietà restituisce `false` per pool di thread e i thread gestiti creati da un'applicazione, perché le versioni 1.0 e 1.1 intercettare le eccezioni non gestite in tali thread e ignorano.</span><span class="sxs-lookup"><span data-stu-id="8c94b-131">Finally, this property returns `false` for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>