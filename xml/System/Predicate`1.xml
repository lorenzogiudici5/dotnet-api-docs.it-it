<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d858d34d49e219f11d290e6e16beae5f097fdc9a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429168" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Tipo di oggetto da confrontare.</typeparam>
    <param name="obj">Oggetto da confrontare in base ai criteri definiti all'interno del metodo rappresentato da questo delegato.</param>
    <summary>Rappresenta il metodo che definisce un set di criteri e determina se l'oggetto specificato soddisfa tali criteri.</summary>
    <returns>
      <see langword="true" /> se <paramref name="obj" /> soddisfa i criteri definiti all'interno del metodo rappresentato da questo delegato; in caso contrario <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo delegato è utilizzato da numerosi metodi per la <xref:System.Array> e <xref:System.Collections.Generic.List%601> classi per la ricerca di elementi nella raccolta.  
  
 In genere, il <xref:System.Predicate%601> delegato è rappresentato da un'espressione lambda. Poiché le variabili con ambite locale sono disponibili per l'espressione lambda, è facile da testare per una condizione che non è noto con precisione in fase di compilazione. Questa situazione viene simulata nell'esempio seguente, che definisce un `HockeyTeam` classe che contiene informazioni su un team National Hockey League e l'anno in cui è stato fondato. L'esempio definisce una matrice di valori interi che rappresentano anni e assegna in modo casuale un elemento della matrice `foundedBeforeYear`, che è una variabile locale con ambito limitato all'esempio `Main` metodo. Dato che le variabili con ambite locale sono disponibili in un'espressione lambda, l'espressione lambda passata ai <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> metodo è in grado di restituire un `HockeyTeam` oggetto per ogni team fondato in corrispondenza o prima tale anno.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare un <xref:System.Predicate%601> delegato con il <xref:System.Array.Find%2A?displayProperty=nameWithType> metodo per la ricerca di una matrice di <xref:System.Drawing.Point> strutture. Nell'esempio viene definito in modo esplicito un delegato <xref:System.Predicate%601> denominato `predicate` e gli viene assegnato un metodo denominato `FindPoints` che restituisce `true` se il prodotto dei campi <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> e <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> è maggiore di 100.000. Si noti che solitamente si utilizza un'espressione lambda anziché definire in modo esplicito un delegato di tipo <xref:System.Predicate%601>, come illustrato nel secondo esempio.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 L'esempio seguente è identico a quello precedente, con la differenza che viene utilizzata un'espressione lambda per rappresentare il delegato <xref:System.Predicate%601>.  Ogni elemento del `points` matrice viene passata all'espressione lambda fino a quando l'espressione Trova un elemento che soddisfa i criteri di ricerca. In questo caso, l'espressione lambda restituisce `true` se il prodotto dei campi X e Y è maggiore di 100.000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>