<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7,T8&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8ed769ccd72a10337786d136445cb47d191f0d54" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30727515" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`8&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`8" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">Tipo del primo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T2">Tipo del secondo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T3">Tipo del terzo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T4">Tipo del quarto parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T5">Tipo del quinto parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T6">Tipo del sesto parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T7">Tipo del settimo parametro del metodo incapsulato da questo delegato.</typeparam>
    <typeparam name="T8">Tipo dell'ottavo parametro del metodo incapsulato da questo delegato.</typeparam>
    <param name="arg1">Primo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg2">Secondo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg3">Terzo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg4">Quarto parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg5">Quinto parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg6">Sesto parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg7">Settimo parametro del metodo incapsulato da questo delegato.</param>
    <param name="arg8">Ottavo parametro del metodo incapsulato da questo delegato.</param>
    <summary>Incapsula un metodo che presenta otto parametri e non restituisce alcun valore.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare il <xref:System.Action%608> delegato per passare un metodo come un parametro senza dichiarare in modo esplicito un delegato personalizzato. Il metodo incapsulato deve corrispondere alla firma del metodo che è definita da questo delegato. Ciò significa che il metodo incapsulato deve avere otto parametri che sono tutti passati per valore e non deve essere restituito un valore. (In c#, il metodo deve restituire `void`. In Visual Basic, devono essere definito dal `Sub`...`End Sub` costrutto. Può essere anche un metodo che restituisce un valore che viene ignorato.) In genere, questo metodo viene utilizzato per eseguire un'operazione.  
  
> [!NOTE]
>  Per fare riferimento a un metodo che presenta otto parametri e restituisce un valore, utilizzare il metodo generico <xref:System.Func%609> delegato.  
  
 È inoltre possibile utilizzare il <xref:System.Action%608> delegato con metodi anonimi e le espressioni lambda.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`9" />
  </Docs>
</Type>