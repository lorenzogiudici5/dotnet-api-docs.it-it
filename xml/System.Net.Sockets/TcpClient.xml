<Type Name="TcpClient" FullName="System.Net.Sockets.TcpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f0b32dcca3fd97eae4e5ede9f35c940ea0ad6c30" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30461115" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpClient : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce connessioni client per i servizi di rete TCP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Net.Sockets.TcpClient> classe fornisce metodi semplici per la connessione, l'invio, e la ricezione flusso di dati in rete in modalità di blocco sincrono.  
  
 Affinché <xref:System.Net.Sockets.TcpClient> potersi collegare e scambiare dati, un <xref:System.Net.Sockets.TcpListener> o <xref:System.Net.Sockets.Socket> creato con il protocollo TCP <xref:System.Net.Sockets.ProtocolType> deve essere in ascolto delle richieste di connessione in ingresso. È possibile connettersi al listener in uno dei due modi seguenti:  
  
-   Creare un <xref:System.Net.Sockets.TcpClient> e chiamare uno dei tre disponibili <xref:System.Net.Sockets.TcpClient.Connect%2A> metodi.  
  
-   Creare un <xref:System.Net.Sockets.TcpClient> utilizzando il nome host e numero di porta dell'host remoto. Questo costruttore tenterà automaticamente una connessione.  
  
> [!NOTE]
>  Se si desidera inviare datagrammi senza connessione in modalità di blocco sincrona, utilizzare la <xref:System.Net.Sockets.UdpClient> classe.  
  
   
  
## Examples  
 Esempio di codice seguente consente di stabilire un <xref:System.Net.Sockets.TcpClient> connessione.  
  
 [!code-cpp[System.Net.Sockets.TcpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CPP/tcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/CS/tcpclient.cs#1)]
 [!code-vb[System.Net.Sockets.TcpClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpClient/VB/tcpclient.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">Autorizzazione per stabilire una connessione in uscita o accettare una richiesta in ingresso.</permission>
    <block subset="none" type="overrides">
      <para>Per inviare e ricevere dati, utilizzare il <see cref="M:System.Net.Sockets.TcpClient.GetStream" /> per ottenere un <see cref="T:System.Net.Sockets.NetworkStream" />. Chiamare il <see cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" /> e <see cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" /> metodi di <see cref="T:System.Net.Sockets.NetworkStream" /> per inviare e ricevere dati con l'host remoto. Utilizzare il <see cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" /> metodo per rilasciare tutte le risorse associate di <see cref="T:System.Net.Sockets.TcpClient" />.</para>
    </block>
    <altmember cref="T:System.Net.Sockets.TcpListener" />
    <altmember cref="T:System.Net.Sockets.NetworkStream" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="T:System.Net.Sockets.ProtocolType" />
    <altmember cref="T:System.Net.IPEndPoint" />
    <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
    <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un nuovo <xref:System.Net.Sockets.TcpClient> e consente al provider del servizio sottostante assegnare il numero porta e indirizzo IP locale più appropriato. È necessario chiamare prima il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo prima di inviare e ricevere dati.  
  
> [!NOTE]
>  Questo costruttore funziona solo con tipi di indirizzi IPv4.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come utilizzare il costruttore predefinito per creare un nuovo <xref:System.Net.Sockets.TcpClient>.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">Oggetto <see cref="T:System.Net.IPEndPoint" /> a cui associare l'oggetto <see cref="T:System.Net.Sockets.Socket" /> TCP.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.TcpClient" /> e la associa all'endpoint locale specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un nuovo <xref:System.Net.Sockets.TcpClient> e li associa al <xref:System.Net.IPEndPoint> specificato per il `localEP` parametro. Prima di chiamare questo costruttore, è necessario creare un <xref:System.Net.IPEndPoint> utilizzando il numero di porta e indirizzo IP da cui si desidera inviare e ricevere dati. Non è necessario specificare un numero di porta e indirizzo IP locale prima di connessione e la comunicazione. Se si crea un <xref:System.Net.Sockets.TcpClient> utilizzando un altro costruttore, il provider del servizio sottostante assegnerà il numero porta e indirizzo IP locale più appropriato.  
  
 È necessario chiamare il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo prima di inviare e ricevere dati.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare un'istanza di <xref:System.Net.Sockets.TcpClient> classe utilizzando un endpoint locale.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="localEP" /> è <see langword="null" />.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family">
          <see cref="P:System.Net.IPAddress.AddressFamily" /> del protocollo IP.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.TcpClient" /> con la famiglia specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare un'istanza di <xref:System.Net.Sockets.TcpClient> classe.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="family" /> non è uguale a AddressFamily.InterNetwork  
  
 oppure  
  
 Il parametro <paramref name="family" /> non è uguale a AddressFamily.InterNetworkV6</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpClient(System::String ^ hostname, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nome DNS dell'host remoto a cui si intende connettersi.</param>
        <param name="port">Numero di porta dell'host remoto a cui si intende connettersi.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.TcpClient" /> ed effettua la connessione alla porta specificata sull'host specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un nuovo <xref:System.Net.Sockets.TcpClient> ed effettua una connessione sincrona tentativo con il nome host specificato e il numero di porta. Il provider del servizio sottostante assegnerà il numero porta e indirizzo IP locale più appropriato. <xref:System.Net.Sockets.TcpClient> verrà bloccata finché si connette o si verifica un errore. Questo costruttore consente di inizializzare, risolvere il nome host DNS e la connessione in un solo passaggio.  
  
 Se IPv6 è abilitato e <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29> metodo viene chiamato per connettersi a un host che si risolve in IPv6 e gli indirizzi IPv4, la connessione all'indirizzo IPv6 verrà tentata prima l'indirizzo IPv4. Ciò può avere l'effetto di ritardare il tempo necessario per stabilire la connessione se l'host non è in ascolto sull'indirizzo IPv6.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice riportato di seguito viene illustrato come creare un'istanza di <xref:System.Net.Sockets.TcpClient> classe utilizzando un nome host e il numero di porta.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hostname" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="Overload:System.Net.Sockets.TcpClient.#ctor" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se è stata stabilita una connessione.</summary>
        <value>
          <see langword="true" /> se la connessione è stata stabilita; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi che derivano da <xref:System.Net.Sockets.TcpClient> possibile utilizzare questa proprietà per determinare se un tentativo di connessione ha avuto esito positivo. Non effettua il monitoraggio stato di connessione in corso di <xref:System.Net.Sockets.TcpClient>. Se l'host remoto chiude la connessione, <xref:System.Net.Sockets.TcpClient.Active%2A> non verrà aggiornato. Se si deriva da <xref:System.Net.Sockets.TcpClient> e richiedono maggiore attenzione allo stato della connessione, utilizzare il <xref:System.Net.Sockets.Socket.Connected%2A> proprietà del <xref:System.Net.Sockets.Socket> restituito dal <xref:System.Net.Sockets.TcpClient.Client%2A> metodo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.Socket.Connected" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la quantità dei dati ricevuti dalla rete e disponibili per essere letti.</summary>
        <value>Numero di byte di dati ricevuti dalla rete e disponibili per essere letti.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpClient.Available%2A> è un modo per determinare se i dati sono accodati per la lettura. Se sono disponibili i dati, chiamare <xref:System.Net.Sockets.NetworkStream.Read%2A> per ottenere i dati. I dati disponibili sono che la quantità totale di dati accodati nel buffer di rete per la lettura. Se non sono accodati dati nel buffer di rete, <xref:System.Net.Sockets.TcpClient.Available%2A> restituisce 0.  
  
 Se l'host remoto viene arrestato o chiude la connessione, <xref:System.Net.Sockets.TcpClient.Available%2A> può generare un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library) per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.TcpClient.Available%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginConnect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia una richiesta asincrona di una connessione all'host remoto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress address, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress address, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (address As IPAddress, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::Net::IPAddress ^ address, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> dell'host remoto.</param>
        <param name="port">Numero di porta dell'host remoto.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente che contiene informazioni sull'operazione di connessione. Questo oggetto viene passato al delegato <c>requestCallback</c> al completamento dell'operazione.</param>
        <summary>Avvia una richiesta asincrona di una connessione all'host remoto. L'host remoto viene specificato da un <see cref="T:System.Net.IPAddress" /> e da un numero di porta (<see cref="T:System.Int32" />).</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento alla connessione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.TcpClient.EndConnect%2A> metodo. In genere, il metodo viene richiamato dal `asyncCallback` delegato.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per il blocco fino al completamento dell'operazione, utilizzare uno del <xref:System.Net.Sockets.TcpClient.Connect%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Net.Sockets.TcpClient> e si connette a un host remoto.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
        <exception cref="T:System.Security.SecurityException">Un chiamante di livello superiore nello stack di chiamate non ha l'autorizzazione per l'operazione richiesta.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di porta non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (System.Net.IPAddress[] addresses, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(class System.Net.IPAddress[] addresses, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (addresses As IPAddress(), port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="addresses">Almeno un <see cref="T:System.Net.IPAddress" />, che specifica gli host remoti.</param>
        <param name="port">Numero di porta degli host remoti.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente che contiene informazioni sull'operazione di connessione. Questo oggetto viene passato al delegato <c>requestCallback</c> al completamento dell'operazione.</param>
        <summary>Avvia una richiesta asincrona di una connessione all'host remoto. L'host remoto viene specificato da una matrice di <see cref="T:System.Net.IPAddress" /> e da un numero di porta (<see cref="T:System.Int32" />).</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento alla connessione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.TcpClient.EndConnect%2A> metodo. In genere, il metodo viene richiamato dal `asyncCallback` delegato.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per il blocco fino al completamento dell'operazione, utilizzare uno del <xref:System.Net.Sockets.TcpClient.Connect%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
 Questo metodo viene in genere utilizzato immediatamente dopo una chiamata al <xref:System.Net.Dns.BeginGetHostAddresses%2A> (metodo), che può restituire più indirizzi IP per un singolo host.  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Net.Sockets.TcpClient> e si connette a un host remoto.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="addresses" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
        <exception cref="T:System.Security.SecurityException">Un chiamante di livello superiore nello stack di chiamate non ha l'autorizzazione per l'operazione richiesta.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di porta non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginConnect">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginConnect (string host, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginConnect(string host, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginConnect (host As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginConnect(System::String ^ host, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="host">Il nome dell'host remoto.</param>
        <param name="port">Numero di porta dell'host remoto.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente che contiene informazioni sull'operazione di connessione. Questo oggetto viene passato al delegato <c>requestCallback</c> al completamento dell'operazione.</param>
        <summary>Avvia una richiesta asincrona di una connessione all'host remoto. L'host remoto viene specificato da un nome host (<see cref="T:System.String" />) e da un numero di porta (<see cref="T:System.Int32" />).</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento alla connessione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.TcpClient.BeginConnect%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.TcpClient.EndConnect%2A> metodo. In genere, il metodo viene richiamato dal `asyncCallback` delegato.  
  
 Questo metodo si blocca fino al completamento dell'operazione. Per il blocco fino al completamento dell'operazione, utilizzare uno del <xref:System.Net.Sockets.TcpClient.Connect%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [la chiamata dei metodi sincroni](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Net.Sockets.TcpClient> e si connette a un host remoto.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.TcpClient1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="host" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
        <exception cref="T:System.Security.SecurityException">Un chiamante di livello superiore nello stack di chiamate non ha l'autorizzazione per l'operazione richiesta.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di porta non è valido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante.</summary>
        <value>Oggetto <see cref="T:System.Net.Sockets.Socket" /> di rete sottostante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpClient> Crea un <xref:System.Net.Sockets.Socket> per inviare e ricevere dati in rete. Le classi che derivano da <xref:System.Net.Sockets.TcpClient> questa proprietà consente di ottenere o impostare questo <xref:System.Net.Sockets.Socket>. Utilizzare sottostante <xref:System.Net.Sockets.Socket> restituito da <xref:System.Net.Sockets.TcpClient.Client%2A> se è necessario un accesso diverso da quello <xref:System.Net.Sockets.TcpClient> fornisce. È inoltre possibile utilizzare <xref:System.Net.Sockets.TcpClient.Client%2A> impostare sottostante <xref:System.Net.Sockets.Socket> esistente <xref:System.Net.Sockets.Socket>. Questo potrebbe essere utile se si desidera sfruttare la semplicità di <xref:System.Net.Sockets.TcpClient> utilizzando una già esistente <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.TcpClient.Client%2A> proprietà. In questo esempio, la dimensione del buffer di ricezione dell'oggetto sottostante <xref:System.Net.Sockets.Socket> viene modificato.  
  
 [!code-csharp[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[TcpClientProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpClientProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina questa istanza di <see cref="T:System.Net.Sockets.TcpClient" /> e richiede che la connessione TCP sottostante venga chiusa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.Close%2A> metodo contrassegna l'istanza come eliminata e richiede che l'oggetto associato <xref:System.Net.Sockets.Socket> chiudere la connessione TCP. In base il <xref:System.Net.Sockets.TcpClient.LingerState%2A> proprietà, la connessione TCP può rimanere aperta per qualche tempo dopo il <xref:System.Net.Sockets.TcpClient.Close%2A> metodo viene chiamato quando i dati rimangono da inviare. Non è fornita alcuna notifica quando la connessione sottostante ha completato la chiusura.  
  
 Chiamare questo metodo causa la chiusura dell'oggetto associato <xref:System.Net.Sockets.Socket> e verranno inoltre chiuse associato <xref:System.Net.Sockets.NetworkStream> utilizzato per inviare e ricevere dati se ne è stato creato.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata la chiusura un <xref:System.Net.Sockets.TcpClient> chiamando il <xref:System.Net.Sockets.TcpClient.Close%2A> metodo.  
  
 [!code-cpp[NCLTCPClientSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLTcpClientSync/CPP/tcpclient.cpp#1)]
 [!code-csharp[NCLTCPClientSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Connette il client a un host TCP remoto usando il nome host e il numero di porta specificati.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (remoteEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ remoteEP);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="remoteEP">
          <see cref="T:System.Net.IPEndPoint" /> a cui si intende connettersi.</param>
        <summary>Connette il client a un host TCP remoto usando l'endpoint remoto della rete specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto specificato <xref:System.Net.IPEndPoint>. Prima di chiamare <xref:System.Net.Sockets.TcpClient.Connect%2A> è necessario creare un'istanza di <xref:System.Net.IPEndPoint> classe utilizzando un indirizzo IP e un numero di porta. Utilizzare questo <xref:System.Net.IPEndPoint> come il `remoteEP` parametro. Il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo verrà bloccato fino a quando la connessione avrà esito positivo o negativo. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md)  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare un <xref:System.Net.IPEndPoint> per connettersi a un host remoto.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="remoteEp" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.TcpClient" /> è chiuso.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (address As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ address, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> dell'host a cui si intende connettersi.</param>
        <param name="port">Numero di porta a cui si intende connettersi.</param>
        <summary>Connette il client a un host TCP remoto usando l'indirizzo IP e il numero di porta specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto specificato <xref:System.Net.IPAddress> e numero di porta. Il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo verrà bloccato fino a quando la connessione avrà esito positivo o negativo. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice seguente usa un indirizzo IP e numero di porta per connettersi a un host remoto.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.TcpClient" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress[] ipAddresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress[] ipAddresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (ipAddresses As IPAddress(), port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(cli::array &lt;System::Net::IPAddress ^&gt; ^ ipAddresses, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ipAddresses">Matrice di <see cref="T:System.Net.IPAddress" /> dell'host a cui si intende connettersi.</param>
        <param name="port">Numero di porta a cui si intende connettersi.</param>
        <summary>Connette il client a un host TCP remoto usando gli indirizzi IP e il numero di porta specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene in genere utilizzato immediatamente dopo una chiamata al <xref:System.Net.Dns.BeginGetHostAddresses%2A> (metodo), che può restituire più indirizzi IP per un singolo host. Chiamare il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo per stabilire una connessione sincrona dell'host remoto all'host specificato dalla matrice di <xref:System.Net.IPAddress> elementi e il numero di porta. Il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo verrà bloccato fino a quando la connessione avrà esito positivo o negativo. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library) per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Esempio di codice seguente usa un indirizzo IP e numero di porta per connettersi a un host remoto.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#8)]
 [!code-csharp[System.Net.Sockets.TcpClient1#8](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="ipAddresses" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di porta non è valido.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
        <exception cref="T:System.Security.SecurityException">Un chiamante di livello superiore nello stack di chiamate non ha l'autorizzazione per l'operazione richiesta.</exception>
        <exception cref="T:System.NotSupportedException">Questo metodo è valido per i socket che utilizzano il flag <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nome DNS dell'host remoto a cui si intende connettersi.</param>
        <param name="port">Numero di porta dell'host remoto a cui si intende connettersi.</param>
        <summary>Connette il client alla porta specificata sull'host specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto per il nome host specificato e il numero di porta. Il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo verrà bloccato fino a quando la connessione avrà esito positivo o negativo. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
 Se IPv6 è abilitato e <xref:System.Net.Sockets.TcpClient.Connect%28System.String%2CSystem.Int32%29> metodo viene chiamato per connettersi a un host che si risolve in IPv6 e gli indirizzi IPv4, la connessione all'indirizzo IPv6 verrà tentata prima l'indirizzo IPv4. Ciò può avere l'effetto di ritardare il tempo necessario per stabilire la connessione se l'host non è in ascolto sull'indirizzo IPv6.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Il codice seguente viene utilizzato il nome host e la porta numero per la connessione a un host remoto.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hostname" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.TcpClient" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConnectAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Connette il client a un host TCP remoto usando il nome host e il numero di porta specificati come operazione asincrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (address As IPAddress, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::Net::IPAddress ^ address, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">
          <see cref="T:System.Net.IPAddress" /> dell'host a cui si intende connettersi.</param>
        <param name="port">Numero di porta a cui si intende connettersi.</param>
        <summary>Connette il client a un host TCP remoto usando l'indirizzo IP e il numero di porta specificati come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
 Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. Restituisce i restituito <xref:System.Threading.Tasks.Task> oggetto verrà completata dopo aver stabilita la connessione TCP. Questo metodo non blocca il thread chiamante, mentre la richiesta di connessione è in corso.  
  
 Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto specificato <xref:System.Net.IPAddress> e il numero di porta come operazione asincrona. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="address" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.TcpClient" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (System.Net.IPAddress[] addresses, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(class System.Net.IPAddress[] addresses, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (addresses As IPAddress(), port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(cli::array &lt;System::Net::IPAddress ^&gt; ^ addresses, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addresses" Type="System.Net.IPAddress[]" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addresses">Matrice di <see cref="T:System.Net.IPAddress" /> dell'host a cui si intende connettersi.</param>
        <param name="port">Numero di porta a cui si intende connettersi.</param>
        <summary>Connette il client a un host TCP remoto usando gli indirizzi IP e il numero di porta specificati come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
 Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. Restituisce i restituito <xref:System.Threading.Tasks.Task> oggetto verrà completata dopo aver stabilita la connessione TCP. Questo metodo non blocca il thread chiamante, mentre la richiesta di connessione è in corso.  
  
 Questo metodo viene in genere utilizzato immediatamente dopo una chiamata al <xref:System.Net.Dns.BeginGetHostAddresses%2A> (metodo), che può restituire più indirizzi IP per un singolo host. Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto all'host specificato dalla matrice di <xref:System.Net.IPAddress> elementi e il numero di porta come operazione asincrona. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library) per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="ipAddresses" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il numero di porta non è valido.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
        <exception cref="T:System.Security.SecurityException">Un chiamante di livello superiore nello stack di chiamate non ha l'autorizzazione per l'operazione richiesta.</exception>
        <exception cref="T:System.NotSupportedException">Questo metodo è valido per i socket che utilizzano il flag <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <altmember cref="T:System.Net.Sockets.TcpListener" />
      </Docs>
    </Member>
    <Member MemberName="ConnectAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ConnectAsync (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ConnectAsync(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConnectAsync (host As String, port As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ConnectAsync(System::String ^ host, int port);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">Nome DNS dell'host remoto a cui si intende connettersi.</param>
        <param name="port">Numero di porta dell'host remoto a cui si intende connettersi.</param>
        <summary>Connette il client alla porta TCP specificata sull'host specificato come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
 Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. Restituisce i restituito <xref:System.Threading.Tasks.Task> oggetto verrà completata dopo aver stabilita la connessione TCP. Questo metodo non blocca il thread chiamante, mentre la richiesta di connessione è in corso.  
  
 Chiamare questo metodo per stabilire una connessione sincrona dell'host remoto per il nome host specificato e la porta numero come operazione asincrona. Dopo la connessione all'host remoto, utilizzare il <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere l'oggetto sottostante <xref:System.Net.Sockets.NetworkStream>. Utilizzare questo <xref:System.Net.Sockets.NetworkStream> per inviare e ricevere dati.  
  
 Se IPv6 è abilitato e <xref:System.Net.Sockets.TcpClient.ConnectAsync%28System.String%2CSystem.Int32%29> metodo viene chiamato per connettersi a un host che si risolve in IPv6 e gli indirizzi IPv4, la connessione all'indirizzo IPv6 verrà tentata prima l'indirizzo IPv4. Ciò può avere l'effetto di ritardare il tempo necessario per stabilire la connessione se l'host non è in ascolto sull'indirizzo IPv6.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hostname" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.TcpClient" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpClient.GetStream" />
      </Docs>
    </Member>
    <Member MemberName="Connected">
      <MemberSignature Language="C#" Value="public bool Connected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Connected" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.Connected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Connected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante di un oggetto <see cref="T:System.Net.Sockets.TcpClient" /> è connesso a un host remoto.</summary>
        <value>
          <see langword="true" /> se il socket <see cref="P:System.Net.Sockets.TcpClient.Client" /> è stato connesso a una risorsa remota nel corso dell'operazione più recente, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.Connected%2A> proprietà ottiene lo stato della connessione di <xref:System.Net.Sockets.TcpClient.Client%2A> socket nel corso dell'ultima operazione dei / o. Quando restituisce `false`, <xref:System.Net.Sockets.TcpClient.Client%2A> socket non si era mai connesso o non è più connesso.  
  
 Poiché il <xref:System.Net.Sockets.TcpClient.Connected%2A> proprietà riflette solo lo stato della connessione nel corso dell'operazione più recente, è consigliabile tentare di inviare o ricevere un messaggio per determinare lo stato corrente. Dopo l'invio del messaggio ha esito negativo, questa proprietà non restituisce più `true`. Si noti che questo comportamento è strutturale. È possibile verificare lo stato della connessione in modo affidabile poiché, nel periodo di tempo tra il test e di invio/ricezione, la connessione potrebbe essere andato persa. Il codice deve presupporre il socket è connesso e normalmente le trasmissioni non riuscite di handle.  
  
   
  
## Examples  
 Esempio di codice seguente si connette a un endpoint remoto e quindi si verifica la connessione.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia le risorse gestite e non gestite usate dall'oggetto <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Impostare su <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Net.Sockets.TcpClient" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato dal metodo pubblico `Dispose()` (metodo) e <xref:System.Object.Finalize%2A> metodo. `Dispose()` richiama il metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama il metodo con `disposing` impostato su `false`.  
  
 Se il parametro `disposing` è `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:System.Net.Sockets.TcpClient> fa riferimento. A tale scopo, viene chiamata la `Dispose()` metodo di ciascun oggetto cui viene fatto riferimento.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Il metodo <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. In caso di override di <see langword="Dispose(Boolean)" />, non fare riferimento a oggetti già eliminati in una chiamata precedente a <see langword="Dispose" />. Per ulteriori informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Per ulteriori informazioni su <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [si esegue l'override del metodo Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndConnect">
      <MemberSignature Language="C#" Value="public void EndConnect (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndConnect(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndConnect (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndConnect(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito da un chiamata a <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</param>
        <summary>Termina un tentativo di connessione sincrona in sospeso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a quando l'operazione è completata. Per eseguire questa operazione in modo sincrono, utilizzare un <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library) per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Esempio di codice seguente è terminato il tentativo di connessione asincrona.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.TcpClient1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Il parametro <paramref name="asyncResult" /> non è stato restituito da una chiamata a un metodo <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</exception>
        <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> è stato precedentemente chiamato per la connessione asincrona.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al <see cref="T:System.Net.Sockets.Socket" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore <see cref="T:System.Boolean" /> che specifica se la classe <see cref="T:System.Net.Sockets.TcpClient" /> consente a un unico client di usare una porta.</summary>
        <value>
          <see langword="true" /> se la classe <see cref="T:System.Net.Sockets.TcpClient" /> consente a un solo client di usare una porta specifica; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" /> per Windows Server 2003 e Windows XP Service Pack 2 e versioni successive e <see langword="false" /> per tutte le altre versioni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, più client possono utilizzare una porta specifica. Tuttavia, solo uno dei client possa eseguire operazioni sul traffico di rete inviato alla porta. È possibile utilizzare il <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> proprietà per impedire che più client utilizzando una porta specifica.  
  
 Questa proprietà deve essere impostata prima di socket sottostante è associato a una porta del client. Se si chiama <xref:System.Net.Sockets.TcpClient.Connect%2A>, <xref:System.Net.Sockets.TcpClient.BeginConnect%2A>, <xref:System.Net.Sockets.TcpClient.%23ctor%28System.Net.IPEndPoint%29>, o <xref:System.Net.Sockets.TcpClient.%23ctor%28System.String%2CSystem.Int32%29>, la porta del client viene associata come effetto collaterale del metodo e successivamente non è possibile impostare il <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> proprietà  
  
   
  
## Examples  
 L'esempio di codice seguente crea un <xref:System.Net.Sockets.TcpClient> Ottiene e imposta il valore della <xref:System.Net.Sockets.TcpClient.ExclusiveAddressUse%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CPP/newtcpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpClient1/CS/newtcpclient.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket sottostante.</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpClient ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia le risorse usate dalla classe <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override del metodo <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Il codice dell'applicazione non deve chiamare questo metodo. un oggetto <xref:System.Object.Finalize%2A> metodo viene richiamato automaticamente durante l'operazione di garbage collection, a meno che la finalizzazione del garbage collector non è stata disabilitata da una chiamata al <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> metodo.  
  
 Il <xref:System.Net.Sockets.TcpClient> classe chiude la connessione TCP e rilascia tutte le risorse gestite associate di <xref:System.Net.Sockets.TcpClient>. Queste risorse includono sottostante <xref:System.Net.Sockets.Socket> utilizzati per la connessione con l'host remoto e <xref:System.Net.Sockets.NetworkStream> utilizzato per inviare e ricevere dati. Il finalizzatore non rilascia risorse non gestite.  
  
 Per ulteriori informazioni, vedere [metodi Finalize e distruttori](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70), [la pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md), e [si esegue l'override del metodo Finalize](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.NetworkStream GetStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.NetworkStream GetStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.GetStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream () As NetworkStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::NetworkStream ^ GetStream();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.NetworkStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce l'oggetto <see cref="T:System.Net.Sockets.NetworkStream" /> usato per inviare e ricevere dati.</summary>
        <returns>Oggetto <see cref="T:System.Net.Sockets.NetworkStream" /> sottostante.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpClient.GetStream%2A> Restituisce un <xref:System.Net.Sockets.NetworkStream> che è possibile utilizzare per inviare e ricevere dati. Il <xref:System.Net.Sockets.NetworkStream> classe eredita la <xref:System.IO.Stream> classe che fornisce una vasta raccolta di metodi e proprietà utilizzati per semplificare le comunicazioni di rete.  
  
 È necessario chiamare il <xref:System.Net.Sockets.TcpClient.Connect%2A> metodo prima di tutto, o <xref:System.Net.Sockets.TcpClient.GetStream%2A> metodo genererà un' <xref:System.InvalidOperationException>. Dopo aver ottenuto il <xref:System.Net.Sockets.NetworkStream>, chiamare il <xref:System.Net.Sockets.NetworkStream.Write%2A> metodo per inviare dati all'host remoto. Chiamare il <xref:System.Net.Sockets.NetworkStream.Read%2A> per ricevere i dati provenienti dall'host remoto. Entrambi questi metodi bloccati finché non viene eseguita l'operazione specificata. È possibile evitare il blocco su un'operazione di lettura verificando la <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> proprietà. Oggetto `true` valore indica che i dati sono arrivati dall'host remoto e sono disponibili per la lettura. In questo caso, <xref:System.Net.Sockets.NetworkStream.Read%2A> è garantita per completare immediatamente. Se l'host remoto ha chiuso la connessione, <xref:System.Net.Sockets.NetworkStream.Read%2A> verrà restituito immediatamente con zero byte.  
  
> [!NOTE]
>  È necessario chiudere il <xref:System.Net.Sockets.NetworkStream> quando si è l'invio e ricezione di dati. Chiusura <xref:System.Net.Sockets.TcpClient> non rilascia la <xref:System.Net.Sockets.NetworkStream>.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, utilizzare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile fare riferimento alla documentazione relativa ai codice di errore dell'API Windows Sockets versione 2 disponibile in MSDN per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso. Per ulteriori informazioni, vedere [traccia di rete in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Nell'esempio di codice viene illustrato come utilizzare <xref:System.Net.Sockets.TcpClient.GetStream%2A> per ottenere il sottostante <xref:System.Net.Sockets.NetworkStream>. Dopo aver ottenuto il <xref:System.Net.Sockets.NetworkStream>, invia e riceve tramite i relativi <xref:System.Net.Sockets.NetworkStream.Write%2A> e <xref:System.Net.Sockets.NetworkStream.Read%2A> metodi.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#14)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#14)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Il <see cref="T:System.Net.Sockets.TcpClient" /> non è connesso a un host remoto.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.TcpClient" /> è stato chiuso.</exception>
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LingerState">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.LingerOption LingerState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.LingerOption LingerState" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.LingerState" />
      <MemberSignature Language="VB.NET" Value="Public Property LingerState As LingerOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::LingerOption ^ LingerState { System::Net::Sockets::LingerOption ^ get(); void set(System::Net::Sockets::LingerOption ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.LingerOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le informazioni sullo stato di ritardo del socket associato.</summary>
        <value>Oggetto <see cref="T:System.Net.Sockets.LingerOption" />. Per impostazione predefinita, il tempo di ritardo è disabilitato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.LingerState%2A> proprietà cambia la modalità <xref:System.Net.Sockets.Socket.Close%2A> comportamento del metodo. Questa proprietà quando è impostata Modifica le condizioni in cui è possibile reimpostare la connessione da Winsock. Connessione può essere reimpostata in base al comportamento del protocollo IP.  
  
 Questa proprietà controlla il periodo di tempo che la connessione TCP resterà aperta dopo una chiamata a <xref:System.Net.Sockets.TcpClient.Close%2A> quando i dati rimangono da inviare. Quando si chiama il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo), dati viene inserito nel buffer di rete in uscita. Questa proprietà può essere utilizzata per garantire che i dati siano inviati all'host remoto prima di <xref:System.Net.Sockets.TcpClient.Close%2A> metodo elimina la connessione.  
  
 Per abilitare il tempo di ritardo, creare un <xref:System.Net.Sockets.LingerOption> istanza contenente i valori desiderati, quindi impostare il <xref:System.Net.Sockets.TcpClient.LingerState%2A> proprietà a questa istanza.  
  
 Nella tabella seguente viene descritto il comportamento del <xref:System.Net.Sockets.TcpClient.Close%2A> metodo per i valori possibili del <xref:System.Net.Sockets.LingerOption.Enabled%2A> proprietà e <xref:System.Net.Sockets.LingerOption.LingerTime%2A> proprietà archiviata nel <xref:System.Net.Sockets.TcpClient.LingerState%2A> proprietà.  
  
|LingerState.Enabled|LingerState.LingerTime|Comportamento|  
|-------------------------|----------------------------|--------------|  
|`false` (disabilitato), il valore predefinito|Il timeout non è applicabile, (impostazione predefinita).|Tenta di inviare dati in sospeso finché non scade il timeout di protocollo IP predefinito.|  
|`true` (abilitata)|Un periodo di timeout diverso da zero|Tenta di inviare dati in sospeso finché non scade il timeout specificato, se il tentativo non riesce, Winsock reimposta la connessione.|  
|`true` (abilitata)|Un timeout pari a zero.|Ignora tutti i dati in sospeso e Winsock reimposta la connessione.|  
  
 Lo stack IP calcola il periodo di timeout predefinito protocollo IP da utilizzare in base all'ora di round trip della connessione. Nella maggior parte dei casi, il timeout calcolato dallo stack è più utile rispetto a quello definito da un'applicazione. Si tratta del comportamento predefinito per un socket quando il <xref:System.Net.Sockets.TcpClient.LingerState%2A> non è impostata.  
  
 Quando il <xref:System.Net.Sockets.LingerOption.LingerTime%2A> proprietà archiviata nel <xref:System.Net.Sockets.TcpClient.LingerState%2A> proprietà è maggiore del timeout di protocollo IP predefinito, il timeout del protocollo IP predefinito verrà comunque applicare ed eseguire l'override.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito viene imposta e ottiene il ritardo del socket ora.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#12)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#12)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#12](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.LingerOption" />
        <altmember cref="M:System.Net.Sockets.TcpClient.Close" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NoDelay">
      <MemberSignature Language="C#" Value="public bool NoDelay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NoDelay" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.NoDelay" />
      <MemberSignature Language="VB.NET" Value="Public Property NoDelay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NoDelay { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che disabilita un ritardo quando i buffer di invio o di ricezione non sono pieni.</summary>
        <value>
          <see langword="true" /> se il ritardo è disabilitato, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Net.Sockets.TcpClient.NoDelay%2A> è `false`, <xref:System.Net.Sockets.TcpClient> non invia un pacchetto tramite la rete prima di avere raccolto una quantità significativa di dati in uscita. A causa della quantità di overhead in un segmento TCP, l'invio di piccole quantità di dati è inefficiente. Tuttavia, esistono situazioni in cui è necessario inviare piccole quantità di dati o ottenere risposte immediate da ogni pacchetto inviato. La decisione è opportuno valutare l'importanza relativa dell'efficienza della rete e i requisiti dell'applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente disabilita il ritardo. E viene controllato il valore di <xref:System.Net.Sockets.TcpClient.NoDelay%2A> per verificare che la proprietà è stata impostata correttamente.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveBufferSize">
      <MemberSignature Language="C#" Value="public int ReceiveBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la dimensione del buffer di ricezione.</summary>
        <value>Dimensione del buffer di ricezione, espressa in byte. Il valore predefinito è 8192 byte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> proprietà ottiene o imposta il numero di byte che si prevede di archiviare nel buffer di ricezione per ogni operazione di lettura. Questa proprietà consente di modificare effettivamente lo spazio di buffer di rete allocato per la ricezione di dati in arrivo.  
  
 Il buffer di rete deve essere uguali almeno alle dimensioni del buffer di applicazione per assicurarsi che i dati desiderati saranno disponibili quando si chiama il <xref:System.Net.Sockets.NetworkStream.Read%2A?displayProperty=nameWithType> metodo. Utilizzare il <xref:System.Net.Sockets.TcpClient.ReceiveBufferSize%2A> proprietà per impostare le dimensioni. Se l'applicazione riceverà bulk dei dati, è necessario passare il <xref:System.Net.Sockets.NetworkStream.Read%2A> metodo un buffer di applicazione di grandi dimensioni.  
  
 Se il buffer di rete è inferiore rispetto alla quantità di dati richiesta nel <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo), non sarà in grado di recuperare la quantità di dati in un'operazione di lettura desiderata. Questo genera un overhead di chiamate aggiuntive al <xref:System.Net.Sockets.NetworkStream.Read%2A> metodo.  
  
   
  
## Examples  
 Esempio di codice seguente imposta e ottiene la dimensione del buffer di ricezione.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'impostazione delle dimensioni del buffer.  
  
 oppure  
  
 Nelle applicazioni di .NET Compact Framework non è possibile impostare questa proprietà. Per risolvere il problema, vedere la nota sulla piattaforma nella sezione Osservazioni.</exception>
        <altmember cref="P:System.Net.Sockets.TcpClient.SendBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveTimeout">
      <MemberSignature Language="C#" Value="public int ReceiveTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceiveTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ReceiveTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ReceiveTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tempo per cui un <see cref="T:System.Net.Sockets.TcpClient" /> attende la ricezione di dati dopo l'inizio di un'operazione di lettura.</summary>
        <value>Valore di timeout della connessione in millisecondi. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.ReceiveTimeout%2A> proprietà determina la quantità di tempo che il <xref:System.Net.Sockets.NetworkStream.Read%2A> metodo verrà bloccato fino a quando non è in grado di ricevere i dati. Questo tempo viene misurato in millisecondi. Se il timeout scade prima <xref:System.Net.Sockets.NetworkStream.Read%2A> è stata completata correttamente, <xref:System.Net.Sockets.TcpClient> genera un <xref:System.IO.IOException>. Per impostazione predefinita non è impostato alcun timeout.  
  
   
  
## Examples  
 Esempio di codice seguente imposta e ottiene il valore di timeout di ricezione.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.SendTimeout" />
      </Docs>
    </Member>
    <Member MemberName="SendBufferSize">
      <MemberSignature Language="C#" Value="public int SendBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property SendBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendBufferSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la dimensione del buffer di invio.</summary>
        <value>Dimensione del buffer di invio, espressa in byte. Il valore predefinito è 8192 byte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> proprietà ottiene o imposta il numero di byte che si prevede di inviare in ogni chiamata al <xref:System.Net.Sockets.NetworkStream.Write%2A?displayProperty=nameWithType> metodo. Questa proprietà modifica lo spazio di buffer di rete allocato per l'operazione di invio.  
  
 Il buffer di rete debba essere uguali almeno alle dimensioni del buffer di applicazione per assicurarsi che i dati desiderati verranno memorizzati e inviati in un'unica operazione. Utilizzare il <xref:System.Net.Sockets.TcpClient.SendBufferSize%2A> proprietà per impostare le dimensioni. Se l'applicazione verrà inviato bulk dei dati, è necessario passare il <xref:System.Net.Sockets.NetworkStream.Write%2A> metodo un buffer di applicazione di grandi dimensioni.  
  
 Se il buffer di rete è inferiore rispetto alla quantità di dati forniscono il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo), diversi operazioni verranno eseguite per ogni chiamata di trasmissione di rete di <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). È possibile ottenere maggiore velocità effettiva dei dati assicurando che il buffer di rete sia uguali almeno alle dimensioni del buffer di applicazione.  
  
   
  
## Examples  
 Esempio di codice seguente imposta e ottiene la dimensione del buffer di trasmissione.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveBufferSize" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SendTimeout">
      <MemberSignature Language="C#" Value="public int SendTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpClient.SendTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property SendTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SendTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il tempo per cui un <see cref="T:System.Net.Sockets.TcpClient" /> attende che un'operazione di invio venga completata.</summary>
        <value>Valore del timeout di invio in millisecondi. Il valore predefinito è 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> proprietà determina la quantità di tempo che il <xref:System.Net.Sockets.Socket.Send%2A> metodo verrà bloccato fino a quando non è in grado di restituire correttamente. Questo tempo viene misurato in millisecondi.  
  
 Dopo aver chiamato il <xref:System.Net.Sockets.NetworkStream.Write%2A> metodo sottostante <xref:System.Net.Sockets.Socket> restituisce il numero di byte effettivamente inviati all'host. Il <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> proprietà determina la quantità di tempo un <xref:System.Net.Sockets.TcpClient> attenderà prima di ricevere il numero di byte restituito. Se il timeout scade prima di <xref:System.Net.Sockets.Socket.Send%2A> metodo viene completato correttamente, <xref:System.Net.Sockets.TcpClient> genererà un <xref:System.Net.Sockets.SocketException>. Per impostazione predefinita non è impostato alcun timeout.  
  
   
  
## Examples  
 Esempio di codice seguente imposta e ottiene il <xref:System.Net.Sockets.TcpClient.SendTimeout%2A> valore.  
  
 [!code-cpp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[ClassicTcpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ClassicTcpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="P:System.Net.Sockets.TcpClient.ReceiveTimeout" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>