<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TcpListener.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac570b4efe2d402b27e3285b56bb7a50aff7def9e09.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">70b4efe2d402b27e3285b56bb7a50aff7def9e09</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Listens for connections from TCP network clients.</source>
          <target state="translated">Vengono attese le connessioni dai client di rete TCP.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class provides simple methods that listen for and accept incoming connection requests in blocking synchronous mode.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> classe fornisce metodi semplici che attendono e accettano le richieste di connessione in ingresso in modalità sincrona di blocco.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You can use either a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> or a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to connect with a <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">È possibile utilizzare un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> o <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> per la connessione con un <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Create a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, a Local IP address and port number, or just a port number.</source>
          <target state="translated">Creare un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> utilizzando un <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>, un indirizzo IP locale e il numero di porta o un numero di porta.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> for the local IP address and 0 for the local port number if you want the underlying service provider to assign those values for you.</source>
          <target state="translated">Specificare <ph id="ph1">&lt;xref:System.Net.IPAddress.Any&gt;</ph> per l'indirizzo IP locale e 0 per il numero di porta locale se si desidera il provider del servizio sottostante per assegnare i valori per l'utente.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you choose to do this, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the assigned information, after the socket has connected.</source>
          <target state="translated">Se si sceglie di eseguire questa operazione, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> proprietà per identificare le informazioni assegnate, dopo la connessione del socket.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo può mettersi in ascolto delle richieste di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue incoming connections until you either call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method or it has queued <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> verranno inseriti nella coda le connessioni in ingresso fino alla chiamata di <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo o all'accodamento <ph id="ph3">&lt;xref:System.Net.Sockets.SocketOptionName.MaxConnections&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Use either <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> to pull a connection from the incoming connection request queue.</source>
          <target state="translated">Utilizzare uno <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> per estrarre una connessione dalla coda di richieste di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>These two methods will block.</source>
          <target state="translated">Questi due metodi verranno bloccata.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>If you want to avoid blocking, you can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method first to determine if connection requests are available in the queue.</source>
          <target state="translated">Se si desidera evitare il blocco, è possibile utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> metodo per determinare se sono disponibili nella coda di richieste di connessione.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo per chiudere la <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method does not close any accepted connections.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo non chiude le connessioni accettate.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>You are responsible for closing these separately.</source>
          <target state="translated">È responsabili della chiusura questi separatamente.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</source>
          <target state="translated">L'esempio di codice seguente crea un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>See <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for a client example.</source>
          <target state="translated">Vedere <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> per un esempio di client.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.TcpListener">
          <source>to establish an outgoing connection or accept an incoming request.</source>
          <target state="translated">per stabilire una connessione in uscita o accettare una richiesta in ingresso.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">Porta su cui attendere i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens on the specified port.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> che è in attesa sulla porta specificata.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor is obsolete.</source>
          <target state="translated">Questo costruttore è obsoleto.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph> constructors.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType&gt;</ph> costruttori.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>This constructor allows you to specify the port number on which to listen for incoming connection attempts.</source>
          <target state="translated">Questo costruttore consente di specificare il numero di porta su cui restare in attesa per i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>With this constructor, the underlying service provider assigns the most appropriate network address.</source>
          <target state="translated">Con questo costruttore, il provider del servizio sottostante assegna l'indirizzo di rete più appropriato.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">Se non si desidera eseguire la porta locale utilizzata, è possibile specificare 0 per il numero di porta.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">In questo caso, il provider del servizio verrà assegnato un numero di porte effimere disponibili.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> (metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> using a local port number.</source>
          <target state="translated">L'esempio di codice seguente crea un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> utilizzando un numero di porta locale.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="port" /&gt;</ph> non è compreso tra <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> e <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph> that represents the local endpoint to which to bind the listener <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPEndPoint" /&gt;</ph> che rappresenta l'endpoint locale a cui associare il <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> listener.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class with the specified local endpoint.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> con l'endpoint locale specificato.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">Questo costruttore consente di specificare l'indirizzo IP locale e tenta di numero di porta su cui restare in attesa per la connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Before using this constructor, you must create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using the desired local IP address and port number.</source>
          <target state="translated">Prima di utilizzare questo costruttore, è necessario creare un <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> utilizzando il numero porta e indirizzo IP locale desiderato.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> to the constructor as the <ph id="ph2">`localEP`</ph> parameter.</source>
          <target state="translated">Passare la variabile <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> al costruttore come il <ph id="ph2">`localEP`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local address is assigned, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using <ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> as the address parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">Se non si desidera viene assegnato l'indirizzo locale, è possibile creare un <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> utilizzando <ph id="ph2">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> come parametro l'indirizzo e il servizio sottostante provider verrà assegnato l'indirizzo di rete più appropriato.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">In questo modo è possibile semplificare l'applicazione se si dispongono di più interfacce di rete.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you do not care which local port is used, you can create an <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> using 0 for the port number.</source>
          <target state="translated">Se non si desidera eseguire la porta locale utilizzata, è possibile creare un <ph id="ph1">&lt;xref:System.Net.IPEndPoint&gt;</ph> utilizzando 0 per il numero di porta.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>In this case, the service provider will assign an available ephemeral port number.</source>
          <target state="translated">In questo caso, il provider del servizio verrà assegnato un numero di porte effimere disponibili.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> (metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using the local endpoint.</source>
          <target state="translated">Esempio di codice seguente crea un'istanza di <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> classe utilizzando l'endpoint locale.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
          <source><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localEP" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> that represents the local IP address.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.IPAddress" /&gt;</ph> che rappresenta l'indirizzo IP locale.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">Porta su cui attendere i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> class that listens for incoming connection attempts on the specified local IP address and port number.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> in attesa dei tentativi di connessione in ingrasso sull'indirizzo IP e sul numero di porta specificati.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This constructor allows you to specify the local IP address and port number on which to listen for incoming connection attempts.</source>
          <target state="translated">Questo costruttore consente di specificare l'indirizzo IP locale e tenta di numero di porta su cui restare in attesa per la connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Before calling this constructor you must first create an <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> using the desired local address.</source>
          <target state="translated">Prima di chiamare questo costruttore è necessario creare innanzitutto un <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> utilizzando l'indirizzo locale desiderato.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Pass this <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> to the constructor as the <ph id="ph2">`localaddr`</ph> parameter.</source>
          <target state="translated">Passare la variabile <ph id="ph1">&lt;xref:System.Net.IPAddress&gt;</ph> al costruttore come il <ph id="ph2">`localaddr`</ph> parametro.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local address is assigned, specify <ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> for the <ph id="ph2">`localaddr`</ph> parameter, and the underlying service provider will assign the most appropriate network address.</source>
          <target state="translated">Se non si desidera viene assegnato l'indirizzo locale, specificare <ph id="ph1">&lt;xref:System.Net.IPAddress.Any?displayProperty=nameWithType&gt;</ph> per il <ph id="ph2">`localaddr`</ph> parametro e il provider del servizio sottostante assegnerà l'indirizzo di rete più appropriato.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This might help simplify your application if you have multiple network interfaces.</source>
          <target state="translated">In questo modo è possibile semplificare l'applicazione se si dispongono di più interfacce di rete.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you do not care which local port is used, you can specify 0 for the port number.</source>
          <target state="translated">Se non si desidera eseguire la porta locale utilizzata, è possibile specificare 0 per il numero di porta.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>In this case, the service provider will assign an available port number between 1024 and 5000.</source>
          <target state="translated">In questo caso, il provider del servizio verrà assegnato un numero di porta disponibile tra 1024 e 5000.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>If you use this approach, you can discover what local network address and port number has been assigned by using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property.</source>
          <target state="translated">Se si utilizza questo approccio, è possibile individuare il numero di porta e indirizzo di rete locale è stato assegnato utilizzando il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>Call the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection attempts.</source>
          <target state="translated">Chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> (metodo) deve rimanere in attesa per i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> class using a local IP address and port number.</source>
          <target state="translated">Esempio di codice seguente crea un'istanza di <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> classe utilizzando un numero di porta e indirizzo IP locale.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localaddr" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="port" /&gt;</ph> is not between <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="port" /&gt;</ph> non è compreso tra <ph id="ph2">&lt;see cref="F:System.Net.IPEndPoint.MinPort" /&gt;</ph> e <ph id="ph3">&lt;see cref="F:System.Net.IPEndPoint.MaxPort" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>Accepts a pending connection request.</source>
          <target state="translated">Accetta una richiesta di connessione in sospeso.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> utilizzato per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> un metodo di blocco che restituisce un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> che è possibile utilizzare per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If you want to avoid blocking, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue.</source>
          <target state="translated">Se si desidera evitare il blocco, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> metodo per determinare se le richieste di connessione sono disponibili nella coda di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned is initialized with the IP address and port number of the remote host.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> restituito viene inizializzato con il numero di porta e indirizzo IP dell'host remoto.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">È possibile utilizzare uno qualsiasi del <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> metodi disponibili nel <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> classe per comunicare con l'host remoto.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, verificare di chiamare il relativo <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione è relativamente semplice, considerare l'utilizzo di <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo anziché <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> fornisce metodi semplici per l'invio e ricezione di dati in una rete in modalità sincrona di blocco.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Nell'esempio di codice seguente, il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo viene utilizzato per restituire un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">Questo <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> viene utilizzato per comunicare con il client appena connesso.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocket">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">Il listener non è stato avviato con una chiamata a <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">Accetta una richiesta di connessione in sospeso come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">La proprietà <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> nell'oggetto attività restituisce <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> utilizzato per inviare e ricevere i dati.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the socket connection has been accepted.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetto verrà completato dopo che la connessione socket è stata accettata.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned in <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> is initialized with the IP address and port number of the remote host.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> restituito in <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> viene inizializzato con il numero di porta e indirizzo IP dell'host remoto.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>You can use any of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> methods available in the <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> class to communicate with the remote host.</source>
          <target state="translated">È possibile utilizzare uno qualsiasi del <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.Send%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Receive%2A&gt;</ph> metodi disponibili nel <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> classe per comunicare con l'host remoto.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> method.</source>
          <target state="translated">Quando si è finito utilizzando il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, verificare di chiamare il relativo <ph id="ph2">&lt;xref:System.Net.Sockets.Socket.Close%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>If your application is relatively simple, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method rather than the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph> method.</source>
          <target state="translated">Se l'applicazione è relativamente semplice, considerare l'utilizzo di <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo anziché <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph> (metodo).</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> provides you with simple methods for sending and receiving data over a network in blocking synchronous mode.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> fornisce metodi semplici per l'invio e ricezione di dati in una rete in modalità sincrona di blocco.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">Il listener non è stato avviato con una chiamata a <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Accepts a pending connection request.</source>
          <target state="translated">Accetta una richiesta di connessione in sospeso.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> utilizzato per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> is a blocking method that returns a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> un metodo di blocco che restituisce un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> che è possibile utilizzare per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method to determine if connection requests are available in the incoming connection queue if you want to avoid blocking.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> metodo per determinare se le richieste di connessione sono disponibili nella coda di connessione in ingresso, se si desidera evitare il blocco.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> per ottenere l'oggetto sottostante <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> dell'oggetto restituito <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> fornirà i metodi per l'invio e ricezione con l'host remoto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">Quando si è tramite il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, verificare di chiamare il relativo <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">Se si desidera maggiore flessibilità rispetto a un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offerte, è consigliabile utilizzare <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>In the following code example, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is used to return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">Nell'esempio di codice seguente, il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo viene utilizzato per restituire un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>This <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> is used to communicate with the newly connected client.</source>
          <target state="translated">Questo <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> viene utilizzato per comunicare con il client appena connesso.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">Il listener non è stato avviato con una chiamata a <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">Per ottenere il codice di errore specificato, utilizzare la proprietà <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Una volta ottenuto il codice, è possibile trovare una descrizione dettagliata dell'errore nella documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 in MSDN.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Accepts a pending connection request as an asynchronous operation.</source>
          <target state="translated">Accetta una richiesta di connessione in sospeso come operazione asincrona.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph></source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Oggetto dell'attività che rappresenta l'operazione asincrona.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> property on the task object returns a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">La proprietà <ph id="ph1">&lt;see cref="P:System.Threading.Tasks.Task`1.Result" /&gt;</ph> nell'oggetto attività restituisce <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> utilizzato per inviare e ricevere i dati.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This operation will not block.</source>
          <target state="translated">Questa operazione non verrà bloccata.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the TCP connection has been accepted.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> oggetto verrà completato dopo che è stata accettata la connessione TCP.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> method to obtain the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> of the returned <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> in the <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType&gt;</ph> per ottenere l'oggetto sottostante <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> dell'oggetto restituito <ph id="ph3">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> nel <ph id="ph4">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> will provide you with methods for sending and receiving with the remote host.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> fornirà i metodi per l'invio e ricezione con l'host remoto.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you are through with the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, be sure to call its <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> method.</source>
          <target state="translated">Quando si è tramite il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, verificare di chiamare il relativo <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Close%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>If you want greater flexibility than a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offers, consider using <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>.</source>
          <target state="translated">Se si desidera maggiore flessibilità rispetto a un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> offerte, è consigliabile utilizzare <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> o <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">Il listener non è stato avviato con una chiamata a <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">Per ottenere il codice di errore specificato, utilizzare la proprietà <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Una volta ottenuto il codice, è possibile trovare una descrizione dettagliata dell'errore nella documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 in MSDN.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Gets a value that indicates whether <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening for client connections.</source>
          <target state="translated">Ottiene un valore che indica se <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> è attivamente in attesa di connessioni client.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> is actively listening; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> è attivamente in attesa; in caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to determine if the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is currently listening for incoming connection attempts.</source>
          <target state="translated">Le classi che derivano da <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> possibile utilizzare questa proprietà per determinare se il <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> è attualmente in attesa per i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Active">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> property can be used to avoid redundant <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> attempts.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpClient.Active%2A&gt;</ph> proprietà può essere utilizzata per evitare la ridondanza <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> tentativi.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Boolean value that specifies whether to enable or disable NAT traversal.</source>
          <target state="translated">Valore booleano che specifica se abilitare o disabilitare l'attraversamento NAT.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Enables or disables Network Address Translation (NAT) traversal on a <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance.</source>
          <target state="translated">Abilita o disabilita l'attraversamento NAT (Network Address Translation) in un'istanza di <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is used to enable or disable NAT traversal for a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> consente di abilitare o disabilitare l'attraversamento NAT per un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> istanza.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>NAT traversal may be provided using Teredo, 6to4, or an ISATAP tunnel.</source>
          <target state="translated">È possibile specificare l'attraversamento NAT con Teredo, 6to4 o un tunnel ISATAP.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is false, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.</source>
          <target state="translated">Quando il <ph id="ph1">`allowed`</ph> parametro è false, il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> opzione sul socket associato è impostata su <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This explicitly disables NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> instance.</source>
          <target state="translated">Disabilita in modo esplicito l'attraversamento NAT per un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> istanza.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>When the <ph id="ph1">`allowed`</ph> parameter is true, the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> option on the associated socket is set to <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.</source>
          <target state="translated">Quando il <ph id="ph1">`allowed`</ph> parametro è true, il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel&gt;</ph> opzione sul socket associato è impostata su <ph id="ph3">&lt;xref:System.Net.Sockets.IPProtectionLevel.Unrestricted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>This may allow NAT traversal for a <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> depending on firewall rules in place on the system.</source>
          <target state="translated">Può consentire l'attraversamento NAT per un <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> a seconda delle regole del firewall sul posto del sistema.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method must be invoked prior to calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method to begin listening for incoming connection requests (before the socket is bound).</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> metodo deve essere richiamato prima di chiamare il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo può mettersi in ascolto delle richieste di connessione in ingresso (prima che venga associato il socket).</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> method is called after the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method, then an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A&gt;</ph> metodo viene chiamato dopo il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> (metodo), quindi un <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> verrà generata.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>A Teredo address is an IPv6 address with the prefix of 2001::/32.</source>
          <target state="translated">Un indirizzo Teredo è un indirizzo IPv6 con il prefisso 2001::/ / 32.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>Teredo addresses can be returned through normal DNS name resolution or enumerated as an IPv6 address assigned to a local interface.</source>
          <target state="translated">Gli indirizzi Teredo possono essere restituiti tramite normale risoluzione dei nomi DNS o enumerati come un indirizzo IPv6 assegnato a un'interfaccia locale.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> method was called after calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph> method</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /&gt;</ph> è stato chiamato dopo avere chiamato il metodo <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">Oggetto definito dall'utente contenente informazioni sull'operazione di accettazione.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">L'oggetto viene passato al delegato <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">Avvia un'operazione asincrona per accettare un tentativo di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che fa riferimento alla creazione asincrona di <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Asincrona <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> operazione deve essere completata chiamando il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">In genere, il metodo viene richiamato dal <ph id="ph1">`callback`</ph> delegato.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">Questo metodo si blocca fino al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Per il blocco fino al completamento dell'operazione, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> proprietà dell'oggetto restituito <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> per identificare il numero porta e indirizzo di rete dell'host remoto.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">Se si riceve un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, usare il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> per dettagliate Descrizione dell'errore.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> per creare e collegare un socket.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">Il delegato di callback chiama il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> metodo per terminare la richiesta asincrona.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">Si è verificato un errore durante il tentativo di accesso al socket.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> è stato chiuso.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that references the method to invoke when the operation is complete.</source>
          <target state="translated">Delegato <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>A user-defined object containing information about the accept operation.</source>
          <target state="translated">Oggetto definito dall'utente contenente informazioni sull'operazione di accettazione.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This object is passed to the <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> delegate when the operation is complete.</source>
          <target state="translated">L'oggetto viene passato al delegato <bpt id="p1">&lt;c&gt;</bpt>callback<ept id="p1">&lt;/c&gt;</ept> al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous operation to accept an incoming connection attempt.</source>
          <target state="translated">Avvia un'operazione asincrona per accettare un tentativo di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that references the asynchronous creation of the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> che fa riferimento alla creazione asincrona di <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The asynchronous <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> operation must be completed by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">Asincrona <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> operazione deve essere completata chiamando il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>Typically, the method is invoked by the <ph id="ph1">`callback`</ph> delegate.</source>
          <target state="translated">In genere, il metodo viene richiamato dal <ph id="ph1">`callback`</ph> delegato.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This method does not block until the operation completes.</source>
          <target state="translated">Questo metodo si blocca fino al completamento dell'operazione.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>To block until the operation completes, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">Per il blocco fino al completamento dell'operazione, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For detailed information about using the asynchronous programming model, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere <bpt id="p1">[</bpt>la chiamata dei metodi sincroni<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">Se si riceve un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, usare il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> per dettagliate Descrizione dell'errore.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> per creare e collegare un socket.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">Il delegato di callback chiama il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> metodo per terminare la richiesta asincrona.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>An error occurred while attempting to access the socket.</source>
          <target state="translated">Si è verificato un errore durante il tentativo di accesso al socket.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">L'oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> è stato chiuso.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>The port on which to listen for incoming connection attempts.</source>
          <target state="translated">Porta su cui attendere i tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">Crea una nuova istanza di <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> in ascolto sulla porta specificata.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">Restituisce <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> instance to listen on the specified port.</source>
          <target state="translated">Nuova istanza di <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> in ascolto sulla porta specificata.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> restituito da una chiamata al metodo <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">Accetta in modo asincrono una connessione in ingresso e crea un nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> per gestire la comunicazione con l'host remoto.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> utilizzato per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">Questo metodo si blocca fino a quando l'operazione è completata.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Per eseguire questa operazione in modo sincrono, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the returned <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to identify the remote host's network address and port number.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> proprietà dell'oggetto restituito <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> per identificare il numero porta e indirizzo di rete dell'host remoto.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">Se si riceve un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, usare il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> per dettagliate Descrizione dell'errore.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A&gt;</ph> per creare e collegare un socket.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">Il delegato di callback chiama il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A&gt;</ph> metodo per terminare la richiesta asincrona.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sottostante è stato chiuso.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Il valore del parametro <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> è <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter was not created by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> non è stato creato da una chiamata al metodo <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> method was previously called.</source>
          <target state="translated">Il metodo <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /&gt;</ph> è stato chiamato precedentemente.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
          <source>An error occurred while attempting to access the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Si è verificato un errore durante il tentativo di accesso al <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> returned by a call to the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> restituito da una chiamata al metodo <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>Asynchronously accepts an incoming connection attempt and creates a new <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> to handle remote host communication.</source>
          <target state="translated">Accetta in modo asincrono una connessione in ingresso e crea un nuovo oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> per gestire la comunicazione con l'host remoto.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> used to send and receive data.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpClient" /&gt;</ph> utilizzato per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This method blocks until the operation is complete.</source>
          <target state="translated">Questo metodo si blocca fino a quando l'operazione è completata.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>To perform this operation synchronously, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method.</source>
          <target state="translated">Per eseguire questa operazione in modo sincrono, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>You can call the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> property of the underlying socket (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) to identify the remote host's network address and port number.</source>
          <target state="translated">È possibile chiamare il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.RemoteEndPoint%2A&gt;</ph> proprietà del socket sottostante (<ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient.Client%2A&gt;</ph>) per identificare il numero porta e indirizzo di rete dell'host remoto.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph3">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">Se si riceve un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, usare il <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al <bpt id="p1">[</bpt> <ph id="ph3">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> per dettagliate Descrizione dell'errore.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> method to create and connect a socket.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A&gt;</ph> per creare e collegare un socket.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
          <source>The callback delegate calls the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> method to end the asynchronous request.</source>
          <target state="translated">Il delegato di callback chiama il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A&gt;</ph> metodo per terminare la richiesta asincrona.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Gets or sets a <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> value that specifies whether the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one underlying socket to listen to a specific port.</source>
          <target state="translated">Ottiene o imposta un valore <ph id="ph1">&lt;see cref="T:System.Boolean" /&gt;</ph> che specifica se il <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> consente a un unico socket sottostante di restare in attesa di una porta specifica.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> allows only one <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> to listen to a specific port; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se il <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> consente a un solo <ph id="ph3">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> di restare in attesa di una porta specifica; in caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>.</source>
          <target state="translated">.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <ph id="ph2">&lt;see langword="false" /&gt;</ph> for all other versions.</source>
          <target state="translated">Il valore predefinito è <ph id="ph1">&lt;see langword="true" /&gt;</ph> per Windows Server 2003 e Windows XP Service Pack 2 e versioni successive e <ph id="ph2">&lt;see langword="false" /&gt;</ph> per tutte le altre versioni.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>By default, multiple listeners can listen to a specific port.</source>
          <target state="translated">Per impostazione predefinita, più listener può restare in ascolto su una porta specifica.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>However, only one of the listeners can perform operations on the network traffic sent to the port.</source>
          <target state="translated">Tuttavia, solo uno dei listener può eseguire operazioni sul traffico di rete inviato alla porta.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>If more than one listener attempts to bind to a particular port, then the one with the more specific IP address handles the network traffic sent to that port.</source>
          <target state="translated">Se più di un listener tenta di associare a una porta specifica, quella con l'indirizzo IP più specifico gestisce il traffico di rete inviato alla porta.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph> property to prevent multiple listeners from listening to a specific port.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A&gt;</ph> proprietà per impedire a una porta specifica in attesa di più listener.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Set this property before calling <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>, or call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method and then set this property.</source>
          <target state="translated">Impostare questa proprietà prima di chiamare <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph>, oppure chiamare il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> (metodo) e quindi impostare questa proprietà.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The following code example gets and sets the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph> property.</source>
          <target state="translated">Esempio di codice seguente ottiene e imposta il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> has been started.</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> è stato avviato.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>Call the <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method and then set the <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph> property.</source>
          <target state="translated">Chiamare il metodo <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph>, quindi impostare la proprietà <ph id="ph2">&lt;see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>An error occurred when attempting to access the underlying socket.</source>
          <target state="translated">Si è verificato un errore durante il tentativo di accesso al socket sottostante.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> has been closed.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sottostante è stato chiuso.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> of the current <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> sottostante del <ph id="ph2">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> to which the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is bound.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.EndPoint" /&gt;</ph> a cui è associato il <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> property to identify the local network interface and port number being used to listen for incoming client connection requests, after a socket connection has been made.</source>
          <target state="translated">È possibile utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A&gt;</ph> proprietà per identificare il numero di porta e di interfaccia di rete locale utilizzato per l'ascolto delle richieste di connessione client in ingresso, una volta stabilita una connessione socket.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You must first cast this <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> to an <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</source>
          <target state="translated">È necessario innanzitutto eseguire il cast questo <ph id="ph1">&lt;xref:System.Net.EndPoint&gt;</ph> per un <ph id="ph2">&lt;xref:System.Net.IPEndPoint&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>You can then call the <ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local IP address, and the <ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph> property to retrieve the local port number.</source>
          <target state="translated">È quindi possibile chiamare il <ph id="ph1">&lt;xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType&gt;</ph> proprietà per recuperare l'indirizzo IP locale e <ph id="ph2">&lt;xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType&gt;</ph> proprietà per recuperare il numero di porta locale.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.LocalEndpoint">
          <source>The following code example displays the local IP address and port number on which the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> is listening for incoming connection requests.</source>
          <target state="translated">Esempio di codice seguente consente di visualizzare il numero di porta e indirizzo IP locale in cui il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> è in ascolto delle richieste di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Determines if there are pending connection requests.</source>
          <target state="translated">Determina se sono presenti richieste di connessione in sospeso.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if connections are pending; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se vi sono connessioni in sospeso; in caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>This non-blocking method determines if there are any pending connection requests.</source>
          <target state="translated">Questo metodo non bloccante determina se vi sono richieste di connessione in sospeso.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>Because the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> methods block execution until the <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method has queued an incoming connection request, the <ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method can be used to determine if connections are available before attempting to accept them.</source>
          <target state="translated">Poiché il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> e <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodi bloccano l'esecuzione fino a quando il <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo è in coda una richiesta di connessione in ingresso, il <ph id="ph4">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> metodo può essere utilizzato per determinare se sono disponibili connessioni prima di tentare di accettarle.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The following code example checks the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> method.</source>
          <target state="translated">Nell'esempio di codice viene controllato il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Pending%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>If a connection request is waiting to be accepted, then a call to the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method is made.</source>
          <target state="translated">Se una richiesta di connessione è in attesa di essere accettata, quindi una chiamata al <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Pending">
          <source>The listener has not been started with a call to <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</source>
          <target state="translated">Il listener non è stato avviato con una chiamata a <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Start" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Gets the underlying network <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Ottiene il <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> di rete sottostante.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sottostante.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> creates a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to listen for incoming client connection requests.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> Crea un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> ascoltare le richieste di connessione client in ingresso.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> can use this property to get this <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Le classi che derivano da <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> possibile utilizzare questa proprietà per ottenere questo <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> provides.</source>
          <target state="translated">Utilizzare sottostante <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> restituito dal <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> proprietà se occorre accesso diverso da quello <ph id="ph3">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> fornisce.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property only returns the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> used to listen for incoming client connection requests.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> proprietà restituisce solo il <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> utilizzati per l'ascolto delle richieste di connessione client in ingresso.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> for sending and receiving data.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo per accettare una richiesta di connessione in sospeso e ottenere un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> per l'invio e ricezione di dati.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method to accept a pending connection request and obtain a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> for sending and receiving data.</source>
          <target state="translated">È inoltre possibile utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo per accettare una richiesta di connessione in sospeso e ottenere un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> per l'invio e ricezione di dati.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> property.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo del <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Server%2A&gt;</ph> proprietà.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.TcpListener.Server">
          <source>The underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is retrieved and the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.</source>
          <target state="translated">Sottostante <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> viene recuperato e <ph id="ph2">&lt;xref:System.Net.Sockets.SocketOptionName.Linger&gt;</ph> <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> opzione è configurata per il timeout dopo 10 secondi se i dati rimangono nel buffer di rete dopo la connessione viene chiusa.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.TcpListener">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">Avvia l'attesa delle richieste di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Starts listening for incoming connection requests.</source>
          <target state="translated">Avvia l'attesa delle richieste di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo inizializza sottostante <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, viene associata a un endpoint locale e resta in attesa di tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If a connection request is received, the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Se viene ricevuta una richiesta di connessione, il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo accodare la richiesta e continuerà ad attendere ulteriori richieste finché non si chiama il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections, it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> riceve una richiesta di connessione dopo aver accodato già il numero massimo di connessioni, verrà generata una <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> sul client.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Per rimuovere una connessione dalla coda di connessioni in ingresso, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo o <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo rimuovere una connessione dalla coda e restituirà un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> che è possibile utilizzare per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo restituirà un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> che è possibile utilizzare per eseguire la stessa.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>If your application only requires synchronous I/O, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione richiede solo i/o sincrono, utilizzare <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</source>
          <target state="translated">Per informazioni dettagliate controllo del funzionamento, utilizzare <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">Entrambi questi metodi bloccata fino a quando non è disponibile nella coda di una richiesta di connessione.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo per chiudere la <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> e interrompono l'ascolto.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">Si è responsabili della chiusura delle connessioni accettate separatamente.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> viene utilizzata per restare in attesa per i tentativi di connessione client in ingresso.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">Per ottenere il codice di errore specificato, utilizzare la proprietà <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Una volta ottenuto il codice, è possibile trovare una descrizione dettagliata dell'errore nella documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 in MSDN.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The maximum length of the pending connections queue.</source>
          <target state="translated">Lunghezza massima della coda delle connessioni in sospeso.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Starts listening for incoming connection requests with a maximum number of pending connection.</source>
          <target state="translated">Avvia l'attesa delle richieste di connessione in ingresso specificando un numero massimo di possibili connessioni in sospeso.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> method initializes the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, binds it to a local endpoint, and listens for incoming connection attempts.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> metodo inizializza sottostante <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, viene associata a un endpoint locale e resta in attesa di tentativi di connessione in ingresso.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If a connection request is received, <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> will queue the request and continue listening for additional requests until you call the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method.</source>
          <target state="translated">Se viene ricevuta una richiesta di connessione, <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> verrà accodare la richiesta e continuerà ad attendere ulteriori richieste finché non si chiama il <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> receives a connection request after it has already queued the maximum number of connections it will throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> on the client.</source>
          <target state="translated">Se <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> riceve una richiesta di connessione dopo aver accodato già il numero massimo di connessioni, genererà un <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> sul client.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>To remove a connection from the incoming connection queue, use either the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Per rimuovere una connessione dalla coda di connessioni in ingresso, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo o <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> method will remove a connection from the queue and return a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> that you can use to send and receive data.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph> metodo rimuovere una connessione dalla coda e restituirà un <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph> che è possibile utilizzare per inviare e ricevere dati.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method will return a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> that you can use to do the same.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo restituirà un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph> che è possibile utilizzare per eseguire la stessa.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>If your application only requires synchronous I/O, use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</source>
          <target state="translated">Se l'applicazione richiede solo i/o sincrono, utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more detailed behavioral control, use <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> method.</source>
          <target state="translated">Per informazioni dettagliate controllo del funzionamento, utilizzare <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.AcceptSocket%2A&gt;</ph> metodo.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Both of these methods block until a connection request is available in the queue.</source>
          <target state="translated">Entrambi questi metodi bloccata fino a quando non è disponibile nella coda di una richiesta di connessione.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> and stop listening.</source>
          <target state="translated">Utilizzare il <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo per chiudere la <ph id="ph2">&lt;xref:System.Net.Sockets.TcpListener&gt;</ph> e interrompono l'ascolto.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">Si è responsabili della chiusura delle connessioni accettate separatamente.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code and refer to the Windows Sockets version 2 API error code documentation in the MSDN library at <bpt id="p1">[</bpt><ph id="ph2">http://msdn.microsoft.com/library/</ph><ept id="p1">](http://msdn.microsoft.com/library/)</ept> for a detailed description of the error.</source>
          <target state="translated">Usare la <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> proprietà per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 disponibile in MSDN library al <bpt id="p1">[</bpt> <ph id="ph2">http://msdn.microsoft.com/library/</ph> <ept id="p1">](http://msdn.microsoft.com/library/)</ept> per una descrizione dettagliata dell'errore.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> is used to listen for incoming client connection attempts.</source>
          <target state="translated">Esempio di codice riportato di seguito viene illustrato come <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Start%2A&gt;</ph> viene utilizzata per restare in attesa per i tentativi di connessione client in ingresso.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>An error occurred while accessing the socket.</source>
          <target state="translated">Si è verificato un errore durante l'accesso al socket.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> parameter is less than zero or exceeds the maximum number of permitted connections.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="backlog" /&gt;</ph> è minore di zero o supera il numero massimo di connessioni consentite.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is null.</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> sottostante è null.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Closes the listener.</source>
          <target state="translated">Chiude il listener.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> closes the listener.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> Chiude il listener.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Any unaccepted connection requests in the queue will be lost.</source>
          <target state="translated">Le richieste di connessione non accettato nella coda andranno perse.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Remote hosts waiting for a connection to be accepted will throw a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Gli host remoti in attesa di una connessione di essere accettati genereranno un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>You are responsible for closing your accepted connections separately.</source>
          <target state="translated">Si è responsabili della chiusura delle connessioni accettate separatamente.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>This member outputs trace information when you enable network tracing in your application.</source>
          <target state="translated">Questo membro genera informazioni di traccia quando viene abilitata la funzionalità di traccia di rete nell'applicazione in uso.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>For more information, see <bpt id="p1">[</bpt>Network Tracing in the .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</source>
          <target state="translated">Per ulteriori informazioni, vedere <bpt id="p1">[</bpt>traccia di rete in .NET Framework<ept id="p1">](~/docs/framework/network-programming/network-tracing.md)</ept>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> method to close the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Esempio di codice seguente viene illustrato l'utilizzo di <ph id="ph1">&lt;xref:System.Net.Sockets.TcpListener.Stop%2A&gt;</ph> metodo per chiudere sottostante <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code.</source>
          <target state="translated">Per ottenere il codice di errore specificato, utilizzare la proprietà <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Una volta ottenuto il codice, è possibile trovare una descrizione dettagliata dell'errore nella documentazione relativa ai codici di errore dell'API di Windows Sockets versione 2 in MSDN.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>The <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method also closes the underlying <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>, and creates a new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> for the <ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</source>
          <target state="translated">Il <ph id="ph1">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> metodo chiude anche sottostante <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>e crea un nuovo <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> per il <ph id="ph4">&lt;see cref="T:System.Net.Sockets.TcpListener" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.TcpListener.Stop">
          <source>If you set any properties on the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> prior to calling the <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> method, those properties will not carry over to the new <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Se si impostano le proprietà sull'oggetto sottostante <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> prima di chiamare il <ph id="ph2">&lt;see cref="M:System.Net.Sockets.TcpListener.Stop" /&gt;</ph> (metodo), tali proprietà non verranno trasferite al nuovo <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>