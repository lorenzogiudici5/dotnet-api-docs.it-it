<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="084168d83286cd4ae2fe9807e27baab220ca0c74" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52226893" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornisce servizi di rete UDP (User Datagram Protocol).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient> classe fornisce metodi semplici per l'invio e ricezione di datagrammi UDP senza connessione in modalità di blocco sincrono. Poiché UDP è un protocollo di trasporto senza connessione, non devi stabilire una connessione all'host remoto prima dell'invio e ricezione di dati. , Tuttavia, è possibile stabilire un host remoto predefinito in uno dei due modi seguenti:  
  
-   Creare un'istanza di <xref:System.Net.Sockets.UdpClient> classe usando il nome host remoto e il numero di porta come parametri.  
  
-   Creare un'istanza del <xref:System.Net.Sockets.UdpClient> classe e quindi chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo).  
  
 È possibile usare uno qualsiasi dei metodi di invio forniti nel <xref:System.Net.Sockets.UdpClient> per inviare dati a un dispositivo remoto. Usare il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo per ricevere dati da host remoti.  
  
> [!NOTE]
>  Non chiamare <xref:System.Net.Sockets.UdpClient.Send%2A> utilizzando un nome host o <xref:System.Net.IPEndPoint> se è già stato specificato un host remoto predefinito. In caso contrario <xref:System.Net.Sockets.UdpClient> verrà generata un'eccezione.  
  
 <xref:System.Net.Sockets.UdpClient> i metodi consentono anche di inviare e ricevere datagrammi multicast. Usare la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo sottoscrivere un <xref:System.Net.Sockets.UdpClient> a un gruppo multicast. Usare la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo per annullare la sottoscrizione una <xref:System.Net.Sockets.UdpClient> da un gruppo multicast.  
  
   
  
## Examples  
 L'esempio seguente stabilisce un <xref:System.Net.Sockets.UdpClient> connessione usando il nome host www.contoso.com su porte 11000. Un messaggio di stringhe di piccole dimensioni viene inviato a due macchine host remoto separato. Il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo blocca l'esecuzione fino a quando non viene ricevuto un messaggio. Usando il <xref:System.Net.IPEndPoint> passato a <xref:System.Net.Sockets.UdpClient.Receive%2A>, viene visualizzato l'identità dell'host ricevente.  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">Per stabilire una connessione in uscita o accettare una richiesta in ingresso.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
    <related type="Article" href="~/docs/framework/network-programming/tcp-udp.md">TCP-UDP</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un nuovo <xref:System.Net.Sockets.UdpClient> e consente al provider di servizi assegnare il numero porta e indirizzo IPv4 locale più appropriato. Se questo costruttore viene utilizzato, il <xref:System.Net.Sockets.UdpClient> istanza viene impostata con una famiglia di indirizzi di IPv4 che non può essere modificato o sovrascritto da una chiamata al metodo connect con un IPv6 di destinazione.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Questo costruttore non è adatto per la partecipazione a un gruppo multicast perché non esegue l'associazione del socket. Inoltre, funziona solo con tipi di indirizzi IPv4.  
  
   
  
## Examples  
 L'esempio seguente illustra come usare il costruttore predefinito per creare un'istanza di <xref:System.Net.Sockets.UdpClient> classe.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">Numero di porta locale da cui si desidera comunicare.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" /> e la associa al numero di porta locale fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un oggetto sottostante <xref:System.Net.Sockets.Socket> e lo associa al numero di porta da cui si vuole comunicare. Utilizzare questo costruttore se è interessati solo impostando il numero di porta locale. Il provider di servizi sottostanti assegnerà l'indirizzo IP locale. Se 0 viene passato al costruttore, il provider di servizi sottostante verrà assegnato un numero di porta. Se questo costruttore viene utilizzato, il <xref:System.Net.Sockets.UdpClient> istanza viene impostata con una famiglia di indirizzi di IPv4 che non può essere modificato o sovrascritto da una chiamata al metodo connect con un IPv6 di destinazione.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Questo costruttore funziona solo con tipi di indirizzi IPv4.  
  
   
  
## Examples  
 Nell'esempio seguente illustra l'uso di un numero di porta locale per creare un'istanza del <xref:System.Net.Sockets.UdpClient> classe.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> è maggiore di <see cref="F:System.Net.IPEndPoint.MaxPort" /> o minore di <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">Classe <see cref="T:System.Net.IPEndPoint" /> che rappresenta l'endpoint locale a cui associare la connessione UDP.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" /> e la associa all'endpoint locale specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un nuovo <xref:System.Net.Sockets.UdpClient> e lo associa al <xref:System.Net.IPEndPoint> specificato da di `localEP` parametro. Prima di chiamare questo costruttore, è necessario creare un <xref:System.Net.IPEndPoint> utilizzando il numero di porta e indirizzo IP da cui si prevede di inviare e ricevere dati. Non devi specificare un numero di porta e indirizzo IP locale per l'invio e ricezione di dati. In caso contrario, il provider di servizi sottostante verrà assegnato il numero porta e indirizzo IP locale più appropriato.  
  
 Se questo costruttore viene utilizzato, il <xref:System.Net.Sockets.UdpClient> istanza viene impostata con la famiglia di indirizzi specificata da di `localEP` parametro che non può essere modificato o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diversi.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un'istanza di <xref:System.Net.Sockets.UdpClient> classe utilizzando un endpoint locale.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> è <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family">Uno dei valori <see cref="T:System.Net.Sockets.AddressFamily" /> mediante il quale viene specificato lo schema di indirizzamento del socket.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `family` parametro determina se il listener Usa un indirizzo IP versione 4 (IPv4) o una IP versione 6 (IPv6) indirizzo. Per usare un indirizzo IPv4, passare il <xref:System.Net.Sockets.AddressFamily.InterNetwork> valore. Per usare un indirizzo IPv6, passare il <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> valore. Il passaggio di qualsiasi altro valore provocherà il metodo generare un <xref:System.ArgumentException>.  
  
 Se questo costruttore viene utilizzato, il <xref:System.Net.Sockets.UdpClient> istanza viene impostata con la famiglia di indirizzi specificata da di `family` parametro che non può essere modificato o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diversi.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Il <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> non è adatto per la partecipazione a un gruppo multicast perché non esegue l'associazione del socket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="family" /> non è <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port">Porta su cui attendere i tentativi di connessione in ingresso.</param>
        <param name="family">Uno dei valori <see cref="T:System.Net.Sockets.AddressFamily" /> mediante il quale viene specificato lo schema di indirizzamento del socket.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" /> e la associa al numero di porta locale fornito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore crea un oggetto sottostante <xref:System.Net.Sockets.Socket> e lo associa al numero di porta da cui si vuole comunicare.  
  
 Il `family` parametro determina se il listener Usa un indirizzo IP versione 4 (IPv4) o una IP versione 6 (IPv6) indirizzo. Per usare un indirizzo IPv4, passare il <xref:System.Net.Sockets.AddressFamily.InterNetwork> valore. Per usare un indirizzo IPv6, passare il <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> valore. Il passaggio di qualsiasi altro valore provocherà il metodo generare un <xref:System.ArgumentException>.  
  
 Se questo costruttore viene utilizzato, il <xref:System.Net.Sockets.UdpClient> istanza viene impostata con la famiglia di indirizzi specificata da di `family` parametro che non può essere modificato o sovrascritto da una chiamata al metodo connect con una famiglia di indirizzi diversi.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, vedere la [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare un client UDP da usare in un gruppo multicast.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="family" /> non è <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> è maggiore di <see cref="F:System.Net.IPEndPoint.MaxPort" /> o minore di <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nome dell'host remoto DNS a cui si desidera connettersi.</param>
        <param name="port">Numero di porta remota a cui si desidera connettersi.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.UdpClient" /> e stabilisce un host remoto predefinito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo costruttore inizializza un nuovo <xref:System.Net.Sockets.UdpClient> e stabilisce un host remoto usando il `hostname` e `port` parametri. La definizione di un host remoto predefinito è facoltativa. Se si utilizza questo costruttore, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Specifica di un host remoto predefinito è limitato a tale host. È possibile modificare l'host remoto predefinito in qualsiasi momento chiamando la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). Se si desidera specificare un host remoto nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> metodo, non utilizzare questo costruttore.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come creare un'istanza di <xref:System.Net.Sockets.UdpClient> classe utilizzando un nome host e il numero di porta.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostname" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se è stato stabilito un host remoto predefinito.</summary>
        <value>
          <see langword="true" /> se è attiva una connessione; in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi che derivano da <xref:System.Net.Sockets.UdpClient> può usare questa proprietà per determinare se è stato stabilito un host remoto predefinito. È possibile stabilire un host remoto predefinito utilizzando il costruttore appropriato o chiamando la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). Se si stabilisce un host remoto predefinito, è possibile specificare un host remoto nella chiamata a <xref:System.Net.Sockets.UdpClient.Send%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">Valore booleano che specifica se abilitare o disabilitare l'attraversamento NAT.</param>
        <summary>Abilita o disabilita l'attraversamento NAT (Network Address Translation) in un'istanza di <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> metodo viene utilizzato per abilitare o disabilitare l'attraversamento di NAT per un <xref:System.Net.Sockets.UdpClient> istanza. Attraversamento NAT può essere fornito tramite un tunnel ISATAP, 6to4 o Teredo.  
  
 Quando la `allowed` parametro è impostato su false, il <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. Ciò disabilita in modo esplicito l'attraversamento di NAT per un <xref:System.Net.Sockets.UdpClient> istanza.  
  
 Quando la `allowed` parametro è true, il <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> opzione sul socket associato è impostata su <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. Questo può consentire l'attraversamento di NAT per una <xref:System.Net.Sockets.UdpClient> a seconda delle regole firewall attive sul sistema.  
  
 Un indirizzo di Teredo è un indirizzo IPv6 con il prefisso del 2001,::/ / 32. Gli indirizzi Teredo possono essere restituiti attraverso normale risoluzione dei nomi DNS o enumerati come un indirizzo IPv6 assegnato a un'interfaccia locale.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la quantità di dati ricevuti dalla rete disponibili per essere letti.</summary>
        <value>Numero di byte di dati ricevuti dalla rete.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Available%2A> proprietà viene utilizzata per determinare la quantità di dati in coda nel buffer di rete per la lettura. Se sono disponibili dati, chiamare <xref:System.Net.Sockets.NetworkStream.Read%2A> per ottenere i dati. Se non sono disponibili, dati il <xref:System.Net.Sockets.UdpClient.Available%2A> proprietà restituisce 0.  
  
 Se l'host remoto viene arrestato o chiude la connessione, il <xref:System.Net.Sockets.UdpClient.Available%2A> proprietà genera un <xref:System.Net.Sockets.SocketException>.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai codici di errore dell'API Windows Sockets versione 2 disponibile in MSDN library all'indirizzo [ http://msdn.microsoft.com/library ](https://msdn.microsoft.com/library)/ per una descrizione dettagliata del errore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.Available%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente contenente informazioni sull'operazione di ricezione. Questo oggetto viene passato al delegato <paramref name="requestCallback" /> al completamento dell'operazione.</param>
        <summary>Riceve un datagramma da un host remoto in modalità asincrona.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento alla ricezione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndReceive%2A> (metodo). In genere, il metodo viene richiamato dal `requestCallback` delegare.  
  
 Questo metodo non blocca fino al completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare il <xref:System.Net.Sockets.UdpClient.Receive%2A> (metodo).  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> ricezione asincrona di una risposta del server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia un datagramma a un host remoto in modalità asincrona.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare.</param>
        <param name="bytes">Numero di byte da inviare.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente contenente informazioni sull'operazione di invio. Questo oggetto viene passato al delegato <paramref name="requestCallback" /> al completamento dell'operazione.</param>
        <summary>Invia un datagramma a un host remoto in modalità asincrona. La destinazione è stata specificata precedentemente da una chiamata al metodo <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento all'invio asincrono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A> (metodo). In genere, il metodo viene richiamato dal `requestCallback` delegare.  
  
 Questo metodo non blocca fino al completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Sockets.UdpClient.Send%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginSend%2A> per inviare in modo asincrono una richiesta al server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare.</param>
        <param name="bytes">Numero di byte da inviare.</param>
        <param name="endPoint">Classe <see cref="T:System.Net.EndPoint" /> che rappresenta la destinazione dei dati.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente contenente informazioni sull'operazione di invio. Questo oggetto viene passato al delegato <paramref name="requestCallback" /> al completamento dell'operazione.</param>
        <summary>Invia un datagramma a una destinazione in modalità asincrona. La destinazione è specificata da una classe <see cref="T:System.Net.EndPoint" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento all'invio asincrono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A> (metodo). In genere, il metodo viene richiamato dal `requestCallback` delegare.  
  
 Questo metodo non blocca fino al completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Sockets.UdpClient.Send%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginSend%2A> per inviare in modo asincrono una richiesta al server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice <see cref="T:System.Byte" /> contenente i dati da inviare.</param>
        <param name="bytes">Numero di byte da inviare.</param>
        <param name="hostname">Host di destinazione.</param>
        <param name="port">Numero della porta di destinazione.</param>
        <param name="requestCallback">Delegato <see cref="T:System.AsyncCallback" /> cui fa riferimento il metodo da richiamare al completamento dell'operazione.</param>
        <param name="state">Oggetto definito dall'utente contenente informazioni sull'operazione di invio. Questo oggetto viene passato al delegato <paramref name="requestCallback" /> al completamento dell'operazione.</param>
        <summary>Invia un datagramma a una destinazione in modalità asincrona. La destinazione è specificata mediante il nome dell'host e il numero di porta.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che fa riferimento all'invio asincrono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrona <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operazione deve essere completata chiamando il <xref:System.Net.Sockets.UdpClient.EndSend%2A> (metodo). In genere, il metodo viene richiamato dal `requestCallback` delegare.  
  
 Questo metodo non blocca fino al completamento dell'operazione. Per bloccare fino al completamento dell'operazione, usare uno del <xref:System.Net.Sockets.UdpClient.Send%2A> overload del metodo.  
  
 Per informazioni dettagliate sull'uso del modello di programmazione asincrono, vedere [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginSend%2A> per inviare in modo asincrono una richiesta al server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Net.Sockets.Socket" /> di rete sottostante.</summary>
        <value>Oggetto <see cref="T:System.Net.Sockets.Socket" /> di rete sottostante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient> Crea un <xref:System.Net.Sockets.Socket> usato per inviare e ricevere dati in rete. Le classi che derivano da <xref:System.Net.Sockets.UdpClient> possibile usare questa proprietà da ottenere o impostare questa opzione <xref:System.Net.Sockets.Socket>. Usare l'oggetto sottostante <xref:System.Net.Sockets.Socket> restituito da <xref:System.Net.Sockets.UdpClient.Client%2A> se è necessario un accesso diverso da quello <xref:System.Net.Sockets.UdpClient> fornisce. È anche possibile usare <xref:System.Net.Sockets.UdpClient.Client%2A> per impostare l'oggetto sottostante <xref:System.Net.Sockets.Socket> esistente <xref:System.Net.Sockets.Socket>. Ciò è utile se si desidera sfruttare la semplicità della <xref:System.Net.Sockets.UdpClient> utilizzando un pre-esistente <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.Client%2A> proprietà. In questo esempio, la trasmissione è abilitata per l'oggetto sottostante <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chiude la connessione UDP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Close%2A> Disabilita sottostante <xref:System.Net.Sockets.Socket> e rilascia tutte le risorse gestite sia associate il <xref:System.Net.Sockets.UdpClient>.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrata la chiusura una <xref:System.Net.Sockets.UdpClient> chiamando il <xref:System.Net.Sockets.UdpClient.Close%2A> (metodo).  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stabilisce un host remoto predefinito.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="endPoint">Classe <see cref="T:System.Net.IPEndPoint" /> che specifica l'endpoint di rete a cui si intende inviare dati.</param>
        <summary>Stabilisce un host remoto predefinito utilizzando l'endpoint di rete specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo stabilisce un host remoto predefinito utilizzando il valore specificato nel `endPoint` parametro. Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo).  
  
 La definizione di un host remoto predefinito è facoltativa. Specifica di un host remoto predefinito è limitato a tale host. Se si desidera inviare datagrammi da un altro host remoto, è necessario apportare un'altra chiamata ai <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo oppure crearne uno nuovo <xref:System.Net.Sockets.UdpClient> senza un host remoto predefinito. Se è stato stabilito un computer remoto predefinito host ed è fornire anche un host remoto nella chiamata ai <xref:System.Net.Sockets.UdpClient.Send%2A> metodo <xref:System.Net.Sockets.UdpClient.Send%2A> genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A> (metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà rimosse il valore predefinito specificato. Non è possibile impostare l'host remoto predefinito utilizzando questo metodo, a meno che non si eredita da un indirizzo di broadcast <xref:System.Net.Sockets.UdpClient>, usare il Client per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 È tuttavia possibile trasmettere i dati per il valore predefinito di broadcast indirizzo, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Se l'applicazione richiede un maggiore controllo sull'indirizzo di broadcast, è possibile anche ripristinare l'uso di <xref:System.Net.Sockets.Socket> classe.  
  
> [!NOTE]
>  Poiché il protocollo UDP è orientato alla connessione, il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo non blocca. Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo se si prevede di ricevere datagrammi multicast.  
  
   
  
## Examples  
 L'esempio seguente usa un <xref:System.Net.IPEndPoint> per stabilire un host remoto predefinito.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endPoint" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addr">Classe <see cref="T:System.Net.IPAddress" /> dell'host remoto a cui si desidera inviare dati.</param>
        <param name="port">Numero di porta a cui si intende inviare dati.</param>
        <summary>Stabilisce un host remoto predefinito utilizzando l'indirizzo IP e il numero di porta specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo stabilisce un host remoto predefinito utilizzando i valori specificati nel `addr` e `port` parametri. Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo).  
  
 La definizione di un host remoto predefinito è facoltativa. Specifica di un host remoto predefinito è limitato a tale host. Se si desidera inviare datagrammi da un altro host remoto, è necessario apportare un'altra chiamata ai <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo oppure crearne uno nuovo <xref:System.Net.Sockets.UdpClient> senza un host remoto predefinito. Se è stato stabilito un computer remoto predefinito host ed è fornire anche un host remoto nella chiamata ai <xref:System.Net.Sockets.UdpClient.Send%2A> metodo <xref:System.Net.Sockets.UdpClient.Send%2A> genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A> (metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà rimosse il valore predefinito specificato. Non è possibile impostare l'host remoto predefinito utilizzando questo metodo, a meno che non si eredita da un indirizzo di broadcast <xref:System.Net.Sockets.UdpClient>, usare il client per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 È tuttavia possibile trasmettere i dati per il valore predefinito di broadcast indirizzo, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Se l'applicazione richiede un maggiore controllo sull'indirizzo di broadcast, è possibile anche ripristinare l'uso di <xref:System.Net.Sockets.Socket> classe.  
  
> [!NOTE]
>  Poiché il protocollo UDP è orientato alla connessione, il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo non blocca. Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo se si prevede di ricevere datagrammi multicast.  
  
   
  
## Examples  
 L'esempio seguente usa un numero di porta e indirizzo IP per la connessione con un host remoto.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addr" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nome DNS dell'host remoto a cui si desidera inviare dati.</param>
        <param name="port">Numero di porta sull'host remoto a cui si desidera inviare dati.</param>
        <summary>Stabilisce un host remoto predefinito utilizzando il nome host e il numero di porta specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo stabilisce un host remoto predefinito utilizzando i valori specificati nel `port` e `hostname` parametri. Una volta stabilita, non è necessario specificare un host remoto in ogni chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo).  
  
 La definizione di un host remoto predefinito è facoltativa. Specifica di un host remoto predefinito è limitato a tale host. Se si desidera inviare datagrammi da un altro host remoto, è necessario apportare un'altra chiamata ai <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo oppure crearne uno nuovo <xref:System.Net.Sockets.UdpClient> senza un host remoto predefinito.  
  
 Se è stato stabilito un computer remoto predefinito host ed è fornire anche un host remoto nella chiamata ai <xref:System.Net.Sockets.UdpClient.Send%2A> metodo <xref:System.Net.Sockets.UdpClient.Send%2A> genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Se si chiama il <xref:System.Net.Sockets.Socket.Connect%2A> (metodo), tutti i datagrammi provenienti da un indirizzo diverso verrà rimosse il valore predefinito specificato. Non è possibile impostare l'host remoto predefinito utilizzando questo metodo, a meno che non si eredita da un indirizzo di broadcast <xref:System.Net.Sockets.UdpClient>, usare il client per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 È tuttavia possibile trasmettere i dati per il valore predefinito di broadcast indirizzo, 255.255.255.255, se si specifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> nella chiamata al <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Se l'applicazione richiede un maggiore controllo sull'indirizzo di broadcast, è possibile anche ripristinare l'uso di <xref:System.Net.Sockets.Socket> classe.  
  
> [!NOTE]
>  Poiché il protocollo UDP è orientato alla connessione, il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo non blocca. Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo se si prevede di ricevere datagrammi multicast.  
  
   
  
## Examples  
 L'esempio seguente usa il nome host e porta il numero per la connessione a un host remoto.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="port" /> non è compreso tra <see cref="F:System.Net.IPEndPoint.MinPort" /> e <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia le risorse gestite e non gestite usate dall'oggetto <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Net.Sockets.UdpClient" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato da parte del pubblico `Dispose()` metodo e <xref:System.Object.Finalize%2A> (metodo). `Dispose()` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Quando la `disposing` parametro è true, questo metodo rilascia tutte le risorse utilizzate da qualsiasi oggetto gestito da questo <xref:System.Net.Sockets.UdpClient> riferimenti. Il metodo richiama il metodo `Dispose()` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il metodo 
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. Quando si esegue l'override <see langword="Dispose(Boolean)" /> prestare attenzione a non fare riferimento agli oggetti che sono stati eliminati in una precedente chiamata a <see langword="Dispose" />. Per altre informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Per altre informazioni sulle <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [override del metodo Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore <see cref="T:System.Boolean" /> che specifica se il <see cref="T:System.Net.Sockets.UdpClient" /> consente la frammentazione dei datagrammi IP (Internet Protocol).</summary>
        <value>
          <see langword="true" /> se il <see cref="T:System.Net.Sockets.UdpClient" /> consente la frammentazione dei datagrammi; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Datagrammi richiedono la frammentazione se le dimensioni superano le unità di MTU (Maximum Transfer) di mezzo di trasmissione. Essi possono essere frammentati dall'host di invio o da un router intermedio. Se un datagramma deve essere frammentato e il <xref:System.Net.Sockets.Socket.DontFragment%2A> opzione è impostata, viene eliminato il datagramma e viene inviato un messaggio di errore di controllo messaggio protocollo ICMP (Internet) al mittente del datagramma.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.Socket.DontFragment%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Questa proprietà può essere impostata soltanto per i socket con cui viene utilizzato il flag <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Esce da un gruppo multicast.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Oggetto <see cref="T:System.Net.IPAddress" /> del gruppo multicast da cui uscire.</param>
        <summary>Esce da un gruppo multicast.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo estrae il <xref:System.Net.Sockets.UdpClient> dal gruppo multicast identificato dall'oggetto specificato <xref:System.Net.IPAddress>. Dopo la chiamata di <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo sottostante <xref:System.Net.Sockets.Socket> invia un pacchetto (IGMP (Internet Group Management Protocol) per il router, rimuovendo il router dal gruppo multicast. Dopo un <xref:System.Net.Sockets.UdpClient> viene estratta dal gruppo, non sarà in grado di ricevere datagrammi inviati a tale gruppo.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come eliminare un gruppo multicast, fornendo un indirizzo multicast.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ArgumentException">L'indirizzo IP non è compatibile con il valore <see cref="T:System.Net.Sockets.AddressFamily" /> che definisce lo schema di indirizzamento del socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Oggetto <see cref="T:System.Net.IPAddress" /> del gruppo multicast da cui uscire.</param>
        <param name="ifindex">Indirizzo locale del gruppo multicast da cui uscire.</param>
        <summary>Esce da un gruppo multicast.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo estrae il <xref:System.Net.Sockets.UdpClient> dal gruppo multicast identificato dall'oggetto specificato <xref:System.Net.IPAddress>. Dopo la chiamata di <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo sottostante <xref:System.Net.Sockets.Socket> invia un pacchetto (IGMP (Internet Group Management Protocol) per il router, rimuovendo il router dal gruppo multicast. Dopo un <xref:System.Net.Sockets.UdpClient> viene estratta dal gruppo, non sarà in grado di ricevere datagrammi inviati a tale gruppo.  
  
> [!NOTE]
>  Se si riceve un <xref:System.Net.Sockets.SocketException>, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> proprietà per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come eliminare un gruppo multicast, fornendo un indirizzo multicast.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ArgumentException">L'indirizzo IP non è compatibile con il valore <see cref="T:System.Net.Sockets.AddressFamily" /> che definisce lo schema di indirizzamento del socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore <see cref="T:System.Boolean" /> che specifica se la classe <see cref="T:System.Net.Sockets.UdpClient" /> può inviare o ricevere pacchetti broadcast.</summary>
        <value>
          <see langword="true" /> se il <see cref="T:System.Net.Sockets.UdpClient" /> consente lo scambio di pacchetti broadcast; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La trasmissione è limitata a una subnet specifica. È possibile trasmettere alla subnet locale mediante l'invio di un pacchetto a 255.255.255.255; In alternativa, è possibile usare l'indirizzo di broadcast, ovvero la parte di rete di un indirizzo IP (Internet Protocol) con tutti i bit impostati nella porzione di host. Ad esempio, se l'indirizzo IP è 192.168.1.40 (un indirizzo di classe C, con la parte relativa alla rete come i primi tre ottetti e la parte host è l'ultimo ottetto), l'indirizzo broadcast è diretto 192.168.1.255.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito da un chiamata a <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</param>
        <param name="remoteEP">Endpoint remoto specificato.</param>
        <summary>Termina una ricezione asincrona in attesa.</summary>
        <returns>In caso di esito positivo, matrice di byte che contiene i dati del datagramma.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a quando l'operazione è completata.  
  
 Per eseguire questa operazione in modo sincrono, usare il <xref:System.Net.Sockets.UdpClient.Receive%2A> (metodo).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginSend%2A> per completare un'operazione di ricezione asincrona di una risposta del server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è stato restituito da una chiamata al metodo <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> è stato precedentemente chiamato per la lettura asincrona.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso all'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante.</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> restituito da un chiamata a <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</param>
        <summary>Termina un invio asincrono in attesa.</summary>
        <returns>Se ha esito positivo, numero di byte inviati alla classe <see cref="T:System.Net.Sockets.UdpClient" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo si blocca fino a quando l'operazione è completata.  
  
 Per eseguire questa operazione in modo sincrono, usare il <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo).  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.UdpClient.BeginSend%2A> per completare un'operazione di invio asincrono di una richiesta al server.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> non è stato restituito da una chiamata al metodo <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> è stato precedentemente chiamato per la lettura asincrona.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket sottostante.</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore <see cref="T:System.Boolean" /> che specifica se la classe <see cref="T:System.Net.Sockets.UdpClient" /> consente a un unico client di usare una porta.</summary>
        <value>
          <see langword="true" /> se la classe <see cref="T:System.Net.Sockets.UdpClient" /> consente a un solo client di usare una porta specifica; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" /> per Windows Server 2003 e Windows XP Service Pack 2 e versioni successive e <see langword="false" /> per tutte le altre versioni.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, i client più possono usare una porta specifica. Tuttavia, solo uno dei client può eseguire operazioni sul traffico di rete inviati alla porta. È possibile usare il <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> proprietà per impedire a più client di usare una porta specifica.  
  
 Questa proprietà deve essere impostata prima che il socket sottostante è associato a una porta di client. Se si chiama <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, la porta del client viene associata come effetto collaterale del costruttore e successivamente non è possibile impostare il <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> proprietà  
  
   
  
## Examples  
 L'esempio di codice seguente crea una <xref:System.Net.Sockets.UdpClient>e ottiene e imposta il <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante il tentativo di accesso al socket sottostante.</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge una classe <see cref="T:System.Net.Sockets.UdpClient" /> a un gruppo multicast.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Classe <see cref="T:System.Net.IPAddress" /> multicast del gruppo a cui si desidera unirsi.</param>
        <summary>Aggiunge una classe <see cref="T:System.Net.Sockets.UdpClient" /> a un gruppo multicast.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo sottoscrive il <xref:System.Net.Sockets.UdpClient> a un gruppo multicast utilizzando l'oggetto specificato <xref:System.Net.IPAddress>. Dopo la chiamata di <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo sottostante <xref:System.Net.Sockets.Socket> invia un pacchetto (IGMP (Internet Group Management Protocol) per il router che richiede l'appartenenza al gruppo multicast. L'intervallo di indirizzi multicast è tra 224.0.0.0 e 239.255.255.255. Se si specifica un indirizzo esterno all'intervallo o se il router in cui viene effettuata la richiesta non multicast abilitati, <xref:System.Net.Sockets.UdpClient> genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore. Una volta il <xref:System.Net.Sockets.UdpClient> sia elencato con il router come membro del gruppo multicast, sarà in grado di ricevere datagrammi multicast inviati all'entità specificata <xref:System.Net.IPAddress>.  
  
> [!NOTE]
>  È necessario creare il <xref:System.Net.Sockets.UdpClient> utilizzando il numero di porta multicast; in caso contrario, non sarà in grado di ricevere datagrammi multicast. Non chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo prima di chiamare il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo, o <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo avrà esito negativo. Non è necessario appartenere a un gruppo multicast per inviare datagrammi a un indirizzo IP multicast.  
  
 Prima di unirsi a un gruppo multicast, assicurarsi che il socket è associato alla porta o l'endpoint. Farlo chiamando uno dei costruttori che accettano una porta o un endpoint come parametro.  
  
 Per arrestare la ricezione di datagrammi multicast, chiamare il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo e fornire il <xref:System.Net.IPAddress> del gruppo da cui si desidera ritirare.  
  
> [!NOTE]
>  In caso di IPv6, esistono diversi intervalli di indirizzi multicast che è possibile scegliere tra. Vedere la specifica IETF RFC 2375.  
  
> [!NOTE]
>  Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> in un <xref:System.Net.Sockets.UdpClient> create senza una porta locale specifica (vale a dire, tramite il <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> costruttore).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come aggiungere un gruppo multicast, fornendo un indirizzo multicast.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ArgumentException">L'indirizzo IP non è compatibile con il valore <see cref="T:System.Net.Sockets.AddressFamily" /> che definisce lo schema di indirizzamento del socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex">L'indice dell'interfaccia associato all'indirizzo IP locale a cui unire il gruppo multicast.</param>
        <param name="multicastAddr">Classe <see cref="T:System.Net.IPAddress" /> multicast del gruppo a cui si desidera unirsi.</param>
        <summary>Aggiunge una classe <see cref="T:System.Net.Sockets.UdpClient" /> a un gruppo multicast.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di unirsi a un gruppo multicast, assicurarsi che il socket è associato alla porta o l'endpoint. È possibile farlo chiamando uno dei costruttori che accettano una porta o un endpoint come parametro.  
  
 Il `infindex` parametro viene usato per identificare un'interfaccia hardware nello stesso collegamento.  
  
> [!NOTE]
>  Esistono diversi intervalli di indirizzi multicast tra cui scegliere. Vedere la specifica IETF RFC 2375.  
  
> [!NOTE]
>  Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> in un <xref:System.Net.Sockets.UdpClient> create senza una porta locale specifica (vale a dire, tramite il <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> costruttore).  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Oggetto <see cref="T:System.Net.IPAddress" /> del gruppo multicast a cui unirsi.</param>
        <param name="timeToLive">TTL misurato in hop di router.</param>
        <summary>Aggiunge una classe <see cref="T:System.Net.Sockets.UdpClient" /> a un gruppo multicast con il Time to Live (TTL) specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo sottoscrive il <xref:System.Net.Sockets.UdpClient> a un gruppo multicast utilizzando l'oggetto specificato <xref:System.Net.IPAddress>. Dopo la chiamata di <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo sottostante <xref:System.Net.Sockets.Socket> invia un pacchetto (IGMP (Internet Group Management Protocol) per il router che richiede l'appartenenza al gruppo multicast. L'intervallo di indirizzi multicast è tra 224.0.0.0 e 239.255.255.255. Se si specifica un indirizzo esterno all'intervallo o se il router in cui viene effettuata la richiesta non multicast abilitati, <xref:System.Net.Sockets.UdpClient> genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore. Il `timeToLive` parametro consente di specificare quanti hop router potrà essere per un datagramma multicast prima di essere eliminato. Una volta il <xref:System.Net.Sockets.UdpClient> sia elencato con il router come membro del gruppo multicast, sarà in grado di ricevere datagrammi multicast inviati all'entità specificata <xref:System.Net.IPAddress>.  
  
> [!NOTE]
>  È necessario creare il <xref:System.Net.Sockets.UdpClient> utilizzando il numero di porta multicast in caso contrario non sarà in grado di ricevere datagrammi multicast. Non si chiama il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo prima di chiamare il <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> metodo o del metodo receive non funzionerà. Non è necessario appartenere a un gruppo multicast per inviare datagrammi a un indirizzo IP multicast.  
  
 Prima di unirsi a un gruppo multicast assicurarsi che il socket è associato alla porta o l'endpoint. Farlo, chiamando uno dei costruttori che accettano come parametro di una porta o un endpoint.  
  
 Per arrestare la ricezione di datagrammi multicast, chiamare il <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> metodo e fornire il <xref:System.Net.IPAddress> del gruppo da cui si desidera ritirare.  
  
> [!NOTE]
>  Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> in un <xref:System.Net.Sockets.UdpClient> create senza una porta locale specifica (vale a dire, tramite il <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> costruttore).  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato come aggiungere un gruppo multicast, fornendo due parametri, un indirizzo multicast e un numero che rappresenta la durata (TTL).  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il TTL fornito non è compreso tra 0 e 255</exception>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">L'indirizzo IP non è compatibile con il valore <see cref="T:System.Net.Sockets.AddressFamily" /> che definisce lo schema di indirizzamento del socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Classe <see cref="T:System.Net.IPAddress" /> multicast del gruppo a cui si desidera unirsi.</param>
        <param name="localAddress">Classe <see cref="T:System.Net.IPAddress" /> locale.</param>
        <summary>Aggiunge una classe <see cref="T:System.Net.Sockets.UdpClient" /> a un gruppo multicast.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Prima di unirsi a un gruppo multicast, assicurarsi che il socket è associato alla porta o l'endpoint. È possibile farlo chiamando uno dei costruttori che accettano una porta o un endpoint come parametro.  
  
> [!NOTE]
>  Esistono diversi intervalli di indirizzi multicast tra cui scegliere. È possibile trovarli nella specifica IETF RFC 2375.  
  
> [!NOTE]
>  Non è possibile chiamare <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> in un <xref:System.Net.Sockets.UdpClient> create senza una porta locale specifica (vale a dire, tramite il <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> costruttore).  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> (metodo).  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore <see cref="T:System.Boolean" /> che specifica se i pacchetti multicast in uscita devono essere recapitati all'applicazione mittente.</summary>
        <value>
          <see langword="true" /> se il <see cref="T:System.Net.Sockets.UdpClient" /> riceve pacchetti multicast; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il multicast è un metodo scalabile per la comunicazione di molti-a-molti in Internet. Se un processo esegue la sottoscrizione a un indirizzo multicast, tutti i pacchetti inviati da quel processo vengono ricevuti da ogni altro processo che ha sottoscritto l'indirizzo multicast.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive :  -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="remoteEP">Classe <see cref="T:System.Net.IPEndPoint" /> che rappresenta l'host remoto dal quale sono stati inviati i dati.</param>
        <summary>Restituisce un datagramma UDP che era stato inviato da un host remoto.</summary>
        <returns>Matrice di tipo <see cref="T:System.Byte" /> che contiene dati di datagrammi.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo si blocca fino all'arrivo di un datagramma da un host remoto. Quando i dati sono disponibili, il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo leggere il primo datagramma e restituirà la parte di dati come matrice di byte. Questo metodo popola i `remoteEP` parametro con il <xref:System.Net.IPAddress> e numero di porta del mittente.  
  
 Se si specifica un host remoto predefinito nel <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo, il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo accetterà datagrammi solo da tale host. Verranno rimosse tutte le altre datagrammi.  
  
 Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Se si prevede di ricevere datagrammi multicast, non si chiama il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo prima di chiamare il <xref:System.Net.Sockets.UdpClient.Receive%2A> (metodo). Il <xref:System.Net.Sockets.UdpClient> utilizzata per ricevere datagrammi devono essere creata usando il numero di porta multicast.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Net.Sockets.UdpClient.Receive%2A> (metodo). Il <xref:System.Net.Sockets.UdpClient.Receive%2A> metodo blocca l'esecuzione finché non riceve un messaggio. Usando il <xref:System.Net.IPEndPoint> passato a <xref:System.Net.Sockets.UdpClient.Receive%2A>, viene visualizzato l'identità dell'host ricevente.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce in modo asincrono un datagramma UDP inviato da un host remoto.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task%601>> oggetto verrà completato dopo che è stato ricevuto il pacchetto UDP.  
  
 Se si specifica un host remoto predefinito nel <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo), questo metodo accetterà datagrammi solo da tale host. Verranno rimosse tutte le altre datagrammi.  
  
 Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
> [!WARNING]
>  Se si prevede di ricevere datagrammi multicast, non viene chiamato il <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo prima di chiamare questo metodo. Il <xref:System.Net.Sockets.UdpClient> utilizzata per ricevere datagrammi devono essere creata usando il numero di porta multicast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è stato chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia un datagramma UDP a un host remoto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <summary>Invia un datagramma UDP a un host remoto.</summary>
        <returns>Numero di byte inviati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload invia datagrammi all'host remoto stabilite nel <xref:System.Net.Sockets.UdpClient.Connect%2A> metodo e restituisce il numero di byte inviato. Se non si chiama <xref:System.Net.Sockets.UdpClient.Connect%2A> prima di chiamare questo overload, il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Se si desidera inviare datagrammi da un altro host remoto, è necessario chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo) e specificare l'host remoto desiderato. Usare una delle altre <xref:System.Net.Sockets.UdpClient.Send%2A> overload del metodo per inviare datagrammi a un indirizzo di broadcast.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Un host remoto predefinito prima di utilizzare questo overload deve essere stabilita.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="dgram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <param name="endPoint">
          <see cref="T:System.Net.IPEndPoint" /> che rappresenta l'host e la porta a cui inviare il datagramma.</param>
        <summary>Invia un datagramma UDP all'host all'endpoint remoto specificato.</summary>
        <returns>Numero di byte inviati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo invia datagrammi all'endpoint specificato e restituisce il numero di byte inviati. Prima di chiamare questo overload, è necessario creare innanzitutto un <xref:System.Net.IPEndPoint> utilizzando il numero di porta e indirizzo IP dell'host remoto a cui verranno inviati i datagrammi. È possibile inviare datagrammi per la trasmissione di predefinito di indirizzi, 255.255.255.255, specificando <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> per il <xref:System.Net.IPAddress.Address%2A> proprietà del <xref:System.Net.IPEndPoint>. Dopo aver creato questo <xref:System.Net.IPEndPoint>, passarlo per il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo come la `endPoint` parametro.  
  
 Se si desidera inviare datagrammi da un altro indirizzo di broadcast, usare il <xref:System.Net.Sockets.UdpClient.Client%2A> metodo per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. È anche possibile ripristinare l'utilizzo di <xref:System.Net.Sockets.Socket> classe.  
  
> [!NOTE]
>  Non si specifica un `endPoint` parametro per questo metodo se è già stato stabilito un host remoto con la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). Se esegue l'operazione, il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). Questo esempio viene usato un <xref:System.Net.IPEndPoint> per specificare l'host di destinazione.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <param name="hostname">Nome dell'host remoto a cui si vuole inviare il datagramma.</param>
        <param name="port">Numero di porta remota con cui si vuole comunicare.</param>
        <summary>Invia un datagramma UDP a una porta specificata in un host remoto specificato.</summary>
        <returns>Numero di byte inviati.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo invia datagrammi sui valori specificati per il `hostname` e `port` parametri e restituisce il numero di byte inviato. È possibile inviare datagrammi all'indirizzo di broadcast predefinita specificando "255.255.255.255" per il `hostname` valore del parametro.  
  
 Se si desidera inviare datagrammi da un altro indirizzo di broadcast, usare il <xref:System.Net.Sockets.UdpClient.Client%2A> metodo per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. È anche possibile ripristinare l'utilizzo di <xref:System.Net.Sockets.Socket> classe.  
  
> [!NOTE]
>  Non specificare un nome host o la porta numero da questo metodo se è già stato stabilito un host remoto con la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). Se esegue l'operazione, il <xref:System.Net.Sockets.UdpClient.Send%2A> metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il <xref:System.Net.Sockets.UdpClient.Send%2A> (metodo). In questo esempio Usa un nome host e un numero di porta per identificare l'host di destinazione.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Invia un datagramma UDP in modo asincrono a un host remoto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <summary>Invia un datagramma UDP in modo asincrono a un host remoto.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo overload invia datagrammi all'host remoto stabilite nel <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). Se non si chiama <xref:System.Net.Sockets.UdpClient.Connect%2A> prima di chiamare questo overload, il metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Se si desidera inviare datagrammi da un altro host remoto, è necessario chiamare il <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo) e specificare l'host remoto desiderato. Usare una delle altre <xref:System.Net.Sockets.UdpClient.SendAsync%2A> overload del metodo per inviare datagrammi a un indirizzo di broadcast.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <param name="endPoint">
          <see cref="T:System.Net.IPEndPoint" /> che rappresenta l'host e la porta a cui inviare il datagramma.</param>
        <summary>Invia un datagramma UDP in modo asincrono a un host remoto.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo invia datagrammi all'endpoint specificato. Prima di chiamare questo overload, è necessario creare innanzitutto un <xref:System.Net.IPEndPoint> utilizzando il numero di porta e indirizzo IP dell'host remoto a cui verranno inviati i datagrammi. È possibile inviare datagrammi per la trasmissione di predefinito di indirizzi, 255.255.255.255, specificando <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> per il <xref:System.Net.IPAddress.Address%2A> proprietà del <xref:System.Net.IPEndPoint>. Dopo aver creato questo <xref:System.Net.IPEndPoint>, passare a questo metodo come la `endPoint` parametro.  
  
 Se si desidera inviare datagrammi da un altro indirizzo di broadcast, usare il <xref:System.Net.Sockets.UdpClient.Client%2A> metodo per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. È anche possibile ripristinare l'utilizzo di <xref:System.Net.Sockets.Socket> classe.  
  
> [!WARNING]
>  Non si specifica un `endPoint` parametro per questo metodo se è già stato stabilito un host remoto con la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). In caso contrario questo metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">Matrice di tipo <see cref="T:System.Byte" /> che specifica il datagramma UDP da inviare, rappresentato come una matrice di byte.</param>
        <param name="bytes">Numero di byte nel datagramma.</param>
        <param name="hostname">Nome dell'host remoto a cui si vuole inviare il datagramma.</param>
        <param name="port">Numero di porta remota con cui si vuole comunicare.</param>
        <summary>Invia un datagramma UDP in modo asincrono a un host remoto.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo invia datagrammi sui valori specificati per il `hostname` e `port` parametri. È possibile inviare datagrammi all'indirizzo di broadcast predefinita specificando "255.255.255.255" per il `hostname` valore del parametro.  
  
 Se si desidera inviare datagrammi da un altro indirizzo di broadcast, usare il <xref:System.Net.Sockets.UdpClient.Client%2A> metodo per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>e impostare l'opzione di socket <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. È anche possibile ripristinare l'utilizzo di <xref:System.Net.Sockets.Socket> classe.  
  
> [!WARNING]
>  Non specificare un nome host o la porta numero da questo metodo se è già stato stabilito un host remoto con la <xref:System.Net.Sockets.UdpClient.Connect%2A> (metodo). In caso contrario questo metodo genererà un <xref:System.Net.Sockets.SocketException>. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> per ottenere il codice di errore specifico. Dopo aver ottenuto il codice, è possibile vedere le [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> è <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ha già stabilito un host remoto predefinito.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.UdpClient" /> è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Si è verificato un errore durante l'accesso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che specifica la durata (TTL) dei pacchetti IP inviati dall'oggetto <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <value>La durata (TTL).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore di durata (TTL) indica il numero massimo di router di un pacchetto può attraversare prima che il router scarta il pacchetto e un messaggio di protocollo ICMP (Internet Control) "TTL superato" viene restituito al mittente del messaggio di errore.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato l'utilizzo del <xref:System.Net.Sockets.UdpClient.Ttl%2A> proprietà.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>