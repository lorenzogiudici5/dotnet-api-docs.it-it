<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c65b1a9b93893bbc8bf4b3b0207504d6d8de6ff8" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46615396" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NetworkStream&#xA;Inherits Stream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NetworkStream : System::IO::Stream" />
  <TypeSignature Language="F#" Value="type NetworkStream = class&#xA;    inherit Stream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Offre il flusso sottostante di dati per l'accesso alla rete.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream> classe fornisce metodi per l'invio e ricezione di dati su <xref:System.Net.Sockets.SocketType.Stream> socket in modalità di blocco. Per altre informazioni sulle differenze bloccanti e non bloccante <xref:System.Net.Sockets.Socket>s, vedere [tramite un Socket Client asincrono](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md). È possibile usare il <xref:System.Net.Sockets.NetworkStream> classe per trasferimenti di dati sincrona e asincrona. Per altre informazioni sulla comunicazione sincrona e asincrona, vedere [Sockets](~/docs/framework/network-programming/sockets.md).  
  
 Per creare un <xref:System.Net.Sockets.NetworkStream>, è necessario fornire un elemento connesso <xref:System.Net.Sockets.Socket>. È inoltre possibile specificare che cosa <xref:System.IO.FileAccess> l'autorizzazione di <xref:System.Net.Sockets.NetworkStream> ha sul fornito <xref:System.Net.Sockets.Socket>. Per impostazione predefinita, la chiusura di <xref:System.Net.Sockets.NetworkStream> non chiude l'oggetto fornito <xref:System.Net.Sockets.Socket>. Se si desidera che il <xref:System.Net.Sockets.NetworkStream> disponga delle autorizzazioni per chiudere l'oggetto fornito <xref:System.Net.Sockets.Socket>, è necessario specificare `true` per il valore della `ownsSocket` parametro.  
  
 Usare la <xref:System.Net.Sockets.NetworkStream.Write%2A> e <xref:System.Net.Sockets.NetworkStream.Read%2A> metodi per un singolo semplice di thread i/o di blocco sincrono. Se si desidera elaborare il / o utilizzando un thread separato, è consigliabile usare la <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> e <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> metodi, o il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> e <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodi per la comunicazione.  
  
 Il <xref:System.Net.Sockets.NetworkStream> non supporta l'accesso casuale al flusso di dati di rete. Il valore del <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> proprietà, che indica se il flusso supporta la ricerca, è sempre `false`; le operazioni di lettura il <xref:System.Net.Sockets.NetworkStream.Position%2A> proprietà, la lettura di <xref:System.Net.Sockets.NetworkStream.Length%2A> proprietà o chiamare il metodo la <xref:System.Net.Sockets.NetworkStream.Seek%2A> metodo genererà un <xref:System.NotSupportedException>.  
  
 Leggere e scrivere operazioni possono essere eseguite contemporaneamente in un'istanza del <xref:System.Net.Sockets.NetworkStream> classe senza la necessità di sincronizzazione. Finché è presente un thread univoco per le operazioni di scrittura e un thread univoco per le operazioni di lettura, non saranno senza interferenze tra tra lettura e scrittura thread e sincronizzazione non è necessario.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare un <xref:System.Net.Sockets.NetworkStream> da un elemento connesso <xref:System.Net.Sockets.SocketType.Stream> <xref:System.Net.Sockets.Socket> ed eseguire i/o di blocco sincrono di base.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream socket" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> utilizzato dalla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per inviare e ricevere dati.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Net.Sockets.NetworkStream" /> per l'oggetto <see cref="T:System.Net.Sockets.Socket" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream> viene creato con accesso in lettura/scrittura all'oggetto specificato <xref:System.Net.Sockets.Socket>. Il <xref:System.Net.Sockets.NetworkStream> non possiede sottostante <xref:System.Net.Sockets.Socket>, quindi la chiamata il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo non viene chiuso il <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato come creare un <xref:System.Net.Sockets.NetworkStream> con un <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="socket" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Il parametro <paramref name="socket" /> non è connesso.  
  
oppure 
La proprietà <see cref="P:System.Net.Sockets.Socket.SocketType" /> del parametro <paramref name="socket" /> non è <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
oppure 
Il parametro <paramref name="socket" /> è in uno stato non di blocco.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Uso di flussi nella rete</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> utilizzato dalla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per inviare e ricevere dati.</param>
        <param name="ownsSocket">
          <see langword="true" /> per indicare che <see cref="T:System.Net.Sockets.NetworkStream" /> assumerà la proprietà dell'oggetto <see cref="T:System.Net.Sockets.Socket" />. In caso contrario, <see langword="false" />.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Sockets.NetworkStream" /> per il <see cref="T:System.Net.Sockets.Socket" /> specificato con la proprietà <see cref="T:System.Net.Sockets.Socket" /> specificata.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream> viene creato con accesso in lettura/scrittura all'oggetto specificato <xref:System.Net.Sockets.Socket>. Se il valore di `ownsSocket` parametro è `true`, il <xref:System.Net.Sockets.NetworkStream> assume la proprietà dell'oggetto sottostante <xref:System.Net.Sockets.Socket>e chiama il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo chiude anche sottostante <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 L'esempio di codice seguente crea una <xref:System.Net.Sockets.NetworkStream> con la proprietà del <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="socket" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Il parametro <paramref name="socket" /> non è connesso.  
  
oppure 
Il valore della proprietà <see cref="P:System.Net.Sockets.Socket.SocketType" /> del parametro <paramref name="socket" /> non è <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
oppure 
Il parametro <paramref name="socket" /> è in uno stato non di blocco.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> utilizzato dalla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per inviare e ricevere dati.</param>
        <param name="access">Combinazione bit per bit dei valori <see cref="T:System.IO.FileAccess" /> che specifica il tipo di accesso assegnato alla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per il <see cref="T:System.Net.Sockets.Socket" /> fornito.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Net.Sockets.NetworkStream" /> per l'oggetto <see cref="T:System.Net.Sockets.Socket" /> specificato con i diritti di accesso specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream> viene creato con l'accesso specificato all'oggetto specificato <xref:System.Net.Sockets.Socket>. Con questo costruttore, il <xref:System.Net.Sockets.NetworkStream> non possiede sottostante <xref:System.Net.Sockets.Socket>, quindi la chiamata il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo non chiude l'oggetto sottostante <xref:System.Net.Sockets.Socket>.  
  
 Il `access` set di parametri di <xref:System.Net.Sockets.NetworkStream.CanRead%2A> e <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> delle proprietà del <xref:System.Net.Sockets.NetworkStream>. Se si specifica <xref:System.IO.FileAccess.Write>, il <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). Se si specifica <xref:System.IO.FileAccess.Read>, il <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo). Se si specifica <xref:System.IO.FileAccess.ReadWrite>, entrambe le chiamate al metodo sono consentite.  
  
   
  
## Examples  
 L'esempio di codice seguente crea una <xref:System.Net.Sockets.NetworkStream> con la possibilità di leggere e scrivere il <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="socket" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Il parametro <paramref name="socket" /> non è connesso.  
  
oppure 
La proprietà <see cref="P:System.Net.Sockets.Socket.SocketType" /> del parametro <paramref name="socket" /> non è <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
oppure 
Il parametro <paramref name="socket" /> è in uno stato non di blocco.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NetworkStream(System::Net::Sockets::Socket ^ socket, System::IO::FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.NetworkStream : System.Net.Sockets.Socket * System.IO.FileAccess * bool -&gt; System.Net.Sockets.NetworkStream" Usage="new System.Net.Sockets.NetworkStream (socket, access, ownsSocket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> utilizzato dalla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per inviare e ricevere dati.</param>
        <param name="access">Combinazione bit per bit dei valori <see cref="T:System.IO.FileAccess" /> che specifica il tipo di accesso assegnato alla classe <see cref="T:System.Net.Sockets.NetworkStream" /> per il <see cref="T:System.Net.Sockets.Socket" /> fornito.</param>
        <param name="ownsSocket">
          <see langword="true" /> per indicare che <see cref="T:System.Net.Sockets.NetworkStream" /> assumerà la proprietà dell'oggetto <see cref="T:System.Net.Sockets.Socket" />. In caso contrario, <see langword="false" />.</param>
        <summary>Crea una nuova istanza della classe <see cref="T:System.Net.Sockets.NetworkStream" /> per l'oggetto <see cref="T:System.Net.Sockets.Socket" /> specificato con i diritti di accesso e la appartenenza alla classe <see cref="T:System.Net.Sockets.Socket" /> specificati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream> viene creato con accesso in lettura/scrittura all'oggetto specificato <xref:System.Net.Sockets.Socket>. Se il valore della `ownsSocket` parametro è `true`, il <xref:System.Net.Sockets.NetworkStream> assume la proprietà dell'oggetto sottostante <xref:System.Net.Sockets.Socket>e chiamando il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo chiude anche sottostante <xref:System.Net.Sockets.Socket>.  
  
 Il `access` set di parametri di <xref:System.Net.Sockets.NetworkStream.CanRead%2A> e <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> delle proprietà del <xref:System.Net.Sockets.NetworkStream>. Se si specifica <xref:System.IO.FileAccess.Write>, il <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). Se si specifica <xref:System.IO.FileAccess.Read>, il <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo). Se si specifica <xref:System.IO.FileAccess.ReadWrite>, entrambe le chiamate al metodo sono consentite.  
  
   
  
## Examples  
 L'esempio di codice seguente crea una <xref:System.Net.Sockets.NetworkStream> con la possibilità di leggere e scrivere il <xref:System.Net.Sockets.Socket>. La proprietà del <xref:System.Net.Sockets.Socket> viene assegnato a questo <xref:System.Net.Sockets.NetworkStream> specificando `true` per il `ownsSocket` parametro.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream_Async_SendAndReceive#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="socket" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">Il parametro <paramref name="socket" /> non è connesso.  
  
oppure 
La proprietà <see cref="P:System.Net.Sockets.Socket.SocketType" /> del parametro <paramref name="socket" /> non è <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
oppure 
Il parametro <paramref name="socket" /> è in uno stato non di blocco.</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginRead (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginRead (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di tipo <see cref="T:System.Byte" /> che corrisponde alla posizione in memoria in cui archiviare i dati dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Posizione in <c>buffer</c> da cui iniziare l'archiviazione dei dati.</param>
        <param name="size">Numero di byte da leggere dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="callback">Il delegato <see cref="T:System.AsyncCallback" /> eseguito dopo il completamento del metodo <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <param name="state">Oggetto che contiene i dati aggiuntivi definiti dall'utente.</param>
        <summary>Avvia una lettura asincrona dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che rappresenta la chiamata asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo avvia in modo asincrono la lettura dei dati dal buffer di rete in ingresso. La chiamata di <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo offre la possibilità di ricevere i dati all'interno di un thread di esecuzione separato.  
  
 È necessario creare un metodo di callback che implementa il <xref:System.AsyncCallback> delegato e passare il relativo nome per il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> (metodo). Come minimo, il `state` parametro deve contenere il <xref:System.Net.Sockets.NetworkStream>. Poiché si desidera ottenere i dati ricevuti entro il metodo di callback, è necessario creare una classe o una struttura per contenere un buffer di lettura e qualsiasi altra informazione utile. Passare l'istanza di classe o struttura per il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo attraverso il `state` parametro.  
  
 Deve chiamare il metodo di callback di <xref:System.Net.Sockets.NetworkStream.EndRead%2A> (metodo). Quando l'applicazione chiama <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, il sistema attenderà fino a quando non vengono ricevuti i dati o si verifica un errore e quindi il sistema userà un thread separato per eseguire il metodo di callback specificato e i blocchi sulle <xref:System.Net.Sockets.NetworkStream.EndRead%2A> finché l'oggetto fornito <xref:System.Net.Sockets.NetworkStream> legge i dati o genera un'eccezione. Se si desidera che il thread originale viene bloccato dopo aver chiamato il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo, usare il <xref:System.Threading.WaitHandle.WaitOne%2A> (metodo). Chiamare <xref:System.Threading.EventWaitHandle.Set%2A> nel metodo di callback quando si desidera che il thread originale di continuare l'esecuzione. Per altre informazioni su come scrivere i metodi di callback, vedere [marshalling di un delegato come metodo di Callback](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
 Il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo legge quantità di dati è disponibile, fino al numero di byte specificato da di `size` parametro.  
  
> [!NOTE]
>  Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>. In questo caso, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Leggere e scrivere operazioni possono essere eseguite contemporaneamente in un'istanza del <xref:System.Net.Sockets.NetworkStream> classe senza la necessità di sincronizzazione. Finché è presente un thread univoco per le operazioni di scrittura e un thread univoco per le operazioni di lettura, non saranno senza interferenze tra tra lettura e scrittura thread e sincronizzazione non è necessario.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> per leggere i dati in modo asincrono dal flusso di rete. Il `myReadCallBack` metodo implementa il <xref:System.AsyncCallback> delegare e viene chiamato dal sistema quando <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> restituisce.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Async_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="offset" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="offset" /> è maggiore della lunghezza del parametro <paramref name="buffer" />.  
  
oppure 
<paramref name="size" /> è minore di 0.  
  
oppure 
<paramref name="size" /> è maggiore della lunghezza di <paramref name="buffer" /> meno il valore del parametro <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.  
  
oppure 
Si è verificato un errore durante la lettura dalla rete.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginWrite (buffer As Byte(), offset As Integer, size As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="networkStream.BeginWrite (buffer, offset, size, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di tipo <see cref="T:System.Byte" /> che contiene i dati da scrivere nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Posizione in <c>buffer</c> da cui avviare l'invio dei dati.</param>
        <param name="size">Numero di byte da scrivere nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="callback">Il delegato <see cref="T:System.AsyncCallback" /> eseguito dopo il completamento del metodo <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</param>
        <param name="state">Oggetto che contiene i dati aggiuntivi definiti dall'utente.</param>
        <summary>Avvia una scrittura asincrona in un flusso.</summary>
        <returns>Oggetto <see cref="T:System.IAsyncResult" /> che rappresenta la chiamata asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metodo avvia un'operazione di invio asincrona all'host remoto. La chiamata di <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metodo offre la possibilità di inviare dati all'interno di un thread di esecuzione separato.  
  
 È necessario creare un metodo di callback che implementa il <xref:System.AsyncCallback> delegato e passare il relativo nome per il <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> (metodo). Come minimo, il `state` parametro deve contenere il <xref:System.Net.Sockets.NetworkStream>. Se il callback richiede ulteriori informazioni, è possibile creare una classe o una struttura per contenere il <xref:System.Net.Sockets.NetworkStream> e le altre informazioni necessarie. Passare l'istanza di classe o struttura per il <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metodo attraverso il `state` parametro.  
  
 Il metodo di callback deve implementare il <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> (metodo). Quando l'applicazione chiama <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, il sistema utilizza un thread separato per eseguire il metodo di callback specificato e si blocca sulle <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> fino a quando non la <xref:System.Net.Sockets.NetworkStream> invia il numero di byte richiesto o genera un'eccezione. Se si desidera che il thread originale viene bloccato dopo aver chiamato il <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metodo, usare il <xref:System.Threading.WaitHandle.WaitOne%2A> (metodo). Chiamare <xref:System.Threading.EventWaitHandle.Set%2A> nel metodo di callback quando si desidera che il thread originale di continuare l'esecuzione. Per altre informazioni su come scrivere i metodi di callback, vedere [marshalling di un delegato come metodo di Callback](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md).  
  
> [!NOTE]
>  Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>. In questo caso, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
 Leggere e scrivere operazioni possono essere eseguite contemporaneamente in un'istanza del <xref:System.Net.Sockets.NetworkStream> classe senza la necessità di sincronizzazione. Finché è presente un thread univoco per le operazioni di scrittura e un thread univoco per le operazioni di lettura, non saranno senza interferenze tra tra lettura e scrittura thread e sincronizzazione non è necessario.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> per scrivere dati in modo asincrono un flusso di rete. Il `myWriteCallBack` metodo implementa il <xref:System.AsyncCallback> delegare e viene chiamato dal sistema quando <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> restituisce.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream_Async_SendAndReceive#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="offset" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
oppure 
Il parametro <paramref name="size" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="size" /> è maggiore della lunghezza di <paramref name="buffer" /> meno il valore del parametro <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.  
  
oppure 
Si è verificato un errore durante la scrittura nella rete.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Sockets.NetworkStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la classe <see cref="T:System.Net.Sockets.NetworkStream" /> supporta la lettura.</summary>
        <value>
          <see langword="true" /> se i dati possono essere letti dal flusso, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Net.Sockets.NetworkStream.CanRead%2A> viene `true`, <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo). Fornire appropriato <xref:System.IO.FileAccess> valore nel costruttore per impostare la lettura e scrittura della enumerato il <xref:System.Net.Sockets.NetworkStream>. Il <xref:System.Net.Sockets.NetworkStream.CanRead%2A> proprietà viene impostata quando il <xref:System.Net.Sockets.NetworkStream> viene inizializzato.  
  
   
  
## Examples  
 Nell'esempio di codice viene controllato <xref:System.Net.Sockets.NetworkStream.CanRead%2A> per verificare che il <xref:System.Net.Sockets.NetworkStream> è leggibile. Quindi viene eseguita un'operazione di lettura sul <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il flusso supporta la ricerca. Questa proprietà non è attualmente supportata. La proprietà restituisce sempre <see langword="false" />.</summary>
        <value>
          <see langword="false" /> in tutti i casi per indicare che <see cref="T:System.Net.Sockets.NetworkStream" /> non può cercare una posizione specifica nel flusso.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se le proprietà di timeout sono utilizzabili per <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          <see langword="true" /> in tutti i casi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà è presente perché viene ereditato da <xref:System.IO.Stream>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la classe <see cref="T:System.Net.Sockets.NetworkStream" /> supporta la scrittura.</summary>
        <value>
          <see langword="true" /> se i dati possono essere scritti nella classe <see cref="T:System.Net.Sockets.NetworkStream" />, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> viene `true`, <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). Fornire appropriato <xref:System.IO.FileAccess> valore nel costruttore per impostare la lettura e scrittura della enumerato il <xref:System.Net.Sockets.NetworkStream>. Il <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> proprietà viene impostata quando il <xref:System.Net.Sockets.NetworkStream> viene inizializzato.  
  
   
  
## Examples  
 Nell'esempio di codice viene controllato <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> per verificare che il <xref:System.Net.Sockets.NetworkStream> è accessibile in scrittura. Quindi viene eseguita un'operazione di scrittura sul <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="networkStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (timeout As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(int timeout);" />
      <MemberSignature Language="F#" Value="override this.Close : int -&gt; unit" Usage="networkStream.Close timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">Signed Integer a 32 bit che specifica il numero di millisecondi di attesa per l'invio dei restanti dati prima della chiusura.</param>
        <summary>Chiude l'oggetto <see cref="T:System.Net.Sockets.NetworkStream" /> una volta trascorso l'intervallo di tempo specificato per consentire l'invio dei dati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo libera le risorse gestite e non associate la <xref:System.Net.Sockets.NetworkStream>. Se il <xref:System.Net.Sockets.NetworkStream> possiede sottostante <xref:System.Net.Sockets.Socket>, viene chiuso anche.  
  
 Se un <xref:System.Net.Sockets.NetworkStream> è stato associato un <xref:System.Net.Sockets.TcpClient>, il <xref:System.Net.Sockets.NetworkStream.Close%2A> metodo verrà chiudere la connessione TCP, ma non smaltire associato <xref:System.Net.Sockets.TcpClient>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="timeout" /> è minore di -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DataAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool DataAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.DataAvailable : bool" Usage="System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se i dati sono disponibili per la lettura nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          <see langword="true" /> se i dati sono disponibili per la lettura nel flusso, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usare il <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> proprietà per determinare se i dati sono pronti per essere letti. Se <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> viene `true`, una chiamata a <xref:System.Net.Sockets.NetworkStream.Read%2A> restituisce immediatamente. Se l'host remoto viene arrestato o chiude la connessione <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> generino un <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 Esempio di codice seguente legge il <xref:System.Net.Sockets.NetworkStream> , purché i dati sono disponibili.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Usare la proprietà <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> per ottenere il codice di errore specifico e fare riferimento alla documentazione relativa ai <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">codici di errore dell'API di Windows Sockets versione 2</see> per una descrizione dettagliata dell'errore.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="networkStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
        <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Net.Sockets.NetworkStream" /> e, facoltativamente, le risorse gestite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo viene chiamato da parte del pubblico `Dispose` metodo e <xref:System.Object.Finalize%2A> (metodo). `Dispose` richiama il metodo protetto `Dispose(Boolean)` metodo con il `disposing` parametro impostato su `true`. <xref:System.Object.Finalize%2A> richiama `Dispose` con `disposing` impostato su `false`.  
  
 Se il parametro `disposing` è `true`, questo metodo rilascia tutte le risorse utilizzate dagli oggetti gestiti a cui la classe <xref:System.Net.Sockets.NetworkStream> fa riferimento. Il metodo richiama il metodo `Dispose` di ciascun oggetto cui viene fatto riferimento.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il metodo 
            <see langword="Dispose" /> può essere chiamato più volte da altri oggetti. In caso di override di <see langword="Dispose(Boolean)" />, non fare riferimento a oggetti già eliminati in una chiamata precedente a <see langword="Dispose" />. Per altre informazioni su come implementare <see langword="Dispose(Boolean)" />, vedere [implementazione di un metodo Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
Per altre informazioni sulle <see langword="Dispose" /> e <see cref="M:System.Object.Finalize" />, vedere [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md) e [override del metodo Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="networkStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Oggetto <see cref="T:System.IAsyncResult" /> che rappresenta una chiamata asincrona.</param>
        <summary>Gestisce la fine di una lettura asincrona.</summary>
        <returns>Numero di byte letti dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodo completa l'operazione di lettura asincrona avviata nel <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> (metodo).  
  
 Prima di chiamare <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, è necessario creare un metodo di callback che implementa il <xref:System.AsyncCallback> delegare. Questo metodo di callback viene eseguito in un thread separato e viene chiamato dal sistema dopo <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> restituisce. Il metodo di callback deve accettare il <xref:System.IAsyncResult> restituiti dai <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> metodo come parametro.  
  
 All'interno del metodo di callback, chiamare il <xref:System.IAsyncResult.AsyncState%2A> proprietà del <xref:System.IAsyncResult> per ottenere l'oggetto di stato passato al <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> (metodo). Estrarre la ricezione <xref:System.Net.Sockets.NetworkStream> da questo oggetto di stato. Dopo aver ottenuto il <xref:System.Net.Sockets.NetworkStream>, chiamare il <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodo per completare l'operazione di lettura e restituisce il numero di byte letti.  
  
 Il <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodo si blocca fino a quando non sono disponibili dati. Il <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodo legge quantità di dati è disponibile fino al numero di byte specificato nel `size` parametro del <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> (metodo). Se l'host remoto viene arrestato il <xref:System.Net.Sockets.Socket> tutti i dati disponibili e la connessione è stato ricevuto, il <xref:System.Net.Sockets.NetworkStream.EndRead%2A> metodo viene completata immediatamente e restituisce zero byte.  
  
 Per ottenere i dati ricevuti, chiamare il <xref:System.IAsyncResult.AsyncState%2A> proprietà del <xref:System.IAsyncResult>ed estrarre il buffer contenuto nell'oggetto stato risultante.  
  
> [!NOTE]
>  Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>. In questo caso, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito `myReadCallback` viene fornito a <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> come metodo di callback. <xref:System.Net.Sockets.NetworkStream.EndRead%2A> viene implementato in `myReadCallback` completamento asincrona avviata da leggere <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream_Async_SendAndReceive#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Il valore del parametro <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="networkStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">L'oggetto <see cref="T:System.IAsyncResult" /> che rappresenta la chiamata asincrona.</param>
        <summary>Gestisce la fine di una scrittura asincrona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> completa l'operazione di invio asincrono avviata in <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  
  
 Prima di chiamare <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, è necessario creare un metodo di callback che implementa il <xref:System.AsyncCallback> delegare. Questo metodo di callback viene eseguito in un thread separato e viene chiamato dal sistema dopo <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> restituisce. Il metodo di callback deve accettare il <xref:System.IAsyncResult> restituiti dai <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> metodo come parametro.  
  
 All'interno del metodo di callback, chiamare il <xref:System.IAsyncResult.AsyncState%2A> proprietà del `IAsyncResult` parametro per ottenere il <xref:System.Net.Sockets.NetworkStream>. Dopo aver ottenuto il <xref:System.Net.Sockets.NetworkStream>, è possibile chiamare il <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> metodo per completare l'operazione di invio e restituire il numero di byte inviati.  
  
 Il <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> metodo si blocca fino a quando non viene inviato il numero di byte richiesto.  
  
> [!NOTE]
>  Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>. In questo caso, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Nell'esempio di codice riportato di seguito `myWriteCallback` viene fornito a <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> come metodo di callback. <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> viene implementato in `myWriteCallback` per completare la chiamata di scrittura asincrona avviata da <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>.  
  
 [!code-cpp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Async_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="asyncResult" /> è <see langword="null" />.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.  
  
oppure 
Si è verificato un errore durante la scrittura nella rete.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NetworkStream ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="networkStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutte le risorse usate da <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo esegue l'override del metodo <xref:System.Object.Finalize%2A?displayProperty=nameWithType>. Il codice dell'applicazione non deve chiamare questo metodo. un oggetto <xref:System.Object.Finalize%2A> metodo viene richiamato automaticamente durante l'operazione di garbage collection, a meno che non la finalizzazione del garbage collector non è stata disabilitata da una chiamata al <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> (metodo).  
  
 Per altre informazioni sull'utilizzo del metodo Finalize, vedere [metodi Finalize e distruttori](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [pulizia di risorse non gestite](~/docs/standard/garbage-collection/unmanaged.md), e [override del metodo Finalize](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)) .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="networkStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scarica dati da un flusso. Questo metodo è riservato per utilizzi futuri.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.Flush%2A> metodo implementa il <xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType> metodo; tuttavia, poiché <xref:System.Net.Sockets.NetworkStream> non è memorizzato nel buffer, non produce alcun effetto sui flussi di rete. La chiamata di <xref:System.Net.Sockets.NetworkStream.Flush%2A> metodo non genera un'eccezione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Token di annullamento usato per propagare la notifica che indica che l'operazione deve essere annullata.</param>
        <summary>Svuota i dati dal flusso come operazione asincrona.</summary>
        <returns>Restituisce <see cref="T:System.Threading.Tasks.Task" />.  
  
Oggetto dell'attività che rappresenta l'operazione asincrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa operazione non verrà bloccata. L'oggetto restituito <xref:System.Threading.Tasks.Task> oggetto verrà completato dopo che i dati sono stati scaricati dal flusso per il <xref:System.Net.Sockets.NetworkStream> istanza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Sockets.NetworkStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la lunghezza dei dati disponibili nel flusso. Questa proprietà non è attualmente supportata e genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
        <value>Lunghezza dei dati disponibili nel flusso.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Qualsiasi utilizzo di questa proprietà.</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Sockets.NetworkStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la posizione corrente nel flusso. Questa proprietà non è attualmente supportata e genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
        <value>Posizione corrente all'interno del flusso.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Qualsiasi utilizzo di questa proprietà.</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, size As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="networkStream.Read (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di tipo <see cref="T:System.Byte" /> che corrisponde alla posizione in memoria in cui archiviare i dati dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Posizione in <c>buffer</c> in cui iniziare ad archiviare i dati.</param>
        <param name="size">Numero di byte da leggere dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <summary>Legge dati dalla classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <returns>Numero di byte letti da <see cref="T:System.Net.Sockets.NetworkStream" /> oppure 0 se il socket è chiuso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo legge i dati nel `buffer` parametro e restituisce il numero di byte letti. Se il socket viene chiuso, il <xref:System.Net.Sockets.NetworkStream.Read%2A> metodo restituisce 0. Il <xref:System.Net.Sockets.NetworkStream.Read%2A> operazione legge quantità di dati è disponibile, fino al numero di byte specificato da di `size` parametro. Se l'host remoto Arresta la connessione e tutti i dati disponibili è stato ricevuto, il <xref:System.Net.Sockets.NetworkStream.Read%2A> metodo viene completata immediatamente e restituire zero byte.  
  
> [!NOTE]
>  Verificare se il <xref:System.Net.Sockets.NetworkStream> è leggibile, chiamare il <xref:System.Net.Sockets.NetworkStream.CanRead%2A> proprietà. Se si prova a leggere da un <xref:System.Net.Sockets.NetworkStream> che non è leggibile, si otterrà un <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>. In questo caso, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
   
  
## Examples  
 Il codice seguente viene illustrato come utilizzare <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> per determinare se i dati sono disponibili per la lettura. Se sono disponibili dati, vengono letti dal <xref:System.Net.Sockets.NetworkStream>.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="offset" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
oppure 
Il parametro <paramref name="size" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="size" /> è maggiore della lunghezza di <paramref name="buffer" /> meno il valore del parametro <paramref name="offset" />.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.IO.IOException">L'oggetto <see cref="T:System.Net.Sockets.Socket" /> sottostante è chiuso.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.  
  
oppure 
Si è verificato un errore durante la lettura dalla rete.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <related type="Article" href="~/docs/framework/network-programming/using-streams-on-the-network.md">Uso di flussi nella rete</related>
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Readable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Readable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Readable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Readable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se è possibile leggere la classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          <see langword="true" /> per indicare che la classe <see cref="T:System.Net.Sockets.NetworkStream" /> può essere letta, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario derivare dal <xref:System.Net.Sockets.NetworkStream> classe da utilizzare il <xref:System.Net.Sockets.NetworkStream.Readable%2A> proprietà. Se <xref:System.Net.Sockets.NetworkStream.Readable%2A> viene `true`, <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo). È inoltre possibile determinare se un <xref:System.Net.Sockets.NetworkStream> verificando accessibile pubblicamente <xref:System.Net.Sockets.NetworkStream.CanRead%2A> proprietà.  
  
 Il <xref:System.Net.Sockets.NetworkStream.Readable%2A> proprietà viene impostata quando il <xref:System.Net.Sockets.NetworkStream> viene inizializzato.  
  
   
  
## Examples  
 Nell'esempio di codice seguente, il `CanCommunicate` i controlli delle proprietà di <xref:System.Net.Sockets.NetworkStream.Readable%2A> proprietà per determinare se il <xref:System.Net.Sockets.NetworkStream> è leggibile.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="networkStream.ReadAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'intervallo di tempo per il quale un'operazione di lettura si blocca in attesa dei dati.</summary>
        <value>Valore <see cref="T:System.Int32" /> che specifica l'intervallo di tempo, in millisecondi, che deve trascorrere prima che l'operazione di lettura generi un errore. Il valore predefinito, <see cref="F:System.Threading.Timeout.Infinite" />, specifica che non è previsto un timeout per l'operazione di lettura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione di lettura non viene completata entro il periodo di tempo specificato da questa proprietà, l'operazione di lettura genera un <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Questa proprietà viene applicata solo alle letture sincrone eseguite chiamando il <xref:System.Net.Sockets.NetworkStream.Read%2A> (metodo). Questa proprietà non influiscono sulle operazioni di lettura asincrone eseguite chiamando il <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente imposta il timeout di lettura per un flusso di rete da 10 millisecondi.  
  
 [!code-csharp[NCLTcpClientSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore specificato è minore o uguale a zero e non rappresenta il campo <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="networkStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">Questo parametro non viene usato.</param>
        <param name="origin">Questo parametro non viene usato.</param>
        <summary>Imposta la posizione corrente del flusso sul valore dato. Questo metodo non è attualmente supportato e genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
        <returns>La posizione all'interno del flusso.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Qualsiasi utilizzo di questa proprietà.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="networkStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Questo parametro non viene usato.</param>
        <summary>Imposta la lunghezza del flusso. Mediante questo metodo viene sempre generata un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Qualsiasi utilizzo di questa proprietà.</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Socket As Socket" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Net::Sockets::Socket ^ Socket { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Socket : System.Net.Sockets.Socket" Usage="System.Net.Sockets.NetworkStream.Socket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'elemento <see cref="T:System.Net.Sockets.Socket" /> sottostante.</summary>
        <value>Oggetto <see cref="T:System.Net.Sockets.Socket" /> che rappresenta la connessione di rete sottostante.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le classi che derivano da <xref:System.Net.Sockets.NetworkStream> possibile usare questa proprietà per ottenere l'oggetto sottostante <xref:System.Net.Sockets.Socket>. Usare sottostante <xref:System.Net.Sockets.Socket> restituiti dai <xref:System.Net.Sockets.NetworkStream.Socket%2A> proprietà se richiedono accesso diverso da quello <xref:System.Net.Sockets.NetworkStream> fornisce.  
  
> [!NOTE]
>  Questa proprietà è accessibile solo tramite questa classe o una classe derivata.  
  
   
  
## Examples  
 Esempio di codice seguente recupera il sottostante <xref:System.Net.Sockets.Socket> per verificare una connessione attiva.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="networkStream.Write (buffer, offset, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Matrice di tipo <see cref="T:System.Byte" /> che contiene i dati da scrivere nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <param name="offset">Posizione in <c>buffer</c> da cui iniziare a scrivere i dati.</param>
        <param name="size">Numero di byte da scrivere nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
        <summary>Scrive dati nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Sockets.NetworkStream.Write%2A> metodo inizia in corrispondenza `offset` e invia `size` byte dal contenuto di `buffer` alla rete. Il <xref:System.Net.Sockets.NetworkStream.Write%2A> metodo si blocca fino a quando non viene inviato il numero di byte richiesto o un <xref:System.Net.Sockets.SocketException> viene generata un'eccezione. Se si riceve un <xref:System.Net.Sockets.SocketException>, usare il <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> proprietà da ottenere il codice di errore specifico e fare riferimento al [codice di errore API Windows Sockets versione 2](/windows/desktop/winsock/windows-sockets-error-codes-2) documentazione per una descrizione dettagliata dell'errore.  
  
> [!NOTE]
>  Verificare se il <xref:System.Net.Sockets.NetworkStream> è accessibile in scrittura per l'accesso al <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> proprietà. Se si prova a scrivere in un <xref:System.Net.Sockets.NetworkStream> che non è accessibile in scrittura, si otterrà un <xref:System.IO.IOException>. Se si riceve un <xref:System.IO.IOException>, selezionare il <xref:System.Exception.InnerException%2A> proprietà per determinare se è stata causata da un <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 Il codice seguente viene controllato per verificare se il <xref:System.Net.Sockets.NetworkStream> è accessibile in scrittura. Se si tratta, quindi <xref:System.Net.Sockets.NetworkStream.Write%2A> viene usato per scrivere un piccolo messaggio.  
  
 [!code-cpp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream_Synch_SendAndReceive#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="buffer" /> è <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="offset" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="offset" /> è maggiore della lunghezza di <paramref name="buffer" />.  
  
oppure 
Il parametro <paramref name="size" /> è minore di 0.  
  
oppure 
Il parametro <paramref name="size" /> è maggiore della lunghezza di <paramref name="buffer" /> meno il valore del parametro <paramref name="offset" />.</exception>
        <exception cref="T:System.IO.IOException">Si è verificato un errore durante la scrittura nella rete.  
  
oppure 
Si è verificato un errore durante l'accesso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> è chiuso.  
  
oppure 
Si è verificato un errore durante la lettura dalla rete.</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberSignature Language="VB.NET" Value="Protected Property Writeable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Writeable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Writeable : bool with get, set" Usage="System.Net.Sockets.NetworkStream.Writeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se è possibile scrivere nella classe <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
        <value>
          <see langword="true" /> se i dati possono essere scritti nel flusso, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È necessario derivare dal <xref:System.Net.Sockets.NetworkStream> classe da utilizzare il <xref:System.Net.Sockets.NetworkStream.Writeable%2A> proprietà. Se <xref:System.Net.Sockets.NetworkStream.Writeable%2A> viene `true`, <xref:System.Net.Sockets.NetworkStream> consente le chiamate per il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). È inoltre possibile determinare se un <xref:System.Net.Sockets.NetworkStream> sia accessibile in scrittura controllando accessibile pubblicamente <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> proprietà.  
  
 Il <xref:System.Net.Sockets.NetworkStream.Writeable%2A> proprietà viene impostata quando il <xref:System.Net.Sockets.NetworkStream> viene inizializzato.  
  
   
  
## Examples  
 Nell'esempio di codice seguente, il `CanCommunicate` i controlli delle proprietà di <xref:System.Net.Sockets.NetworkStream.Writeable%2A> proprietà per determinare se il <xref:System.Net.Sockets.NetworkStream> è accessibile in scrittura.  
  
 [!code-cpp[NetworkStream_Protected_Members#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream_Protected_Members#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream_Protected_Members#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int size, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="networkStream.WriteAsync (buffer, offset, size, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'intervallo di tempo per il quale un'operazione di scrittura si blocca in attesa dei dati.</summary>
        <value>Valore <see cref="T:System.Int32" /> che specifica l'intervallo di tempo, in millisecondi, che deve trascorrere prima che l'operazione di scrittura generi un errore. Il valore predefinito, <see cref="F:System.Threading.Timeout.Infinite" />, specifica che non è previsto un timeout per l'operazione di scrittura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se l'operazione di scrittura viene completata entro il periodo di tempo specificato da questa proprietà, l'operazione di scrittura genera un <xref:System.IO.IOException>.  
  
> [!NOTE]
>  Questa proprietà influisce su operazioni di scrittura sincrona solo eseguite chiamando il <xref:System.Net.Sockets.NetworkStream.Write%2A> (metodo). Questa proprietà non influiscono sulle operazioni di scrittura asincrone eseguite chiamando il <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> (metodo).  
  
   
  
## Examples  
 Esempio di codice seguente imposta il timeout di scrittura per un flusso di rete da 10 millisecondi.  
  
 [!code-cpp[NCLTcpServerSync#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Il valore specificato è minore o uguale a zero e non rappresenta il campo <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>