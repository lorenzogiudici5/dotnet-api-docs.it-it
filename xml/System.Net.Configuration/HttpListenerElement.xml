<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7d7967b65199402b940d05e5306b8671c4c11ada" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51895832" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpListenerElement&#xA;Inherits ConfigurationElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpListenerElement sealed : System::Configuration::ConfigurationElement" />
  <TypeSignature Language="F#" Value="type HttpListenerElement = class&#xA;    inherit ConfigurationElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Rappresenta l'elemento HttpListener nel file di configurazione. Questa classe non può essere ereditata.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa classe corrisponde alla \<httpListener > elemento di configurazione (impostazioni di rete). Questa classe fornisce accesso programmatico alle informazioni che possono essere archiviate nei file di configurazione.  
  
 Il <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> proprietà indica se <xref:System.Net.HttpListener> Usa l'URI senza codice di escape non elaborato anziché l'URI convertito in cui vengono convertiti i valori codificati in percentuale e vengono eseguiti altri passaggi di normalizzazione.  
  
 Quando un <xref:System.Net.HttpListener> istanza riceve una richiesta tramite il `http.sys` servizio, crea un'istanza della stringa URI fornita dal `http.sys`e lo espone come il <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> proprietà.  
  
 Il `http.sys` servizio espone due stringhe URI richiesta:  
  
-   URI non elaborato  
  
-   URI convertito  
  
 L'URI non elaborato è il <xref:System.Uri?displayProperty=nameWithType> fornito nella riga della richiesta di una richiesta HTTP:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 L'URI non elaborato fornito dal `http.sys` per è indicato in precedenza, la richiesta di "percorso /". Rappresenta la stringa che segue il verbo HTTP, come è stato inviato in rete.  
  
 Il `http.sys` servizio crea un URI convertito dalle informazioni ottenute tramite l'URI fornito nella riga della richiesta HTTP nella richiesta e intestazione Host per determinare il server di origine della richiesta deve essere inoltrato a. Questa operazione viene eseguita confrontando le informazioni della richiesta con un set di prefissi URI registrati. La documentazione di HTTP Server SDK fa riferimento a questo URI convertito come le [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) struttura.  
  
 Per poter essere in grado di confrontare la richiesta con i prefissi URI registrati, la normalizzazione della richiesta deve essere eseguita. Nell'esempio precedente l'URI convertito sarà come segue:  
  
 `http://www.contoso.com/path/`  
  
 Il `http.sys` service combina il <xref:System.Uri.Host%2A?displayProperty=nameWithType> valore della proprietà e la stringa nella riga della richiesta per creare un URI convertito. È inoltre `http.sys` e il <xref:System.Uri?displayProperty=nameWithType> classe anche eseguire le operazioni seguenti:  
  
-   Escape di annullare la percentuale di tutti i valori codificati.  
  
-   Caratteri non ASCII converte codificato in percentuale in una rappresentazione di caratteri UTF-16. Si noti che i caratteri DBCS/ANSI e UTF-8 sono supportati anche i caratteri Unicode (codifica Unicode utilizzando il formato uXXXX %).  
  
-   Esegue gli altri passaggi di normalizzazione, ad esempio la compressione del percorso.  
  
 Poiché la richiesta non contiene alcuna informazione sulla codifica usata per i valori codificati in percentuale, potrebbe non essere possibile determinare la codifica corretta appena analizzando i valori codificati in percentuale.  
  
 Di conseguenza `http.sys` vengono fornite due chiavi del Registro di sistema per la modifica del processo:  
  
|Chiave del Registro di sistema|Valore predefinito|Descrizione|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Se è zero, `http.sys` accetta solo gli URL con codifica UTF-8.<br /><br /> Se diverso da zero, `http.sys` accetta anche un URL con codifica ANSI o con codifica DBCS nelle richieste.|  
|FavorUTF8|1|Se diverso da zero, `http.sys` sempre prova a decodificare un URL come UTF-8 per primo; se tale conversione non riesce ed EnableNonUTF8 è diverso da zero, HTTP. sys quindi prova a decodificare come ANSI o DBCS.<br /><br /> Se è zero (ed EnableNonUTF8 è diverso da zero), `http.sys` prova a decodificare come ANSI o DBCS; se non riesce, ritenta una conversione UTF-8.|  
  
 Quando <xref:System.Net.HttpListener> riceve una richiesta, Usa l'URI convertito da `http.sys` come input per il <xref:System.Net.HttpListenerRequest.Url%2A> proprietà.  
  
 È necessario per il supporto di caratteri oltre ai caratteri e numeri negli URI. Un esempio è l'URI seguente, che consente di recuperare informazioni sui clienti per cliente numero "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Si noti la barra nell'Uri (% 2F) codificati in percentuale. Ciò è necessario, poiché in questo caso il carattere di barra rappresenta i dati e non un delimitatore di percorso.  
  
 Passare la stringa al costruttore Uri causerà l'URI seguente:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Suddividendo il percorso in segmenti comporta i seguenti elementi:  
  
 `Customer('1`  
  
 `3812')`  
  
 Non è questo lo scopo del mittente della richiesta.  
  
 Se il <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> proprietà è impostata su false, quindi quando il <xref:System.Net.HttpListener> riceve una richiesta, Usa l'URI non elaborato anziché l'URI convertito dal `http.sys` come input per il <xref:System.Net.HttpListenerRequest.Url%2A> proprietà.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Schema delle impostazioni di rete</related>
    <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; (impostazioni di rete)</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpListenerElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Net.Configuration.HttpListenerElement" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property Properties As ConfigurationPropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Configuration::ConfigurationPropertyCollection ^ Properties { System::Configuration::ConfigurationPropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Configuration.ConfigurationPropertyCollection" Usage="System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeouts As HttpListenerTimeoutsElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Configuration::HttpListenerTimeoutsElement ^ Timeouts { System::Net::Configuration::HttpListenerTimeoutsElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeouts : System.Net.Configuration.HttpListenerTimeoutsElement" Usage="System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene gli elementi di timeout predefinito utilizzati per un oggetto <see cref="T:System.Net.HttpListener" />.</summary>
        <value>Restituisce <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />.  
  
Elementi di timeout predefinito utilizzati per un oggetto <see cref="T:System.Net.HttpListener" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnescapeRequestUrl As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UnescapeRequestUrl { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UnescapeRequestUrl : bool" Usage="System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se <see cref="T:System.Net.HttpListener" /> utilizza l'URI senza codice di escape non elaborato anziché l'URI convertito.</summary>
        <value>Valore booleano che indica se <see cref="T:System.Net.HttpListener" /> utilizza l'URI senza codice di escape non elaborato anziché l'URI convertito.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> proprietà indica se <xref:System.Net.HttpListener> Usa l'URI senza codice di escape non elaborato anziché l'URI convertito in cui vengono convertiti i valori codificati in percentuale e vengono eseguiti altri passaggi di normalizzazione.  
  
 Quando un <xref:System.Net.HttpListener> istanza riceve una richiesta tramite il `http.sys` servizio, crea un'istanza della stringa URI fornita dal `http.sys`e lo espone come il <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=nameWithType> proprietà.  
  
 Il `http.sys` servizio espone due stringhe URI richiesta:  
  
-   URI non elaborato  
  
-   URI convertito  
  
 L'URI non elaborato è il <xref:System.Uri?displayProperty=nameWithType> fornito nella riga della richiesta di una richiesta HTTP:  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 L'URI non elaborato fornito dal `http.sys` per è indicato in precedenza, la richiesta di "percorso /". Rappresenta la stringa che segue il verbo HTTP, come è stato inviato in rete.  
  
 Il `http.sys` servizio crea un URI convertito dalle informazioni ottenute tramite l'URI fornito nella riga della richiesta HTTP nella richiesta e intestazione Host per determinare il server di origine della richiesta deve essere inoltrato a. Questa operazione viene eseguita confrontando le informazioni della richiesta con un set di prefissi URI registrati. La documentazione di HTTP Server SDK fa riferimento a questo URI convertito come le [HTTP_COOKED_URL](https://go.microsoft.com/fwlink/?LinkID=166108) struttura.  
  
 Per poter essere in grado di confrontare la richiesta con i prefissi URI registrati, la normalizzazione della richiesta deve essere eseguita. Nell'esempio precedente l'URI convertito sarà come segue:  
  
 `http://www.contoso.com/path/`  
  
 Il `http.sys` service combina il <xref:System.Uri.Host%2A?displayProperty=nameWithType> valore della proprietà e la stringa nella riga della richiesta per creare un URI convertito. È inoltre `http.sys` e il <xref:System.Uri?displayProperty=nameWithType> classe anche eseguire le operazioni seguenti:  
  
-   Escape di annullare la percentuale di tutti i valori codificati.  
  
-   Caratteri non ASCII converte codificato in percentuale in una rappresentazione di caratteri UTF-16. Si noti che i caratteri DBCS/ANSI e UTF-8 sono supportati anche i caratteri Unicode (codifica Unicode utilizzando il formato uXXXX %).  
  
-   Esegue gli altri passaggi di normalizzazione, ad esempio la compressione del percorso.  
  
 Poiché la richiesta non contiene alcuna informazione sulla codifica usata per i valori codificati in percentuale, potrebbe non essere possibile determinare la codifica corretta appena analizzando i valori codificati in percentuale.  
  
 Di conseguenza `http.sys` vengono fornite due chiavi del Registro di sistema per la modifica del processo:  
  
|Chiave del Registro di sistema|Valore predefinito|Descrizione|  
|------------------|-------------------|-----------------|  
|EnableNonUTF8|1|Se è zero, `http.sys` accetta solo gli URL con codifica UTF-8.<br /><br /> Se diverso da zero, `http.sys` accetta anche un URL con codifica ANSI o con codifica DBCS nelle richieste.|  
|FavorUTF8|1|Se diverso da zero, `http.sys` sempre prova a decodificare un URL come UTF-8 per primo; se tale conversione non riesce ed EnableNonUTF8 è diverso da zero, HTTP. sys quindi prova a decodificare come ANSI o DBCS.<br /><br /> Se è zero (ed EnableNonUTF8 è diverso da zero), `http.sys` prova a decodificare come ANSI o DBCS; se non riesce, ritenta una conversione UTF-8.|  
  
 Quando <xref:System.Net.HttpListener> riceve una richiesta, Usa l'URI convertito da `http.sys` come input per il <xref:System.Net.HttpListenerRequest.Url%2A> proprietà.  
  
 È necessario per il supporto di caratteri oltre ai caratteri e numeri negli URI. Un esempio è l'URI seguente, che consente di recuperare informazioni sui clienti per cliente numero "1/3812":  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Si noti la barra nell'Uri (% 2F) codificati in percentuale. Ciò è necessario, poiché in questo caso il carattere di barra rappresenta i dati e non un delimitatore di percorso.  
  
 Passare la stringa al costruttore Uri causerà l'URI seguente:  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 Suddividendo il percorso in segmenti comporta i seguenti elementi:  
  
 `Customer('1`  
  
 `3812')`  
  
 Non è questo lo scopo del mittente della richiesta.  
  
 Se il <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> proprietà è impostata su false, quindi quando il <xref:System.Net.HttpListener> riceve una richiesta, Usa l'URI non elaborato anziché l'URI convertito dal `http.sys` come input per il <xref:System.Net.HttpListenerRequest.Url%2A> proprietà.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/network/index.md">Schema delle impostazioni di rete</related>
        <related type="Article" href="https://msdn.microsoft.com/library/62f121fd-3f2e-4033-bb39-48ae996bfbd9">&lt;httpListener&gt; (impostazioni di rete)</related>
      </Docs>
    </Member>
  </Members>
</Type>