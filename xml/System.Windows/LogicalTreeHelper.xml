<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62b7945787d0b94dce6ae67c8577e1d895687cda" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36458580" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce metodi helper statici per eseguire query sugli oggetti nell'albero logico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.LogicalTreeHelper> classe fornisce metodi che è possibile usare per restituire le raccolte figlio degli oggetti o oggetti specifici dall'interno dei nodi secondari dell'albero logico. Tuttavia, la maggior parte delle operazioni eseguite in genere albero oggetto anche esposte da proprietà o metodi simili in <xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement>. Ad esempio, procedere come segue:  
  
-   Anziché chiamare il metodo statico <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> metodo, che restituisce un enumeratore per il figlio logico oggetti, utilizzare l'insieme dedicato esposto nel modello di contenuto per l'oggetto. Quasi tutti gli oggetti che supportano un modello di contenuto espongono alcune proprietà che contiene la raccolta di oggetti figlio e fornisce il supporto dell'interfaccia direttamente in tale raccolta.  
  
-   Anziché chiamare il metodo statico <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> metodo per ottenere un oggetto figlio specificandone il nome, chiamata di <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> metodo per oggetti specifici.  
  
 <xref:System.Windows.LogicalTreeHelper> è molto utile per gli scenari di analisi in cui vengono spostati verso l'alto o verso il basso in modo ricorsivo l'albero logico attraverso più livelli si desidera utilizzare un approccio coerente per esaminare i vari oggetti padre o figlio. In questo caso, è possibile accedere a una combinazione di modelli di contenuto e utilizzando il modello di contenuto più la API specifiche sarebbe troppo complesse.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Elemento UI da visualizzare.</param>
        <summary>Tenta visualizzare l'elemento UI richiesto e genera l'evento <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> sulla destinazione, in modo da riportare i risultati.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È in genere più conveniente chiamare i metodi di istanza <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> invece di questo metodo statico dell'utilità. Il comportamento dei metodi di istanza è equivalente al comportamento del metodo statico.  
  
 Anche se il `current` elemento dell'interfaccia utente fornita è un <xref:System.Windows.FrameworkContentElement>, l'evento risultante è ancora <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> evento, con il tipo di origine <xref:System.Windows.FrameworkContentElement> identificabili controllando i dati dell'evento dell'evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">Oggetto da cui cominciare la ricerca. Questo oggetto deve essere un tipo <see cref="T:System.Windows.FrameworkElement" /> oppure <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <param name="elementName">Nome dell'oggetto  da trovare.</param>
        <summary>Tenta di trovare e restituire un oggetto con il nome specificato. La ricerca comincia dall'oggetto specificato e continua con i nodi secondari dell'albero logico.</summary>
        <returns>Oggetto con il nome corrispondente, se viene trovato; restituisce <see langword="null" /> se nessun nome corrispondente viene trovato nell'albero logico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 I metodi <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> e <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> sono apparentemente simili a <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>, ma una logica diversa per agire:  
  
-   La direzione della ricerca per <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> verso gli oggetti figlio (verso il basso l'albero); la direzione della ricerca per il `FindName` metodi è verso oggetti padre (alto nell'albero).  
  
-   Il `FindName` metodi dipendono dal concetto di un namescope XAML. Utilizzando `FindName` si è certi che un solo oggetto di tale nome esiste, perché gli ambiti dei nomi XAML applicare l'univocità. Al contrario, <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> namescope XAML e potrebbe attraversare i limiti del namescope XAML vengono ignorati durante la ricerca. Di conseguenza, non vi è alcuna garanzia di univocità del `elementName` nome dopo che i limiti si sovrappongono. Per ulteriori informazioni sulla sintassi XAML per gli ambiti dei nomi, vedere [ambiti dei nomi XAML di WPF](~/docs/framework/wpf/advanced/wpf-xaml-namescopes.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Restituisce l'insieme degli oggetti figlio diretti dell'oggetto specificato, elaborando l'albero logico.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Oggetto da cui iniziare l'elaborazione dell'albero logico. È previsto che sia <see cref="T:System.Windows.FrameworkElement" /> oppure <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Restituisce la raccolta degli oggetti figlio diretti dell'oggetto specificato, elaborando l'albero logico.</summary>
        <returns>Raccolta enumerabile di oggetti figlio diretti dall'albero logico dell'oggetto specificato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare questo metodo di firma e nell'helper principalmente quando si è certi se `current` è un <xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement> e indica se la classe dell'oggetto supporta la propria raccolta di modello di contenuto. Se è possibile determinare il tipo dell'oggetto a cui che si esegue una query, controllare la proprietà di contenuto specifica che si è certi esistente su tale tipo. Ad esempio, se si è certi che l'oggetto viene eseguita la query è un <xref:System.Windows.Controls.ItemsControl>, controllare il <xref:System.Windows.Controls.ItemsControl.Items%2A> proprietà da ottenere una raccolta fortemente tipizzata, che dispone del supporto di interfaccia di raccolta e probabilmente più utile di un enumeratore.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">Oggetto da cui iniziare l'elaborazione dell'albero logico.</param>
        <summary>Restituisce l'insieme degli oggetti figlio diretti dell'oggetto <see cref="T:System.Windows.FrameworkContentElement" /> specificato, elaborando l'albero logico.</summary>
        <returns>Insieme enumerabile degli oggetti figlio diretti a partire dall'oggetto <paramref name="current" /> specificato, all'interno dell'albero logico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">Oggetto da cui iniziare l'elaborazione dell'albero logico.</param>
        <summary>Restituisce l'insieme degli oggetti figlio diretti dell'oggetto <see cref="T:System.Windows.FrameworkElement" /> specificato, elaborando l'albero logico.</summary>
        <returns>Insieme enumerabile degli oggetti figlio diretti a partire dall'oggetto <paramref name="current" /> specificato, all'interno dell'albero logico.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">Oggetto per il quale trovare un oggetto padre. È previsto che sia un oggetto <see cref="T:System.Windows.FrameworkElement" /> oppure <see cref="T:System.Windows.FrameworkContentElement" />.</param>
        <summary>Restituisce l'oggetto padre dell'oggetto specificato, elaborando l'albero logico.</summary>
        <returns>Oggetto padre richiesto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è semplicemente un wrapper che ottiene la versione del tipo appropriato (<xref:System.Windows.FrameworkElement> o <xref:System.Windows.FrameworkContentElement>) del <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> o <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> proprietà; pertanto, a meno che non si riesce a determinare la `current` tipo, è possibile controllare la rispettiva al contrario delle proprietà dell'istanza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>