<Type Name="UIElement" FullName="System.Windows.UIElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3108d80804c11f9fc73349a26d55755b88a3cf5f" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32039955" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi UIElement extends System.Windows.Media.Visual implements class System.Windows.IInputElement, class System.Windows.Media.Animation.IAnimatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.UIElement" />
  <TypeSignature Language="VB.NET" Value="Public Class UIElement&#xA;Inherits Visual&#xA;Implements IAnimatable, IInputElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class UIElement : System::Windows::Media::Visual, System::Windows::IInputElement, System::Windows::Media::Animation::IAnimatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Visual</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Media.Animation.IAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.UidProperty("Uid")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.Windows.UIElement" /> è una classe base per le implementazioni a livello di memoria centrale di WPF basate sulle caratteristiche di presentazione di base e sugli elementi di Windows Presentation Foundation (WPF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement> fornisce un punto di partenza per le caratteristiche di layout di elemento ed espone inoltre possono eseguire l'override di metodi virtuali che le classi derivate, che possono influenzare il layout, il rendering di elementi di comportamento dell'elemento e dal relativo elemento figlio.  
  
 La maggior parte di input e messa a fuoco comportamento per gli elementi in generale è definita anche nella <xref:System.Windows.UIElement> classe. Sono inclusi gli eventi di tastiera, mouse e input con stilo e proprietà di stato correlati. Molti di questi eventi sono gli eventi indirizzati e numerosi eventi correlati all'input hanno entrambi un routing di bubbling versione, nonché una versione di tunneling dell'evento. Questi eventi abbinati sono in genere gli eventi di maggiore interesse per gli autori del controllo.  
  
 <xref:System.Windows.UIElement> include inoltre [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] che riguardano il [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modello di eventi, inclusi i metodi che possono generare specificati gli eventi indirizzati che vengono originati da un'istanza dell'elemento.  
  
 In termini di architettura, <xref:System.Windows.UIElement> può essere considerato equivalente a un handle di finestra in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programmazione, o un elemento [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] di programmazione. <xref:System.Windows.UIElement> è un elemento di base a livello di base di WPF.  
  
 Oggetto <xref:System.Windows.UIElement> presenta le seguenti funzionalità definite in modo specifico per la <xref:System.Windows.UIElement> classe:  
  
-   Può eseguire il rendering come elemento figlio (<xref:System.Windows.UIElement> deriva da <xref:System.Windows.Media.Visual>, una classe di grafica di alto livello)  
  
-   Contiene la logica utilizzata per ridimensionare e posizionare i possibili elementi figlio di un <xref:System.Windows.UIElement> (quando vengono interpretati da un sistema di layout)  
  
-   Può rispondere all'input dell'utente (includono il controllo di cui viene recupero inviato input tramite la gestione del routing degli eventi o il routing dei comandi)  
  
-   Può generare eventi indirizzati che percorrono una route attraverso la struttura ad albero logico  
  
-   Supporta alcuni aspetti del sistema di animazione  
  
 <xref:System.Windows.FrameworkElement> è la classe di implementazione a livello di framework WPF che si basa su <xref:System.Windows.UIElement>e aggiunge interazioni specifiche con livello di framework WPF. <xref:System.Windows.FrameworkElement> Aggiunge e definisce le funzionalità seguenti:  
  
-   Caratteristiche di layout specifiche del framework aggiuntive  
  
-   Supporto per la segnalazione alle proprietà dei metadati più dettagliato  
  
-   Specifico della classe di implementazione di alcuni input classi base e delle proprietà associate o gli eventi associati  
  
-   Supporto degli stili  
  
-   Ulteriore supporto di animazione  
  
 Un'altra classe correlata è <xref:System.Windows.ContentElement>. Il <xref:System.Windows.ContentElement> classe implementa molti degli stessi membri di <xref:System.Windows.UIElement>; la differenza tra queste due classi è relativa alla posizione prevista nel modello di contenuto globale. Oggetto <xref:System.Windows.UIElement> in genere, la classe derivata definisce un modello di contenuto relativamente rigido, vale a dire che non esistono restrizioni sugli elementi che possono essere elementi figlio nel markup. Potrebbero esserci delle capacità per l'esecuzione di contenuto figlio meno restrittivo una <xref:System.Windows.UIElement>, ma tale capacità vengono in genere centralizzate in proprietà del contenuto designata. Oggetto <xref:System.Windows.ContentElement> classe derivata non è in genere le massime restrizioni sul contenuto, per supportare gli scenari, ad esempio i documenti in formato di flusso.  
  
> [!IMPORTANT]
>  <xref:System.Windows.UIElement.Visibility%2A> stato influisce su tutti gli input, la gestione da quell'elemento. Gli elementi che non sono visibili non partecipare al processo di hit testing e non ricevono gli eventi di input, anche se il mouse è posizionato i limiti in cui l'elemento non sarebbe se fosse visibile.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UIElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Creazione di una nuova istanza che è di tipo <xref:System.Windows.UIElement> è comune nel codice dell'applicazione, in quanto <xref:System.Windows.UIElement> è un elemento di base. Vedere [Panoramica di elementi di Base](~/docs/framework/wpf/advanced/base-elements-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile aggiungere più volte lo stesso gestore per l'evento stesso senza generare un'eccezione. Tuttavia, il gestore viene effettivamente richiamato più volte quando l'evento è gestito. Pertanto, considerare come questo comportamento potrebbe avere effetti collaterali che devono essere presi in considerazione nell'implementazione del gestore.  
  
 È in genere utilizzare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] schema di accesso eventi di un evento indirizzato personalizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato da gestire.</param>
        <param name="handler">Riferimento all'implementazione del gestore.</param>
        <param name="handledEventsToo">
          <see langword="true" /> per registrare il gestore in modo che venga richiamato anche quando l'evento indirizzato è contrassegnato come gestito nei dati dell'evento. <see langword="false" /> per registrare il gestore con la condizione predefinita che prevede che non venga richiamato se l'evento indirizzato è già contrassegnato come gestito.  
  
 Il valore predefinito è <see langword="false" />.  
  
 Non chiedere ripetutamente di gestire di nuovo un evento indirizzato.</param>
        <summary>Aggiunge un gestore eventi indirizzati per un evento indirizzato specifico, aggiungendo il gestore alla raccolta di gestori nell'elemento corrente. Specificare che <paramref name="handledEventsToo" /> è <see langword="true" /> per fare in modo che il gestore specificato venga richiamato per eventi indirizzati già contrassegnati come gestiti da un altro elemento lungo la route dell'evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'elaborazione di eventi di input di basso livello in un modo pratico è un'attività complessa. Molti controlli implementano il comportamento in un determinato evento è contrassegnato come gestito e viene sostituito da un altro evento più intuitivo. In genere, un controllo contrassegnerà solo un evento di input di piattaforma come gestito nel caso di alcune intenzione di progettazione per questa operazione. In alcuni scenari, tali finalità potrebbe non essere ciò che richiede la gestione degli eventi di input specifica. È per questi scenari di registrazione di gestori con `handledEventsToo` come `true` appropriato. Ma non eseguire questa operazione regolarmente. Richiamare i gestori in risposta a tutti gli eventi anche se gestita verrà complicare il propria logica di elaborazione di eventi applicazione. Si verifichi una riduzione delle prestazioni se la logica del gestore è significativo. È necessario riservare l'uso di associare i gestori eventi per eventi già gestiti per le situazioni in cui sono stati individuati durante il processo di sviluppo che determinati controlli gestiscono gli eventi che si desidera gestire con la logica dell'applicazione.  
  
 Un'altra tecnica per evitare la classe del comportamento di alcune combinazioni di eventi controllo di gestione consiste nell'utilizzare alternativa di anteprima dell'evento. Ad esempio, se <xref:System.Windows.UIElement.MouseLeftButtonDown> è contrassegnato come gestito dalla gestione delle classi, potrebbe essere in grado di aggiungere i gestori per <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> invece.  
  
 È possibile aggiungere più volte lo stesso gestore per l'evento stesso senza generare un'eccezione. Tuttavia, il gestore viene effettivamente richiamato più volte quando l'evento è gestito. Pertanto, considerare come questo comportamento potrebbe avere effetti collaterali che devono essere presi in considerazione nell'implementazione del gestore.  
  
 È in genere utilizzare questo metodo per fornire l'implementazione della funzione di accesso "Aggiungi" per il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] schema di accesso eventi di un evento indirizzato personalizzato.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un gestore richiamato il <xref:System.Windows.FrameworkElement.Initialized> evento in una pagina che associa un gestore definito a uno degli elementi denominati nella pagina utilizzando `handledEventsToo` `true`. Questo gestore verrebbe richiamato anche se i dati dell'evento condiviso come gestito prima di raggiungere l'elemento di gestione nella route contrassegnato come un altro elemento lungo la route.  
  
 [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]
 [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToEventRoute">
      <MemberSignature Language="C#" Value="public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToEventRoute(class System.Windows.EventRoute route, class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddToEventRoute (route As EventRoute, e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddToEventRoute(System::Windows::EventRoute ^ route, System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="System.Windows.EventRoute" />
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="route">Route dell'evento alla quale vengono aggiunti i gestori.</param>
        <param name="e">Dati di evento utilizzati per aggiungere i gestori. Questo metodo utilizza la proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> dei dati dell'eventi per creare i gestori.</param>
        <summary>Aggiunge gestori all'oggetto <see cref="T:System.Windows.EventRoute" /> specificato per l'insieme di gestori degli eventi <see cref="T:System.Windows.UIElement" /> corrente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo può essere utilizzato dagli elementi host del contenuto (quelli che implementano <xref:System.Windows.IContentHost> o quelli che non) per aggiungere gestori per gli elementi figlio per il <xref:System.Windows.EventRoute>. In genere, ciò non è necessario per <xref:System.Windows.UIElement>, perché i gestori vengono aggiunti automaticamente per tutti gli elementi presenti in un struttura ad albero logico completata. Tuttavia, in alcuni casi in cui <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> vengono combinate in strutture ad albero basato su modelli, gli elementi corrispondenti provenienti dal modello devono essere aggiunti a una route. Entrambi <xref:System.Windows.ContentElement> e <xref:System.Windows.UIElement> supporta una versione di questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può essere utilizzato come destinazione di un'operazione di trascinamento e rilascio.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento può essere utilizzato come destinazione di un'operazione di trascinamento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non sono abilitate per impostazione predefinita, le operazioni di trascinamento e rilascio e devono essere abilitate intenzionalmente impostando <xref:System.Windows.UIElement.AllowDrop%2A> a `true`. Oltre a questa impostazione di base, il comportamento di trascinamento e rilascio è interamente specifica dell'implementazione e non è definito da <xref:System.Windows.UIElement> o qualsiasi altra classe di base dell'elemento. Alcuni controlli, ad esempio, <xref:System.Windows.Controls.RichTextBox>, hanno un comportamento predefinito. Per ulteriori informazioni sul trascinamento della selezione, vedere [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  
  
 <xref:System.Windows.FrameworkElement> Ignora i metadati per questa proprietà di dipendenza nella relativa implementazione. In particolare, <xref:System.Windows.FrameworkElement> indica che questa proprietà per consentire l'ereditarietà del valore di proprietà (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> è `true` nei metadati). Ereditarietà del valore di proprietà in questo contesto significa che se sono presenti elementi figlio con nessun altro valore per <xref:System.Windows.UIElement.AllowDrop%2A> assegnati tramite valori locali o gli stili, il valore dell'elemento padre più vicino con questo valore assegnato (nuovamente, sia negli stili, per impostazione predefinita i valori o un valore locale), verrà assegnato il valore dall'elemento padre per tutti gli elementi figlio in precedenza non assegnato dal sistema di proprietà. In pratica, ciò significa che è possibile specificare se consentire le operazioni di trascinamento dell'elemento radice e che verrà propagato a tutti gli elementi figlio che non hanno il valore assegnato come `false`.  
  
<a name="dependencyPropertyInfo_AllowDrop"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.AllowDropProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio di codice seguente imposta il <xref:System.Windows.UIElement.AllowDrop%2A> proprietà `true` utilizzando un attributo in un <xref:System.Windows.Controls.TextBox>, nonché impostare altre proprietà correlate che nella funzione di aggregazione consentono che <xref:System.Windows.Controls.TextBox> deve essere la destinazione di un oggetto dati di testo su più righe quando viene trascinato. Per l'esempio completo, vedere [caricare un esempio di File eliminati](http://msdn.microsoft.com/library/be90d645-dd61-4f53-93bb-87902d086ef7).  
  
 [!code-xaml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowDropProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowDropProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowDropProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AllowDropProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowDropProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowDropProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.AllowDrop" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ApplyAnimationClock">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo è sealed e non può essere sottoposto a override.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyAnimationClock (dp As DependencyProperty, clock As AnimationClock)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
      </Parameters>
      <Docs>
        <param name="dp">Identificatore della proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata nell'elemento. Le animazioni esistenti vengono interrotte e sostituite con la nuova animazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore della proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata sul valore di base. Tuttavia, non è stato arrestato orologio dell'animazione originariamente associato. Le animazioni assegnate allo stesso clock continueranno a eseguire.  
  
   
  
## Examples  
 Nell'esempio seguente, un <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` dispone di un'animazione specifica applicata chiamando <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  
  
 [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]
 [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAnimationClock">
      <MemberSignature Language="C#" Value="public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAnimationClock(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationClock clock, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ApplyAnimationClock(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationClock ^ clock, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="clock" Type="System.Windows.Media.Animation.AnimationClock" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà a cui applicare l'animazione.</param>
        <param name="clock">Orologio dell'animazione che controlla e dichiara l'animazione.</param>
        <param name="handoffBehavior">Valore dell'enumerazione. L'impostazione predefinita è <see cref="F:System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace" />, in base alla quale qualsiasi animazione esistente viene interrotta e sostituita con quella nuova.</param>
        <summary>Applica un'animazione a una proprietà di dipendenza specificata in questo elemento, con la possibilità di specificare che cosa succede se la proprietà ha già un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per rimuovere un'animazione da una proprietà, specificare l'identificatore della proprietà come `dp` e specificare `clock` come `null`. Questa operazione rimuove l'animazione e la proprietà animata è impostata sul valore di base. Tuttavia, non è stato arrestato orologio dell'animazione originariamente associato. Le animazioni assegnate allo stesso clock continueranno a eseguire.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCaptured">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco è acquisito nell'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un tocco è acquisito in questo elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.AreAnyTouchesCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesCapturedWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesCapturedWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco è acquisito nell'elemento o nei relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco è acquisito in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesCapturedWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesCapturedWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesCapturedWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.AreAnyTouchesCapturedWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un dispositivo a tocco viene premuto sull'elemento.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto sull'elemento; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.AreAnyTouchesDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOver">
      <MemberSignature Language="C#" Value="public bool AreAnyTouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreAnyTouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.AreAnyTouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AreAnyTouchesOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AreAnyTouchesOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se almeno un tocco viene premuto sull'elemento o sui relativi elementi figlio della struttura ad albero visuale.</summary>
        <value>
          <see langword="true" /> se almeno un dispositivo a tocco viene premuto su questo elemento o sui relativi elementi figlio nella struttura ad albero visuale; in caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAnyTouchesOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AreAnyTouchesOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.AreAnyTouchesOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AreAnyTouchesOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AreAnyTouchesOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.AreAnyTouchesOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arrange">
      <MemberSignature Language="C#" Value="public void Arrange (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Arrange(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Arrange (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Arrange(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Dimensione finale calcolata dell'elemento padre per l'elemento figlio, fornita come istanza di <see cref="T:System.Windows.Rect" />.</param>
        <summary>Posiziona gli elementi figlio e determina le dimensioni per un oggetto <see cref="T:System.Windows.UIElement" />. Gli elementi padre chiamano questo metodo dalla rispettiva implementazione <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (o l'equivalente a livello di framework WPF) per formare un aggiornamento ricorsivo del layout. Questo metodo costituisce il secondo passaggio di un aggiornamento del layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per l'elemento a livello di framework WPF scenari, il comportamento per derivanti da <xref:System.Windows.UIElement.Arrange%2A> deve non modificato (e non è possibile, a meno che non venga nascosto) essere. Al contrario, è necessario eseguire l'override di <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementazione nella classe. Il <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementazione viene chiamata internamente da <xref:System.Windows.UIElement.Arrange%2A> come parte delle operazioni di layout a livello di framework WPF predefinito. Il <xref:System.Windows.UIElement.ArrangeCore%2A> implementazione deve chiamare anche <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> su ogni elemento figlio, se ha elementi figlio.  
  
 Per scenari, il comportamento per derivanti da elementi di livello principale WPF <xref:System.Windows.UIElement.Arrange%2A> essere modificato non dovrebbero (e non è possibile, a meno che non venga nascosto). Al contrario, è necessario eseguire l'override <xref:System.Windows.UIElement.ArrangeCore%2A> nella classe. Il <xref:System.Windows.UIElement.ArrangeCore%2A> implementazione viene chiamata internamente da <xref:System.Windows.UIElement.Arrange%2A> come parte delle operazioni di layout a livello di framework WPF predefinito. Si presuppone tuttavia si utilizza il layout a livello di framework WPF e il relativo sistema di layout, che spesso non avviene se si esegue la derivazione in particolare gli elementi a livello di base di WPF di <xref:System.Windows.UIElement> classe elemento di base. Il <xref:System.Windows.UIElement.ArrangeCore%2A> implementazione deve chiamare anche <xref:System.Windows.UIElement.Arrange%2A> su ogni elemento figlio, se ha elementi figlio. Si noti che lo scenario a livello di base WPF implica che non si utilizza un <xref:System.Windows.FrameworkElement> derivata poiché <xref:System.Windows.FrameworkElement> esegue il sealing <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  
  
 Calcolo del posizionamento del layout a livello di framework WPF in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] è costituito da un <xref:System.Windows.UIElement.Measure%2A> chiamare e un <xref:System.Windows.UIElement.Arrange%2A> chiamare. Durante il <xref:System.Windows.UIElement.Measure%2A> chiamata, il sistema di layout determina i requisiti di dimensione dell'elemento utilizzando un oggetto fornito <xref:System.Windows.Size> (`availableSize`) argomento. Durante il <xref:System.Windows.UIElement.Arrange%2A> chiamata, il sistema di layout completa la dimensione e posizione di un elemento del rettangolo di selezione.  Per ulteriori informazioni, vedere [Layout](~/docs/framework/wpf/advanced/layout.md).  
  
 `availableSize` può essere qualsiasi numero compreso tra zero e infinito. Gli elementi devono essere disposti restituiscano il minimo <xref:System.Windows.Size> richiesto tramite il `availableSize` parametro.  
  
 Quando un layout viene creata un'istanza, riceve sempre un <xref:System.Windows.UIElement.Measure%2A> prima di chiamare <xref:System.Windows.UIElement.Arrange%2A>. Dopo il primo passaggio di layout, tuttavia, è possibile ricevere un <xref:System.Windows.UIElement.Arrange%2A> chiamata senza un <xref:System.Windows.UIElement.Measure%2A>; ciò può verificarsi quando una proprietà che ha effetto solo su <xref:System.Windows.UIElement.Arrange%2A> viene modificata (ad esempio, l'allineamento) o quando l'elemento padre riceve un <xref:System.Windows.UIElement.Arrange%2A> senza un <xref:System.Windows.UIElement.Measure%2A>. Oggetto <xref:System.Windows.UIElement.Measure%2A> invaliderà automaticamente un <xref:System.Windows.UIElement.Arrange%2A> chiamare.  
  
 Gli aggiornamenti del layout si verificano in genere in modo asincrono (un'ora determinata dal sistema di layout). Un elemento potrebbe non riflettere immediatamente le modifiche alle proprietà che influiscono sul ridimensionamento dell'elemento (ad esempio <xref:System.Windows.FrameworkElement.Width%2A>).  
  
> [!NOTE]
>  È possibile forzare gli aggiornamenti del layout utilizzando il <xref:System.Windows.UIElement.UpdateLayout%2A> metodo; tuttavia, chiamare questa funzione non è consigliato, in quanto si tratta in genere non necessario possono influire negativamente sulle prestazioni. In molte situazioni in cui la chiamata <xref:System.Windows.UIElement.UpdateLayout%2A> potrebbe risultare utile, il sistema di layout verrà probabilmente già elaborando gli aggiornamenti. Il sistema di layout può elaborare le modifiche di layout in modo che possano ottimizzare in tutti gli aggiornamenti necessari come parte di un pacchetto.  
  
 Il sistema di layout mantiene due code separate di layout non validi, uno per <xref:System.Windows.UIElement.Measure%2A> e uno per <xref:System.Windows.UIElement.Arrange%2A>. La coda del layout verrà ordinata in base all'ordine degli elementi nell'albero visuale. Gli elementi di livello superiori nella struttura della si trovino all'inizio della coda, per evitare layout ridondanti causati da modifiche ripetute negli elementi padre. Le voci duplicate vengono automaticamente rimossi dalla coda e gli elementi vengono automaticamente rimossi dalla coda se sono già validi.  
  
 Quando l'aggiornamento del layout, il <xref:System.Windows.UIElement.Measure%2A> viene svuotata prima, seguita dal <xref:System.Windows.UIElement.Arrange%2A> coda. Un elemento nel <xref:System.Windows.UIElement.Arrange%2A> coda non verrà mai disposto se è presente un elemento di <xref:System.Windows.UIElement.Measure%2A> coda.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected virtual void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect">Area finale nel controllo padre che l'elemento deve usare per disporre se stesso e i relativi elementi figlio.</param>
        <summary>Definisce il modello per la definizione di layout per la disposizione a livello di base WPF.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Override di questo metodo è appropriata solo se esegue la derivazione il livello di base WPF e non si utilizza il sistema di layout a livello di framework WPF e <xref:System.Windows.FrameworkElement> derivata poiché <xref:System.Windows.FrameworkElement> esegue il sealing <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. Se si utilizza il sistema di layout a livello di framework WPF, il metodo appropriato per eseguire l'override per layout specifici di una classe Disponi comportamento <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.  
  
   
  
## Examples  
 <xref:System.Windows.UIElement.ArrangeCore%2A> le implementazioni devono chiamare l'implementazione di base per restituire una dimensione, quindi chiamare il <xref:System.Windows.UIElement.Arrange%2A> metodo di ogni elemento figlio visibile e riconciliare le dimensioni restituite da queste <xref:System.Windows.UIElement.Arrange%2A> chiamate con la dimensione dell'implementazione di base. La logica per la riconciliazione di un <xref:System.Windows.UIElement.ArrangeCore%2A> implementazione potrebbe variare, a seconda delle caratteristiche di layout dell'elemento. Nel modello di esempio seguente, `VisualChildren` è una proprietà ipotetica che l'elemento potrebbe definire per consentire l'enumerazione il relativo contenuto. <xref:System.Windows.UIElement> non definisce le raccolte di contenuto a questo livello, l'architettura a livello di framework WPF rinvia il comportamento del contenuto per gli elementi derivati, ad esempio controlli specifici o classi di base.  
  
 [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]
 [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se si stanno sviluppando elementi a livello di base di WPF, è necessario eseguire l'override di questo metodo per fornire univoco all'elemento di livello principale WPF disposizione del layout, o per scegliere un layout adatto agli elementi figlio degli elementi. Un override potrebbe essere necessario se gli elementi figlio non sono riconoscibili da un modello definito, ad esempio un <see cref="T:System.Windows.Controls.ItemCollection" />.  
  
 Un elemento padre deve chiamare la classe-specifica <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> su ogni elemento figlio, in caso contrario gli elementi figlio non viene eseguiti.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAnimation">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginAnimation (dp As DependencyProperty, animation As AnimationTimeline)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da avviare.</param>
        <summary>Avvia un'animazione per una proprietà animata specificata su questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si seleziona una proprietà animata, si noti che l'animazione verrà avviata e considerato aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione associato inizialmente non viene interrotta. Le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
   
  
## Examples  
 Nell'esempio seguente crea un'animazione, assegna e quindi chiama <xref:System.Windows.UIElement.BeginAnimation%2A> per avviarlo.  
  
 [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]
 [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginAnimation">
      <MemberSignature Language="C#" Value="public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginAnimation(class System.Windows.DependencyProperty dp, class System.Windows.Media.Animation.AnimationTimeline animation, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginAnimation(System::Windows::DependencyProperty ^ dp, System::Windows::Media::Animation::AnimationTimeline ^ animation, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="animation" Type="System.Windows.Media.Animation.AnimationTimeline" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà alla quale aggiungere un'animazione, specificata come identificatore della proprietà di dipendenza.</param>
        <param name="animation">Sequenza temporale dell'animazione da applicare.</param>
        <param name="handoffBehavior">Valore dell'enumerazione che specifica il modo in cui la nuova animazione interagisce con tutte le animazioni correnti (in esecuzione) che già influiscono sul valore della proprietà.</param>
        <summary>Avvia un'animazione particolare per una proprietà animata specificata su questo elemento, con la possibilità di indicare cosa succede se la proprietà dispone già di un'animazione in esecuzione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si seleziona una proprietà animata, si noti che l'animazione verrà avviata e considerato aggiungendo un'animazione quando viene eseguito il rendering del primo frame oltre il punto di partenza non animati.  
  
 Se il <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> per `animation` è `null`, vengono rimosse tutte le animazioni correnti e viene mantenuto il valore corrente della proprietà.  
  
 Se l'intera `animation` valore `null`, tutte le animazioni vengono rimosse dalla proprietà e il valore della proprietà viene ripristinato il valore di base. Tuttavia, la sequenza temporale di animazione associato inizialmente non viene interrotta. Le animazioni assegnate a tale sequenza temporale continuerà a eseguire.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un gestore che ottiene un'animazione esistente da una risorsa e quindi chiama <xref:System.Windows.UIElement.BeginAnimation%2A> con un comportamento uniforme specificato.  
  
 [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]
 [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffect BitmapEffect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffect" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffect As BitmapEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffect ^ BitmapEffect { System::Windows::Media::Effects::BitmapEffect ^ get(); void set(System::Windows::Media::Effects::BitmapEffect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un effetto bitmap da applicare direttamente al contenuto renderizzato dell'elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Effetto bitmap da applicare.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.Effects.BitmapEffect> è un tipo astratto, pertanto il [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] utilizzo richiede una classe derivata implementata di <xref:System.Windows.Media.Effects.BitmapEffect>, ad esempio <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Si noti che una classe derivata implementata sono un tipo di insieme che consente di specificare più sequenziale <xref:System.Windows.Media.Effects.BitmapEffect>, utilizzando una sintassi di tag nidificati.  
  
 Classe non derivata esistente di <xref:System.Windows.Media.Effects.BitmapEffect> supporta un convertitore di tipi, pertanto la [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi da utilizzare per questa proprietà viene in genere la sintassi degli elementi.  
  
<a name="dependencyPropertyInfo_BitmapEffect"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.BitmapEffectProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente imposta una bitmap effettive, utilizzando <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  
  
 [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.BitmapEffectInput" />
      <MemberSignature Language="VB.NET" Value="Public Property BitmapEffectInput As BitmapEffectInput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::BitmapEffectInput ^ BitmapEffectInput { System::Windows::Media::Effects::BitmapEffectInput ^ get(); void set(System::Windows::Media::Effects::BitmapEffectInput ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffectInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un'origine di input per l'effetto bitmap da applicare direttamente al contenuto renderizzato dell'elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Origine per gli effetti bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_BitmapEffectInput"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectInputProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectInputProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectInputProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectInputProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectInputProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.BitmapEffectInput" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapEffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BitmapEffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BitmapEffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.BitmapEffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BitmapEffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BitmapEffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.BitmapEffect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheMode">
      <MemberSignature Language="C#" Value="public System.Windows.Media.CacheMode CacheMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.CacheMode CacheMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CacheMode" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheMode As CacheMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::CacheMode ^ CacheMode { System::Windows::Media::CacheMode ^ get(); void set(System::Windows::Media::CacheMode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.CacheMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta una rappresentazione nascosta dell'oggetto <see cref="T:System.Windows.UIElement" />.</summary>
        <value>Un oggetto <see cref="T:System.Windows.Media.CacheMode" /> che contiene una rappresentazione nascosta dell'oggetto <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare il <xref:System.Windows.UIElement.CacheMode%2A> proprietà quando è necessario migliorare le prestazioni per il contenuto del tempo per eseguire il rendering. Per ulteriori informazioni, vedere <xref:System.Windows.Media.BitmapCache>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" />
        <altmember cref="T:System.Windows.Media.BitmapCache" />
        <altmember cref="T:System.Windows.Media.BitmapCacheBrush" />
      </Docs>
    </Member>
    <Member MemberName="CacheModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CacheModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CacheModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.CacheModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CacheModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CacheModeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.CacheMode" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMouse">
      <MemberSignature Language="C#" Value="public bool CaptureMouse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureMouse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureMouse" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureMouse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureMouse();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureMouse</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione del mouse in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il mouse viene acquisito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per essere acquisito un elemento deve essere abilitato. Controllare se <xref:System.Windows.UIElement.IsEnabled%2A> è `true` prima di chiamare <xref:System.Windows.UIElement.CaptureMouse%2A>.  
  
 Se la chiamata <xref:System.Windows.UIElement.CaptureMouse%2A> restituisce `true`, quindi <xref:System.Windows.UIElement.IsMouseCaptured%2A> anche `true`.  
  
 Se la chiamata <xref:System.Windows.UIElement.CaptureMouse%2A> restituisce `true`, quindi il <xref:System.Windows.UIElement.GotMouseCapture> e <xref:System.Windows.UIElement.IsMouseCapturedChanged> vengono generati eventi, con <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=nameWithType> nell'evento dati segnalati come elemento in cui il <xref:System.Windows.UIElement.CaptureMouse%2A> metodo viene chiamato. Se si forza l'acquisizione, potrebbe interferire con acquisizioni esistenti, in particolare con le acquisizioni correlate a trascinare con il mouse.  
  
 Per cancellare l'input del mouse da tutti gli elementi, chiamare <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con il `element` fornito come parametro `null`.  
  
   
  
## Examples  
 Nell'esempio seguente viene implementata una coppia di gestori per mouse e la combinazione di input che il mouse capture (e liberano) e abilitare la modalità mouse speciali per la visualizzazione di un modello 3D.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="CaptureStylus">
      <MemberSignature Language="C#" Value="public bool CaptureStylus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CaptureStylus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureStylus" />
      <MemberSignature Language="VB.NET" Value="Public Function CaptureStylus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CaptureStylus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.CaptureStylus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di forzare l’acquisizione dello stilo in questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stilo viene acquisito correttamente; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Restituisce l'implementazione predefinita basata sul dispositivo stilo predefinito sottostante sempre `true`. Tuttavia, se si estende i dispositivi di input che forniscono l'implementazione del dispositivo per il sistema di input, è possibile creare un sistema con un'implementazione di dispositivo stilo alternative che potrebbe restituire risultati diversi.  
  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se lo stilo si trova di fuori dei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Chiamando questo metodo viene chiamato una sottostante statico <xref:System.Windows.Input.Stylus> metodo <xref:System.Windows.Input.Stylus.Capture%2A>. Il comportamento effettivo di acquisizione viene implementato dall'implementazione del dispositivo stilo attivo.  
  
 Per essere acquisito un elemento deve essere abilitato. Controllare se <xref:System.Windows.UIElement.IsEnabled%2A> è `true` prima di chiamare <xref:System.Windows.UIElement.CaptureStylus%2A>.  
  
 Se la chiamata <xref:System.Windows.UIElement.CaptureStylus%2A> restituisce `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> anche `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureTouch">
      <MemberSignature Language="C#" Value="public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CaptureTouch(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CaptureTouch(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da acquisire.</param>
        <summary>Tenta di forzare l'acquisizione di un tocco in questo elemento.</summary>
        <returns>
          <see langword="true" /> se il tocco specificato viene acquisto nell'elemento. In caso contrario <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.CaptureTouch%2A> restituirà `false` se il <xref:System.Windows.Input.TouchDevice> viene attualmente acquisito da un altro elemento.  
  
 Se <xref:System.Windows.UIElement.CaptureTouch%2A> restituisce `true`, quindi il <xref:System.Windows.UIElement.GotTouchCapture> viene generato l'evento.  
  
 Per rilasciare l'acquisizione di un solo tocco da questo elemento, utilizzare il <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> (metodo) e specificare il dispositivo touchscreen da rilasciare. Per rilasciare tutti i tocchi da questo elemento, utilizzare il <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> metodo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la geometria usata per definire la struttura dei contenuti di un elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Geometria da usare per il ridimensionamento dell'area di ritaglio. Il valore predefinito è un oggetto <see cref="T:System.Windows.Media.Geometry" /> null.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli elementi all'esterno della geometria verranno ritagliati visivamente nel layout renderizzato. La geometria non è necessario essere rettangolare.  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ClipProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 In questo esempio viene illustrato come definire un elemento del framework <xref:System.Windows.UIElement.Clip%2A> area. Per definire un clip, utilizzare un <xref:System.Windows.Media.Geometry> (ad esempio, un <xref:System.Windows.Media.EllipseGeometry> per impostare l'elemento <xref:System.Windows.UIElement.Clip%2A> proprietà. Solo l'area che si trova nell'area della geometria saranno visibile.  
  
 Nell'esempio seguente un <xref:System.Windows.Controls.Image> elemento senza un'area di ritaglio definita. Poiché nessuna area di ritaglio è definito, viene visualizzata l'immagine intera.  
  
 [!code-xaml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  
  
 ![Un oggetto prima di applicare un'area di ritaglio](~/add/media/mil-task-clip-region-noclip.png "un oggetto prima di applicare un'area di ritaglio")  
Immagine con alcuna area di ritaglio  
  
 Nell'esempio seguente, viene creata un'immagine identica, ad eccezione del fatto che disponga di un'area di ritaglio definita. Solo la parte dell'immagine all'interno dell'area di <xref:System.Windows.Media.EllipseGeometry> verrà visualizzato.  
  
 [!code-xaml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  
  
 ![Oggetto ritagliato](~/add/media/mil-task-clip-region-ellispe.PNG "oggetto ritagliato")  
Immagine con un'area di ritaglio ellittico  
  
 Nell'esempio seguente viene illustrato come animare un elemento del framework <xref:System.Windows.UIElement.Clip%2A> area. In questo esempio, un <xref:System.Windows.Media.EllipseGeometry> viene utilizzato per definire un'area di ritaglio ellittica per un <xref:System.Windows.Controls.Image> elemento. Oggetto <xref:System.Windows.Media.Animation.PointAnimation> aggiunge un'animazione della geometria dell'ellisse <xref:System.Windows.Media.EllipseGeometry.Center%2A> proprietà da (0, 0) a (200, 150). L'animazione avvia la riproduzione dopo l'immagine viene caricato e viene ripetuta all'infinito.  
  
 [!code-xaml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  
  
 Per un esempio completo, vedere il [esempio di area di ritaglio](http://msdn.microsoft.com/library/83043a0b-f824-445f-9675-103280c5ca67).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Clip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToBounds">
      <MemberSignature Language="C#" Value="public bool ClipToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClipToBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.ClipToBounds" />
      <MemberSignature Language="VB.NET" Value="Public Property ClipToBounds As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ClipToBounds { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se ritagliare il contenuto dell'elemento (o il contenuto proveniente dagli elementi figlio dell'elemento) per adattarlo alle dimensioni dell'elemento contenitore.   Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se il contenuto deve essere ritagliato. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per gli elementi figlio, <xref:System.Windows.UIElement.ClipToBounds%2A> ha diversi effetti sui comportamenti di layout a seconda se l'altezza e la larghezza dell'elemento padre sono determinate da <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> o <xref:System.Windows.FrameworkElement.MaxHeight%2A>  /  <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> dell'elemento padre sono sempre rispettate indipendentemente dal valore di <xref:System.Windows.UIElement.ClipToBounds%2A> e l'effettivo verrà sempre ritagliato il contenuto in base a questi valori massimi. L'elemento padre <xref:System.Windows.FrameworkElement.Height%2A>  /  <xref:System.Windows.FrameworkElement.Width%2A> impostazioni contenuto non verranno ritagliato quando <xref:System.Windows.UIElement.ClipToBounds%2A> è `false`, ma ritagliano il contenuto se <xref:System.Windows.UIElement.ClipToBounds%2A> è `true`.  
  
 Si noti che l'impostazione `false` è il comportamento generale come implementati nel <xref:System.Windows.UIElement> classe. È possibile per qualsiasi elemento specificato che deriva da <xref:System.Windows.UIElement> per sostituire i metadati della proprietà di dipendenza per questa proprietà in tale istanza per impostazione predefinita al `true` invece. Molte classi derivate esistenti eseguire l'override di questi metadati e/o modificano il valore predefinito di proprietà di dipendenza.  
  
 <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, e <xref:System.Windows.Controls.Primitives.Popup> ogni sostituisce il valore predefinito per essere `true`.  
  
 <xref:System.Windows.FrameworkElement> Ignora i metadati per questa proprietà di dipendenza. In particolare, <xref:System.Windows.FrameworkElement> indica che questa proprietà per consentire l'ereditarietà del valore di proprietà (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> è `true` nei metadati). Ereditarietà del valore di proprietà in questo contesto significa che se sono presenti elementi figlio con nessun altro valore per <xref:System.Windows.UIElement.ClipToBounds%2A> assegnati tramite valori locali o gli stili, il valore dell'elemento padre più vicino con questo valore assegnato (nuovamente, sia negli stili, per impostazione predefinita i valori, o un valore locale), verrà assegnato il valore dall'elemento padre per tutti gli elementi figlio non assegnato dal sistema di proprietà. In pratica, ciò significa che è possibile specificare se consentire clip in base ai limiti dell'elemento radice e che verrà propagato a tutti gli elementi figlio che non hanno il valore assegnato come `false`.  
  
<a name="dependencyPropertyInfo_ClipToBounds"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Clip" />
      </Docs>
    </Member>
    <Member MemberName="ClipToBoundsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipToBoundsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ClipToBoundsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipToBoundsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipToBoundsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.ClipToBounds" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CommandBindingCollection CommandBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.CommandBindingCollection CommandBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.CommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBindings As CommandBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::CommandBindingCollection ^ CommandBindings { System::Windows::Input::CommandBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CommandBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di oggetti <see cref="T:System.Windows.Input.CommandBinding" /> associati a questo elemento. Un oggetto <see cref="T:System.Windows.Input.CommandBinding" /> consente la gestione dei comandi per questo elemento e dichiara il collegamento tra un comando, i relativi eventi e i gestori associati da questo elemento.</summary>
        <value>Insieme di tutti gli oggetti <see cref="T:System.Windows.Input.CommandBinding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un altro modo consueto per popolare il <xref:System.Windows.UIElement.CommandBindings%2A> raccolta consiste nell'utilizzare <xref:System.Windows.Input.CommandManager> metodi a livello di codice.  
  
<a name="xamlPropertyElementUsage_CommandBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.CommandBindings>  
    oneOrMoreCommandBindings  
  </object.CommandBindings>  
</object>  
```  
  
<a name="xamlValues_CommandBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreCommandBindings*  
 Uno o più <xref:System.Windows.Input.CommandBinding> elementi. Ognuno di questi deve avere un <xref:System.Windows.Input.CommandBinding.Command%2A> attributo impostato su un comando noto e gli attributi impostati per la <xref:System.Windows.Input.CommandBinding.CanExecute> e <xref:System.Windows.Input.CommandBinding.Executed> le implementazioni di gestori. Per altre informazioni, vedere <xref:System.Windows.Input.CommandBinding>.  
  
   
  
## Examples  
 L'esempio seguente aggiunge un <xref:System.Windows.Input.CommandBinding> in una finestra utilizzando markup. Si noti che in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], <xref:System.Windows.Input.CommandBindingCollection> non è dichiarato nel markup come elemento; l'oggetto raccolta viene dedotto dal tipo che accetta la proprietà e inserire l'elemento proprietà con una o più <xref:System.Windows.Input.CommandBinding> elementi:  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 Per ulteriori informazioni sul [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi per le raccolte, vedere [sintassi di XAML In dettaglio](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 Nell'esempio seguente viene eseguita essenzialmente la stessa operazione nel codice:  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="DesiredSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size DesiredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size DesiredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.DesiredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DesiredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size DesiredSize { System::Windows::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene le dimensioni calcolate da questo elemento durante il passaggio di misurazione del processo di layout.</summary>
        <value>Dimensioni calcolate, che diventano le dimensioni desiderate per il passaggio di disposizione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore restituito da questa proprietà sarà una misura valida solo se il valore di <xref:System.Windows.UIElement.IsMeasureValid%2A> proprietà `true`.  
  
 <xref:System.Windows.UIElement.DesiredSize%2A> viene controllato in genere come uno dei fattori di misurazione quando si implementa il comportamento di layout, ad esempio sostituzioni <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, o <xref:System.Windows.UIElement.OnRender%2A> (nel <xref:System.Windows.UIElement.OnRender%2A> caso, è possibile controllare <xref:System.Windows.UIElement.RenderSize%2A> , invece, ma questo dipende il implementazione). A seconda dello scenario, <xref:System.Windows.UIElement.DesiredSize%2A> venga completamente rispettato dalla logica di implementazione, i vincoli su <xref:System.Windows.UIElement.DesiredSize%2A> potrebbe essere applicato, e tali vincoli modifichino anche altre caratteristiche dell'elemento padre o di elemento figlio. Ad esempio, un controllo che supporta le aree scorrevole (ma sceglie di non derivare dai controlli a livello di framework WPF che già consentono le aree scorrevoli) Impossibile confrontare le dimensioni disponibili per <xref:System.Windows.UIElement.DesiredSize%2A>. Il controllo può quindi impostare uno stato interno che consente di barre di scorrimento di [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] per tale controllo. In alternativa, <xref:System.Windows.UIElement.DesiredSize%2A> può anche essere ignorato in determinati scenari.  
  
   
  
## Examples  
 Nell'esempio seguente <xref:System.Windows.UIElement.DesiredSize%2A> come parte di un <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementazione. Si noti come <xref:System.Windows.UIElement.Measure%2A> viene chiamato immediatamente prima di ottenere <xref:System.Windows.UIElement.DesiredSize%2A>. Ciò assicura che <xref:System.Windows.UIElement.DesiredSize%2A> contenga un valore valido.  
  
 [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]
 [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]
 [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.DragEnter?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.DragEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.DragEnterEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewDragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="DragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.DragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.DragLeave?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.DragLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.DragLeaveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="DragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.DragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ DragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica anche se l'operazione di trascinamento i limiti dell'elemento. Se l'operazione di trascinamento viene avviato all'esterno dei limiti e quindi spostarsi all'interno, questo evento viene generato anche, così come <xref:System.Windows.UIElement.DragEnter> e gli eventi di anteprima correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.DragOver?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.DragOver> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.DragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_DragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.DragOverEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.DragDrop.PreviewDragOver>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="DragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.DragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Drop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler Drop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler Drop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.Drop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Drop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ Drop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.Drop?displayProperty=nameWithType> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.Drop> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.Drop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_Drop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.DropEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewDrop>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="DropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.DropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.Drop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Effect">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.Effect Effect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Effects.Effect Effect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Effect" />
      <MemberSignature Language="VB.NET" Value="Public Property Effect As Effect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Effects::Effect ^ Effect { System::Windows::Media::Effects::Effect ^ get(); void set(System::Windows::Media::Effects::Effect ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.Effect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'effetto bitmap da applicare all'oggetto <see cref="T:System.Windows.UIElement" />. Si tratta di una proprietà di dipendenza.</summary>
        <value>Oggetto <see cref="T:System.Windows.Media.Effects.Effect" /> che rappresenta l'effetto bitmap.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzare il <xref:System.Windows.UIElement.Effect%2A> proprietà a cui applicare un effetto bitmap da un <xref:System.Windows.UIElement>.  
  
<a name="dependencyPropertyInfo_Effect"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.EffectProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Il codice XAML seguente viene illustrato come assegnare un oggetto personalizzato <xref:System.Windows.Media.Effects.ShaderEffect> per il <xref:System.Windows.UIElement.Effect%2A> proprietà.  
  
 [!code-xaml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Effects.Effect" />
        <altmember cref="T:System.Windows.Media.Effects.ShaderEffect" />
      </Docs>
    </Member>
    <Member MemberName="EffectProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty EffectProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty EffectProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.EffectProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EffectProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ EffectProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Effect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Focus();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.Focus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tenta di impostare lo stato attivo su questo elemento.</summary>
        <returns>
          <see langword="true" /> se lo stato attivo della tastiera e lo stato attivo logico sono stati impostati su questo elemento; <see langword="false" /> se solo lo stato attivo logico è stato impostato su questo elemento, oppure se la chiamata a questo metodo non ha forzato la modifica dello stato attivo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per essere attivabile, <xref:System.Windows.UIElement.Focusable%2A> e <xref:System.Windows.UIElement.IsEnabled%2A> devono essere entrambi `true`.  
  
 Anche se un elemento è una gestione degli eventi con stato attivabile e abilitato, all'interno di un struttura ad albero specifica, ad esempio per un controllo composito, può rispondere agli eventi di stato attivo di anteprima, non consentendo lo stato attivo, pertanto questo metodo restituirà `false`.  
  
 In generale, lo stato attivo è governato da due concetti separati: tastiera e lo stato attivo logico, che non sono sempre uguali.  Per ulteriori informazioni, vedere [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) o [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
 Se la chiamata <xref:System.Windows.UIElement.Focus%2A> restituisce `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> sono anche `true`.  
  
 Se le proprietà correlate non sono già `true`, quando si chiama <xref:System.Windows.UIElement.Focus%2A>, uno o più dei seguenti eventi vengono generati nell'ordine seguente: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (l'origine è la nuova destinazione dello stato attivo), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (l'origine è la nuova destinazione di messa a fuoco).  
  
 Affinché la chiamata abbia esito positivo, un altro elemento nell'applicazione è necessario che lo stato attivo in precedenza.  
  
   
  
## Examples  
 Nell'esempio seguente imposta lo stato attivo su un <xref:System.Windows.Controls.TextBox> a cui fa riferimento <xref:System.Windows.FrameworkElement.Name%2A>e quindi modifica la posizione del cursore all'interno di <xref:System.Windows.Controls.TextBox>.  
  
 [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]
 [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Focusable">
      <MemberSignature Language="C#" Value="public bool Focusable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focusable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Focusable" />
      <MemberSignature Language="VB.NET" Value="Public Property Focusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focusable { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.Focusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che indica se l'elemento può ricevere lo stato attivo.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l'elemento è attivabile, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo l'elemento riceve input da tastiera.  
  
 <xref:System.Windows.UIElement.Focusable%2A> è il [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] funzione di accesso alle proprietà per i quali è in realtà una proprietà di dipendenza. Questa particolare proprietà di dipendenza è spesso il valore di "predefinito" apparente impostato in modo diverso nelle classi derivate dell'elemento, in particolare nei controlli. Questa eventualità si verifica in due modi:  
  
-   La proprietà di dipendenza viene ereditata da una determinata classe derivata, ma che derivata esegue l'override di metadati della proprietà di dipendenza e si cambia il valore predefinito della proprietà.  
  
-   Uno stile o un modello viene applicato a un elemento, che imposta il valore di proprietà di dipendenza in modo diverso.  
  
 Ad esempio, il valore "predefinito" apparente di <xref:System.Windows.UIElement.Focusable%2A> per un <xref:System.Windows.Controls.Button> controllo sarà `true`, anche se <xref:System.Windows.Controls.Button> eredita <xref:System.Windows.UIElement.Focusable%2A> come un [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] proprietà direttamente da <xref:System.Windows.UIElement>. Infatti, il valore dei metadati applicato per la <xref:System.Windows.UIElement.Focusable%2A> è stato sottoposto a override di proprietà di dipendenza all'interno del costruttore statico del <xref:System.Windows.Controls.Control> classe base, situata tra <xref:System.Windows.Controls.Button> e <xref:System.Windows.UIElement> nella gerarchia delle classi.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.Control> o le relative classi derivate, <xref:System.Windows.Controls.Control> ridefinisce il valore predefinito di questa proprietà sia `true`.  
  
 Quando viene ereditato da <xref:System.Windows.Controls.Label> (ovvero un <xref:System.Windows.Controls.Control> classe derivata), il valore predefinito è nuovamente ridefinito come `false`.  
  
<a name="dependencyPropertyInfo_Focusable"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.FocusableProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrato un modello di controllo per un determinato controllo personalizzato che imposta <xref:System.Windows.UIElement.Focusable%2A> `false` su uno degli elementi all'interno del modello.  
  
 [!code-xaml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando si deriva da <see cref="T:System.Windows.UIElement" /> direttamente (anziché da <see cref="T:System.Windows.Controls.Control" />), considerare la possibilità di rendere attivabile, perché per impostazione predefinita l'elemento non sarà con stato attivabile. Se si desidera rendere attivabile, sostituire i metadati per questa proprietà all'interno del costruttore del tipo statico come indicato di seguito:  
  
 [!code-csharp[CorePseudocode#UIElementShortOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementshortoverride)]
 [!code-vb[CorePseudocode#UIElementShortOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementshortoverride)]  
  
 dove <paramref name="myElement" /> deve essere il nome della classe del tipo che si esegue l'override dei metadati.</para>
        </block>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="FocusableChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler FocusableChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.FocusableChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FocusableChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ FocusableChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.Focusable" /> cambia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="FocusableProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusableProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusableProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.FocusableProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusableProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusableProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Focusable" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationBaseValue">
      <MemberSignature Language="C#" Value="public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetAnimationBaseValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAnimationBaseValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetAnimationBaseValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Media.Animation.IAnimatable.GetAnimationBaseValue(System.Windows.DependencyProperty)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">Proprietà di dipendenza da controllare.</param>
        <summary>Restituisce il valore della proprietà di base per la proprietà specificata in questo elemento, indipendentemente da eventuali valori animati provenienti da un'animazione in esecuzione o interrotta.</summary>
        <returns>Valore della proprietà se alla proprietà di dipendenza specificata non sono associate animazioni.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se non sono associate animazioni a proprietà, quindi il <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> valore restituito è sempre identico al <xref:System.Windows.DependencyObject.GetValue%2A> valore restituito. Se sono presenti animazioni associate, quindi tutti i possibili valori di animazione derivati tra l'inizio e i valori di arresto vengono ignorati e il valore della proprietà è determinato in base a tutti gli altri possibili input. Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un gestore che segnala il valore di base di un oggetto animato <xref:System.Windows.FrameworkElement.Width%2A> proprietà in un <xref:System.Windows.Controls.Button>, nonché il valore di base di una trasformazione.  
  
 [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]
 [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize">Dimensioni disponibili fornite dall'elemento.</param>
        <summary>Restituisce una forma geometrica alternativa che rappresenta l'area che sarà ritagliata se la proprietà <see cref="P:System.Windows.UIElement.ClipToBounds" /> viene impostata su <see langword="true" />.</summary>
        <returns>Geometria di ritaglio potenziale.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita restituisce un valore valido, ma non utilizza il `layoutSlotSize` parametro nei calcoli. Viene invece utilizzato il valore di <xref:System.Windows.UIElement.RenderSize%2A>.  
  
 Questo metodo è sostanzialmente sottoposto a override da immediatamente derivata <xref:System.Windows.FrameworkElement> (classe) e <xref:System.Windows.FrameworkElement> override produce un comportamento più complesso per gli elementi di livello di framework WPF generali. Per informazioni dettagliate, vedere <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se sottoposto a override in una classe derivata, restituisce un elemento padre alternativo dell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] per questo elemento se non esiste alcun elemento padre visuale.</summary>
        <returns>Oggetto, se l'implementazione di una classe derivata dispone di una connessione a un elemento padre alternativo da segnalare.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione virtuale predefinita di questo metodo restituisce `null`. <xref:System.Windows.FrameworkElement> fornisce un'implementazione pratica.  
  
 Gli elementi padre alternativi sono utilizzati per il routing, nei casi in cui un elemento crea una struttura elemento padre alternativo in modo che gli eventi vengono indirizzati in modo diverso dal modello di routing la struttura ad albero visuale padre standard, standard o verso il basso di visualizzare l'anteprima di strategia di routing.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento e rilascio sottostante che coinvolge l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.GiveFeedback> evento consente all'origine di un evento di trascinamento di modificare l'aspetto del puntatore del mouse per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio. Il feedback visivo ribadiscono che è un'operazione di trascinamento e rilascio nel processo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.GiveFeedback> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.GiveFeedback> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewGiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ GotFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento riceve lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario, lo stato attivo rimane in cui si trova e l'elemento in cui un <xref:System.Windows.UIElement.Focus%2A> viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Interpretazione più precisa di questo evento è che viene generato quando il valore di <xref:System.Windows.UIElement.IsFocused%2A> proprietà di un elemento nella route viene modificato da `false` per `true`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che riceve lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_GotFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GotFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGotFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="GotFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GotFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ GotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> è un evento simile che tiene traccia delle modifiche dello stato in una proprietà che mantiene lo stato attivo di un elemento. il <xref:System.Windows.UIElement.GotKeyboardFocus> evento viene generato in molte circostanze stesso.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento che ha lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.GotKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.GotKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="GotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler GotMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler GotMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ GotMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento acquisisce lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il mouse, riceve l'input del mouse, anche se il puntatore del mouse non rientra nei limiti. Il puntatore del mouse in genere viene acquisito solo durante le operazioni di trascinamento e rilascio e rimane acquisito finché non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con l'acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nell'evento di acquisizione dei dati per determinare l'elemento effettivo con il mouse.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.GotMouseCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.GotMouseCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="GotMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GotMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler GotStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler GotStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ GotStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.GotStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento rileva lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se il puntatore non rientra nei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio e conserva fino a quando non si verifica l'azione di eliminazione dell'operazione di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento con l'acquisizione potrebbe essere un elemento figlio invece dell'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato capture.  
  
 Questo evento viene creato un alias per l'evento associato per questa classe in modo che <xref:System.Windows.UIElement.GotStylusCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.GotStylusCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_GotStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GotStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; GotTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; GotTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.GotTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ GotTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco viene acquisito in questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_GotTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GotTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent GotTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.GotTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly GotTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ GotTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.GotTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAnimatedProperties">
      <MemberSignature Language="C#" Value="public bool HasAnimatedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAnimatedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasAnimatedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasAnimatedProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasAnimatedProperties { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Media.Animation.IAnimatable.HasAnimatedProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se questo elemento dispone di proprietà a cui è stata aggiunta un'animazione.</summary>
        <value>
          <see langword="true" /> se questo elemento dispone di animazioni associate ad alcune proprietà, in caso contrario <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce `true` per animazioni permanenti (senza clock, sempre in esecuzione) o per le animazioni che una sequenza temporale specifica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasEffectiveKeyboardFocus">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasEffectiveKeyboardFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasEffectiveKeyboardFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.HasEffectiveKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasEffectiveKeyboardFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasEffectiveKeyboardFocus { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se <see cref="T:System.Windows.UIElement" /> ha lo stato attivo.</summary>
        <value>
          <see langword="true" /> se <see cref="T:System.Windows.UIElement" /> ha lo stato attivo; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sottoclassi possono eseguire l'override di questa proprietà per specificare quando l'elemento ha lo stato attivo.  Questo è utile quando il <xref:System.Windows.UIElement> contiene elementi che possono avere lo stato attivo e si desidera l'elemento di report ha lo stato attivo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTestCore">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> per fornire il comportamento di hit testing dell'elemento di base.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.GeometryHitTestResult HitTestCore(class System.Windows.Media.GeometryHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As GeometryHitTestParameters) As GeometryHitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::GeometryHitTestResult ^ HitTestCore(System::Windows::Media::GeometryHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.GeometryHitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.GeometryHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Descrive l'hit test da eseguire, incluso il punto iniziale per l'hit test.</param>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)" /> per fornire il comportamento di hit testing dell'elemento di base (restituendo <see cref="T:System.Windows.Media.GeometryHitTestResult" />).</summary>
        <returns>Risultati del test, inclusa la geometria valutata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vedere il metodo virtuale originale <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> per informazioni sull'override ulteriormente questo metodo nelle classi derivano. Si noti che molti controlli specifici (<xref:System.Windows.Controls.TextBlock>, ad esempio), hanno implementazioni distinte che eseguono l'override di questo.  
  
 Questo metodo non deve essere chiamato dal codice dell'applicazione. Questo metodo supporta i comportamenti di testing hit interni esposti da vari aspetti del sistema di input (se il puntatore del mouse è posizionato su un elemento, ad esempio).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.HitTestResult HitTestCore(class System.Windows.Media.PointHitTestParameters hitTestParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HitTestCore (hitTestParameters As PointHitTestParameters) As HitTestResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::HitTestResult ^ HitTestCore(System::Windows::Media::PointHitTestParameters ^ hitTestParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.HitTestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hitTestParameters" Type="System.Windows.Media.PointHitTestParameters" />
      </Parameters>
      <Docs>
        <param name="hitTestParameters">Descrive l'hit test da eseguire, incluso il punto iniziale per l'hit test.</param>
        <summary>Implementa <see cref="M:System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)" /> per fornire il comportamento di hit testing dell'elemento di base (restituendo <see cref="T:System.Windows.Media.HitTestResult" />).</summary>
        <returns>Risultati del test, incluso il punto valutato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vedere il metodo virtuale originale <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=nameWithType> per informazioni sull'override ulteriormente questo metodo nelle classi derivano. Si noti che molti controlli specifici (<xref:System.Windows.Controls.TextBlock>, ad esempio), hanno implementazioni distinte che eseguono l'override <xref:System.Windows.UIElement.HitTestCore%2A> definiti da <xref:System.Windows.UIElement>.  
  
 Questo metodo non deve essere chiamato dal codice dell'applicazione. Questo metodo supporta i comportamenti di testing hit interni esposti da vari aspetti del sistema di input (se il puntatore del mouse è posizionato su un elemento, ad esempio).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputBindingCollection InputBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputBindingCollection InputBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.InputBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputBindings As InputBindingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputBindingCollection ^ InputBindings { System::Windows::Input::InputBindingCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera l'insieme di associazioni di input relative all'elemento.</summary>
        <value>Insieme delle associazioni di input.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Associazioni di input supportano l'associazione di comandi ai dispositivi di input. Ad esempio, <xref:System.Windows.Input.MouseBinding> implementa associazioni di input che includono proprietà che sono specifiche dei mouse.  
  
 La raccolta di associazioni di input includerà sia associazioni di input che riguardano il tipo come associazioni di input che vengono dichiarate nell'istanza.  
  
 Una proprietà correlata, <xref:System.Windows.UIElement.CommandBindings%2A>, gestisce una raccolta di associazioni di comandi. Queste sono diverse dalle associazioni di input, in quanto rappresentano il livello successivo verso il basso dell'elaborazione del comando - azioni che sono associati a comandi noti.  
  
<a name="xamlPropertyElementUsage_InputBindings"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.InputBindings>  
    oneOrMoreInputBindings  
  </object.InputBindings>  
</object>  
```  
  
<a name="xamlValues_InputBindings"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *oneOrMoreInputBindings*  
 Uno o più <xref:System.Windows.Input.InputBinding> elementi (in genere il <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding> classi derivate). Ognuno di questi deve disporre di un <xref:System.Windows.Input.InputBinding.Command%2A> e <xref:System.Windows.Input.InputBinding.Gesture%2A> set di attributi.  
  
   
  
## Examples  
 Nell'esempio seguente consente di popolare questa proprietà su un <xref:System.Windows.Window>, con una singola <xref:System.Windows.Input.KeyBinding>.  
  
 [!code-xaml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Per ulteriori informazioni sul [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintassi per le raccolte, vedere [sintassi di XAML In dettaglio](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InputHitTest">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement InputHitTest (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.IInputElement InputHitTest(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InputHitTest(System.Windows.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::IInputElement ^ InputHitTest(System::Windows::Point point);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point">Coordinate di offset all'interno di questo elemento.</param>
        <summary>Restituisce l'elemento di input all'interno dell'elemento corrente in corrispondenza delle coordinate specificate, relativo all'origine dell'elemento corrente.</summary>
        <returns>Elemento figlio situato nella posizione specificata.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IInputElement> viene restituito come tipo restituito, poiché tale tipo è un'interfaccia comune per entrambi <xref:System.Windows.UIElement> e <xref:System.Windows.ContentElement>. È quindi possibile eseguire il cast del tipo restituito in modo appropriato o usare l'istanza dell'interfaccia per determinati membri definiti per il <xref:System.Windows.IInputElement> interfaccia.  
  
 Questo metodo in genere non viene chiamato dal codice dell'applicazione. Chiamare questo metodo è appropriato se si intende implementare nuovamente una notevole quantità di basso livello funzionalità di input sono già presenti, ad esempio ricreando la logica del dispositivo mouse.  
  
 <xref:System.Windows.IContentHost> contratti un <xref:System.Windows.IContentHost.InputHitTest%2A> (metodo) con la stessa firma, alcuni elementi scelgono di implementare in modo esplicito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateArrange">
      <MemberSignature Language="C#" Value="public void InvalidateArrange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateArrange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateArrange" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateArrange ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateArrange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida lo stato di disposizione (layout) per l'elemento. Dopo l'invalidamento, verrà aggiornato il layout dell'elemento, operazione che si verifica in modo asincrono a meno che non venga forzata successivamente da <see cref="M:System.Windows.UIElement.UpdateLayout" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamate frequenti al <xref:System.Windows.UIElement.InvalidateArrange%2A> o, in particolare per <xref:System.Windows.UIElement.UpdateLayout%2A> incidono notevolmente sulle prestazioni. Pertanto, evitare di chiamare questo metodo a meno che non sia assolutamente necessario stato layout preciso per le chiamate successive alle altre [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] nel codice. Uno scenario avanzato in cui è possibile chiamare <xref:System.Windows.UIElement.InvalidateArrange%2A> è se si sta creando un <xref:System.Windows.PropertyChangedCallback> per una proprietà di dipendenza che non si trova in un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> classe derivata che influenza ancora il passaggio di disposizione del layout, in caso di modifiche.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateMeasure">
      <MemberSignature Language="C#" Value="public void InvalidateMeasure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateMeasure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateMeasure" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateMeasure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateMeasure();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida lo stato di misurazione (layout) per l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La chiamata a questo metodo chiama anche <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente, non è necessario chiamare <xref:System.Windows.UIElement.InvalidateMeasure%2A> e <xref:System.Windows.UIElement.InvalidateArrange%2A> in successione. Dopo l'invalidamento, l'elemento avrà aggiornato, il layout che si verifica in modo asincrono, a meno che non <xref:System.Windows.UIElement.UpdateLayout%2A> viene chiamato per forzare una modifica del layout sincrona.  
  
 Il sistema di layout a livello di framework WPF non implementa la gestione delle modifiche la struttura ad albero visuale di un elemento, e in più comuni di invalidamento del sistema di layout chiama l'equivalente di questo metodo quando necessario. È necessario chiamare questo metodo solo se si produce un'implementazione di completare il layout, che implica la modifica diretta dell'albero, elemento o simile scenari avanzati. Uno scenario avanzato è se si sta creando un <xref:System.Windows.PropertyChangedCallback> per una proprietà di dipendenza che non si trova in un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> classe derivata che influenza ancora il passaggio di misurazione del layout, in caso di modifiche.  
  
 Chiamate frequenti al <xref:System.Windows.UIElement.InvalidateMeasure%2A> o, in particolare per <xref:System.Windows.UIElement.UpdateLayout%2A> incidono notevolmente sulle prestazioni. Pertanto, evitare di chiamare questo metodo a meno che non sia assolutamente necessario stato layout preciso per le chiamate successive alle altre [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] nel codice.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateVisual">
      <MemberSignature Language="C#" Value="public void InvalidateVisual ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateVisual() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.InvalidateVisual" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateVisual ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateVisual();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalida il rendering dell'elemento e applica un nuovo calcolo del layout completo. Una volta completato il ciclo di layout viene chiamato <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo chiama <xref:System.Windows.UIElement.InvalidateArrange%2A> internamente.  
  
 In genere, questo metodo non viene chiamato dal codice dell'applicazione. Implementa la gestione delle modifiche la struttura ad albero visuale di un elemento, il sistema di layout a livello di framework WPF e chiama l'equivalente di questo metodo quando necessario già. Chiamare questo metodo è necessaria solo per scenari avanzati. Uno scenario avanzato è se si sta creando un <xref:System.Windows.PropertyChangedCallback> per una proprietà di dipendenza che non si trova in un <xref:System.Windows.Freezable> o <xref:System.Windows.FrameworkElement> classe derivata che influenzi ancora il layout in caso di modifiche.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
      </Docs>
    </Member>
    <Member MemberName="IsArrangeValid">
      <MemberSignature Language="C#" Value="public bool IsArrangeValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArrangeValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsArrangeValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArrangeValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArrangeValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la dimensione e la posizione calcolate degli elementi figlio nel layout di questo elemento sono valide.</summary>
        <value>
          <see langword="true" /> se la dimensione e la posizione del layout sono valide; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile forzare disposizione invalidazione chiamando <xref:System.Windows.UIElement.InvalidateArrange%2A> su questo elemento (o i relativi elementi padre). In questo modo il layout per la ricomposizione di determina il sistema di layout. In alternativa, una chiamata immediata a <xref:System.Windows.UIElement.UpdateLayout%2A> è stato possibile stabilire, ma questo deve essere eseguito solo se si è certi che nessun ulteriore invalidamenti sono in sospeso (un numero elevato di aggiornamenti forzati ha conseguenze sulle prestazioni).  
  
 <xref:System.Windows.UIElement.IsArrangeValid%2A> non può essere `true` a meno che non <xref:System.Windows.UIElement.IsMeasureValid%2A> anche `true` (nel processo di layout, disposizione non può essere valida senza prima la misurazione).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.InvalidateArrange" />
        <altmember cref="P:System.Windows.UIElement.IsMeasureValid" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se questo elemento è abilitato nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si noti che questa proprietà è influenzata dalle implementazioni specifiche della classe di <xref:System.Windows.UIElement.IsEnabledCore%2A> su determinati elementi, spesso in fase di esecuzione. Pertanto, il valore predefinito elencato di seguito è a volte non valido. Ad esempio, un <xref:System.Windows.Controls.Primitives.ScrollBar> sarà <xref:System.Windows.UIElement.IsEnabled%2A> `false` ogni volta che non è necessario per supportare una barra di scorrimento. Il tentativo di impostare questo valore verrà inoltre sottoposto a override dal valore restituito da <xref:System.Windows.UIElement.IsEnabledCore%2A>.  
  
 Gli elementi che non sono abilitati non partecipano al processo di hit testing o lo stato attivo e pertanto non essere origini di eventi di input.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsEnabledProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore su un pulsante che quando eseguito imposta <xref:System.Windows.UIElement.IsEnabled%2A> `false` in un altro pulsante denominato `b1`.  
  
 [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]
 [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsEnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsEnabledChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsEnabledChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsEnabled" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledCore">
      <MemberSignature Language="C#" Value="protected virtual bool IsEnabledCore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabledCore" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsEnabledCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property IsEnabledCore As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool IsEnabledCore { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che diventa il valore restituito di <see cref="P:System.Windows.UIElement.IsEnabled" /> in classi derivate.</summary>
        <value>
          <see langword="true" /> se l'elemento è abilitato; in caso contrario <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questa proprietà memorizza nella cache il valore e calcola anche se l'elemento padre di questo elemento è abilitato. (Se l'elemento padre non è abilitata, l'elemento figlio può essere abilitata in modo efficace nel pratici [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].) Se si sceglie di eseguire l'override di questa implementazione, assicurarsi di chiamare l'implementazione di base per mantenere questo comportamento.  
  
 La <see cref="T:System.Windows.Controls.Primitives.ScrollBar" /> classe fornisce un'implementazione esistente dell'override di questa proprietà. Questo override determina se il contenuto all'interno dell'area di presentazione del contenuto supera l'area disponibile. Se il contenuto supera l'area, la parte della barra di scorrimento è abilitata. In caso contrario, la barra di scorrimento non è abilitato.</para>
        </block>
        <altmember cref="E:System.Windows.UIElement.IsEnabledChanged" />
        <altmember cref="P:System.Windows.UIElement.IsEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFocused">
      <MemberSignature Language="C#" Value="public bool IsFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento ha lo stato attivo logico.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento detiene lo stato attivo logico; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se un'applicazione dispone di più divisioni dello stato attivo, ad esempio tra contenuto menu e il resto dell'applicazione, lo stato attivo logico potrebbero essere diversi dallo stato attivo della tastiera. In questo scenario, in un elemento dell'interfaccia utente dell'applicazione può essere solo lo stato attivo, tuttavia, alcuni elementi in altre divisioni lo stato attivo potrebbero continuare a mantenere lo stato attivo logico. Per ulteriori informazioni sullo stato attivo logico, vedere [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  
  
 Impostando questa proprietà (è in sola lettura) non si imposta lo stato attivo. L'utilizzo tipico per questa proprietà è di utilizzarlo come proprietà di dipendenza per un <xref:System.Windows.Setter> o <xref:System.Windows.EventTrigger>. Per impostare lo stato attivo a livello di programmazione, chiamare <xref:System.Windows.UIElement.Focus%2A>. Lo stato attivo può essere impostato anche un'azione dell'utente o dalle implementazioni di controllo, che includono generalmente il comportamento di acquisizione del mouse.  
  
<a name="dependencyPropertyInfo_IsFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 L'esempio seguente è un gestore del codice che si modifica lo sfondo di un controllo ha lo stato attivo.  
  
 [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  
  
 Un altro modo comune per ottenere lo stesso effetto anche inserendo un <xref:System.Windows.Trigger> nel <xref:System.Windows.Style> di un controllo; questo approccio non richiede la gestione degli eventi specifici con code-behind e consente ai progettisti di un accesso maggiore alla natura grafica e interattiva di il [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. Per un esempio, vedere [procedura: creare un effetto alone esterno](http://msdn.microsoft.com/library/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="IsFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisible">
      <MemberSignature Language="C#" Value="public bool IsHitTestVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHitTestVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsHitTestVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHitTestVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHitTestVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Recupera o imposta un valore che dichiara se l'elemento può essere restituito come risultato dell'hit test da una parte del contenuto renderizzato. Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento può essere restituito come risultato dell'hit test da almeno un punto; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore effettivo di questa proprietà viene influenzato dalle posizioni relative degli elementi sottoponibili a hit nell'albero logico. Ad esempio, se un elemento è un elemento figlio di un elemento che è l'hit test visibile, il valore effettivo della proprietà sull'elemento figlio rimarrà `false`, anche se il tentativo di impostare il valore localmente. Per questo motivo, è importante che non si imposta <xref:System.Windows.UIElement.IsHitTestVisible%2A> a `false` in un controllo composito, a meno che non desideri un input o hit testing su tale controllo. Per altre informazioni sull'hit testing, vedere [Hit testing a livello visivo](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  
  
<a name="dependencyPropertyInfo_IsHitTestVisible"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsHitTestVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsHitTestVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsHitTestVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsHitTestVisible" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHitTestVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsHitTestVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsHitTestVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHitTestVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsHitTestVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsHitTestVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInputMethodEnabled">
      <MemberSignature Language="C#" Value="public bool IsInputMethodEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInputMethodEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsInputMethodEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInputMethodEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInputMethodEnabled { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se un sistema di metodo di input, ad esempio [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], è abilitato per l'elaborazione dell'input in questo elemento.</summary>
        <value>
          <see langword="true" /> se è attivo un metodo di input, in caso contrario <see langword="false" />. Il valore predefinito della proprietà associata sottostante è <see langword="true;" /> , tuttavia, questo verrà influenzato dallo stato effettivo dei metodi di input in fase di esecuzione.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà restituisce il valore restituito dalla proprietà connessa <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=nameWithType> per i metodi di input attualmente abilitati (tastiera, riconoscimento vocale e altri dispositivi di input).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocused">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocused { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocused</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se l'elemento ha lo stato attivo della tastiera.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento ha la tastiera allo stato attivo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifica del valore determinato di questa proprietà può essere accompagnato da eventi correlati lo stato attivo.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> vengono generalmente utilizzati all'interno di gestori di eventi di classe per gli altri eventi correlati all'input, ad esempio per determinare se l'elemento è già stato attivo della tastiera o al passaggio del mouse per determinare gli eventi e gli eventi della tastiera si verificano insieme.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocused"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
        <altmember cref="E:System.Windows.UIElement.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsKeyboardFocused" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsKeyboardFocused" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithin">
      <MemberSignature Language="C#" Value="public bool IsKeyboardFocusWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKeyboardFocusWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsKeyboardFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsKeyboardFocusWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsKeyboardFocusWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsKeyboardFocusWithin</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stato attivo della tastiera è un punto qualsiasi all'interno dell'elemento o i relativi elementi figlio della struttura ad albero visuale.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se lo stato attivo della tastiera è sull'elemento o sugli elementi figlio; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Modifica del valore di questa proprietà in genere aumentare di <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> evento, a meno che non abbia eseguito l'override di una classe derivata <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> per eliminare l'evento.  
  
 Questa proprietà non viene impostata direttamente, ma è possibile impostare lo stato attivo a un elemento chiamando <xref:System.Windows.UIElement.Focus%2A>, oppure effettuare una <xref:System.Windows.UIElement.MoveFocus%2A> richiesta. Una di queste chiamate al metodo potrebbe modificare il valore della proprietà.  
  
 <xref:System.Windows.UIElement.IsKeyboardFocused%2A> e <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> vengono generalmente utilizzati all'interno di gestori di eventi di classe per gli altri eventi correlati all'input, ad esempio per determinare se l'elemento è già stato attivo della tastiera o al passaggio del mouse per determinare gli eventi e gli eventi della tastiera si verificano insieme.  
  
<a name="dependencyPropertyInfo_IsKeyboardFocusWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsKeyboardFocusWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsKeyboardFocusWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyboardFocusWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsKeyboardFocusWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsKeyboardFocusWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsKeyboardFocusWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsKeyboardFocusWithin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabled">
      <MemberSignature Language="C#" Value="public bool IsManipulationEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManipulationEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsManipulationEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsManipulationEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManipulationEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se gli eventi di manipolazione sono abilitati sull'oggetto <see cref="T:System.Windows.UIElement" />.</summary>
        <value>
          <see langword="true" /> se gli eventi di manipolazione sono abilitati sull'oggetto <see cref="T:System.Windows.UIElement" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostare questa proprietà su true se si desidera il <xref:System.Windows.UIElement> per ricevere il <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, e <xref:System.Windows.UIElement.ManipulationCompleted> eventi. Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene creata un'applicazione che dispone di un rettangolo rosso.  Il <xref:System.Windows.UIElement.IsManipulationEnabled%2A> del rettangolo è impostata su true e l'applicazione finestra sottoscrive il <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, e <xref:System.Windows.UIElement.ManipulationInertiaStarting> eventi. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-xaml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManipulationEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsManipulationEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsManipulationEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsManipulationEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsManipulationEnabledProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsManipulationEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMeasureValid">
      <MemberSignature Language="C#" Value="public bool IsMeasureValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMeasureValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMeasureValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMeasureValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMeasureValid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la dimensione corrente restituita dalla misurazione del layout sia valida.</summary>
        <value>
          <see langword="true" /> se il passaggio di misurazione del layout restituisce un valore valido e corrente; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile forzare misurazione e disposizione invalidazione chiamando <xref:System.Windows.UIElement.InvalidateMeasure%2A> su questo elemento (o qualsiasi elemento padre, la struttura ad albero visuale). Questo modo si definisce il layout per la ricomposizione in modo asincrono, che si verificano in un momento determinato dal sistema di layout. In alternativa, è possibile apportare una chiamata immediata a <xref:System.Windows.UIElement.UpdateLayout%2A>. Tuttavia, è necessario chiamare solo <xref:System.Windows.UIElement.UpdateLayout%2A> se è probabile che non le altre convalide sono in sospeso (un numero elevato di aggiornamenti forzati avrà conseguenze sulle prestazioni).  
  
 Se <xref:System.Windows.UIElement.IsMeasureValid%2A> è `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> deve inoltre essere `false` (dalla logica del processo di layout di imposte, disposizione non può essere valida senza prima la misurazione).  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptured">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il mouse viene rilevato su questo elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l’acquisizione del mouse, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stato di acquisizione del mouse è correlato a operazioni di trascinamento e rilascio in-process.  
  
<a name="dependencyPropertyInfo_IsMouseCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente lo stato di acquisizione del mouse attiva o disattiva dipende se il mouse è già stato acquisito per l'elemento.  
  
 Se il mouse capture è altrove, che l'acquisizione del mouse è impostata su quell'elemento. Se l'elemento di input del mouse, viene cancellata chiamando <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=nameWithType> con un input null.  
  
 [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]
 [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsMouseCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsMouseCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsMouseCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se l'elemento o gli elementi figlio nella relativa struttura ad albero visuale hanno lo stato mouse capture. Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento o un elemento contenuto riceve l'input del mouse; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_IsMouseCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
        <altmember cref="M:System.Windows.UIElement.CaptureMouse" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore di <see cref="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsMouseDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione del puntatore del mouse corrisponde ai risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> Se il puntatore del mouse è posizionato lo stesso elemento restituito come risultato un hit test. in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Windows.UIElement.IsMouseOver%2A>, questa proprietà è solo `true` se il puntatore del mouse è posizionato sull'elemento di valore letterale, come nel caso di un hit test. Se il puntatore del mouse è invece su un elemento figlio, in particolare su elementi che fanno parte di un elemento modello più profondo e composizione, questa proprietà sarà `false`. A meno che non si conosce come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui si non si creano controlli, utilizzare <xref:System.Windows.UIElement.IsMouseOver%2A> invece.  
  
 Se il mouse viene acquisito da questo elemento e questa proprietà è `true` al momento dell'acquisizione, questa proprietà continuerà a restituire `true` fino a quando il mouse capture viene perso e il puntatore viene spostato nei limiti.  
  
<a name="dependencyPropertyInfo_IsMouseDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsMouseDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsMouseDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsMouseOver">
      <MemberSignature Language="C#" Value="public bool IsMouseOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMouseOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsMouseOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMouseOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMouseOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsMouseOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il puntatore del mouse si trova sull'elemento (inclusi gli elementi figlio della struttura ad albero visuale).  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se il puntatore del mouse è sull'elemento o sui rispettivi elementi figlio, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In genere, i controlli sono compositi in modo che tutti i vari elementi all'interno del controllo (la struttura ad albero visuale) verranno segnalato lo stato del mouse per il controllo contenitore. Ad esempio, un <xref:System.Windows.Controls.ListBox> controllo stile segnalerà <xref:System.Windows.UIElement.IsMouseOver%2A> come `true` se il mouse si trova in un punto qualsiasi della geometria, inclusi gli eventuali <xref:System.Windows.Controls.ListBoxItem>.  
  
 Anche se non esiste un evento "IsMouseOverChanged" analogo, molti eventi simili eseguire. Ad esempio, è possibile gestire <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, e <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  
  
 Se l'elemento acquisisce il mouse, questa proprietà rimane `true` fino a quando il mouse capture viene perso e il puntatore del mouse esce dai limiti dell'elemento.  
  
 Alcuni controlli deliberatamente acquisire il mouse su determinate azioni che non sembrano interessare direttamente il mouse. Questo può causare <xref:System.Windows.UIElement.IsMouseOver%2A> da `true` anche se il mouse non è apparentemente spostato.  
  
<a name="dependencyPropertyInfo_IsMouseOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsMouseOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente fa riferimento a questa proprietà come tipo di proprietà di un <xref:System.Windows.Trigger>, ma fa parte di un \<Style. Triggers > blocco. Se il mouse viene spostato sul controllo, il testo del controllo diventa blu e il cursore si trasforma in mano.  
  
 [!code-xaml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMouseOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsMouseOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsMouseOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsMouseOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsMouseOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsMouseOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsMouseOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptured">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptured { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusCaptured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se lo stilo viene rilevato da questo elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l’elemento ha l'acquisizione dello stilo, in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptured"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCapturedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCapturedChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCapturedChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsStylusCaptured" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCapturedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCapturedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCapturedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCapturedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCapturedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsStylusCaptured" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithin">
      <MemberSignature Language="C#" Value="public bool IsStylusCaptureWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusCaptureWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusCaptureWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusCaptureWithin As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusCaptureWithin { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che determina se lo stilo viene acquisito da questo elemento o da un elemento entro i limiti dell'elemento e della relativa struttura ad albero visuale. Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se questo elemento o un elemento contenuto riceve l'input dello stilo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusCaptureWithin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.CaptureStylus" />
        <altmember cref="P:System.Windows.UIElement.IsStylusCaptured" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusCaptureWithinChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusCaptureWithinChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tratta di un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusCaptureWithinProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusCaptureWithinProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusCaptureWithinProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusCaptureWithinProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusCaptureWithinProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsStylusCaptureWithin" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOver">
      <MemberSignature Language="C#" Value="public bool IsStylusDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusDirectlyOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusDirectlyOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusDirectlyOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se la posizione dello stilo corrisponde a risultati dell'hit test, che prendono in considerazione la composizione dell'elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se il puntatore dello stilo è sullo stesso risultato (un elemento) di un hit test; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Windows.UIElement.IsStylusOver%2A>, questa proprietà è solo `true` se lo stilo è posizionato sull'elemento. Se lo stilo è invece su un elemento figlio o su elementi che fanno parte di più approfondita composizione di un elemento (la struttura ad albero visuale), questa proprietà sarà `false`.  
  
 A meno che non si conosce come un controllo composito (ad esempio, si utilizza questa proprietà in un modello di controllo personalizzato per un controllo che definisce), questa proprietà potrebbe restituire risultati imprevisti. Per la maggior parte degli scenari in cui si non si creano controlli, utilizzare <xref:System.Windows.UIElement.IsStylusOver%2A> invece.  
  
 Se questo elemento acquisisce lo stilo e questa proprietà è `true` al momento dell'acquisizione, questa proprietà rimane `true` fino a quando acquisisce lo stilo viene perso e lo stilo viene spostato nei limiti.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusDirectlyOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseDirectlyOver" />
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsStylusDirectlyOverChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsStylusDirectlyOverChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusDirectlyOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusDirectlyOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusDirectlyOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusDirectlyOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusDirectlyOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsStylusDirectlyOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOver">
      <MemberSignature Language="C#" Value="public bool IsStylusOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStylusOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsStylusOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStylusOver As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStylusOver { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IInputElement.IsStylusOver</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che indica se il cursore dello stilo è posizionato sull'elemento (inclusi gli elementi visivi figlio).  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se il cursore dello stilo è sull'elemento o sugli elementi figlio; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento acquisisce lo stilo, questa proprietà continuerà a restituire `true` fino a quando acquisisce lo stilo viene persa e il puntatore non rientra nei limiti.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="dependencyPropertyInfo_IsStylusOver"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsStylusOverProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStylusOverProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsStylusOverProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsStylusOverProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsStylusOverProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsStylusOverProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsStylusOverProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsStylusOver" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che indica se questo elemento è visibile nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l'elemento è visibile; in caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Determinazione del <xref:System.Windows.UIElement.IsVisible%2A> valore tiene conto di tutti i fattori del layout. Al contrario, <xref:System.Windows.UIElement.Visibility%2A>, che è una proprietà impostabile, indica solo l'intenzione di impostare a livello di programmazione un elemento visibile o invisibile.  
  
 Gli elementi in cui <xref:System.Windows.UIElement.IsVisible%2A> è `false` non fanno parte di eventi di input (o comandi), non non influenzano di misurazione o disposizione del layout, non sono attivabili, non sono presenti in una sequenza di tabulazione e non verranno segnalati hit test. Al contrario, gli elementi in cui <xref:System.Windows.UIElement.IsEnabled%2A> è `false` parteciperanno eventi e i comandi e hit testing, ma non sono attivabili.  
  
<a name="dependencyPropertyInfo_IsVisible"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.IsVisibleProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.IsVisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsVisibleChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ IsVisibleChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il valore della proprietà <see cref="P:System.Windows.UIElement.IsVisible" /> di questo elemento viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento non viene generato se l'elemento non viene eseguito dal sistema di layout, per motivi diversi da quello della <xref:System.Windows.UIElement.IsVisible%2A> proprietà. Ad esempio, l'elemento non dispone di un oggetto visivo associato.  
  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisibleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsVisibleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsVisibleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.IsVisibleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsVisibleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsVisibleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.IsVisible" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene premuto un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.UIElement.KeyDown> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.KeyDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.KeyDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.KeyDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewKeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="KeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.KeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ KeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.KeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene rilasciato un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento per questa classe associato in modo che <xref:System.Windows.UIElement.KeyUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.KeyUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_KeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.KeyUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewKeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent KeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent KeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.KeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ KeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.KeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler LayoutUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LayoutUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LayoutUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutUpdated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LayoutUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il layout dei vari elementi visivi associati alla classe <see cref="T:System.Windows.Threading.Dispatcher" /> corrente viene modificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un aggiornamento del layout può verificarsi in seguito a una modifica di proprietà, il ridimensionamento di una finestra o una richiesta esplicita dell'utente.  
  
 Questo membro è un [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] evento, non un evento indirizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ LostFocus;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato attivo logico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo logico differisce dallo stato attivo della tastiera se lo stato attivo viene forzato intenzionalmente utilizzando una chiamata al metodo ma lo stato attivo della tastiera precedente esiste in un ambito diverso. In questo scenario e rimane impostato lo stato attivo della tastiera in cui è l'elemento in cui un <xref:System.Windows.UIElement.Focus%2A> viene chiamato comunque Ottiene lo stato attivo logico.  
  
 Interpretazione più precisa di questo evento è che viene generato quando il valore della <xref:System.Windows.UIElement.IsFocused%2A> proprietà di un elemento nella route viene cambiata da `true` a `false`.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha acquisito lo stato attivo.  
  
<a name="routedEventInfo_LostFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.LostFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.RoutedEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnLostFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="LostFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.LostFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ LostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.LostKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.LostKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.LostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler LostMouseCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler LostMouseCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostMouseCapture As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ LostMouseCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento perde lo stato mouse capture.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce il mouse, riceve l'input del mouse, anche se il puntatore non rientra nei limiti. In genere, il puntatore del mouse viene acquisito solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde l'acquisizione potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde l'acquisizione.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.LostMouseCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.LostMouseCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostMouseCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostMouseCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostMouseCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostMouseCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostMouseCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostMouseCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.LostMouseCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCapture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler LostStylusCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler LostStylusCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostStylusCapture As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ LostStylusCapture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.LostStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'elemento non rileva più lo stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando un elemento acquisisce lo stilo, riceve l'input con stilo anche se il puntatore non rientra nei limiti. Lo stilo viene acquisito in genere solo durante le operazioni di trascinamento e rilascio.  
  
 Poiché questo evento viene utilizzato il routing di bubbling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.LostStylusCapture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.LostStylusCapture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_LostStylusCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostStylusCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostStylusCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostStylusCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostStylusCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostStylusCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.LostStylusCapture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCapture">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; LostTouchCapture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; LostTouchCapture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.LostTouchCapture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostTouchCapture As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ LostTouchCapture;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando questo elemento perde l’acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_LostTouchCapture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LostTouchCaptureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LostTouchCaptureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.LostTouchCaptureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LostTouchCaptureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LostTouchCaptureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.LostTouchCapture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt; ManipulationBoundaryFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationBoundaryFeedback As EventHandler(Of ManipulationBoundaryFeedbackEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^&gt; ^ ManipulationBoundaryFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando la manipolazione incontra un limite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_ManipulationBoundaryFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationBoundaryFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationBoundaryFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationBoundaryFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationCompletedEventArgs&gt; ManipulationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationCompleted As EventHandler(Of ManipulationCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationCompletedEventArgs ^&gt; ^ ManipulationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando una manipolazione e un'inerzia sull'oggetto <see cref="T:System.Windows.UIElement" /> sono completate.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile utilizzare questo evento per ottenere informazioni sulla modifica quando viene completato.  Ad esempio, è possibile utilizzare il <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=nameWithType> modificare la proprietà per determinare la quantità totale di posizione della modifica.  
  
 Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationCompleted"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationCompletedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationCompletedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationCompletedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationCompletedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationCompletedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDelta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationDeltaEventArgs&gt; ManipulationDelta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationDelta" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationDelta As EventHandler(Of ManipulationDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationDeltaEventArgs ^&gt; ^ ManipulationDelta;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il dispositivo di input cambia posizione durante una manipolazione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.ManipulationDelta> evento si verifica più volte quando l'utente trascina dita sullo schermo durante una manipolazione e nuovamente quando si verifica inerzia.  È possibile utilizzare il <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> proprietà per controllare se l'evento si verifica durante l'inerzia.  
  
 L'elemento in con <xref:System.Windows.UIElement.ManipulationDelta> non viene modificata in alcun modo quando si verifica l'evento si verifica.  È necessario fornire la logica per l'elemento che deve essere modificato.  Il <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> e <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà, che sono di tipo <xref:System.Windows.Input.ManipulationDelta>, contengono dati variare la posizione di manipolazioni e interpretato come lo spostamento, ridimensionamento o la rotazione di un oggetto.  Tali informazioni si applicano all'elemento che deve essere modificato.  
  
 Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationDelta"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato un gestore eventi per il <xref:System.Windows.UIElement.ManipulationDelta> evento. Nell'esempio viene utilizzato il <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> proprietà da spostare, ridimensionare e ruotare un <xref:System.Windows.Shapes.Rectangle>.  Nell'esempio viene inoltre verificato se il <xref:System.Windows.UIElement.ManipulationDelta> evento si è verificato durante l'inerzia e se il rettangolo tocca il bordo di una finestra.  Se questi casi, l'applicazione si interrompe la modifica per evitare che il rettangolo di lasciare l'area visibile dell'applicazione. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationDeltaEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationDeltaEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationDeltaEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationDeltaEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationDeltaEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationInertiaStartingEventArgs&gt; ManipulationInertiaStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationInertiaStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationInertiaStarting As EventHandler(Of ManipulationInertiaStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationInertiaStartingEventArgs ^&gt; ^ ManipulationInertiaStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il dispositivo di input perde contatto con l'oggetto <see cref="T:System.Windows.UIElement" /> durante una manipolazione e inizia un'inerzia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.ManipulationInertiaStarting> evento si verifica quando l'utente solleva tutte le dita dallo schermo durante una manipolazione. Ad esempio, se un utente "genera" un <xref:System.Windows.UIElement> su una superficie, l'utente verrà cancellati i <xref:System.Windows.UIElement> per avviare l'azione, spostare il dito sullo schermo per una breve distanza e infine rilasciare il <xref:System.Windows.UIElement>. Quando l'utente rilascia l'elemento, inerzia inizia e <xref:System.Windows.UIElement.ManipulationInertiaStarting> si verifica l'evento.  Il <xref:System.Windows.UIElement> continua a ricevere <xref:System.Windows.UIElement.ManipulationDelta> eventi per indicare che è in corso l'inerzia sull'elemento.  
  
 È possibile utilizzare questo evento per specificare il comportamento dell'inerzia.  Ad esempio, è possibile impostare la velocità iniziale viene utilizzata quando ha inizio l'inerzia.  È anche possibile specificare la quantità dell'inerzia impostando la decelerazione desiderata o impostando la posizione desiderata.  È possibile impostare questi valori per ogni tipo di modifica (conversione, espansione o rotazione) in modo indipendente.  Per ulteriori informazioni, vedere <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  
  
 Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationInertiaStarting"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|  
  
   
  
## Examples  
 Nell'esempio seguente il <xref:System.Windows.UIElement.ManipulationInertiaStarting> gestore dell'evento e imposta la decelerazione desiderata per la traduzione, l'espansione e rotazione utilizzate durante l'inerzia. Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]
 [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationInertiaStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationInertiaStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationInertiaStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationInertiaStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationInertiaStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartedEventArgs&gt; ManipulationStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarted As EventHandler(Of ManipulationStartedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartedEventArgs ^&gt; ^ ManipulationStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dispositivo di input inizia una manipolazione sull'oggetto <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.ManipulationStarted> evento si verifica dopo il <xref:System.Windows.UIElement.ManipulationStarting> evento.  È possibile eseguire le operazioni seguenti con il <xref:System.Windows.Input.ManipulationStartedEventArgs>:  
  
-   Ottenere l'elemento che la posizione della modifica è relativa a utilizzando il <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> proprietà.  
  
-   Ottenere l'origine della modifica utilizzando il <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> proprietà.  
  
-   Annullare la modifica chiamando il <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> metodo.  
  
 Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarted"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationStartedEventArgs>.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStarting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.ManipulationStartingEventArgs&gt; ManipulationStarting" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.ManipulationStarting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ManipulationStarting As EventHandler(Of ManipulationStartingEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::ManipulationStartingEventArgs ^&gt; ^ ManipulationStarting;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.ManipulationStartingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il processore di manipolazione viene creato per la prima volta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.ManipulationStarting> evento si verifica in un elemento con la <xref:System.Windows.UIElement.IsManipulationEnabled%2A> proprietà impostata su `true` quando l'utente inserisce un dito su di esso. Per impostazione predefinita, la posizione della modifica relativa all'elemento che dispone di report successivi eventi di modifica <xref:System.Windows.UIElement.IsManipulationEnabled%2A> impostato su `true`.  È possibile specificare che la posizione deve essere relativa a un altro elemento impostando la <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> proprietà. Ad esempio, è possibile apportare la modifica rispetto al padre dell'elemento.  
  
 È inoltre possibile eseguire le operazioni seguenti in un gestore eventi per <xref:System.Windows.UIElement.ManipulationStarting>:  
  
-   Specificare se l'utente ha bisogno di più di un dito per eseguire le modifiche, impostare il <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=nameWithType> proprietà.  
  
-   Specificare quali tipi di modifica vengono attivati impostando il <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=nameWithType> proprietà per un <xref:System.Windows.Input.ManipulationModes> enumerazione.  
  
-   Specificare il centro di una rotazione di un singolo dito impostando il <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=nameWithType> proprietà.  
  
-   Annullare la modifica chiamando il <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=nameWithType> metodo.  
  
 Per ulteriori informazioni sulle modifiche, vedere il [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  Per un esempio di un'applicazione che risponde alle modifiche, vedere [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
<a name="routedEventInfo_ManipulationStarting"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.ManipulationStartingEventArgs>.|  
  
   
  
## Examples  
 Nell'esempio seguente viene illustrato il gestore eventi per il <xref:System.Windows.UIElement.ManipulationStarting> evento e imposta il <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> all'elemento padre che riceve gli eventi di modifica in modo che le coordinate della modifica relativa all'elemento padre.  Questo esempio fa parte di un esempio più esaustivo in [procedura dettagliata: creazione del primo Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]
 [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationStartingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ManipulationStartingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.ManipulationStartingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ManipulationStartingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ManipulationStartingEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Measure">
      <MemberSignature Language="C#" Value="public void Measure (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Measure(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.Measure(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Measure (availableSize As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Measure(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">Lo spazio disponibile che un elemento padre può allocare a un elemento figlio. Un elemento figlio può richiedere più spazio rispetto a quello disponibile. È possibile adattare la dimensione specificata se lo scorrimento è possibile nel modello di contenuto per l'elemento corrente.</param>
        <summary>Aggiorna <see cref="P:System.Windows.UIElement.DesiredSize" /> di <see cref="T:System.Windows.UIElement" />. Gli elementi padre chiamano questo metodo dall'implementazione di <see cref="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" /> per produrre un aggiornamento ricorsivo del layout. Questo metodo costituisce il primo passaggio (passaggio di misurazione) di un aggiornamento del layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Calcolo del posizionamento del layout in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] è costituita da un <xref:System.Windows.UIElement.Measure%2A> chiamare e un <xref:System.Windows.UIElement.Arrange%2A> chiamare. Durante il <xref:System.Windows.UIElement.Measure%2A> chiamata, un elemento determina i requisiti di dimensione utilizzando un `availableSize` input. Durante il <xref:System.Windows.UIElement.Arrange%2A> chiamata, la dimensione dell'elemento è stato completato.  
  
 `availableSize` può essere qualsiasi numero compreso tra zero e infinito. Gli elementi coinvolti nel layout devono restituire il valore minimo <xref:System.Windows.Size> richiedono per un determinato `availableSize`.  
  
 Quando un layout viene creata un'istanza, riceve sempre un <xref:System.Windows.UIElement.Measure%2A> prima di chiamare <xref:System.Windows.UIElement.Arrange%2A>. Dopo il primo passaggio di layout, tuttavia, è possibile ricevere un <xref:System.Windows.UIElement.Arrange%2A> chiamata senza un <xref:System.Windows.UIElement.Measure%2A>; ciò può verificarsi quando una proprietà che ha effetto solo su <xref:System.Windows.UIElement.Arrange%2A> viene modificata (ad esempio, l'allineamento) o quando l'elemento padre riceve un <xref:System.Windows.UIElement.Arrange%2A> senza un <xref:System.Windows.UIElement.Measure%2A>. Oggetto <xref:System.Windows.UIElement.Measure%2A> invaliderà automaticamente un <xref:System.Windows.UIElement.Arrange%2A> chiamare.  
  
 Aggiornamenti di layout avvengono in modo asincrono, in modo che il thread principale non è in attesa per ogni modifica del layout possibili. Esecuzione di query su un elemento mediante la verifica dei valori delle proprietà di code-behind non immediatamente rifletta le modifiche alle proprietà che interagiscono con le caratteristiche di ridimensionamento o layout (il <xref:System.Windows.FrameworkElement.Width%2A> proprietà, ad esempio).  
  
> [!NOTE]
>  È possibile forzare gli aggiornamenti del layout utilizzando il <xref:System.Windows.UIElement.UpdateLayout%2A> metodo. Tuttavia, chiamare questo metodo non è in genere necessaria e può influire negativamente sulle prestazioni.  
  
 Il sistema di layout mantiene due code separate di layout non validi, uno per <xref:System.Windows.UIElement.Measure%2A> e uno per <xref:System.Windows.UIElement.Arrange%2A>. La coda del layout verrà ordinata in base all'ordine degli elementi di struttura ad albero visuale dell'elemento che esegue il layout; gli elementi più in alto nell'albero sono all'inizio della coda in modo da evitare layout ridondanti causati da modifiche ripetute negli elementi padre. Le voci duplicate vengono automaticamente rimossi dalla coda e gli elementi vengono automaticamente rimossi dalla coda se sono già convalidato layout.  
  
 Quando l'aggiornamento del layout, il <xref:System.Windows.UIElement.Measure%2A> viene svuotata prima, seguita dal <xref:System.Windows.UIElement.Arrange%2A> coda. Un elemento nel <xref:System.Windows.UIElement.Arrange%2A> coda non verrà mai disposto se è presente un elemento di <xref:System.Windows.UIElement.Measure%2A> coda.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize">La dimensione disponibile che l'elemento padre può allocare per l'elemento figlio.</param>
        <summary>Quando sottoposto a override in una classe derivata, fornisce la logica di misurazione per ridimensionare correttamente questo elemento, prendendo in considerazione la dimensione del contenuto di tutti gli elementi figlio.</summary>
        <returns>Dimensioni desiderate dell'elemento nel layout.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È più comune per derivare un elemento da <xref:System.Windows.FrameworkElement> anziché <xref:System.Windows.UIElement>. Se si deriva da <xref:System.Windows.FrameworkElement>, si noti che un override di <xref:System.Windows.UIElement.MeasureCore%2A> su <xref:System.Windows.FrameworkElement> esegue il sealing di <xref:System.Windows.UIElement.MeasureCore%2A> metodo. Pertanto, eseguire l'override solo <xref:System.Windows.UIElement.MeasureCore%2A> come mezzo per modificare le caratteristiche di misura del layout, se deriva da <xref:System.Windows.UIElement> tramite un'ereditarietà che non include <xref:System.Windows.FrameworkElement>. Potrebbe essere il caso se si sta tentando di compilare la propria implementazione sul [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] a livello di base. In caso contrario, se si deriva da <xref:System.Windows.FrameworkElement>, quindi il modello di implementazione per il comportamento di misura è di <xref:System.Windows.FrameworkElement> implementazione di.<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  
  
 Un elemento padre con gli elementi figlio è necessario chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio, in caso contrario gli elementi figlio non ridimensionati o disposti e non verranno più visualizzati dal layout.  
  
   
  
## Examples  
 Un tipico sottoporre a override <xref:System.Windows.UIElement.MeasureCore%2A> segue questo modello approssimativo (non c'è una raccolta predefinita denominata `VisualChildren`; `VisualChildren` è un segnaposto che rappresenta un insieme figlio dell'elemento gestito).  
  
 [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]
 [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  
  
-   È necessario chiamare <xref:System.Windows.UIElement.Measure%2A> su ogni elemento figlio.  
  
-   In genere, l'implementazione deve memorizzare nella cache di informazioni di misurazione tra il <xref:System.Windows.UIElement.MeasureCore%2A> e <xref:System.Windows.UIElement.ArrangeCore%2A> chiamate nello stesso elemento.  
  
-   La chiamata di implementazioni di base di <xref:System.Windows.UIElement.MeasureCore%2A> non è obbligatorio, ma potrebbe essere appropriata se l'implementazione di base fornisce una funzionalità di layout desiderato.  
  
-   Le chiamate a <xref:System.Windows.UIElement.Measure%2A> figlio elementi devono passare lo stesso `availableSize` come padre o un sottoinsieme dell'area, a seconda del tipo di layout di supportato dall'elemento padre. Ad esempio, sarebbe valido per rimuovere l'area per un bordo specifici dell'elemento o la spaziatura interna, una barra di scorrimento o un controllo personalizzato.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Le implementazioni devono essere in grado di elaborare un valore fornito per <paramref name="availableSize" /> che è infinito. Un valore infinito non indica vincoli di richiesti e in modo efficace rinvia scelta misura all'elemento padre, tramite chiamate Measure ricorsive.  
  
 Le implementazioni possono considerare il valore fornito per <paramref name="availableSize" /> come vincolo soft. L'elemento figlio può specificare una dimensione maggiore, anche se altri aspetti del codice dell'applicazione in grado di determinare le dimensioni effettive corrente dell'elemento padre. La richiesta di grandi dimensioni è una convenzione che indica che l'elemento figlio è una query se l'elemento padre può supportare lo scorrimento del contenuto all'interno di un'area di visualizzazione del contenuto.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.UIElement.MouseDown> evento viene generato spesso insieme al <xref:System.Windows.UIElement.MouseLeftButtonDown> o <xref:System.Windows.UIElement.MouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.UIElement.MouseLeftButtonDown> e <xref:System.Windows.UIElement.MouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.UIElement.MouseLeftButtonDown> o <xref:System.Windows.UIElement.MouseRightButtonDown>.  
  
> [!IMPORTANT]
>  Alcuni controlli potrebbero avere classe inerente la gestione per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse verso il basso l'evento è più probabile di gestione di classi in un controllo. La gestione delle classi spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, gli altri gestori istanza sono associati a tale elemento non vengono normalmente generati. Eventuali altri gestori di classe o istanza associati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente anche in genere non vengono generati.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.UIElement.MouseDown> gli eventi per pulsante sinistro del mouse su una classe derivata che dispone di classe di gestione utilizzando una delle soluzioni seguenti:  
  
-   Gestori per il <xref:System.Windows.UIElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che, poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.UIElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori di ascolto degli eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewMouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseEnter> è un oggetto che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.UIElement.MouseEnter> rilevi quando il puntatore del mouse entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.UIElement.IsMouseOver%2A> modificato dal valore della proprietà `false` a `true` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Oggetto <xref:System.Windows.Controls.Button> (o qualsiasi <xref:System.Windows.Controls.Primitives.ButtonBase> classe derivata) prevede la gestione nativa per un <xref:System.Windows.UIElement.KeyDown> eventi quando il pulsante ha lo stato attivo e il tasto premuto la barra spaziatrice. La gestione nativa genera il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento con il pulsante come origine e inoltre acquisisce il mouse, anche se non sembra spostare il puntatore del mouse. In seguito all'input del mouse, una <xref:System.Windows.UIElement.MouseEnter> evento viene generato anche con il pulsante come origine. In generale, se un elemento acquisisce il mouse, quindi <xref:System.Windows.UIElement.MouseEnter> viene generato, così come <xref:System.Windows.UIElement.GotMouseCapture> e possibilmente altri eventi di controllo specifici.  
  
<a name="routedEventInfo_MouseEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il puntatore del mouse viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.MouseLeave> è un oggetto che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.UIElement.MouseLeave> rilevi quando il puntatore del mouse esce da un elemento, questo evento più letteralmente che i <xref:System.Windows.UIElement.IsMouseOver%2A> modificato dal valore della proprietà `true` a `false` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route bubbling in una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.MouseLeftButtonDown> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati. Di eventi generato dal gestore di classi, ad esempio <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
> [!IMPORTANT]
>  Alcune classi di controllo potrebbero essere una classe inerente la gestione per gli eventi del pulsante del mouse. Il pulsante sinistro del mouse verso il basso l'evento è più probabile di gestione di classi in un controllo. La gestione delle classi spesso contrassegna sottostante <xref:System.Windows.Input.Mouse> classe di evento come gestito. Dopo l'evento è contrassegnato come gestito, gli altri gestori istanza sono associati a tale elemento non vengono normalmente generati. Eventuali altri gestori di classe o istanza associati agli elementi nella direzione bubbling verso la radice dell'albero dell'interfaccia utente anche in genere non vengono generati.  
  
 È possibile risolvere il problema descritto nella nota Importante precedente e continuare a ricevere <xref:System.Windows.UIElement.MouseLeftButtonDown> gli eventi per pulsante sinistro del mouse su una classe derivata che dispone di classe di gestione utilizzando una delle soluzioni seguenti:  
  
-   Gestori per il <xref:System.Windows.UIElement.PreviewMouseDown> evento, che non è contrassegnato come gestito dai controlli. Si noti che, poiché si tratta di un evento di anteprima, la route inizia alla radice e giunge fino al controllo.  
  
-   Registrare un gestore del controllo a livello di routine chiamando <xref:System.Windows.UIElement.AddHandler%2A> e scegliendo l'opzione di firma che consente ai gestori di ascolto degli eventi, anche se sono già contrassegnati come gestito nei dati dell'evento indirizzato.  
  
<a name="routedEventInfo_MouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route bubbling in una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.MouseLeftButtonUp> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ MouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del puntatore del mouse quando è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewMouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="MouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route bubbling in una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.MouseRightButtonDown> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati. Di eventi generato dal gestore di classi, ad esempio <xref:System.Windows.Controls.Control.MouseDoubleClick>.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
 Il pulsante destro del mouse eventi hanno spesso la gestione nativa in scenari di applicazioni. Ad esempio, un pulsante destro del mouse verso il basso potrebbe visualizzare un menu di scelta rapida. Vedere [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  
  
<a name="routedEventInfo_MouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ MouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route bubbling in una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.MouseRightButtonUp> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_MouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="MouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ MouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.UIElement.MouseUp> evento viene generato spesso insieme al <xref:System.Windows.UIElement.MouseLeftButtonUp> o <xref:System.Windows.UIElement.MouseRightButtonUp>, che corrisponde a una versione di uno dei due pulsanti standard. <xref:System.Windows.UIElement.MouseLeftButtonUp> e <xref:System.Windows.UIElement.MouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.UIElement.MouseLeftButtonUp> o <xref:System.Windows.UIElement.MouseRightButtonUp>.  
  
<a name="routedEventInfo_MouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewMouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ MouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.MouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve il <xref:System.Windows.UIElement.MouseWheel> evento da un elemento con lo stato attivo o acquisito, il puntatore del mouse potrebbe effettivamente trovarsi su un altro elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.MouseWheel> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.MouseWheel> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_MouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.MouseWheelEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewMouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent MouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent MouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.MouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ MouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.MouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Richiesta di attraversamento, contenente una proprietà che indica una modalità per passare avanti nell'ordine di tabulazione esistente o una direzione per spostarsi visivamente.</param>
        <summary>Tenta di spostare lo stato attivo da questo elemento a un altro elemento. La direzione di spostamento dello stato attivo è specificata da linee guida che vengono interpretate nell'organizzazione del padre visuale per questo elemento.</summary>
        <returns>
          <see langword="true" /> se viene eseguito l'attraversamento richiesto; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Accertarsi di controllare il valore restituito di questo metodo. Valore restituito di `false` potrebbe essere restituito se viene eseguito lo scorrimento in un punto di tabulazione definito dalla composizione di un controllo e non la richiesta per eseguire il wrapping attraversamento.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="OnAccessKey">
      <MemberSignature Language="C#" Value="protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAccessKey(class System.Windows.Input.AccessKeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAccessKey (e As AccessKeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAccessKey(System::Windows::Input::AccessKeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.AccessKeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati relativi all'evento dei tasti di scelta. I dati degli eventi segnalano il tasto richiamato e indicano se l'oggetto <see cref="T:System.Windows.Input.AccessKeyManager" /> che controlla l'invio di questi eventi ha anche inviato la chiamata di questo tasto di scelta agli altri elementi.</param>
        <summary>Fornisce la gestione delle classi quando viene richiamato un tasto di scelta significativo per questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Non è un evento AccessKey effettivo nella <xref:System.Windows.UIElement> classe o un'altra, che è possibile generare o gestori per. L'evento viene invece originato tramite una classe di gestione dedicata, <xref:System.Windows.Input.AccessKeyManager>, che elabora tutti gli input per la ricerca per le chiavi di accesso che si applicano all'intero modello di input.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione predefinita di questo metodo in <see cref="T:System.Windows.UIElement" /> imposta lo stato attivo a questo elemento (chiamando <see cref="M:System.Windows.UIElement.Focus" />). Le implementazioni devono trasmettere questo comportamento se sono attivabili, perché è un comportamento previsto per gli scenari di accessibilità. Si noti che l'implementazione di base non esegue alcuna operazione con i dati dell'evento passato e non genera altri eventi; Imposta solo lo stato attivo.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnChildDesiredSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChildDesiredSizeChanged(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChildDesiredSizeChanged (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChildDesiredSizeChanged(System::Windows::UIElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child">Elemento figlio da ridimensionare.</param>
        <summary>Supporta il comportamento del layout quando viene ridimensionato un elemento figlio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non viene in genere chiamato dal codice dell'applicazione. Viene esposto in modo tale elemento derivato classi possano eseguire ulteriori controlli sul proprio stato layout probabilmente non valida. Classi potrebbe inoltre tentare di ottimizzazioni per ridurre al minimo il tempo di elaborazione per un passaggio di layout in base alle modifiche delle dimensioni per gli elementi figlio. Un esempio di elemento classe derivata che implementa <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> è il <xref:System.Windows.Controls.Grid> controllo.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> metodo è l'implementazione predefinita della chiamata al metodo <see cref="M:System.Windows.UIElement.InvalidateMeasure" /> su se stesso. Un'implementazione tipica sarebbe: eseguire un proprio elemento supporta e quindi chiamare il metodo base <see cref="M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)" /> da almeno uno dei rami di codice (quella con stato "dirty" per la misurazione della logica di memorizzazione nella cache).  
  
 Questo metodo viene chiamato solo nell'elaborazione del layout se proviene dall'elemento figlio che ha avuto origine le modifiche di dimensione. In caso contrario, se l'elemento padre avvia il <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> passare, in base alle regole di sistema di layout, l'elemento padre viene ricalcolato il layout. Il sistema di layout elabora layout nell'ordine figlio al padre, in modo da non restituire alcun di ridimensionamento dell'elemento padre dalle chiamate di layout di elemento figlio è necessaria.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce implementazioni di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifiche della classe per l'infrastruttura di [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)].</summary>
        <returns>Implementazione di <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> specifica del tipo.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>L'implementazione di questo metodo è in genere per chiamare il costruttore di uno specifico <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> , implementazione e restituirlo come valore restituito.  
  
 Tutti <see cref="T:System.Windows.UIElement" /> classi derivate devono implementare questo metodo per fornire i propri specifiche <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> le implementazioni del [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] dell'infrastruttura. Per informazioni dettagliate sull'implementazione di questo modello, vedere <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.DragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.Drop" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.GiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.UIElement.GotFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.UIElement.GotFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, avere un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene richiamata internamente per generare l'evento quando il <xref:System.Windows.UIElement.IsFocused%2A> valore proprietà viene modificato. Il <xref:System.Windows.UIElement.OnGotFocus%2A> implementazione è diverso da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per tale evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non intenzionali e non è necessario per non generare gli eventi di attivazione, verificare che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.UIElement.GotFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento sia attivabile, è possibile impedire l'elemento con stato attivabile impostando <see cref="P:System.Windows.UIElement.Focusable" /> a <see langword="false" />.</para>
        </block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
        <altmember cref="E:System.Windows.UIElement.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.GotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnGotMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.GotMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.GotStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.GotStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnGotTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.GotTouchCapture" /> che si verifica quando un tocco viene acquisito nell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnGotTouchCapture%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.GotTouchCapture> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnGotTouchCapture%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsKeyboardFocusedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsKeyboardFocused%2A> le modifiche alle proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsKeyboardFocusWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsKeyboardFocusWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsKeyboardFocusWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsKeyboardFocusWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato immediatamente prima della generazione dell'evento <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged" /> da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> le modifiche alle proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsMouseCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsMouseCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsMouseCapturedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.UIElement.IsMouseCapturedChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo virtuale viene generato quando il valore di <see cref="P:System.Windows.UIElement.IsMouseCaptureWithin" /> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <see cref="E:System.Windows.UIElement.IsMouseCaptureWithinChanged" /> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnIsMouseDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsMouseDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsMouseDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsMouseDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsMouseDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che il <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCapturedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCapturedChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCapturedChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCapturedChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsStylusCapturedChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsStylusCaptured%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsStylusCapturedChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusCaptureWithinChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusCaptureWithinChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusCaptureWithinChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusCaptureWithinChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsStylusCaptureWithinChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto, non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsStylusDirectlyOverChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsStylusDirectlyOverChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsStylusDirectlyOverChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsStylusDirectlyOverChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato quando un evento <see cref="E:System.Windows.UIElement.IsStylusDirectlyOverChanged" /> non gestito viene generato in questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo virtuale viene generato quando il valore di <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> cambia il valore di proprietà di dipendenza. Il metodo virtuale viene generato per primo e possa modificare i dati dell'evento in base alle esigenze. Il <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> con la stessa istanza di dati di evento viene generato l'evento. Si noti che l'evento non è un evento indirizzato. È pertanto non è possibile contrassegnarlo come gestito nel gestore di classe.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti sono gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, è possibile gestire la sequenza di tasti prima che sia esposta come sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.UIElement.OnKeyDown%2A> non viene richiamato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.KeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le sequenze di tasti sono gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano su sequenze di tasti, ad esempio, le associazioni di input e di comando, è possibile gestire la sequenza di tasti prima che sia esposta come sequenza di tasti generale. Se queste funzionalità del sistema contrassegnano l'evento come gestito, quindi di input <xref:System.Windows.UIElement.OnKeyUp%2A> non viene richiamato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.RoutedEventArgs" /> in cui sono contenuti i dati dell'evento. Questi dati dell'evento devono contenere l'identificatore dell'evento <see cref="E:System.Windows.UIElement.LostFocus" />.</param>
        <summary>Genera l'evento indirizzato <see cref="E:System.Windows.UIElement.LostFocus" /> usando i dati degli eventi forniti.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo, anche se virtuale, avere un'implementazione predefinita che genera l'evento.  
  
 Questa operazione, scegliere * implementazione del metodo deve generare l'evento e l'implementazione del metodo viene richiamata internamente per generare l'evento quando il <xref:System.Windows.UIElement.IsFocused%2A> valore proprietà viene modificato. Questa implementazione è diverso da un altro [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] su * implementazioni, che forniscono solo un modo pratico per aggiungere la gestione per tale evento della classe.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A meno che non intenzionali e non è necessario per non generare gli eventi di attivazione, verificare che l'implementazione chiama l'implementazione di base. In caso contrario, il <see cref="E:System.Windows.UIElement.LostFocus" /> evento non viene generato durante le operazioni utente tipico che in genere impostano lo stato attivo su questo elemento. Se non si intende l'elemento sia attivabile, è possibile impedire l'elemento con stato attivabile impostando <see cref="P:System.Windows.UIElement.Focusable" /> a <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.LostKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnLostMouseCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostMouseCapture(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostMouseCapture (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostMouseCapture(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.LostMouseCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostMouseCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostStylusCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostStylusCapture(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostStylusCapture (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostStylusCapture(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.LostStylusCapture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.LostStylusCapture" />
      </Docs>
    </Member>
    <Member MemberName="OnLostTouchCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostTouchCapture(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostTouchCapture (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostTouchCapture(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.UIElement.LostTouchCapture" /> che si verifica quando l'elemento perde l'acquisizione di un tocco.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnLostTouchCapture%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.LostTouchCapture> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnLostTouchCapture%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati per l'evento.</param>
        <summary>Viene chiamato quando si verifica l'evento <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> evento. Verificare di chiamare il <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> metodo della classe di base in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationCompleted(class System.Windows.Input.ManipulationCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationCompleted (e As ManipulationCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationCompleted(System::Windows::Input::ManipulationCompletedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati per l'evento.</param>
        <summary>Viene chiamato quando si verifica l'evento <see cref="E:System.Windows.UIElement.ManipulationCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationCompleted%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationCompleted> evento. Verificare di chiamare il <xref:System.Windows.UIElement.OnManipulationCompleted%2A> metodo della classe di base in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationDelta">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationDelta(class System.Windows.Input.ManipulationDeltaEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationDelta (e As ManipulationDeltaEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationDelta(System::Windows::Input::ManipulationDeltaEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationDeltaEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati per l'evento.</param>
        <summary>Viene chiamato quando si verifica l'evento <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationDelta%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationDelta> evento. Verificare di chiamare il <xref:System.Windows.UIElement.OnManipulationDelta%2A> metodo della classe di base in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationInertiaStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationInertiaStarting(class System.Windows.Input.ManipulationInertiaStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationInertiaStarting (e As ManipulationInertiaStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationInertiaStarting(System::Windows::Input::ManipulationInertiaStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationInertiaStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati per l'evento.</param>
        <summary>Viene chiamato quando si verifica l'evento <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationInertiaStarting> evento. Verificare di chiamare il <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> metodo della classe di base in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted(class System.Windows.Input.ManipulationStartedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarted (e As ManipulationStartedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarted(System::Windows::Input::ManipulationStartedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dati per l'evento.</param>
        <summary>Viene chiamato quando si verifica l'evento <see cref="E:System.Windows.UIElement.ManipulationStarted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationStarted%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationStarted> evento. Verificare di chiamare il <xref:System.Windows.UIElement.OnManipulationStarted%2A> metodo della classe di base in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarting">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarting(class System.Windows.Input.ManipulationStartingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnManipulationStarting (e As ManipulationStartingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnManipulationStarting(System::Windows::Input::ManipulationStartingEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationStartingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.ManipulationStartingEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.ManipulationStarting" /> che si verifica quando il processore di manipolazione viene creato per la prima volta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnManipulationStarting%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.ManipulationStarting> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnManipulationStarting%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Questi dati dell'evento contengono informazioni dettagliate sul pulsante del mouse che è stato premuto e sullo stato gestito.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.UIElement.OnMouseDown%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.UIElement.MouseLeftButtonDown> e <xref:System.Windows.UIElement.MouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.UIElement.OnMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseEnter" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Mouse.MouseLeave" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato, con una strategia di routing diretto. Contrassegnare l'evento come gestito è ancora utile per impedire che i gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Richiamato quando viene generato un evento indirizzato <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> non gestito per questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.MouseLeftButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.MouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.MouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.MouseLeftButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.MouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.MouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.MouseRightButtonDown> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.MouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> nella classe derivata senza chiamare la base; tuttavia, questo override disabilita i servizi dal menu di scelta del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.MouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.MouseRightButtonUp> eventi apparentemente percorre una route di bubbling, in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> è l'evento sottostante indirizzato per bubbling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.MouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.MouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che è stato rilasciato il pulsante del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.Input.Mouse.MouseUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.UIElement.OnMouseUp%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.UIElement.MouseLeftButtonUp> e <xref:System.Windows.UIElement.MouseRightButtonUp>. Uno di questi eventi può essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.UIElement.OnMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.MouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragEnter(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragEnter (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragEnter(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragEnter" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragLeave(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragLeave (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragLeave(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragLeave" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDragOver(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDragOver (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDragOver(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDragOver" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewDrop(class System.Windows.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewDrop (e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewDrop(System::Windows::DragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.DragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewDrop" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGiveFeedback(class System.Windows.GiveFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGiveFeedback (e As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGiveFeedback(System::Windows::GiveFeedbackEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.GiveFeedbackEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewGiveFeedback" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewGotKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewGotKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewGotKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyUp(class System.Windows.Input.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyUp(System::Windows::Input::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewLostKeyboardFocus(class System.Windows.Input.KeyboardFocusChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewLostKeyboardFocus (e As KeyboardFocusChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewLostKeyboardFocus(System::Windows::Input::KeyboardFocusChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.KeyboardFocusChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.KeyboardFocusChangedEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che sono stati premuti uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato associato <see cref="E:System.Windows.Input.Mouse.PreviewMouseDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Uno di questi eventi possono essere generato su elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, si intende che la gestione delle classi di tutti i possibili pulsanti del mouse verso il basso le azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Button> ed eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> nella classe derivata senza chiamare l'implementazione di base; tuttavia, questo override disabilita il <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseLeftButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseLeftButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseLeftButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante sinistro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseMove(class System.Windows.Input.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseMove(System::Windows::Input::MouseEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonDown(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonDown (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonDown(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato premuto il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.MouseRightButtonDown>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  
  
 In alternativa, è possibile eseguire l'override di questo metodo per modificare una gestione degli eventi per uno stato specifico del mouse. Se si sceglie di chiamare l'implementazione di base dipende dallo scenario. La mancata chiamata base disabilita la gestione di input predefinito per tale evento del mouse in classi predecessore che prevedono anche per richiamare <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. Ad esempio, è possibile derivare da <xref:System.Windows.Controls.Control> ed eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> nella classe derivata senza chiamare la base; tuttavia, questo override disabilita i servizi dal menu di scelta del controllo, che fanno parte di <xref:System.Windows.Controls.Control> il comportamento predefinito.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseRightButtonUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseRightButtonUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseRightButtonUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. I dati dell'evento indicano che è stato rilasciato il pulsante destro del mouse.</param>
        <summary>Viene richiamato ogni volta che un evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" /> non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento sembra una route di tunneling, ma in realtà viene trasferito in modo indiretto. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> è l'evento sottostante è tunneling e ogni <xref:System.Windows.UIElement> lungo l'evento route utilizza la gestione delle identica per generare l'evento indirizzato diretto <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Sebbene sia possibile contrassegnare il <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> evento come gestito per scopi di questo elemento, lo stato gestito non viene trasmesso agli altri elementi lungo la route dell'evento. Tuttavia, potrebbe voler contrassegnare l'evento come gestito per evitare i gestori di istanze generici (quelli che non specificano `handledEventsToo`) da cui viene richiamato.  
  
 L'implementazione predefinita per la gestione degli eventi di mouse generale <xref:System.Windows.UIElement> resta in attesa di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> e lo converte in un evento locale appropriato. Se si desidera eseguire l'override di questa logica, è necessario creare una classe derivata. Nel costruttore statico della classe derivata, registrare un gestore di classe alternativa per <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType>. Non è possibile modificare il comportamento di gestione del mouse <xref:System.Windows.UIElement> eseguendo l'override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseUp(class System.Windows.Input.MouseButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseUp (e As MouseButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseUp(System::Windows::Input::MouseButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> che contiene i dati dell'evento. Nei dati degli eventi è indicato che stato rilasciato uno o più pulsanti del mouse.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Le azioni di pulsante del mouse vengono anche gestite da un gestore di input dedicato. Altre funzionalità di programmazione che si basano sulle azioni di pulsante del mouse, ad esempio input e associazioni di comandi, può richiamare i gestori per l'azione prima che sia esposta come un'azione di pulsante del mouse generale. Se questi input contrassegna le funzionalità di sistema di <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento come gestito, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> non viene richiamato.  
  
 Se si utilizza questo gestore della classe per contrassegnare l'evento come gestito, si potrebbero avere un impatto gli eventi seguenti: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Uno di questi eventi può essere generato nell'elemento ricevente quando <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> viene ricevuto.  
  
 Se si contrassegna questo evento come gestito nella gestione delle classi, secondari vengono comunque generati; Tuttavia, passano lo stato gestito nei dati dell'evento. Se l'evento viene gestito nella gestione delle classi, i gestori di istanze per gli eventi secondari non vengono richiamati solo se si utilizza in modo esplicito <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` `true` per associare gestori. Gestori di classi anche non vengono richiamati a meno che non sono stati registrati con il <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma con `handledEventsToo` `true`. Gestendo <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, si intende che la gestione delle classi di tutti i pulsanti del mouse possibili azioni. Questo comportamento potrebbe risultare indesiderato; Di conseguenza, prestare attenzione quando si utilizza questo metodo virtuale per contrassegnare gli eventi come gestito.  
  
 Tutti gli eventi specifici pulsante diretti dispone anche di una macchina * metodo. è consigliabile se si esegue l'override di questi gestori di classi specifiche pulsante potrebbero essere più appropriato.  
  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewMouseWheel(class System.Windows.Input.MouseWheelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewMouseWheel (e As MouseWheelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewMouseWheel(System::Windows::Input::MouseWheelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.MouseWheelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.MouseWheelEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.PreviewMouseWheel" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewMouseWheel" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.PreviewQueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.PreviewStylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.PreviewTextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito. Un altro scenario in modo specifico per eventi di anteprima viene contrassegnata come gestiti in modo che non vengono richiamati i gestori di classi di bubbling corrispondente.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)" />
        <altmember cref="E:System.Windows.UIElement.PreviewTextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.UIElement.PreviewTouchDown" /> che si verifica quando un tocco preme l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.PreviewTouchDown> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.PreviewTouchMove> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreviewTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.PreviewTouchUp> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.QueryContinueDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (e As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::QueryContinueDragEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.QueryContinueDragEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.DragDrop.QueryContinueDrag" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryCursor">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryCursor(class System.Windows.Input.QueryCursorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryCursor (e As QueryCursorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryCursor(System::Windows::Input::QueryCursorEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.QueryCursorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.QueryCursorEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Mouse.QueryCursor" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRender(class System.Windows.Media.DrawingContext drawingContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRender(System::Windows::Media::DrawingContext ^ drawingContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawingContext" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="drawingContext">Istruzioni di disegno per un elemento specifico. Questo contesto viene fornito per il sistema di layout.</param>
        <summary>In caso di override in una classe derivata, partecipa alle operazioni di rendering gestite dal sistema di layout. Le istruzioni di rendering per questo elemento non vengono utilizzate direttamente quando questo metodo viene richiamato, ma vengono conservate per essere utilizzate successivamente in modo asincrono dal layout e dal disegno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita <xref:System.Windows.UIElement> classe.  
  
   
  
## Examples  
 Esempio di codice seguente viene illustrata una possibile implementazione di una classe derivata di pannello.  
  
 [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]
 [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Il <see cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" /> metodo può essere sottoposto a override per aggiungere ulteriori elementi grafici (non definiti precedentemente in un albero logico) a un elemento sottoposto a rendering, ad esempio effetti o gli strumenti decorativi. Oggetto <see cref="T:System.Windows.Media.DrawingContext" /> oggetto viene passato come argomento, che fornisce metodi per disegnare forme, testo, immagini o video.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRenderSizeChanged (info As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="info">I parametri compressi (<see cref="T:System.Windows.SizeChangedInfo" />) che includono le dimensioni precedenti e nuove nonché quelle effettivamente modificate.</param>
        <summary>In caso di override in una classe derivata, partecipa alle operazioni di rendering gestite dal sistema di layout. Questo metodo viene richiamato dopo l'aggiornamento del layout e prima del rendering, se la proprietà <see cref="P:System.Windows.UIElement.RenderSize" /> dell'elemento è stata modificata in seguito all'aggiornamento del layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Un tipico elemento a livello di framework WPF utilizza l'implementazione di override da <xref:System.Windows.FrameworkElement>. Il <xref:System.Windows.FrameworkElement> implementazione invalida il <xref:System.Windows.FrameworkElement.Width%2A> e <xref:System.Windows.FrameworkElement.Height%2A> proprietà e gestisce le nozioni di base di per rieseguire il layout. Si esegue l'override <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> nel <xref:System.Windows.UIElement> livello implica che l'implementazione dell'elemento non utilizza intenzionalmente l'implementazione a livello di framework WPF e pertanto l'elemento deve gestire la logica di layout più direttamente, in genere scrivendo un sistema di layout di sostituzione.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonDown(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonDown (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonDown(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusButtonUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusButtonUp(class System.Windows.Input.StylusButtonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusButtonUp (e As StylusButtonEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusButtonUp(System::Windows::Input::StylusButtonEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusButtonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusButtonEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusButtonUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusDown">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusDown(class System.Windows.Input.StylusDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusDown (e As StylusDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusDown(System::Windows::Input::StylusDownEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusDownEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusDownEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusDown" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusDown" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusEnter(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusEnter (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusEnter(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusEnter" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è comunque utile per la prevenzione dei gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInAirMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInAirMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInAirMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInAirMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInAirMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInAirMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusInRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusInRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusInRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusInRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusInRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusInRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusLeave(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusLeave (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusLeave(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Richiamato quando viene generato un evento associato <see cref="E:System.Windows.Input.Stylus.StylusLeave" /> non gestito da questo elemento. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione. È possibile chiamare base prima o dopo la gestione speciale, a seconda dei requisiti.  
  
 Lo scopo di questo metodo è simile a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Contrassegnare l'evento come gestito è comunque utile per la prevenzione dei gestori di istanze comuni (quelli che non si specifica `handledEventsToo`) da cui viene richiamato.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusMove">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusMove(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusMove (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusMove(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusMove" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusMove" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusOutOfRange">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusOutOfRange(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusOutOfRange (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusOutOfRange(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusOutOfRange" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusOutOfRange" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusSystemGesture">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusSystemGesture(class System.Windows.Input.StylusSystemGestureEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusSystemGesture (e As StylusSystemGestureEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusSystemGesture(System::Windows::Input::StylusSystemGestureEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusSystemGestureEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusSystemGesture" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusSystemGesture" />
      </Docs>
    </Member>
    <Member MemberName="OnStylusUp">
      <MemberSignature Language="C#" Value="protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStylusUp(class System.Windows.Input.StylusEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStylusUp (e As StylusEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStylusUp(System::Windows::Input::StylusEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.StylusEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.StylusEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.Stylus.StylusUp" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusUp" />
      </Docs>
    </Member>
    <Member MemberName="OnTextInput">
      <MemberSignature Language="C#" Value="protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextInput(class System.Windows.Input.TextCompositionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextInput (e As TextCompositionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextInput(System::Windows::Input::TextCompositionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TextCompositionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Viene richiamato ogni qualvolta un evento <see cref="E:System.Windows.Input.TextCompositionManager.TextInput" /> connesso non gestito raggiunge un elemento nella propria route derivato da questa classe. Implementare questo metodo per aggiungere la gestione delle classi per questo evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo metodo non è Nessuna implementazione predefinita. Poiché una classe intermedia nell'ereditarietà potrebbe implementare questo metodo, si consiglia di chiamare l'implementazione di base nell'implementazione.  
  
 Lo scopo di questo metodo è simile al [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] schema di eventi in * metodi: questo metodo fornisce i mezzi per gestire l'evento corrispondente dalle classi derivate stabilendo un gestore di classe anziché un gestore di istanze. In questo caso l'evento corrispondente è un evento indirizzato. Il modello di implementazione dei metodi On * è diverso per gli eventi indirizzati, perché può essere generato un evento indirizzato da un elemento figlio, che non è necessariamente l'elemento che richiama i gestori. Pertanto, l'implementazione deve esaminare le proprietà dell'origine dei dati dell'evento. Non tentare di rigenerare l'evento nella maggior parte dei casi.  
  
 Eseguendo l'override di questo metodo o tramite la registrazione di gestori di classi con <xref:System.Windows.EventManager.RegisterClassHandler%2A>, le classi derivate di <xref:System.Windows.UIElement> può chiamare metodi del gestore di classe privata quando viene ricevuto l'evento lungo la route dell'evento. Uno scenario in cui la gestione di classi è appropriata consiste nel modificare i dati dell'evento e contrassegnare l'evento indirizzato come gestito.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.TextInput" />
      </Docs>
    </Member>
    <Member MemberName="OnTouchDown">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchDown(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchDown (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchDown(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.UIElement.TouchDown" /> che si verifica quando un tocco preme all'interno dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnTouchDown%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnTouchDown%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.TouchDown> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnTouchDown%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchEnter(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchEnter (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchEnter(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchEnter" /> che si verifica quando un tocco si sposta dall'esterno all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnTouchEnter%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnTouchEnter%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.TouchEnter> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnTouchEnter%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchLeave(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchLeave (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchLeave(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato<see cref="E:System.Windows.UIElement.TouchLeave" /> che si verifica quando un tocco si sposta dall'interno all'esterno dei limiti di <see cref="T:System.Windows.UIElement" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnTouchLeave%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnTouchLeave%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.TouchLeave> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnTouchLeave%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchMove">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchMove(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchMove (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchMove(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchMove" /> che viene generato quando un tocco si sposta all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnTouchMove%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnTouchMove%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.TouchMove> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnTouchMove%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTouchUp">
      <MemberSignature Language="C#" Value="protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTouchUp(class System.Windows.Input.TouchEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTouchUp (e As TouchEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTouchUp(System::Windows::Input::TouchEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.TouchEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.Input.TouchEventArgs" /> che contiene i dati dell'evento.</param>
        <summary>Fornisce la gestione della classe per l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchUp" /> che viene generato quando un tocco viene rilasciato all'interno di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.OnTouchUp%2A> non dispone di Nessuna implementazione predefinita. Eseguire l'override <xref:System.Windows.UIElement.OnTouchUp%2A> in una classe derivata per gestire il <xref:System.Windows.UIElement.TouchUp> evento. Assicurarsi di chiamare la classe base <xref:System.Windows.UIElement.OnTouchUp%2A> metodo in modo che le classi base ricevano l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent">Elemento padre precedente. Può essere fornito come <see langword="null" /> se per l'oggetto <see cref="T:System.Windows.DependencyObject" /> non è stato precedentemente definito un elemento padre.</param>
        <summary>Viene richiamato quando l'elemento padre di questo oggetto <see cref="T:System.Windows.UIElement" /> segnala una modifica all'elemento padre visivo sottostante.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Se si esegue l'override di questo metodo, chiamare sempre l'implementazione di base. L'implementazione di base predefinita esegue una manutenzione interna dello stato delle proprietà ereditate in ordine inverso. Impossibile chiamare l'implementazione di base invaliderà questo stato.  
  
 Questo metodo esegue l'override del metodo <see cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />. <see cref="T:System.Windows.FrameworkElement" /> e <see cref="T:System.Windows.Window" /> anche eseguire l'override di <see cref="T:System.Windows.UIElement" /> implementazione di <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />, e <see cref="T:System.Windows.Window" /> esegue il sealing.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public double Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Opacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Opacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Opacity As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Opacity { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il fattore di opacità applicato all'intero oggetto <see cref="T:System.Windows.UIElement" /> quando sottoposto a rendering nell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  Si tratta di una proprietà di dipendenza.</summary>
        <value>Fattore di opacità. L'opacità predefinita è 1,0. I valori previsti sono compresi tra 0,0 e 1,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il valore 1.0 predefinito è il valore predefinito fornito da metadati iniziali di questa proprietà di dipendenza nel <xref:System.Windows.UIElement> classe. Altre classi derivate possono potenzialmente modificare il valore predefinito sostituendo i metadati dal relativo costruttore della classe.  
  
 Il valore di <xref:System.Windows.UIElement.Opacity%2A> verrà applicato al layout effettivo a meno che l'elemento è visibile (<xref:System.Windows.UIElement.IsVisible%2A> è `true`).  
  
 <xref:System.Windows.UIElement.Opacity%2A> è stato applicato dagli elementi padre in verso il basso nella struttura ad albero di elementi figlio, ma gli effetti di opacità annidate non sono indicate le impostazioni nel valore della proprietà dei singoli elementi figlio visibili. Ad esempio, se un elenco ha un'opacità al 50% (0,5) e uno degli elementi nell'elenco ha l'opacità impostato su 20% (0,2), l'opacità visibile netta per tale elemento nell'elenco verrà visualizzato come se fosse il 10% (0,1), ma il valore della proprietà dell'elemento di elenco <xref:System.Windows.UIElement.Opacity%2A> proprietà sarebbe comunque  0,2 quando esegue una query.  
  
 Anche se l'opacità dichiarata o valutata è 0, un elemento ancora fa parte di comandi e gli eventi di input e potenzialmente attivabile. Questo aspetto può essere utile, che ad esempio è possibile utilizzare un oggetto di opacità pari a zero (ad esempio una forma) per mascherare gli oggetti sottostanti con gli elementi trasparenti. L'oggetto di opacità pari a zero è quindi possibile gestire tutti gli eventi di input l'elaborazione di un'area sottostante. Tuttavia, il `Background` o `Fill` dell'oggetto o della forma deve essere impostata su un valore, anche se è <xref:System.Windows.Media.Brushes.Transparent%2A>, in caso contrario di hit testing non è abilitato e non vengono ricevuti eventi.  
  
<a name="dependencyPropertyInfo_Opacity"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.OpacityProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.OpacityMask" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMask">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush OpacityMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush OpacityMask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.OpacityMask" />
      <MemberSignature Language="VB.NET" Value="Public Property OpacityMask As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ OpacityMask { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la maschera di opacità come implementazione <see cref="T:System.Windows.Media.Brush" /> che viene applicata a qualsiasi canale alfa che maschera il contenuto di questo elemento per cui è stato eseguito il rendering.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Pennello da usare per il mascheramento dell'opacità.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questa proprietà solo utilizza i valori del canale alfa per il parametro fornito <xref:System.Windows.Media.Brush>. Gli altri canali del <xref:System.Windows.Media.Brush>del rendering del contenuto (rosso, verde e blu) vengono ignorati.  
  
 La più comune <xref:System.Windows.Media.Brush> per questo scopo è un <xref:System.Windows.Media.ImageBrush>, che può essere usato per un'ampia gamma di foto tecniche, ad esempio una vignette di mascheramento. Ma qualsiasi definito <xref:System.Windows.Media.Brush> (ad esempio <xref:System.Windows.Media.LinearGradientBrush>) può essere utilizzato.  
  
 In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], valore di questa proprietà è possibile utilizzare una sintassi inline che è specifica per ogni implementazione del <xref:System.Windows.Media.Brush> classe astratta. Per ulteriori informazioni, vedere [disegni con colori a tinta unita e sfumature Panoramica](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  
  
<a name="dependencyPropertyInfo_OpacityMask"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.OpacityMaskProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Il markup seguente viene mostrato un <xref:System.Windows.Media.ImageBrush> maschera di opacità applicato a un altro <xref:System.Windows.Controls.Image>.  
  
 [!code-xaml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]   
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.Opacity" />
      </Docs>
    </Member>
    <Member MemberName="OpacityMaskProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityMaskProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityMaskProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityMaskProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityMaskProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityMaskProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.OpacityMask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpacityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OpacityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OpacityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.OpacityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OpacityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OpacityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Opacity" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistId">
      <MemberSignature Language="C#" Value="public int PersistId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PersistId" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.PersistId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PersistId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PersistId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un valore che identifica in modo univoco questo elemento.</summary>
        <value>Identificatore univoco per questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.PersistId%2A> identifica in modo univoco ogni elemento. Un elemento mantiene lo stesso <xref:System.Windows.UIElement.PersistId%2A> ogni volta che lo stesso [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] viene caricato (incluse le rappresentazioni binarie). Questo identificatore viene usato per i requisiti di caricamento, analisi e serializzazione interni. Non deve essere utilizzato dal codice dell'applicazione.  
  
 Questa proprietà non ha alcuna relazione con il <xref:System.Object.GetHashCode%2A> risultato di un'istanza specificata.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction">Direzione dell'attraversamento dello stato attivo richiesto.</param>
        <summary>Se sottoposto a override in una classe derivata, restituisce l'elemento che riceverebbe lo stato attivo per una direzione di attraversamento dello stato attivo specificata, senza effettivamente spostare lo stato attivo su tale elemento.</summary>
        <returns>Elemento che avrebbe ricevuto lo stato attivo se <see cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> fosse stato effettivamente richiamato.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'implementazione predefinita di questo metodo in questa classe è incompleta e restituisce sempre `null`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui questo elemento rappresenta la destinazione del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewDragEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewDragEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.DragEnter>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewDragEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragLeave As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per cui l'elemento rappresenta l'origine del trascinamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewDragLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewDragLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.DragLeave>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewDragLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDragOver;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di trascinamento sottostante per il quale l'elemento rappresenta la destinazione del rilascio potenziale.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewDragOver> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewDragOver> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDragOver"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.DragOver>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDragOverEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDragOverEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDragOverEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDragOverEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDragOverEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewDragOver" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.DragEventHandler PreviewDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DragEventHandler PreviewDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DragEventHandler ^ PreviewDrop;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando il sistema di input segnala un evento di rilascio sottostante con questo elemento come destinazione del rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewDrop> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewDrop> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewDrop"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewDropEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.DragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.Drop>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewDrop%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewDropEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewDropEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewDropEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewDropEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewDropEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewDropEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewDrop" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::GiveFeedbackEventHandler ^ PreviewGiveFeedback;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando inizia un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewGiveFeedback> evento consente all'origine di un evento di trascinamento di modificare l'aspetto del puntatore del mouse, per fornire l'utente indicazioni visive durante un'operazione di trascinamento e rilascio.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewGiveFeedback> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewGiveFeedback> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGiveFeedback"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.GiveFeedbackEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.GiveFeedback>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGiveFeedbackEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGiveFeedbackEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGiveFeedbackEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGiveFeedbackEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGiveFeedbackEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewGiveFeedback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewGotKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewGotKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewGotKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento che ha lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che ha lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewGotKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.GotKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewGotKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewGotKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewGotKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene premuto un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.UIElement.KeyDown> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewKeyDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewKeyDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.KeyDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewKeyDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyEventHandler PreviewKeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyEventHandler PreviewKeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewKeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyEventHandler ^ PreviewKeyUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewKeyUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene rilasciato un tasto mentre lo stato attivo si trova sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gestione della chiave interagisce con altre funzionalità di piattaforma, ad esempio l'esecuzione di comandi e il testo di composizione. Il <xref:System.Windows.UIElement.KeyUp> tratta di un evento di input di testo di basso livello che potrebbe non comportarsi come previsto su determinati controlli. Questo avviene perché alcuni controlli sono di composizione del controllo o la gestione della classe che fornisce una versione di livello superiore di testo, la gestione di input e gli eventi correlati. Per informazioni dettagliate, consultare la documentazione per i singoli controlli.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewKeyUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewKeyUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewKeyUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.KeyUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewKeyUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewKeyUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewKeyUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewKeyUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewKeyUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewLostKeyboardFocus As KeyboardFocusChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::KeyboardFocusChangedEventHandler ^ PreviewLostKeyboardFocus;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewLostKeyboardFocus</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardFocusChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stato attivo della tastiera non si trova più sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Poiché questo evento viene utilizzato il routing di tunneling, l'elemento perde lo stato attivo potrebbe essere un elemento figlio anziché l'elemento a cui il gestore dell'evento è effettivamente associato. Controllare il <xref:System.Windows.RoutedEventArgs.Source%2A> nei dati dell'evento per determinare l'elemento effettivo che perde lo stato attivo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewLostKeyboardFocus"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.LostKeyboardFocus>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewGotKeyboardFocus" />
      </Docs>
    </Member>
    <Member MemberName="PreviewLostKeyboardFocusEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewLostKeyboardFocusEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewLostKeyboardFocusEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewLostKeyboardFocus" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewMouseDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewMouseDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.UIElement.PreviewMouseDown> evento viene generato spesso insieme al <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> e <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> o <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  
  
<a name="routedEventInfo_PreviewMouseDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.MouseDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati. Di eventi generato dal gestore di classi, ad esempio <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseLeftButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseLeftButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseLeftButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseLeftButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante sinistro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseLeftButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseLeftButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseLeftButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseLeftButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseEventHandler PreviewMouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseEventHandler PreviewMouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseEventHandler ^ PreviewMouseMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito allo spostamento del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica quando il puntatore del mouse entra innanzitutto nei limiti dell'elemento, e anche quando il puntatore del mouse viene spostato, rimanendo comunque entro i limiti dell'elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewMouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewMouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.MouseMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonDown As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica alla pressione del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati. Di eventi generato dal gestore di classi, ad esempio <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseRightButtonUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseRightButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseRightButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio del pulsante destro del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sebbene sembri seguire una route di tunneling tramite una struttura ad albero, in realtà è un evento indirizzato diretto generato e rigenerato nella struttura ad albero da ogni <xref:System.Windows.UIElement>.  
  
 Questo evento è uno dei vari eventi correlati che indicano le specifiche del pulsante del mouse di un oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento, che è un evento che viene elaborato da ogni elemento lungo la route di un evento.  
  
 I dati dell'evento dell'evento espongono i dati dell'evento dell'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento. Se tale evento è contrassegnato come gestito lungo la route dell'evento, vengono comunque generati eventi specifici del pulsante del mouse. Tuttavia, è necessario aggiungere i gestori di eventi specifici del pulsante del mouse in modo esplicito chiamando <xref:System.Windows.UIElement.AddHandler%2A>, con l'opzione per gestire eventi che sono già contrassegnati come gestito, in modo da essere listener dell'evento. Se si contrassegna <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> gestito, si contrassegna essenzialmente <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> gestito per tutte le successive listener lungo la route e in tutti gli eventi correlati.  
  
 Concettualmente, pensare a questo evento (e altri eventi del pulsante del mouse su <xref:System.Windows.UIElement>) da un mouse "servizio" (con la definizione del servizio fornita dalla <xref:System.Windows.Input.Mouse> classe). L'evento aggiunge la comodità di non dover controllare gli stati del pulsante del mouse (da sinistra a destra, giù) degli eventi del mouse originale nei dati dell'evento. Per scenari più avanzati, ad esempio la verifica degli stati dei pulsanti non standard, potrebbe essere necessario utilizzare il [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] sul <xref:System.Windows.Input.Mouse> classe anziché quelli su <xref:System.Windows.UIElement>.  
  
<a name="routedEventInfo_PreviewMouseRightButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.MouseRightButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseRightButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseRightButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseRightButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseButtonEventHandler PreviewMouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseUp As MouseButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::MouseButtonEventHandler ^ PreviewMouseUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica al rilascio di qualsiasi pulsante del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewMouseUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewMouseUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il <xref:System.Windows.UIElement.PreviewMouseUp> evento viene generato spesso insieme al <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, che corrispondono alla pressione di uno dei due pulsanti standard. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> e <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> sono anche gli eventi indirizzati, ma sono eventi indirizzati diretti e viene generato l'evento appropriato pulsante specifico quando il <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=nameWithType> evento raggiunge questo elemento lungo la route dell'evento. Vedere la sezione Osservazioni per <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> o <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  
  
<a name="routedEventInfo_PreviewMouseUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.MouseUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewMouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewMouseWheel As MouseWheelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::MouseWheelEventHandler ^ PreviewMouseWheel;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewMouseWheel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseWheelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla rotazione della rotellina del mouse quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo stato attivo o il mouse capture hanno la precedenza su dove è il puntatore del mouse; Pertanto, se si riceve questo evento da un elemento con lo stato attivo o acquisito, il puntatore del mouse potrebbe effettivamente trovarsi su un altro elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewMouseMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewMouseMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewMouseWheel"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.MouseWheelEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.MouseWheel>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewMouseWheelEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewMouseWheelEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewMouseWheelEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewMouseWheelEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewMouseWheelEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewMouseWheel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewQueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewQueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ PreviewQueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewQueryContinueDrag> evento consente all'origine del trascinamento di dichiarare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewQueryContinueDrag> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewQueryContinueDrag> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewQueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.QueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewQueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewQueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewQueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewQueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewQueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewQueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusButtonDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusButtonDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Touch Input Support in Windows Vista](http://msdn.microsoft.com/library/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) e [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.StylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ PreviewStylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusButtonUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusButtonUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler PreviewStylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ PreviewStylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo tocca il digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusInAirMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusInAirMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusInRange> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusInRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato mentre si trova sull'elemento. Lo stilo deve essere spostato mentre è rilevato dal digitalizzatore per generare questo evento. In caso contrario, viene generato l'evento <see cref="E:System.Windows.UIElement.PreviewStylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusOutOfRange> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusOutOfRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ PreviewStylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusSystemGesture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusSystemGesture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler PreviewStylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler PreviewStylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewStylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewStylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ PreviewStylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewStylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewStylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewStylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_PreviewStylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.StylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewStylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewStylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewStylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewStylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewStylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewStylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler PreviewTextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ PreviewTextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.PreviewTextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.PreviewTextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale di <xref:System.Windows.UIElement.PreviewTextInput>; ma riconoscimento grafia e altri dispositivi di input possono essere generato anche <xref:System.Windows.UIElement.PreviewTextInput>.  
  
 A causa di combinazioni di tasti, predefiniti o tramite input method editor, ovvero gli eventi principali più possono generare un solo evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.PreviewTextInput> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.PreviewTextInput> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_PreviewTextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.TextInput>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> non si verificano fino a quando un dito tocca lo schermo e sposta. Premere un dito sullo schermo e azienda senza spostarlo provoca la pressione prolungata di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Affinché il <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> degli eventi non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_PreviewTouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.TouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.TouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; PreviewTouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.PreviewTouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewTouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ PreviewTouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_PreviewTouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  
|Strategia di routing|Tunneling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di bubbling corrispondente è <xref:System.Windows.UIElement.TouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewTouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent PreviewTouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.PreviewTouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PreviewTouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ PreviewTouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.PreviewTouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla modifica dello stato della tastiera o del pulsante del mouse durante un'operazione di trascinamento e rilascio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.UIElement.QueryContinueDrag> evento consente all'origine del trascinamento di determinare se l'operazione di trascinamento e rilascio deve essere annullata.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.QueryContinueDrag> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.QueryContinueDrag> evento sono associati all'oggetto sottostante <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_QueryContinueDrag"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.QueryContinueDragEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDragEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryContinueDragEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryContinueDragEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryContinueDragEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryContinueDragEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.QueryContinueDrag" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCursor">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.QueryCursorEventHandler QueryCursor;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.QueryCursorEventHandler QueryCursor" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.QueryCursor" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryCursor As QueryCursorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::QueryCursorEventHandler ^ QueryCursor;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.QueryCursorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene richiesta la visualizzazione del cursore. L'evento viene generato per un elemento ogni volta che il puntatore del mouse viene spostato, perché ciò indica che l'oggetto cursore deve essere modificato in base alla nuova posizione.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.QueryCursor> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.QueryCursor> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Il cursore a cui si fa riferimento con questo nome di evento non è necessariamente il cursore di testo (talvolta noto come punto di inserimento). Al contrario, il cursore in questo contesto è l'oggetto che dichiara la visualizzazione su schermo grafica correlata a vari possibili dispositivi di input o i concetti di programmazione di Windows. Tale oggetto è rappresentato dal <xref:System.Windows.Input.Cursor> classe in WPF. Il sistema di input di WPF consente di modificare questo cursore quando rappresenta la posizione sullo schermo del puntatore del mouse. È possibile utilizzare i valori predefiniti di <xref:System.Windows.Input.Cursors> enumerazione, oppure è possibile dichiarare un cursore personalizzato come file di immagine.  
  
 In attesa per il <xref:System.Windows.UIElement.QueryCursor> evento non è una tecnica efficace per la gestione del cursore. Al contrario, ogni elemento deve definire il comportamento del cursore con <xref:System.Windows.FrameworkContentElement.Cursor%2A> e <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. È consigliabile basarsi solo su <xref:System.Windows.UIElement.QueryCursor> se non si utilizzano gli elementi di base a livello di framework WPF o in circostanze straordinarie in cui la definizione del comportamento del cursore in base a ciascun elemento non soddisfa le proprie esigenze. Per ulteriori informazioni sull'implementazione del funzionamento del cursore in risposta a <xref:System.Windows.UIElement.QueryCursor>, vedere <xref:System.Windows.Input.QueryCursorEventHandler>.  
  
<a name="routedEventInfo_QueryCursor"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.QueryCursorEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.QueryCursorEventHandler>|  
  
-   Non vi è alcun evento di tunneling corrispondente definito.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnQueryCursor%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="QueryCursorEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent QueryCursorEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent QueryCursorEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.QueryCursorEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly QueryCursorEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ QueryCursorEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.QueryCursor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="public void RaiseEvent (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseEvent(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseEvent (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RaiseEvent(System::Windows::RoutedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RaiseEvent(System.Windows.RoutedEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Oggetto <see cref="T:System.Windows.RoutedEventArgs" /> che contiene i dati degli eventi e identifica inoltre l'evento da generare.</param>
        <summary>Genera un evento indirizzato specifico. L'oggetto <see cref="T:System.Windows.RoutedEvent" /> da generare è identificato all'interno dell'istanza di <see cref="T:System.Windows.RoutedEventArgs" /> fornita (come proprietà <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> di tali dati degli eventi).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il `e` parametro è tipizzato come tipo di base comune per tutti i dati dell'evento indirizzato; tuttavia, i dati dell'evento devono essere specificati come il tipo di dati evento più specifico che è disponibile per l'evento viene generato perché <xref:System.Windows.RoutedEventArgs> contengono le classi derivate di proprietà dei dati specifiche effettive previste per l'evento specifico quando viene generato.  
  
 <xref:System.Windows.RoutedEventArgs> non è solo le proprietà di stato per l'evento. vengono inoltre identificati evento indirizzato da generare. Questo modello di generazione di eventi e i dati dell'evento indirizzato sono entrambi diversi da [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] gli eventi e classi di dati, che in genere contengono solo le proprietà correlate all'evento.  
  
   
  
## Examples  
 Nell'esempio seguente crea i dati dell'evento, aggiunge l'identificatore dell'evento ai dati e quindi utilizza l'istanza di dati di evento per generare un evento indirizzato personalizzato.  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllTouchCaptures">
      <MemberSignature Language="C#" Value="public void ReleaseAllTouchCaptures ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseAllTouchCaptures() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseAllTouchCaptures" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseAllTouchCaptures ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseAllTouchCaptures();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia tutti i dispositivi a tocco acquisiti dall'elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseMouseCapture">
      <MemberSignature Language="C#" Value="public void ReleaseMouseCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseMouseCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseMouseCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseMouseCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseMouseCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseMouseCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input del mouse, se questo elemento l'ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.UIElement.IsMouseCaptured%2A> prima di chiamare questo metodo.  
  
   
  
## Examples  
 Nell'esempio seguente è equivalente all'esempio fornito per <xref:System.Windows.UIElement.CaptureMouse%2A>: gestisce il pulsante del mouse fino a rilasciare l'input del mouse e riabilitare lo spostamento del mouse.  
  
 [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]
 [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsMouseCaptured" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseStylusCapture">
      <MemberSignature Language="C#" Value="public void ReleaseStylusCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseStylusCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseStylusCapture" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseStylusCapture ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseStylusCapture();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.ReleaseStylusCapture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rilascia l'input dello stilo, se questo elemento lo ha acquisito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se questo elemento non conteneva l'acquisizione, questo metodo non ha alcun effetto. È consigliabile verificare il valore di <xref:System.Windows.UIElement.IsStylusCaptured%2A> prima di chiamare questo metodo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseTouchCapture">
      <MemberSignature Language="C#" Value="public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ReleaseTouchCapture(class System.Windows.Input.TouchDevice touchDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReleaseTouchCapture(System::Windows::Input::TouchDevice ^ touchDevice);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchDevice" Type="System.Windows.Input.TouchDevice" />
      </Parameters>
      <Docs>
        <param name="touchDevice">Dispositivo da rilasciare.</param>
        <summary>Tenta di rilasciare il dispositivo a tocco specificato dall'elemento.</summary>
        <returns>
          <see langword="true" /> se il dispositivo a tocco viene rilasciato; in caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="touchDevice" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveHandler(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveHandler(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.IInputElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent">Identificatore dell'evento indirizzato al quale è associato il gestore.</param>
        <param name="handler">Implementazione del gestore specifico da rimuovere dalla raccolta di gestori eventi per questo elemento.</param>
        <summary>Rimuove il gestore dell'evento indirizzato specificato da questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lo scenario più comune per l'utilizzo di questo [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] quando si implementa il [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] evento "wrapper" che è associata a un evento indirizzato personalizzato, in particolare quando si implementa la logica di "Rimuovi" per gestori di [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] livello. Nell'esempio che segue questa sezione viene illustrato questo scenario osservazioni.  
  
 Chiamare questo metodo non ha alcun effetto se si sono verificati senza gestori registrati con criteri che corrispondono ai parametri di input per la chiamata al metodo.  
  
 Se più di un gestore è associato che soddisfano i criteri, solo il primo gestore eventi viene rimosso l'archivio del gestore. Questo comportamento è coerente con [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] comportamento del `-=` operatore.  
  
 Né `routedEvent` né `handler` potrebbe essere `null`. Il tentativo di fornire il valore come `null` genererà un'eccezione.  
  
 Questo metodo ignora la `handledEventsToo` le informazioni sui parametri, è disponibile se il gestore è stato inizialmente aggiunto con il <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> firma che consente la gestione di eventi già gestiti. Dei tipi di gestore è stato rimosso.  
  
   
  
## Examples  
 L'esempio seguente usa <xref:System.Windows.UIElement.RemoveHandler%2A> come parte di un'evento di definizione del wrapper.  
  
 [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]
 [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="RenderSize">
      <MemberSignature Language="C#" Value="public System.Windows.Size RenderSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size RenderSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderSize" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size RenderSize { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene (o imposta) la dimensione di rendering finale di questo elemento.</summary>
        <value>Dimensioni di rendering per questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Non tentare di impostare questa proprietà, in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] o nel codice, se si utilizza il sistema di layout a livello di framework WPF. Quasi tutti gli scenari di una tipica applicazione utilizzerà il sistema di layout. Il sistema di layout non rispetta le dimensioni impostate <xref:System.Windows.UIElement.RenderSize%2A> proprietà direttamente. Il <xref:System.Windows.UIElement.RenderSize%2A> viene dichiarata la proprietà modificabile solo per consentire di determinati casi che deliberatamente aggirare i protocolli di layout tipico, ad esempio il supporto per il bridging a livello di base WPF di <xref:System.Windows.Documents.Adorner> classe.  
  
 Questa proprietà può essere utilizzata per il controllo esegue l'override della dimensione di rendering applicabile all'interno di sistema di layout, ad esempio <xref:System.Windows.UIElement.OnRender%2A> o <xref:System.Windows.UIElement.GetLayoutClip%2A>.  
  
 Uno scenario più comune è la gestione di <xref:System.Windows.FrameworkElement.SizeChanged> eseguire l'override di eventi con il gestore della classe o <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> evento.  
  
## Examples  
 Nell'esempio seguente viene illustrato l'utilizzo di uno strumento decorativo personalizzato di <xref:System.Windows.UIElement.RenderSize%2A> valore per creare e ridimensionare l'elemento grafico del rettangolo che definisce lo strumento decorativo, come parte del relativo <xref:System.Windows.UIElement.OnRender%2A> implementazione.  
  
 [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]
 [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.UpdateLayout" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform RenderTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform RenderTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ RenderTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta le informazioni di trasformazione che influiscono sulla posizione di rendering di questo elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Descrive i dettagli specifici della trasformazione di rendering desiderata. Il valore predefinito è <see cref="P:System.Windows.Media.Transform.Identity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una trasformazione di rendering non rigenerare dimensioni di layout o eseguire il rendering delle informazioni sulle dimensioni. Eseguire il rendering di trasformazioni sono generalmente progettate per l'applicazione di animazioni o effetti temporanei a un elemento. Ad esempio, potrebbe essere ingrandire un elemento con stato attivo o posizionato il cursore sulla potrebbe variazione al caricamento per attirare l'attenzione su quella parte di [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  
  
<a name="dependencyPropertyInfo_RenderTransform"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.RenderTransformProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point RenderTransformOrigin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point RenderTransformOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.RenderTransformOrigin" />
      <MemberSignature Language="VB.NET" Value="Public Property RenderTransformOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point RenderTransformOrigin { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il punto centrale di qualsiasi possibile trasformazione di rendering dichiarata da <see cref="P:System.Windows.UIElement.RenderTransform" />, relativa ai limiti dell'elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Valore che dichiara la trasformazione di rendering. Il valore predefinito è <see cref="T:System.Windows.Point" /> con coordinate (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.RenderTransformOrigin%2A> ha un utilizzo della modalità non standard di <xref:System.Windows.Point> struttura valore, in quanto il <xref:System.Windows.Point> non rappresenta un percorso assoluto in un sistema di coordinate. Al contrario, i valori compresi tra 0 e 1 vengono interpretati come fattore per l'intervallo dell'elemento corrente in ogni asse x, y. Ad esempio, (0,5 0,5) causa la trasformazione di rendering da allineare al centro dell'elemento, o è (1,1) posiziona la trasformazione di rendering nella parte inferiore destra angolo dell'elemento. <xref:System.Double.NaN> non è un valore accettato.  
  
 I valori oltre a 0 e 1 vengono accettati anche e comporterà altri effetti insoliti di trasformazione. Ad esempio, se si imposta <xref:System.Windows.UIElement.RenderTransformOrigin%2A> (5,5) e quindi applicare un <xref:System.Windows.Media.RotateTransform>, il punto di rotazione sarà ben oltre i limiti dell'elemento stesso. La trasformazione farà ruotare l'elemento intorno a un grande cerchio che ha origine oltre la parte inferiore destra. L'origine potrebbe essere in qualche punto all'interno di relativo elemento padre e potrebbe essere fuori frame o della vista. I valori negativi punto sono simili, si procederà oltre il limite superiore sinistro.  
  
 Eseguire il rendering di trasformazioni non hanno effetto sul layout e vengono in genere utilizzate per aggiungere un'animazione o applicare un effetto temporaneo a un elemento.  
  
<a name="xamlAttributeUsage_RenderTransformOrigin"></a>   
## <a name="xaml-attribute-usage"></a>Uso della sintassi XAML per gli attributi  
  
```  
<object RenderTransformOrigin="xOrigin, yOrigin"/>  
```  
  
<a name="xamlPropertyElementUsage_RenderTransformOrigin"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.RenderTransformOrigin>  
    <Point X=" xOrigin " Y=" yOrigin "/>  
  </object.RenderTransformOrigin>  
</object>  
```  
  
<a name="xamlValues_RenderTransformOrigin"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *xOrigin*  
 Il fattore di origine dell'asse orizzontale. In genere, questo viene assegnato come un valore compreso tra 0 e 1. Vedere la sezione Osservazioni.  
  
 *yOrigin*  
 Il fattore di origine verticale. In genere, questo viene assegnato come un valore compreso tra 0 e 1. Vedere la sezione Osservazioni.  
  
<a name="dependencyPropertyInfo_RenderTransformOrigin"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente vengono creati gli elementi nel codice, si applica un <xref:System.Windows.UIElement.RenderTransformOrigin%2A>e quindi applica una <xref:System.Windows.UIElement.RenderTransform%2A>.  
  
 [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]
 [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.RenderTransform" />
      </Docs>
    </Member>
    <Member MemberName="RenderTransformOriginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformOriginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformOriginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformOriginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformOriginProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.RenderTransformOrigin" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RenderTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RenderTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.RenderTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RenderTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RenderTransformProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.RenderTransform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeCommandBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeCommandBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeCommandBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeCommandBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeCommandBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeCommandBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.UIElement.CommandBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.UIElement.CommandBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.UIElement.CommandBindings%2A> è impostato localmente.  
  
 Questo `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.CommandBindings%2A> proprietà non dispone di un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo se si sviluppa una finestra di progettazione o controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per ulteriori informazioni, vedere [la definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeInputBindings">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeInputBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeInputBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.ShouldSerializeInputBindings" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeInputBindings () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeInputBindings();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il contenuto della proprietà <see cref="P:System.Windows.UIElement.InputBindings" /> nelle istanze di questa classe.</summary>
        <returns>
          <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.UIElement.InputBindings" /> deve essere serializzato; in caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verrà restituito `true` se <xref:System.Windows.UIElement.InputBindings%2A> è impostato localmente.  
  
 Questo `ShouldSerialize` metodo viene fornito perché il <xref:System.Windows.UIElement.InputBindings%2A> proprietà non dispone di un valore predefinito semplice. Questo metodo indica se la proprietà è stato modificato rispetto al valore predefinito. È in genere richiamare questo metodo se si sviluppa una finestra di progettazione o controllo personalizzato che includa un <xref:System.Windows.UIElement>.  
  
 Per ulteriori informazioni, vedere [la definizione di valori predefiniti con i metodi ShouldSerialize e Reset](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixels">
      <MemberSignature Language="C#" Value="public bool SnapsToDevicePixels { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SnapsToDevicePixels" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.SnapsToDevicePixels" />
      <MemberSignature Language="VB.NET" Value="Public Property SnapsToDevicePixels As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SnapsToDevicePixels { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta un valore che determina se durante il rendering di questo elemento devono essere usate le impostazioni per i pixel specifiche del dispositivo.  Si tratta di una proprietà di dipendenza.</summary>
        <value>
          <see langword="true" /> se l'elemento deve eseguire il rendering in base ai pixel del dispositivo; in caso contrario, <see langword="false" />. Il valore predefinito dichiarato in <see cref="T:System.Windows.UIElement" /> è <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile impostare questa proprietà `true` per l'elemento radice per abilitare pixel blocca il rendering in tutta l'interfaccia utente. Per i dispositivi operativo superiore a 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap di rendering possibile ridurre al minimo l'anti-aliasing elementi visivi in prossimità di singole linee a tinta unita.  
  
 Quando viene ereditato da <xref:System.Windows.FrameworkElement> o qualsiasi classe derivata, <xref:System.Windows.FrameworkElement> ignora i metadati per questa proprietà di dipendenza per impostare il <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> proprietà di metadati da `true`. Il risultato è che è necessario specificare solo l'elemento più esterno di un sottoalbero <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> come `true`, e tutti gli elementi figlio di tale sottoalbero segnaleranno quindi <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> come `true` e disporrà di <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> effetto visivo.  
  
<a name="dependencyPropertyInfo_SnapsToDevicePixels"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapsToDevicePixelsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SnapsToDevicePixelsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.SnapsToDevicePixelsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SnapsToDevicePixelsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SnapsToDevicePixelsProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.SnapsToDevicePixels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonDown As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito alla pressione del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusButtonDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusButtonDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonDown" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusButtonDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusButtonEventHandler StylusButtonUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusButtonUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusButtonUp As StylusButtonEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusButtonEventHandler ^ StylusButtonUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusButtonUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusButtonEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al rilascio del pulsante dello stilo quando il puntatore è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusButtonUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusButtonUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusButtonUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusButtonEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.PreviewStylusButtonUp" />
      </Docs>
    </Member>
    <Member MemberName="StylusButtonUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusButtonUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusButtonUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusButtonUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusButtonUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusButtonUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusDownEventHandler StylusDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusDownEventHandler StylusDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusDown As StylusDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusDownEventHandler ^ StylusDown;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusDown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al tocco del digitalizzatore con lo stilo quando lo stilo è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusDown> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusDown> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusDownEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusDown" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusEnter As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusEnter;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusEnter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'interno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusEnter> è un oggetto che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.UIElement.StylusEnter> rilevi quando lo stilo entra nell'area di un elemento, questo evento ulteriori letteralmente che i <xref:System.Windows.UIElement.IsStylusOver%2A> modificato dal valore della proprietà `false` a `true` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusEnter> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusEnter> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusEnter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInAirMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInAirMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInAirMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInAirMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInAirMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInAirMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato su un elemento senza effettivamente toccare il digitalizzatore.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusInAirMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusInAirMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInAirMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInAirMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInAirMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInAirMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInAirMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInAirMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusInRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusInRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusInRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusInRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusInRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusInRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è sufficientemente vicino al digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusInRange> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusInRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusInRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusInRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusInRange>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusInRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusInRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusInRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusInRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusInRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusInRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusInRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusInRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusLeave As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusLeave;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusLeave</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato all'esterno dei limiti dell'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.UIElement.StylusLeave> è un oggetto che utilizza una strategia di routing di gestione degli eventi diretta. Gli eventi indirizzati direttamente non vengono generati una route; al contrario, vengono gestiti nello stesso elemento in cui vengono generati. Tuttavia, consentono di altri aspetti del comportamento dell'evento indirizzato, ad esempio i trigger di evento negli stili.  
  
 Sebbene <xref:System.Windows.UIElement.StylusLeave> rilevi quando lo stilo esce dai limiti di un elemento, questo evento più letteralmente che i <xref:System.Windows.UIElement.IsStylusOver%2A> modificato dal valore della proprietà `true` a `false` per questo elemento.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusLeave> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusLeave> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusLeave" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusMove As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusMove;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusMove</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo viene spostato sull'elemento. Lo stilo deve essere spostato mentre è sul digitalizzatore per generare l'evento. altrimenti viene generato l'evento <see cref="E:System.Windows.UIElement.StylusInAirMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusMove> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusMove> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusMove" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRange">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusOutOfRange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusOutOfRange" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusOutOfRange" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusOutOfRange As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusOutOfRange;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusOutOfRange</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando lo stilo è troppo lontano dal digitalizzatore per poter essere rilevato, mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusOutOfRange> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusOutOfRange> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusOutOfRange"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusOutOfRangeEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusOutOfRangeEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusOutOfRangeEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusOutOfRangeEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusOutOfRangeEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusOutOfRange" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusPlugIns">
      <MemberSignature Language="C#" Value="protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.StylusPlugIns" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StylusPlugIns As StylusPlugInCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ StylusPlugIns { System::Windows::Input::StylusPlugIns::StylusPlugInCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPlugIns.StylusPlugInCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene un insieme di tutti gli oggetti dei plug-in dello stilo (personalizzazione) associati a questo elemento.</summary>
        <value>Insieme dei plug-in dello stilo, come insieme specializzato.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un esempio di un controllo che consente di popolare questa raccolta è <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> Aggiunge il <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> come elemento della raccolta, che consente di <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> di interagire con l'input con stilo e produrre il rendering univoco in risposta a eventi controllati dallo stilo.  
  
 Per informazioni sulla creazione di plug-in personalizzato che possono ricevere e interpretare l'input con stilo, vedere [intercettazione Input dallo stilo](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> istanza e lo aggiunge al <xref:System.Windows.UIElement.StylusPlugIns%2A> raccolta di un colore personalizzato, controllo della gestione.  
  
 [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]
 [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.StylusPlugIns.DynamicRenderer" />
        <altmember cref="T:System.Windows.Controls.InkCanvas" />
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGesture">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusSystemGesture" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusSystemGesture As StylusSystemGestureEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusSystemGestureEventHandler ^ StylusSystemGesture;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusSystemGesture</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusSystemGestureEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un utente esegue uno dei vari movimenti con stilo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per ulteriori informazioni sui movimenti dello stilo, vedere <xref:System.Windows.Input.SystemGesture>.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusSystemGesture> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusSystemGesture> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusSystemGesture"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusSystemGestureEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusSystemGestureEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusSystemGestureEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusSystemGestureEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusSystemGestureEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusSystemGesture" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.StylusEventHandler StylusUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.StylusEventHandler StylusUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.StylusUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StylusUp As StylusEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::StylusEventHandler ^ StylusUp;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.StylusUp</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando l'utente solleva lo stilo dal digitalizzatore mentre è posizionato sull'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.StylusUp> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.StylusUp> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
 Tocco e mouse input con stilo esiste in una determinata relazione. Per ulteriori informazioni, vedere [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  
  
<a name="routedEventInfo_StylusUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.StylusUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.StylusEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewStylusUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnStylusUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent StylusUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent StylusUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.StylusUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StylusUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ StylusUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.StylusUp" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.TextCompositionEventHandler TextInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.TextCompositionEventHandler TextInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TextInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextInput As TextCompositionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event System::Windows::Input::TextCompositionEventHandler ^ TextInput;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.IInputElement.TextInput</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TextCompositionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito all'input di testo per l'elemento in modo indipendente dalla periferica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Questo evento potrebbe già essere contrassegnato come gestito dalle implementazioni interne di controlli compositi. Vedere la sezione Osservazioni seguente.  
  
 Il <xref:System.Windows.UIElement.TextInput> evento sia già contrassegnato come gestito dalle implementazioni interne di controlli compositi. Ad esempio, un <xref:System.Windows.Controls.TextBox> è un controllo composito in cui il <xref:System.Windows.UIElement.TextInput> evento è già contrassegnato come gestito; all'interno la composizione. Controlli eseguire questa operazione perché il controllo deve interpretare alcuni tipi di input, ad esempio i tasti di direzione, come un significato speciale per tale controllo. Se si utilizza <xref:System.Windows.UIElement.PreviewTextInput> dell'evento in cui associare gestori per l'input di testo, è possibile ottenere risultati migliori. Questa tecnica consente di evitare la maggior parte dei casi in cui la composizione del controllo è già contrassegnato questo evento come gestito e impedisce al gestore di ricezione dell'evento lungo la route dell'evento.  
  
 Il <xref:System.Windows.UIElement.TextInput> evento consente a un componente o applicazione in ascolto dell'input di testo in modo indipendente dal dispositivo. La tastiera è il mezzo principale di <xref:System.Windows.UIElement.TextInput>, ma possono anche sollevare riconoscimento grafia e altri dispositivi di input <xref:System.Windows.UIElement.TextInput>.  
  
 A causa di combinazioni di tasti, predefiniti o tramite input method editor, ovvero gli eventi principali più potrebbero generare un solo evento di input di testo.  
  
 Questo evento viene creato un alias per il <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento per questa classe, associato in modo che <xref:System.Windows.UIElement.TextInput> fa parte della classe elenco dei membri quando <xref:System.Windows.UIElement> viene ereditato come elemento di base. Gestori eventi collegati al <xref:System.Windows.UIElement.TextInput> evento sono associati all'oggetto sottostante <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=nameWithType> evento associato e ricevono la stessa istanza di dati di evento.  
  
<a name="routedEventInfo_TextInput"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TextInputEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.Windows.Input.TextCompositionEventHandler>|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewTextInput>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTextInput%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TextInputEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TextInputEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TextInputEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TextInputEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TextInputEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TextInput" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli identificatori degli eventi indirizzati vengono creati in fase di registrazione di questi ultimi. Gli identificatori contengono un nome identificativo, un tipo di proprietario, un tipo di gestore, una strategia per il routing e un metodo di utilità per l'aggiunta di proprietari per l'evento. È possibile usare questi identificatori per aggiungere gestori di classi.  
  
 Per ulteriori informazioni sulla registrazione degli eventi indirizzati, vedere <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. Per ulteriori informazioni sull'utilizzo degli identificatori di eventi indirizzati per aggiungere gestori di classi, vedere <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchDown As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchDown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un dito tocca lo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Per impostazione predefinita, il <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> non si verificano fino a quando un dito tocca lo schermo e sposta. Premere un dito sullo schermo e azienda senza spostarlo provoca la pressione prolungata di un <xref:System.Windows.Input.Stylus>. Il comportamento la pressione prolungata è equivalente al pulsante destro del mouse.  
  
 Affinché il <xref:System.Windows.UIElement.PreviewTouchDown> e <xref:System.Windows.UIElement.TouchDown> degli eventi non appena un dito tocca lo schermo, impostare il <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=nameWithType> proprietà associata `false` per questo elemento.  
  
<a name="routedEventInfo_TouchDown"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TouchDownEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewTouchDown>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTouchDown%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Input.Stylus.IsPressAndHoldEnabled" />
        <altmember cref="M:System.Windows.Input.Stylus.GetIsPressAndHoldEnabled(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Input.Stylus.SetIsPressAndHoldEnabled(System.Windows.DependencyObject,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="TouchDownEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchDownEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchDownEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchDownEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchDownEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchDownEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchDown" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnter">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchEnter As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchEnter;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'esterno all'interno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato sempre, se il dispositivo a tocco viene rilevato su questo elemento.  
  
<a name="routedEventInfo_TouchEnter"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TouchEnterEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTouchEnter%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchEnterEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchEnterEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchEnterEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchEnterEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchEnterEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchEnterEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchEnter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCaptured">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCaptured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCaptured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCaptured" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCaptured As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCaptured { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco acquisiti in questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCapturedWithin">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesCapturedWithin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesCapturedWithin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesCapturedWithin As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesCapturedWithin { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono acquisiti in questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesDirectlyOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesDirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesDirectlyOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesDirectlyOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesDirectlyOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che si trovano su questo elemento.</summary>
        <value>Enumerazione di oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che si trovano su questo elemento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesOver">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt; TouchesOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.TouchDevice&gt; TouchesOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.TouchesOver" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TouchesOver As IEnumerable(Of TouchDevice)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ TouchesOver { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::TouchDevice ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.TouchDevice&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene tutti i dispositivi a tocco che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</summary>
        <value>Enumerazione degli oggetti <see cref="T:System.Windows.Input.TouchDevice" /> che sono su questo elemento o nei relativi elementi figlio nella struttura ad albero visuale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeave">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchLeave As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchLeave;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un tocco si sposta dall'interno all'esterno dei limiti di questo elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento viene generato sempre, se il dispositivo a tocco viene rilevato su questo elemento.  
  
<a name="routedEventInfo_TouchLeave"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TouchLeaveEvent>|  
|Strategia di routing|Direct|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTouchLeave%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchLeaveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchLeaveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchLeaveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchLeaveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchLeaveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchLeaveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchLeave" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMove">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchMove As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchMove;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene spostato un dito sullo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchMove"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TouchMoveEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewTouchMove>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTouchMove%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchMoveEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchMoveEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchMoveEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchMoveEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchMoveEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchMoveEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchMove" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUp">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.TouchEventArgs&gt; TouchUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.TouchEventArgs&gt; TouchUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.UIElement.TouchUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TouchUp As EventHandler(Of TouchEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::TouchEventArgs ^&gt; ^ TouchUp;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.TouchEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando viene sollevato un dito dallo schermo mentre si trova sopra l'elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="routedEventInfo_TouchUp"></a>   
## <a name="routed-event-information"></a>Informazioni evento indirizzato  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.TouchUpEvent>|  
|Strategia di routing|Bubbling|  
|delegato|<xref:System.EventHandler%601> di tipo <xref:System.Windows.Input.TouchEventArgs>.|  
  
-   Evento di tunneling corrispondente è <xref:System.Windows.UIElement.PreviewTouchUp>.  
  
-   Eseguire l'override <xref:System.Windows.UIElement.OnTouchUp%2A> per implementare la gestione di questo evento nelle classi derivate della classe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent TouchUpEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent TouchUpEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.TouchUpEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TouchUpEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ TouchUpEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica l'evento indirizzato <see cref="E:System.Windows.UIElement.TouchUp" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslatePoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point TranslatePoint(valuetype System.Windows.Point point, class System.Windows.UIElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Point TranslatePoint(System::Windows::Point point, System::Windows::UIElement ^ relativeTo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="relativeTo" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="point">Valore del punto, rispetto all'elemento.</param>
        <param name="relativeTo">Elemento rispetto a cui traslare il punto specificato.</param>
        <summary>Trasla un punto rispetto a questo elemento in coordinate relative all'elemento specificato.</summary>
        <returns>Valore del punto, ora relativo all'elemento di destinazione invece che all'elemento di origine.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il passaggio di `null` per `relativeTo` è consentito e indica che le coordinate devono essere relativa all'elemento radice dell'albero logico a cui appartiene questo elemento.  
  
 Questo metodo viene utilizzato per la conversione di valori dei punti di test di passaggi. Chiamare questo metodo è importante soprattutto se si sta creando un controllo ed è necessario elaborare l'input a un livello inferiore. Se si utilizzano controlli esistenti, è in genere possibile presupporre che controlli completati segnalino i risultati dell'hit test convertiti correttamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uid">
      <MemberSignature Language="C#" Value="public string Uid { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Uid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Uid" />
      <MemberSignature Language="VB.NET" Value="Public Property Uid As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Uid { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta l'identificatore univoco (per la localizzazione) di questo elemento. Si tratta di una proprietà di dipendenza.</summary>
        <value>Stringa che è l'identificatore univoco di questo elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilizzato dai progettisti per ottenere il `x:Uid` valore (vedere [WPF Panoramica della globalizzazione e localizzazione](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) per altre informazioni).  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.UidProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.UidProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UidProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UidProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Uid" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateLayout">
      <MemberSignature Language="C#" Value="public void UpdateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.UIElement.UpdateLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLayout();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Assicura che tutti gli elementi figlio visivi di questo elemento vengano aggiornati correttamente per il layout.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando si chiama questo metodo, gli elementi con <xref:System.Windows.UIElement.IsMeasureValid%2A> `false` o <xref:System.Windows.UIElement.IsArrangeValid%2A> `false` chiamerà specifici dell'elemento <xref:System.Windows.UIElement.MeasureCore%2A> e <xref:System.Windows.UIElement.ArrangeCore%2A> metodi, che impone layout aggiornare e tutte le dimensioni calcolate verranno convalidate.  
  
 Chiamare questo metodo non ha alcun effetto se layout non viene modificato, o se disposizione né misura lo stato di un layout non è valido. Tuttavia, se non è valido per entrambi gli aspetti, layout di <xref:System.Windows.UIElement.UpdateLayout%2A> chiamata ripeterà l'intero layout. Pertanto, è consigliabile evitare di chiamare il metodo <xref:System.Windows.UIElement.UpdateLayout%2A> dopo ogni modifica incrementale e minore nell'albero degli elementi. Il sistema di layout eseguirà layout degli elementi in modo differito, utilizzando un algoritmo che consente di bilanciare prestazioni e la valuta, e con una strategia di ponderazione per rinviare le modifiche alle radici fino a tutti gli elementi figlio sono validi. È necessario chiamare solo <xref:System.Windows.UIElement.UpdateLayout%2A> se è assolutamente necessario conoscere le dimensioni e aggiornate le posizioni e solo dopo che si è certi che vengono completate tutte le modifiche alle proprietà di controllo e che possono influire sul layout.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Visibility">
      <MemberSignature Language="C#" Value="public System.Windows.Visibility Visibility { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Visibility Visibility" />
      <MemberSignature Language="DocId" Value="P:System.Windows.UIElement.Visibility" />
      <MemberSignature Language="VB.NET" Value="Public Property Visibility As Visibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Visibility Visibility { System::Windows::Visibility get(); void set(System::Windows::Visibility value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Visibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta la visibilità dell'[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] di questo elemento.  Si tratta di una proprietà di dipendenza.</summary>
        <value>Valore dell'enumerazione. Il valore predefinito è <see cref="F:System.Windows.Visibility.Visible" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Impostazione di questa proprietà ha effetto sul valore di <xref:System.Windows.UIElement.IsVisible%2A>, che a sua volta può generare il <xref:System.Windows.UIElement.IsVisibleChanged> evento. Tuttavia, <xref:System.Windows.UIElement.IsVisible%2A> dispone di altri fattori, ad esempio le impostazioni di visibilità degli elementi padre che lo contengono.  
  
 Gli elementi in cui <xref:System.Windows.UIElement.Visibility%2A> non <xref:System.Windows.Visibility.Visible> non fanno parte gli eventi di input (o comandi), non influenzano i passaggi di misurazione o disposizione del layout, non sono presenti in una sequenza di tabulazione e non verranno segnalati hit test.  
  
 Quando viene ereditato da <xref:System.Windows.Window> o le relative classi derivate, <xref:System.Windows.Window> ridefinisce il valore predefinito di questa proprietà sia <xref:System.Windows.Visibility.Collapsed>. Ciò influisce su un oggetto creato inizialmente non è in esecuzione il passaggio di misurazione del layout <xref:System.Windows.Window>, e <xref:System.Windows.UIElement.RenderSize%2A> restituisce (0,0). Per informazioni dettagliate, vedere <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> ridefinisce inoltre il valore predefinito per essere <xref:System.Windows.Visibility.Collapsed>, con un comportamento simile risulta per <xref:System.Windows.Controls.Primitives.Popup> e le relative classi derivate.  
  
<a name="dependencyPropertyInfo_Visibility"></a>   
## <a name="dependency-property-information"></a>Informazioni proprietà di dipendenza  
  
|||  
|-|-|  
|Campo dell'identificatore|<xref:System.Windows.UIElement.VisibilityProperty>|  
|Impostare le proprietà dei metadati `true`|nessuno|  
  
   
  
## Examples  
 Nell'esempio seguente viene implementato un gestore che fa riferimento a due diversi pulsanti denominati che sono destinati a essere una coppia si escludono a vicenda nell'interfaccia utente. Prima di eseguire la logica del programma associata al pulsante, il pulsante stesso viene impostato per essere <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>, e l'altro pulsante della coppia è impostato su <xref:System.Windows.Visibility.Visible?displayProperty=nameWithType>.  
  
 [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]
 [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.UIElement.IsVisible" />
        <altmember cref="T:System.Windows.Visibility" />
      </Docs>
    </Member>
    <Member MemberName="VisibilityProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisibilityProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisibilityProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.UIElement.VisibilityProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisibilityProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisibilityProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.UIElement.Visibility" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>