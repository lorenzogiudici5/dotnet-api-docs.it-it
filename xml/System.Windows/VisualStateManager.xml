<Type Name="VisualStateManager" FullName="System.Windows.VisualStateManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e6f71936c14c3ee25c357ab7da408482d731313" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39844763" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateManager : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateManager extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateManager" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateManager&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateManager : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateManager = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Gestisce gli stati e la logica per la transizione tra stati dei controlli.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.VisualStateManager> consente di specificare gli stati per un controllo, l'aspetto di un controllo quando si trova in un determinato stato e quando cambia lo stato di un controllo. Ad esempio, un <xref:System.Windows.Controls.Button> potrebbe avere un aspetto leggermente diverso quando viene premuto rispetto a quando non viene premuto. Due stati che il <xref:System.Windows.Controls.Button> definisce corrispondono a quando viene premuto (`"Pressed"`) e se non lo è (`"Normal"`). L'aspetto di un controllo quando è in uno stato è definito da un <xref:System.Windows.VisualState>. Oggetto <xref:System.Windows.VisualState> contiene una raccolta di <xref:System.Windows.Media.Animation.Storyboard> oggetti che specificano come l'aspetto del controllo cambia quando il controllo è in tale stato. Aggiungere gli stati di visualizzazione a un controllo impostando la `VisualStateManager.VisualStateGroups` proprietà del controllo associata. Ciascuna <xref:System.Windows.VisualStateGroup> contiene una raccolta di <xref:System.Windows.VisualState> gli oggetti che si escludono a vicenda. Vale a dire, il controllo è sempre in uno stato di in ogni <xref:System.Windows.VisualStateGroup>.  
  
 Il <xref:System.Windows.VisualStateManager> consente inoltre di specificare quando un controllo entra in uno stato specifico. Il metodo che è necessario chiamare per modificare gli stati dipende dal proprio scenario. Se si crea un controllo che usa il <xref:System.Windows.VisualStateManager> nel relativo <xref:System.Windows.Controls.ControlTemplate>, chiamare il <xref:System.Windows.VisualStateManager.GoToState%2A> (metodo). Per altre informazioni su come creare controllano che utilizzano le <xref:System.Windows.VisualStateManager>, vedere [creazione di un controllo con aspetto personalizzabile](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md). Se si usa la <xref:System.Windows.VisualStateManager> all'esterno di un <xref:System.Windows.Controls.ControlTemplate> (ad esempio, se si usa un <xref:System.Windows.VisualStateManager> in un <xref:System.Windows.Controls.UserControl> o in un singolo elemento), chiamare il <xref:System.Windows.VisualStateManager.GoToElementState%2A> (metodo). In entrambi i casi il <xref:System.Windows.VisualStateManager> esegue la logica necessarie per avviare e arrestare gli storyboard che sono associati allo stato coinvolto in modo appropriato. Ad esempio, si supponga che un controllo definisce gli stati `State1` e `State2`, ognuno dei quali dispone di uno storyboard è associato. Se il controllo è in `State1` e si passa `State2` a <xref:System.Windows.VisualStateManager.GoToState%2A> oppure <xref:System.Windows.VisualStateManager.GoToElementState%2A>, il <xref:System.Windows.VisualStateManager> avvia lo storyboard `State2` e interrompe lo storyboard in `State1`.  
  
 I controlli che sono inclusi con [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] usare il <xref:System.Windows.VisualStateManager> per modificare gli stati di visualizzazione. Quando si crea una <xref:System.Windows.Controls.ControlTemplate> per un controllo che è accluso [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], è possibile aggiungere <xref:System.Windows.VisualState> oggetti per il controllo <xref:System.Windows.Controls.ControlTemplate> per specificare l'aspetto del controllo in un determinato stato. Per trovare i nomi degli stati di visualizzazione per i controlli inclusi in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], vedere [controllo stili e modelli](~/docs/framework/wpf/controls/control-styles-and-templates.md). Definiscono gli handle per la logica del controllo in fase di transizione tra stati, in modo che non è necessario eseguire alcuna operazione oltre il <xref:System.Windows.VisualState> oggetti nel nuovo <xref:System.Windows.Controls.ControlTemplate>. Per altre informazioni su come creare modelli di controllo per i controlli esistenti, vedere [personalizzazione dell'aspetto di un controllo esistente mediante la creazione di un oggetto ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 Se si desidera implementare la logica personalizzata per la transizione tra stati, è necessario ereditare da <xref:System.Windows.VisualStateManager>, eseguire l'override di <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metodo e impostare il <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A?displayProperty=nameWithType> proprietà nel controllo a cui viene utilizzata la logica personalizzata associata.  
  
   
  
## Examples  
 L'esempio seguente crea una <xref:System.Windows.Shapes.Rectangle> e aggiunge un <xref:System.Windows.VisualStateGroup> denominate `CommonStates` per il `VisualStateManager.VisualStatesGroups` proprietà associata. L'esempio definisce i `MouseOver` e `Normal` <xref:System.Windows.VisualState> gli oggetti nel `CommonStates` <xref:System.Windows.VisualStateGroup>. Quando l'utente sposta il puntatore del mouse di <xref:System.Windows.Shapes.Rectangle>, passa da rosso a verde in mezzo secondo. Quando l'utente sposta il mouse dal rettangolo, il <xref:System.Windows.Controls.Grid> viene immediatamente ripristinato su rosso. Si noti che il `Normal` stato non definisce un <xref:System.Windows.Media.Animation.Storyboard>. Oggetto <xref:System.Windows.Media.Animation.Storyboard> non è necessaria perché quando il <xref:System.Windows.Shapes.Rectangle> la transizione dal `MouseOver` torni allo stato il `Normal` lo stato, il <xref:System.Windows.Media.Animation.Storyboard> per `MouseOver` viene arrestato e il <xref:System.Windows.Media.SolidColorBrush.Color%2A> proprietà per il <xref:System.Windows.Media.SolidColorBrush> restituisce e impostato su rosso.  
  
 [!code-xaml[VSMCustomControl#VSMNoTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml#vsmnotemplate)]  
  
 Nell'esempio seguente mostra il gestore di evento definita nell'esempio precedente e chiama il <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodo per la transizione tra stati. Se il rettangolo nell'esempio precedente faceva parte di un <xref:System.Windows.Controls.ControlTemplate>, l'esempio sarebbe necessario chiamare il <xref:System.Windows.VisualStateManager.GoToState%2A> (metodo).  
  
 [!code-csharp[VSMCustomControl#GoToElementState](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/window1.xaml.cs#gotoelementstate)]
 [!code-vb[VSMCustomControl#GoToElementState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/window1.xaml.vb#gotoelementstate)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.VisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManager">
      <MemberSignature Language="C#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="ILAsm" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateManager.CustomVisualStateManager" />
      <MemberSignature Language="VB.NET" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberSignature Language="F#" Value="see GetCustomVisualStateManager, and SetCustomVisualStateManager" Usage="see GetCustomVisualStateManager, and SetCustomVisualStateManager" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ottiene o imposta l'oggetto <see cref="T:System.Windows.VisualStateManager" /> che esegue la transizione tra gli stati di un controllo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> viene `null`, il <xref:System.Windows.VisualStateManager> Usa la propria logica per eseguire la transizione tra stati. Se si desidera implementare la logica personalizzata per la transizione tra stati, creare una classe che eredita da <xref:System.Windows.VisualStateManager> ed eseguire l'override di <xref:System.Windows.VisualStateManager.GoToStateCore%2A> (metodo). Per usare la classe personalizzata, impostare il <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> proprietà a un oggetto di tipo personalizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomVisualStateManagerProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomVisualStateManagerProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomVisualStateManagerProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomVisualStateManagerProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomVisualStateManagerProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomVisualStateManagerProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.CustomVisualStateManagerProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static System.Windows.VisualStateManager GetCustomVisualStateManager (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.VisualStateManager GetCustomVisualStateManager(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetCustomVisualStateManager(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomVisualStateManager (obj As FrameworkElement) As VisualStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::VisualStateManager ^ GetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetCustomVisualStateManager : System.Windows.FrameworkElement -&gt; System.Windows.VisualStateManager" Usage="System.Windows.VisualStateManager.GetCustomVisualStateManager obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualStateManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Elemento dal quale ottenere la proprietà associata <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</param>
        <summary>Ottiene la proprietà associata <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <returns>Gestore visualizzazione dello stato che esegue la transizione tra gli stati di un controllo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualStateGroups">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetVisualStateGroups (System.Windows.FrameworkElement obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetVisualStateGroups(class System.Windows.FrameworkElement obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GetVisualStateGroups(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetVisualStateGroups (obj As FrameworkElement) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetVisualStateGroups(System::Windows::FrameworkElement ^ obj);" />
      <MemberSignature Language="F#" Value="static member GetVisualStateGroups : System.Windows.FrameworkElement -&gt; System.Collections.IList" Usage="System.Windows.VisualStateManager.GetVisualStateGroups obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="obj">Elemento dal quale ottenere la proprietà associata <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</param>
        <summary>Ottiene la proprietà associata <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <returns>Raccolta di oggetti <see cref="T:System.Windows.VisualStateGroup" /> associata all'oggetto specificato.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToElementState">
      <MemberSignature Language="C#" Value="public static bool GoToElementState (System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToElementState(class System.Windows.FrameworkElement stateGroupsRoot, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToElementState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToElementState (stateGroupsRoot As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToElementState(System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToElementState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToElementState (stateGroupsRoot, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stateGroupsRoot">Elemento radice che contiene l'oggetto <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Stato finale della transizione.</param>
        <param name="useTransitions">
          <see langword="true" /> per utilizzare un oggetto <see cref="T:System.Windows.VisualTransition" /> per eseguire la transizione tra stati; in caso contrario, <see langword="false" />.</param>
        <summary>Esegue la transizione dell'elemento tra due stati. Utilizzare questo metodo per eseguire la transizione degli stati definiti da un'applicazione, anziché da un controllo.</summary>
        <returns>
          <see langword="true" /> se il controllo ha eseguito correttamente la transizione al nuovo stato. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodo per modificare gli stati su un elemento all'esterno di un <xref:System.Windows.Controls.ControlTemplate> (ad esempio, se si usa un <xref:System.Windows.VisualStateManager> in un <xref:System.Windows.DataTemplate> o <xref:System.Windows.Window>). Chiamare il <xref:System.Windows.VisualStateManager.GoToState%2A> metodo se si siano modificando gli stati in un controllo che usa la <xref:System.Windows.VisualStateManager> nel relativo <xref:System.Windows.Controls.ControlTemplate>.  
  
   
  
## Examples  
 L'esempio seguente crea un'applicazione che richiede all'utente di immettere un numero compreso tra 1 e 100.  Quando l'utente immette un numero, l'applicazione indica se il valore indicato è troppo elevato, un valore troppo basso o corretti.  Quanto segue [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] crea l'interfaccia utente per l'applicazione e definisce gli stati di 4: `TooLow`, `TooHigh`, `Correct`, e `Guessing`. Quando l'applicazione viene avviata, viene visualizzata la `Guessing` dello stato. .  
  
 [!code-xaml[VSMGoToElementState#GoToElementStateXaml](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml#gotoelementstatexaml)]  
  
 Il codice seguente illustra la logica dell'applicazione.  Quando l'utente immette un numero e fa clic sul pulsante, l'applicazione chiama <xref:System.Windows.VisualStateManager.GoToElementState%2A> a cui passare `TooHigh`, `TooLow`, o `Correct` per fornire commenti e suggerimenti per l'utente su dell'ipotesi.  Per provare questo esempio, chiamare il `GenerateNumber` metodo quando viene avviata l'applicazione.  
  
 [!code-csharp[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmgotoelementstate/csharp/mainwindow.xaml.cs#gotoelementstatecode)]
 [!code-vb[VSMGoToElementState#GoToElementStateCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmgotoelementstate/visualbasic/mainwindow.xaml.vb#gotoelementstatecode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> è <see langword="null" />.  
  
oppure 
 <paramref name="stateName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToState">
      <MemberSignature Language="C#" Value="public static bool GoToState (System.Windows.FrameworkElement control, string stateName, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GoToState(class System.Windows.FrameworkElement control, string stateName, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GoToState (control As FrameworkElement, stateName As String, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GoToState(System::Windows::FrameworkElement ^ control, System::String ^ stateName, bool useTransitions);" />
      <MemberSignature Language="F#" Value="static member GoToState : System.Windows.FrameworkElement * string * bool -&gt; bool" Usage="System.Windows.VisualStateManager.GoToState (control, stateName, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che deve eseguire la transizione tra stati.</param>
        <param name="stateName">Stato finale della transizione.</param>
        <param name="useTransitions">
          <see langword="true" /> per utilizzare un oggetto <see cref="T:System.Windows.VisualTransition" /> per eseguire la transizione tra stati; in caso contrario, <see langword="false" />.</param>
        <summary>Esegue la transizione del controllo tra due stati. Utilizzare questo metodo per eseguire la transizione di stati su un controllo che ha un oggetto <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <returns>
          <see langword="true" /> se il controllo ha eseguito correttamente la transizione al nuovo stato. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chiamare il <xref:System.Windows.VisualStateManager.GoToState%2A> metodo se si siano modificando gli stati in un controllo che usa la <xref:System.Windows.VisualStateManager> nel relativo <xref:System.Windows.Controls.ControlTemplate>. Chiamare il <xref:System.Windows.VisualStateManager.GoToElementState%2A> metodo per modificare gli stati su un elemento all'esterno di un <xref:System.Windows.Controls.ControlTemplate> (ad esempio, se si usa un <xref:System.Windows.VisualStateManager> in un <xref:System.Windows.Controls.UserControl> o in un singolo elemento).  
  
   
  
## Examples  
 L'esempio seguente illustra un controllo che usa il <xref:System.Windows.VisualStateManager.GoToState%2A> metodo per la transizione tra stati. Per l'intero esempio, vedere [creazione di un controllo che abbia un aspetto personalizzabile](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 [!code-csharp[VSMCustomControl#UpdateStates](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmcustomcontrol/csharp/numericupdown.cs#updatestates)]
 [!code-vb[VSMCustomControl#UpdateStates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/vsmcustomcontrol/visualbasic/numericupdown.vb#updatestates)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> è <see langword="null" />.  
  
oppure 
 <paramref name="stateName" /> è <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GoToStateCore">
      <MemberSignature Language="C#" Value="protected virtual bool GoToStateCore (System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot, string stateName, System.Windows.VisualStateGroup group, System.Windows.VisualState state, bool useTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GoToStateCore(class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot, string stateName, class System.Windows.VisualStateGroup group, class System.Windows.VisualState state, bool useTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GoToStateCore (control As FrameworkElement, stateGroupsRoot As FrameworkElement, stateName As String, group As VisualStateGroup, state As VisualState, useTransitions As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GoToStateCore(System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot, System::String ^ stateName, System::Windows::VisualStateGroup ^ group, System::Windows::VisualState ^ state, bool useTransitions);" />
      <MemberSignature Language="F#" Value="abstract member GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool&#xA;override this.GoToStateCore : System.Windows.FrameworkElement * System.Windows.FrameworkElement * string * System.Windows.VisualStateGroup * System.Windows.VisualState * bool -&gt; bool" Usage="visualStateManager.GoToStateCore (control, stateGroupsRoot, stateName, group, state, useTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateName" Type="System.String" />
        <Parameter Name="group" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="state" Type="System.Windows.VisualState" />
        <Parameter Name="useTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Controllo che deve eseguire la transizione tra stati.</param>
        <param name="stateGroupsRoot">Elemento radice che contiene l'oggetto <see cref="T:System.Windows.VisualStateManager" />.</param>
        <param name="stateName">Nome dello stato a cui eseguire la transizione.</param>
        <param name="group">Oggetto <see cref="T:System.Windows.VisualStateGroup" /> cui appartiene lo stato.</param>
        <param name="state">Rappresentazione dello stato a cui eseguire la transizione.</param>
        <param name="useTransitions">
          <see langword="true" /> per utilizzare un oggetto <see cref="T:System.Windows.VisualTransition" /> per eseguire la transizione tra stati; in caso contrario, <see langword="false" />.</param>
        <summary>Consente a un controllo di eseguire la transizione tra stati.</summary>
        <returns>
          <see langword="true" /> se il controllo ha eseguito correttamente la transizione al nuovo stato. In caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.VisualStateManager.GoToStateCore%2A> metodo esegue la logica necessaria per avviare e arrestare gli storyboard che sono associati a una transizione in modo appropriato. Quando un controllo chiama <xref:System.Windows.VisualStateManager.GoToState%2A> per modificare lo stato, il <xref:System.Windows.VisualStateManager> esegue le operazioni seguenti:  
  
-   Innanzitutto, se il <xref:System.Windows.VisualState> che il controllo viene effettuata la transizione a ha un <xref:System.Windows.Media.Animation.Storyboard>, lo storyboard viene avviato. Quindi, se il <xref:System.Windows.VisualState> proviene che il controllo dispone un <xref:System.Windows.Media.Animation.Storyboard>, le entità finali di uno storyboard.  
  
-   Se il controllo è già nel `stateName` stato <xref:System.Windows.VisualStateManager.GoToState%2A> non esegue alcuna azione e restituisce `true`.  
  
-   Se `stateName` non esiste nel <xref:System.Windows.Controls.ControlTemplate> dei `control`, <xref:System.Windows.VisualStateManager.GoToState%2A> viene eseguita alcuna azione e restituisce `false`.  
  
 È possibile implementare il proprio <xref:System.Windows.VisualStateManager> per fornire una logica diversa per la transizione tra stati. Ad esempio, è possibile modificare la logica descritta in precedenza, oppure è possibile fornire la logica per la transizione tra i tipi di animazione personalizzata.  Per implementare una <xref:System.Windows.VisualStateManager>, creare una classe che eredita da <xref:System.Windows.VisualStateManager> ed eseguire l'override di <xref:System.Windows.VisualStateManager.GoToStateCore%2A> (metodo). Per usare la classe personalizzata, impostare il <xref:System.Windows.VisualStateManager.CustomVisualStateManager%2A> proprietà a un oggetto di tipo personalizzato.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanged">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanged (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanged(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanged (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanged(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanged : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanged (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Oggetto <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> sul quale si è verificato l'evento.</param>
        <param name="oldState">Stato da cui il controllo esegue la transizione.</param>
        <param name="newState">Stato a cui il controllo esegue la transizione.</param>
        <param name="control">Controllo che esegue la transizione tra stati.</param>
        <param name="stateGroupsRoot">Elemento radice che contiene l'oggetto <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> sull'oggetto <see cref="T:System.Windows.VisualStateGroup" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Windows.VisualStateGroup> è impostato sul <xref:System.Windows.Controls.ControlTemplate> di un controllo, il `control` parametro è impostato per il controllo che possiede <xref:System.Windows.Controls.ControlTemplate>.  Quando la <xref:System.Windows.VisualStateGroup> è impostata su una <xref:System.Windows.FrameworkElement>, `control` viene `null` ed è consigliabile utilizzare il `stateGroupsRoot` parametro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> è <see langword="null" />.  
  
oppure 
 <paramref name="newState" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanged(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RaiseCurrentStateChanging">
      <MemberSignature Language="C#" Value="protected void RaiseCurrentStateChanging (System.Windows.VisualStateGroup stateGroup, System.Windows.VisualState oldState, System.Windows.VisualState newState, System.Windows.FrameworkElement control, System.Windows.FrameworkElement stateGroupsRoot);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseCurrentStateChanging(class System.Windows.VisualStateGroup stateGroup, class System.Windows.VisualState oldState, class System.Windows.VisualState newState, class System.Windows.FrameworkElement control, class System.Windows.FrameworkElement stateGroupsRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseCurrentStateChanging (stateGroup As VisualStateGroup, oldState As VisualState, newState As VisualState, control As FrameworkElement, stateGroupsRoot As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseCurrentStateChanging(System::Windows::VisualStateGroup ^ stateGroup, System::Windows::VisualState ^ oldState, System::Windows::VisualState ^ newState, System::Windows::FrameworkElement ^ control, System::Windows::FrameworkElement ^ stateGroupsRoot);" />
      <MemberSignature Language="F#" Value="member this.RaiseCurrentStateChanging : System.Windows.VisualStateGroup * System.Windows.VisualState * System.Windows.VisualState * System.Windows.FrameworkElement * System.Windows.FrameworkElement -&gt; unit" Usage="visualStateManager.RaiseCurrentStateChanging (stateGroup, oldState, newState, control, stateGroupsRoot)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateGroup" Type="System.Windows.VisualStateGroup" />
        <Parameter Name="oldState" Type="System.Windows.VisualState" />
        <Parameter Name="newState" Type="System.Windows.VisualState" />
        <Parameter Name="control" Type="System.Windows.FrameworkElement" />
        <Parameter Name="stateGroupsRoot" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="stateGroup">Oggetto <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> sul quale si è verificato l'evento.</param>
        <param name="oldState">Stato da cui il controllo esegue la transizione.</param>
        <param name="newState">Stato a cui il controllo esegue la transizione.</param>
        <param name="control">Controllo che esegue la transizione tra stati.</param>
        <param name="stateGroupsRoot">Elemento radice che contiene l'oggetto <see cref="T:System.Windows.VisualStateManager" />.</param>
        <summary>Genera l'evento <see cref="E:System.Windows.VisualStateGroup.CurrentStateChanging" /> sull'oggetto <see cref="T:System.Windows.VisualStateGroup" /> specificato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando la <xref:System.Windows.VisualStateGroup> è impostato sul <xref:System.Windows.Controls.ControlTemplate> di un controllo, il `control` parametro è impostato per il controllo che possiede <xref:System.Windows.Controls.ControlTemplate>.  Quando la <xref:System.Windows.VisualStateGroup> è impostata su una <xref:System.Windows.FrameworkElement>, `control` viene `null` ed è consigliabile utilizzare il `stateGroupsRoot` parametro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stateGroupsRoot" /> è <see langword="null" />.  
  
oppure 
 <paramref name="newState" /> è <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Quando si esegue l'override <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> in una classe derivata, accertarsi di chiamare la classe di base <see cref="M:System.Windows.VisualStateManager.RaiseCurrentStateChanging(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState,System.Windows.FrameworkElement,System.Windows.FrameworkElement)" /> metodo in modo che i delegati registrati ricevano l'evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetCustomVisualStateManager">
      <MemberSignature Language="C#" Value="public static void SetCustomVisualStateManager (System.Windows.FrameworkElement obj, System.Windows.VisualStateManager value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCustomVisualStateManager(class System.Windows.FrameworkElement obj, class System.Windows.VisualStateManager value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateManager.SetCustomVisualStateManager(System.Windows.FrameworkElement,System.Windows.VisualStateManager)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCustomVisualStateManager (obj As FrameworkElement, value As VisualStateManager)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCustomVisualStateManager(System::Windows::FrameworkElement ^ obj, System::Windows::VisualStateManager ^ value);" />
      <MemberSignature Language="F#" Value="static member SetCustomVisualStateManager : System.Windows.FrameworkElement * System.Windows.VisualStateManager -&gt; unit" Usage="System.Windows.VisualStateManager.SetCustomVisualStateManager (obj, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.FrameworkElement" />
        <Parameter Name="value" Type="System.Windows.VisualStateManager" />
      </Parameters>
      <Docs>
        <param name="obj">Oggetto sul quale impostare la proprietà.</param>
        <param name="value">Gestore visualizzazione dello stato che esegue la transizione tra gli stati di un controllo.</param>
        <summary>Imposta la proprietà associata <see cref="P:System.Windows.VisualStateManager.CustomVisualStateManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStateGroupsProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VisualStateGroupsProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VisualStateGroupsProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VisualStateGroupsProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VisualStateGroupsProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VisualStateGroupsProperty : System.Windows.DependencyProperty" Usage="System.Windows.VisualStateManager.VisualStateGroupsProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la proprietà di dipendenza <see cref="P:System.Windows.VisualStateManager.VisualStateGroups" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>