<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="eac4b-101">Fornisce supporto per l'ascolto di eventi alle classi in attesa di ricevere eventi tramite il modello WeakEvent e <see cref="T:System.Windows.WeakEventManager" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="eac4b-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eac4b-102">Il <xref:System.Windows.WeakEventManager> (un dispatcher) inoltra un evento chiamando il <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metodo nelle classi che implementano questa interfaccia e che sono stati aggiunti come listener chiamando <xref:System.Windows.WeakEventManager> metodi in anticipo.</span><span class="sxs-lookup"><span data-stu-id="eac4b-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="eac4b-103">Il motivo principale per seguire il modello WeakEvent è quando l'origine evento abbia una durata degli oggetti che è potenzialmente indipendente dal listener di eventi.</span><span class="sxs-lookup"><span data-stu-id="eac4b-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="eac4b-104">Tramite l'invio dell'evento centrale una <xref:System.Windows.WeakEventManager> Abilita i gestori per i listener venga sottoposto a garbage collection (o eliminarli manualmente) anche se la durata dell'oggetto di origine si estende oltre i listener.</span><span class="sxs-lookup"><span data-stu-id="eac4b-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="eac4b-105">Al contrario, un'associazione dell'evento normale utilizzando `+=` o sintassi equivalente evento specifica del linguaggio fa sì che l'origine potenzialmente ancora connessa a un riferimento forte ai gestori.</span><span class="sxs-lookup"><span data-stu-id="eac4b-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="eac4b-106">In questo modo i riferimenti di listener venga sottoposto a garbage collection in modo tempestivo.</span><span class="sxs-lookup"><span data-stu-id="eac4b-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="eac4b-107">Una situazione comune in cui le relazioni tra origini e i listener suggerisce l'uso di questo modello è la gestione degli eventi di aggiornamento provenienti da origini per i data binding.</span><span class="sxs-lookup"><span data-stu-id="eac4b-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="eac4b-108">È possibile usare il modello WeakEvent in ascolto di eventi che sono esterni all'applicazione.</span><span class="sxs-lookup"><span data-stu-id="eac4b-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="eac4b-109">È sufficiente definire un <xref:System.Windows.WeakEventManager> , fornire un comportamento in ascolto nel <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>e utilizzare il <xref:System.Windows.WeakEventManager> per associare il gestore fa riferimento a anziché `+=`.</span><span class="sxs-lookup"><span data-stu-id="eac4b-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">
          <span data-ttu-id="eac4b-110">Il tipo di <see cref="T:System.Windows.WeakEventManager" /> che chiama questo metodo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span>
          </span>
        </param>
        <param name="sender">
          <span data-ttu-id="eac4b-111">Oggetto che ha originato l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-111">Object that originated the event.</span>
          </span>
        </param>
        <param name="e">
          <span data-ttu-id="eac4b-112">Dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-112">Event data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eac4b-113">Riceve gli eventi dal gestore degli eventi centralizzato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-113">Receives events from the centralized event manager.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eac4b-114">
            <see langword="true" /> se il listener ha gestito l'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-114">
              <see langword="true" /> if the listener handled the event.</span>
          </span>
          <span data-ttu-id="eac4b-115">È considerato errore se l'oggetto <see cref="T:System.Windows.WeakEventManager" /> responsabile della gestione in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] registra un listener per un evento che non viene gestito dal listener stesso.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] to register a listener for an event that the listener does not handle.</span>
          </span>
          <span data-ttu-id="eac4b-116">In ogni caso, il metodo deve restituire <see langword="false" /> se riceve un evento che non riconosce o gestisce.</span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="eac4b-117">Nell'esempio seguente viene implementata <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> per supportare il modello WeakEvent per due eventi ipotetica `ClockwiseSpin` e `CounterclockwiseSpin` ognuna con un oggetto dedicato <xref:System.Windows.WeakEventManager> (non illustrato).</span><span class="sxs-lookup"><span data-stu-id="eac4b-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="eac4b-118">Questa implementazione chiama stub gestori classi per ogni evento supportato, esegue il cast di dati dell'evento (in questo caso i due eventi condividono un tipo di dati evento `SpinEventArgs`).</span><span class="sxs-lookup"><span data-stu-id="eac4b-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="eac4b-119">L'implementazione restituisce `false` se l'evento ricevuto non è uno di quelli previsti.</span><span class="sxs-lookup"><span data-stu-id="eac4b-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="eac4b-120">
            <para>Questo metodo è destinato a tutti i possibili eventi di ricezione in cui il ricevitore è in un elenco di listener. In particolare se l'implementazione per una classe che è in ascolto di più di un evento, è necessario controllare il tipo della matrice in ingresso <paramref name="managerType" /> parametro per stabilire quale evento chiamata corrisponde alla. Questo è il motivo per cui ogni evento che deve essere parte del modello deve disporre di un oggetto dedicato <see cref="T:System.Windows.WeakEventManager" />. Inoltre, il <paramref name="e" /> parametro è tipizzato come generali <see cref="T:System.EventArgs" />. Pertanto, nell'ordine ottenere le proprietà specifiche di dati di evento, sarà necessario eseguire il cast al tipo di dati evento specifico dell'implementazione.  In genere, dopo aver verificato per l'identità dell'evento in base il <see cref="T:System.Windows.WeakEventManager" /> tipo, l'implementazione deve chiamare un gestore di classe privata. Il gestore della classe potrebbe essere presumibilmente il gestore della classe le stesse che consente di gestire l'evento per i listener che vengono aggiunte tramite il modello di eventi convenzionali di aggiunta tramite <see langword="+=" /> all'evento nel mittente. Sezione di esempio seguente fornisce un modello di implementazione approssimativa.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="eac4b-120">
              <para>This method is intended to receive all possible events where the receiver is in a listener list. Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to. This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />. Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />. Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.  Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler. Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender. The following example section provides a rough implementation template.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>