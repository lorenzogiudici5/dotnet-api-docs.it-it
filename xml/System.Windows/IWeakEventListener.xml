<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3ebfdb9ce19336f783b2dfdfa69984aebd3d731d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37492171" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornisce supporto per l'ascolto di eventi alle classi in attesa di ricevere eventi tramite il modello WeakEvent e <see cref="T:System.Windows.WeakEventManager" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.WeakEventManager> (un dispatcher) inoltra un evento chiamando il <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> metodo nelle classi che implementano questa interfaccia e che sono stati aggiunti come listener chiamando <xref:System.Windows.WeakEventManager> metodi in anticipo.  
  
 Il motivo principale per seguire il modello WeakEvent è quando l'origine evento abbia una durata degli oggetti che è potenzialmente indipendente dal listener di eventi. Tramite l'invio dell'evento centrale una <xref:System.Windows.WeakEventManager> Abilita i gestori per i listener venga sottoposto a garbage collection (o eliminarli manualmente) anche se la durata dell'oggetto di origine si estende oltre i listener. Al contrario, un'associazione dell'evento normale utilizzando `+=` o sintassi equivalente evento specifica del linguaggio fa sì che l'origine potenzialmente ancora connessa a un riferimento forte ai gestori. In questo modo i riferimenti di listener venga sottoposto a garbage collection in modo tempestivo.  
  
 Una situazione comune in cui le relazioni tra origini e i listener suggerisce l'uso di questo modello è la gestione degli eventi di aggiornamento provenienti da origini per i data binding.  
  
 È possibile usare il modello WeakEvent in ascolto di eventi che sono esterni all'applicazione. È sufficiente definire un <xref:System.Windows.WeakEventManager> , fornire un comportamento in ascolto nel <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>e utilizzare il <xref:System.Windows.WeakEventManager> per associare il gestore fa riferimento a anziché `+=`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType">Il tipo di <see cref="T:System.Windows.WeakEventManager" /> che chiama questo metodo.</param>
        <param name="sender">Oggetto che ha originato l'evento.</param>
        <param name="e">Dati dell'evento.</param>
        <summary>Riceve gli eventi dal gestore degli eventi centralizzato.</summary>
        <returns>
          <see langword="true" /> se il listener ha gestito l'evento. È considerato errore se l'oggetto <see cref="T:System.Windows.WeakEventManager" /> responsabile della gestione in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] registra un listener per un evento che non viene gestito dal listener stesso. In ogni caso, il metodo deve restituire <see langword="false" /> se riceve un evento che non riconosce o gestisce.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene implementata <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> per supportare il modello WeakEvent per due eventi ipotetica `ClockwiseSpin` e `CounterclockwiseSpin` ognuna con un oggetto dedicato <xref:System.Windows.WeakEventManager> (non illustrato). Questa implementazione chiama stub gestori classi per ogni evento supportato, esegue il cast di dati dell'evento (in questo caso i due eventi condividono un tipo di dati evento `SpinEventArgs`). L'implementazione restituisce `false` se l'evento ricevuto non è uno di quelli previsti.  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Questo metodo è destinato a tutti i possibili eventi di ricezione in cui il ricevitore è in un elenco di listener. In particolare se l'implementazione per una classe che è in ascolto di più di un evento, è necessario controllare il tipo della matrice in ingresso <paramref name="managerType" /> parametro per stabilire quale evento chiamata corrisponde alla. Questo è il motivo per cui ogni evento che deve essere parte del modello deve disporre di un oggetto dedicato <see cref="T:System.Windows.WeakEventManager" />. Inoltre, il <paramref name="e" /> parametro è tipizzato come generali <see cref="T:System.EventArgs" />. Pertanto, nell'ordine ottenere le proprietà specifiche di dati di evento, sarà necessario eseguire il cast al tipo di dati evento specifico dell'implementazione.  In genere, dopo aver verificato per l'identità dell'evento in base il <see cref="T:System.Windows.WeakEventManager" /> tipo, l'implementazione deve chiamare un gestore di classe privata. Il gestore della classe potrebbe essere presumibilmente il gestore della classe le stesse che consente di gestire l'evento per i listener che vengono aggiunte tramite il modello di eventi convenzionali di aggiunta tramite <see langword="+=" /> all'evento nel mittente. Sezione di esempio seguente fornisce un modello di implementazione approssimativa.</para>
        </block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>