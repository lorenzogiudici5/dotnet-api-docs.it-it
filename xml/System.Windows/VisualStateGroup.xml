<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d8ff30d0c1c81006eb2cceb0a23b7c5b2fffae7f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679375" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("States")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contiene oggetti <see cref="T:System.Windows.VisualState" /> che si escludono a vicenda e oggetti <see cref="T:System.Windows.VisualTransition" /> utilizzati per passare da uno stato ad un altro.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogni <xref:System.Windows.VisualStateGroup> contiene una raccolta di <xref:System.Windows.VisualState> oggetti. Oggetto <xref:System.Windows.VisualState> contiene una raccolta di <xref:System.Windows.Media.Animation.Storyboard> oggetti che specificano come l'aspetto del controllo cambia quando il controllo è in un determinato stato. Ad esempio, un <xref:System.Windows.Controls.Button> potrebbe avere un aspetto leggermente diverso quando viene premuto e quando non viene premuto. Due stati che il <xref:System.Windows.Controls.Button> definisce corrisponde a quando viene premuto (`"Pressed"`) e quando non è (`"Normal"`).  
  
 Aggiungere <xref:System.Windows.VisualState> a un controllo impostando la `VisualStateManager.VisualStateGroups` proprietà del controllo associata. Gli Stati che si escludono reciprocamente nello stesso si <xref:System.Windows.VisualStateGroup>. Ad esempio, il <xref:System.Windows.Controls.CheckBox> dispone di due <xref:System.Windows.VisualStateGroup> oggetti. Uno contiene gli stati `Normal`, `MouseOver`, `Pressed`, e `Disabled`. L'altro contenente gli stati, `Checked`, `UnChecked`, e `Indeterminate`. Il <xref:System.Windows.Controls.CheckBox> possono trovarsi in stati `MouseOver` e `UnChecked` allo stesso tempo, ma non può essere il `MouseOver` e `Pressed` stati nello stesso momento.  
  
 Sebbene sia possibile aggiungere <xref:System.Windows.VisualState> oggetti a qualsiasi elemento, sono particolarmente utile per consentire ad altri di ridefinire il comportamento visivo di un <xref:System.Windows.Controls.Control>. Se si crea un controllo personalizzato che utilizza un <xref:System.Windows.Controls.ControlTemplate>, è possibile specificare gli Stati che può essere controllo aggiungendo un <xref:System.Windows.TemplateVisualStateAttribute> nella relativa definizione di classe. Quindi tutti gli utenti che crea un nuovo <xref:System.Windows.Controls.ControlTemplate> per il controllo può aggiungere <xref:System.Windows.VisualState> oggetti al modello. Il <xref:System.Windows.TemplateVisualStateAttribute> Abilita gli strumenti di progettazione, ad esempio Expression Blend, per esporre gli stati del controllo. Stati con lo stesso <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> appartengono allo stesso <xref:System.Windows.VisualStateGroup>.  
  
 Per ulteriori informazioni su come usare <xref:System.Windows.VisualStateGroup> gli oggetti in un <xref:System.Windows.Controls.ControlTemplate>, vedere [personalizzazione dell'aspetto di un controllo esistente tramite la creazione di ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md). Per ulteriori informazioni su come creare controllano che utilizzano il <xref:System.Windows.VisualStateManager>, vedere [la creazione di un controllo che ha un aspetto personalizzabile](~/docs/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance.md).  
  
 Il <xref:System.Windows.VisualStateGroup.Transitions%2A> contiene proprietà <xref:System.Windows.VisualTransition> gli oggetti che vengono applicati quando il controllo la transizione tra stati sono definiti nel <xref:System.Windows.VisualStateGroup>.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un semplice <xref:System.Windows.Controls.ControlTemplate> per un <xref:System.Windows.Controls.Button> contenente uno <xref:System.Windows.Controls.Grid>. Contiene inoltre un <xref:System.Windows.VisualStateGroup> denominato `CommonStates`, che definisce il `MouseOver` e `Normal` stati. Il <xref:System.Windows.VisualStateGroup> dispone anche di un <xref:System.Windows.VisualTransition> che specifica che occorre mezzo secondo il <xref:System.Windows.Controls.Grid> per passare da verde a rosso quando l'utente sposta il puntatore del mouse su di <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'oggetto <see cref="T:System.Windows.VisualState" /> attualmente applicato al controllo.</summary>
        <value>Oggetto <see cref="T:System.Windows.VisualState" /> attualmente applicato al controllo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica in seguito al passaggio di un controllo in uno stato diverso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo evento si verifica dopo che il controllo passa a un nuovo stato e <xref:System.Windows.VisualStateGroup.CurrentStateChanging> si verifica l'evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Si verifica quando un controllo inizia il passaggio in uno stato diverso.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'evento si verifica quando il controllo inizia la transizione tra stati. Se un <xref:System.Windows.VisualTransition> viene applicato alla modifica dello stato, questo evento si verifica quando inizia la transizione. Se un <xref:System.Windows.VisualTransition> non viene applicato, questo evento si verifica dopo che il controllo passa al nuovo stato, ma prima che il <xref:System.Windows.VisualStateGroup.CurrentStateChanged> evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome di <see cref="T:System.Windows.VisualStateGroup" />.</summary>
        <value>Nome di <see cref="T:System.Windows.VisualStateGroup" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gli autori di controllo specificano gli stati il controllo può essere aggiungendo un <xref:System.Windows.TemplateVisualStateAttribute> nella relativa definizione di classe. Stati con lo stesso <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> appartengono allo stesso <xref:System.Windows.VisualStateGroup>. Impostare il <xref:System.Windows.VisualStateGroup.Name%2A> del <xref:System.Windows.VisualStateGroup> al valore del <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> proprietà.  
  
   
  
## Examples  
 L'esempio seguente crea due <xref:System.Windows.VisualStateGroup> oggetti denominati `CommonStates` e `FocusStates`. Il controllo sarà esattamente in uno stato di ciascun <xref:System.Windows.VisualStateGroup> in qualsiasi momento. Per l'esempio completo, vedere [personalizzazione dell'aspetto di un controllo esistente tramite la creazione di ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di oggetti <see cref="T:System.Windows.VisualState" /> che si escludono a vicenda.</summary>
        <value>Raccolta di oggetti <see cref="T:System.Windows.VisualState" /> che si escludono a vicenda.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Nell'esempio seguente viene creato un semplice <xref:System.Windows.Controls.ControlTemplate> per un <xref:System.Windows.Controls.Button> contenente uno <xref:System.Windows.Controls.Grid>. Contiene inoltre un <xref:System.Windows.VisualStateGroup> denominato `CommonStates`, che definisce il `MouseOver` e `Normal` stati. Il <xref:System.Windows.VisualStateGroup> dispone anche di un <xref:System.Windows.VisualTransition> che specifica che occorre mezzo secondo il <xref:System.Windows.Controls.Grid> per passare da verde a rosso quando l'utente sposta il puntatore del mouse su di <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di oggetti <see cref="T:System.Windows.VisualTransition" />.</summary>
        <value>Raccolta di oggetti <see cref="T:System.Windows.VisualTransition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.VisualTransition> oggetti <xref:System.Windows.VisualStateGroup.Transitions%2A> vengono applicate quando il controllo la transizione tra stati definiti nel <xref:System.Windows.VisualStateGroup>.  
  
   
  
## Examples  
 Nell'esempio seguente viene creato un semplice <xref:System.Windows.Controls.ControlTemplate> per un <xref:System.Windows.Controls.Button> contenente uno <xref:System.Windows.Controls.Grid>. Contiene inoltre un <xref:System.Windows.VisualStateGroup> denominato `CommonStates`, che definisce il `MouseOver` e `Normal` stati. Il <xref:System.Windows.VisualStateGroup> dispone anche di un <xref:System.Windows.VisualTransition> che specifica che occorre mezzo secondo il <xref:System.Windows.Controls.Grid> per passare da verde a rosso quando l'utente sposta il puntatore del mouse su di <xref:System.Windows.Controls.Button>.  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>