<Type Name="EventTrigger" FullName="System.Windows.EventTrigger">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb4566079a39397df3b4c7b2b5c0c5ef441585ed" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30679015" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class EventTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Actions")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Rappresenta un trigger che applica un set di azioni in risposta a un evento.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Trigger> gli oggetti hanno la <xref:System.Windows.Trigger.Setters%2A>, <xref:System.Windows.TriggerBase.EnterActions%2A>, e <xref:System.Windows.TriggerBase.ExitActions%2A> proprietà che si applicano modifiche o azioni in base allo stato di determinate proprietà, mentre <xref:System.Windows.EventTrigger> oggetti avviano un set di <xref:System.Windows.EventTrigger.Actions%2A> quando si verifica un evento indirizzato specifico. Ad esempio, si desidera utilizzare un <xref:System.Windows.EventTrigger> per avviare un set di animazioni quando il puntatore del mouse è posizionato sopra un [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] controllo. A differenza di <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> non ha alcun concetto di fine dello stato, pertanto l'azione non viene annullata quando la condizione che ha generato l'evento non è più così.  
  
 Si noti che quando si utilizza un <xref:System.Windows.EventTrigger>, è necessario scegliere gli eventi che non interferiscono con il comportamento intrinseco del controllo. I controlli come <xref:System.Windows.Controls.Button> o <xref:System.Windows.Controls.TextBox> eseguire azioni specifiche su eventi di input dell'utente, ad esempio clic del mouse e gli eventi della tastiera. Ad esempio, se si disegna un pulsante e si tenta di impostare il <xref:System.Windows.Input.Mouse.MouseDown> evento come il <xref:System.Windows.EventTrigger.RoutedEvent%2A> di un <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> mai applicata perché l'evento viene prima gestito dal pulsante. In alternativa, è possibile utilizzare il <xref:System.Windows.Input.Mouse.PreviewMouseDown> evento o un altro evento.  
  
 Quando si utilizza l'associazione dati, se si utilizza il <xref:System.Windows.Data.Binding.TargetUpdated> evento, è necessario impostare il <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valore il <xref:System.Windows.Data.Binding> oggetto `true` per l'evento da generare.  
  
 Aggiunta di un <xref:System.Windows.TriggerAction> figlio a un <xref:System.Windows.EventTrigger> oggetto aggiunge in modo implicito per il <xref:System.Windows.TriggerActionCollection> per il <xref:System.Windows.EventTrigger> oggetto.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare i trigger di evento in uno stile per animare la <xref:System.Windows.UIElement.MouseEnter> e <xref:System.Windows.UIElement.MouseLeave> gli eventi di un <xref:System.Windows.FrameworkElement>. In questo esempio, il <xref:System.Windows.Style> ha il <xref:System.Windows.Style.TargetType%2A> impostato su <xref:System.Windows.Shapes.Rectangle>. Pertanto, non è necessario qualificare il `MouseEnter` e `MouseLeave` i nomi degli eventi con il nome della classe.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.EventSetter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.EventTrigger" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.EventTrigger" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventTrigger (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventTrigger(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent">
          <see cref="T:System.Windows.RoutedEvent" /> che attiva il trigger.</param>
        <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.EventTrigger" /> con l'evento specificato.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerActionCollection Actions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerActionCollection Actions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.Actions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Actions As TriggerActionCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerActionCollection ^ Actions { System::Windows::TriggerActionCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerActionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene la raccolta di azioni da applicare quando si verifica l'evento.</summary>
        <value>Il valore predefinito è una raccolta vuota.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A differenza di <xref:System.Windows.Trigger>, <xref:System.Windows.EventTrigger> non ha alcun concetto di fine dello stato, pertanto l'azione non viene annullata quando la condizione che ha generato l'evento non è più così.  
  
 Aggiunta di un <xref:System.Windows.TriggerAction> figlio a un <xref:System.Windows.EventTrigger> oggetto aggiunge in modo implicito per il <xref:System.Windows.TriggerActionCollection> per il <xref:System.Windows.EventTrigger> oggetto.  
  
> [!NOTE]
>  Questa proprietà può essere impostata solo [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] utilizzando la sintassi di raccolta illustrato, oppure accedendo all'oggetto collection e utilizzando i vari metodi, ad esempio Add. La proprietà per accedere all'oggetto della raccolta è di sola lettura, la raccolta è in lettura / scrittura.  
  
<a name="xamlPropertyElementUsage_Actions"></a>   
## <a name="xaml-property-element-usage"></a>Utilizzo della sintassi XAML per elementi proprietà  
  
```  
<object>  
  <object.Actions>  
    OneOrMoreTriggerActions  
  </object.Actions>  
</object>  
```  
  
<a name="xamlValues_Actions"></a>   
## <a name="xaml-values"></a>Valori XAML  
 *OneOrMoreTriggerActions*  
 Uno o più <xref:System.Windows.TriggerAction> oggetti.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare i trigger di evento in uno stile per animare la <xref:System.Windows.UIElement.MouseEnter> e <xref:System.Windows.UIElement.MouseLeave> gli eventi di un <xref:System.Windows.FrameworkElement>. Come indicato in precedenza, l'aggiunta una <xref:System.Windows.TriggerAction> figlio a un <xref:System.Windows.EventTrigger> oggetto aggiunge in modo implicito per il <xref:System.Windows.TriggerActionCollection> per il <xref:System.Windows.EventTrigger> oggetto. Pertanto, in questo esempio, `<EventTrigger.Actions>` è implicito.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto <see cref="T:System.Windows.TriggerAction" /> da aggiungere all'insieme <see cref="P:System.Windows.EventTrigger.Actions" /> di questo trigger.</param>
        <summary>Aggiunge l'oggetto specificato all'insieme <see cref="P:System.Windows.EventTrigger.Actions" /> del trigger dell'evento corrente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Questo parametro non viene usato.</param>
        <summary>Questo metodo non è supportato e sfocia in un'eccezione.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta <see cref="T:System.Windows.RoutedEvent" /> che attiverà questo trigger.</summary>
        <value>Il valore predefinito è <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.EventTrigger>Quando si verifica l'evento indirizzato specificato applicheranno un set di azioni. Ad esempio, si desidera utilizzare <xref:System.Windows.EventTrigger>per avviare un set di animazioni quando il puntatore del mouse è posizionato sopra un [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] controllo.  
  
 Se il modello o lo stile che contiene questo <xref:System.Windows.EventTrigger> non dispone di `TargetType` proprietà specificata, quindi è necessario qualificare il nome dell'evento con il nome della classe utilizzando il `ClassName.EventName` sintassi.  
  
 <xref:System.Windows.EventTrigger> gli oggetti non possono gestire eventi che sono già stati <xref:System.Windows.RoutedEventArgs.Handled%2A>. I controlli come <xref:System.Windows.Controls.Button> o <xref:System.Windows.Controls.TextBox> eseguire azioni specifiche su eventi di input dell'utente, ad esempio clic del mouse e gli eventi della tastiera. Ad esempio, se si disegna un pulsante e si tenta di impostare il <xref:System.Windows.Input.Mouse.MouseDown> evento come il <xref:System.Windows.EventTrigger.RoutedEvent%2A> di un <xref:System.Windows.EventTrigger>, <xref:System.Windows.EventTrigger> mai applicata perché l'evento viene prima gestito dal pulsante. In alternativa, è possibile utilizzare il <xref:System.Windows.Input.Mouse.PreviewMouseDown> evento o un altro evento.  
  
 Quando si utilizza l'associazione dati, se si utilizza il <xref:System.Windows.Data.Binding.TargetUpdated> evento, è necessario impostare il <xref:System.Windows.Data.Binding.NotifyOnTargetUpdated%2A> valore il <xref:System.Windows.Data.Binding> oggetto su true per l'evento da generare.  
  
   
  
## Examples  
 In questo esempio viene illustrato come utilizzare i trigger di evento in uno stile per animare la <xref:System.Windows.UIElement.MouseEnter> e <xref:System.Windows.UIElement.MouseLeave> gli eventi di un <xref:System.Windows.FrameworkElement>. In questo esempio, il <xref:System.Windows.Style> ha il <xref:System.Windows.Style.TargetType%2A> impostato su <xref:System.Windows.Shapes.Rectangle>. Pertanto, non è necessario qualificare il `MouseEnter` e `MouseLeave` i nomi degli eventi con il nome della classe.  
  
 [!code-xaml[StyleEventTriggerAnimation#EventTriggerSnippet](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleEventTriggerAnimation/CS/Default.xaml#eventtriggersnippet)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La proprietà <see cref="P:System.Windows.EventTrigger.RoutedEvent" /> non può essere null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeActions">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.ShouldSerializeActions" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeActions () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeActions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restituisce un valore che indica se i processi di serializzazione devono serializzare il valore effettivo della proprietà <see cref="P:System.Windows.EventTrigger.Actions" /> in istanze di questa classe.</summary>
        <returns>Restituisce <see langword="true" /> se il valore della proprietà <see cref="P:System.Windows.EventTrigger.Actions" /> deve essere serializzato. In caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceName">
      <MemberSignature Language="C#" Value="public string SourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventTrigger.SourceName" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene o imposta il nome dell'oggetto con l'evento che attiva il trigger. Viene usata solo dai trigger di elemento o dai trigger di modello.</summary>
        <value>Il valore predefinito è <see langword="null" />. Se il valore di questa proprietà è <see langword="null" />, l'elemento controllato per la generazione dell'evento è il padre basato su modelli o la radice dell'albero logico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 È possibile impostare questa proprietà per il nome di qualsiasi elemento all'interno dell'ambito in cui la raccolta di trigger (la raccolta da questo <xref:System.Windows.EventTrigger> fa parte di) viene applicato. In genere si tratta di un elemento denominato che si trova all'interno del modello contenente questo <xref:System.Windows.EventTrigger>. Se si imposta la <xref:System.Windows.FrameworkElement.Triggers%2A> proprietà direttamente un elemento, vi è un elemento denominato all'interno dell'ambito di tale elemento padre.  
  
 È possibile assegnare un oggetto utilizzando il [direttiva X:Name](~/docs/framework/xaml-services/x-name-directive.md) sintassi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se <see cref="T:System.Windows.EventTrigger" /> è in uso, non può essere modificato.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Oggetto figlio da aggiungere.</param>
        <summary>Aggiunge un oggetto figlio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.EventTrigger> a un'interfaccia <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Testo da aggiungere all'oggetto.</param>
        <summary>Aggiunge il contenuto di testo di un nodo all'oggetto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Questo membro è un’implementazione esplicita di un membro di interfaccia. Può essere utilizzato solo quando si esegue il cast dell'istanza <xref:System.Windows.EventTrigger> a un'interfaccia <xref:System.Windows.Markup.IAddChild>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>