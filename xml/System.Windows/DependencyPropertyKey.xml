<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3cd6fbb925314b32cf6f09ce204f5374db64928c" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39765180" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyKey = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce l'identificatore di una proprietà di dipendenza per accesso in scrittura limitato a una proprietà di dipendenza di sola lettura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> le istanze vengono ottenute come valore restituito di una chiamata di registrazione di proprietà di dipendenza usando i metodi <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> o <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 I tipi di registrano una proprietà di dipendenza è possono usare la <xref:System.Windows.DependencyPropertyKey> nelle chiamate a <xref:System.Windows.DependencyObject.SetValue%2A> e <xref:System.Windows.DependencyObject.ClearValue%2A> che modificano il valore della proprietà come parte della logica di classe. Se consentito dal livello di accesso della chiave, le classi correlate possono usare anche la chiave e la proprietà di dipendenza. Ad esempio, è possibile dichiarare la chiave come interni e altri tipi all'interno dello stesso assembly possono inoltre impostare tale proprietà di dipendenza.  
  
 Il <xref:System.Windows.DependencyPropertyKey> restituito dalla dipendenza di sola lettura registrazione della proprietà non deve essere reso pubblica, perché esporre la chiave rende la proprietà impostabili, annullando così il punto di registrazione come una proprietà di dipendenza di sola lettura. Inoltre, esporre la chiave provoca una mancata corrispondenza tra la dipendenza disponibile i comportamenti di proprietà e i relativi [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementazioni del wrapper della proprietà, ovvero corretta progettazione delle classi.  
  
 Anziché esporre la chiave stessa, è consigliabile esporre le <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> pari al <xref:System.Windows.DependencyPropertyKey> come una `public static readonly` <xref:System.Windows.DependencyProperty> nella classe. In questo modo la proprietà restituire un identificatore di proprietà di dipendenza valido per alcune operazioni di sistema di proprietà quali l'enumerazione di valori impostati localmente. Tuttavia, l'identificatore così ottenuto è privo di funzionalità complete di un <xref:System.Windows.DependencyProperty> per molte operazioni di sistema di proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente registra una proprietà di dipendenza di sola lettura e Usa anche la chiave per due scopi in altri membri della classe: implementare il wrapper"get" e come identificatore per un'operazione di determinazione protetto che imposta il valore basato su calcoli valori di altre proprietà.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore della proprietà di dipendenza associato all'identificatore della proprietà di dipendenza di sola lettura specializzato.</summary>
        <value>Identificatore della proprietà di dipendenza pertinente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valore consente identificatore una sola lettura della proprietà di partecipare a comuni operazioni di sistema di proprietà utilizzando alcune delle stesse interfacce utilizzate per le proprietà di dipendenza di lettura / scrittura.  
  
 Per implementare la funzione di accesso get per una proprietà di dipendenza di sola lettura, è necessario creare ed esporre un <xref:System.Windows.DependencyProperty> identificatore nella classe. Ciò ha due scopi:  
  
-   La classe necessita di <xref:System.Windows.DependencyProperty> identificatore per implementare la funzione di accesso get per il wrapper della proprietà. Si utilizza il <xref:System.Windows.DependencyProperty> come parametro per il <xref:System.Windows.DependencyObject.GetValue%2A> chiamata che implementa la funzione di accesso get.  
  
-   <xref:System.Windows.DependencyProperty> gli identificatori di espongono proprietà di dipendenza per il sistema di proprietà in modo che altri metodi che si basano su metadati possano accedervi in un formato standard. Ad esempio, se è stato chiamato <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> su alcuni <xref:System.Windows.DependencyObject> e ottiene un'enumerazione di proprietà impostate localmente (valori e gli identificatori), l'identificatore restituito per una proprietà di dipendenza di sola lettura sarebbe il <xref:System.Windows.DependencyProperty> valore anziché la chiave. Non esporre una <xref:System.Windows.DependencyProperty> identificatore non aumenta la sicurezza delle proprietà di dipendenza di sola lettura in alcun modo, è molto più operazioni che coinvolgono la proprietà più complesse per le classi derivate successivi e istanze di classe.  
  
 Per esporre il <xref:System.Windows.DependencyProperty> identificatore di classe, si chiama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> direttamente nella chiave. Usare questo valore per creare un `public static readonly` <xref:System.Windows.DependencyProperty> identificatore sulla classe, che affianca il <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 Nell'esempio seguente viene chiamato <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> per esporre il <xref:System.Windows.DependencyProperty> identificatore (`AquariumGraphicProperty`) per il `AquariumGraphic` proprietà di dipendenza di sola lettura in una classe. L'esempio mostra anche il <xref:System.Windows.DependencyPropertyKey> creazione (come un membro interno) e la funzione di accesso get `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyPropertyKey.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Tipo della proprietà di dipendenza e in cui deve essere eseguito l'override dei metadati.</param>
        <param name="typeMetadata">Metadati forniti per il tipo.</param>
        <summary>Esegue l'override dei metadati di una proprietà di dipendenza di sola lettura rappresentata da questo identificatore di proprietà.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'override dei metadati su una proprietà di dipendenza di sola lettura viene eseguita per motivi analoghi a eseguire l'override dei metadati su una proprietà di dipendenza di lettura / scrittura ed è limitato per l'accesso a livello di chiave perché comportamenti specificati nei metadati possono modificare il comportamento di set (il il valore predefinito, ad esempio).  
  
 Come con le proprietà di dipendenza di lettura / scrittura, si esegue l'override dei metadati su una proprietà di dipendenza di sola lettura deve essere effettuata solo prima che la proprietà venga resa utilizzabile dal sistema di proprietà (ciò equivale al tempo che specifica le istanze degli oggetti che registrano il proprietà vengono create istanze). Le chiamate a <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> deve essere eseguita solo all'interno dei costruttori statici del tipo che fornisce se stesso come il `forType` parametro di questo metodo, o equivalente inizializzazione per la classe.  
  
 Questo metodo inoltra in modo efficace per la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> , passando il <xref:System.Windows.DependencyPropertyKey> istanza come parametro della chiave.  
  
   
  
## Examples  
 Nell'esempio seguente esegue l'override dei metadati per una proprietà di dipendenza di sola lettura esistente che eredita una classe. In questo caso, l'obiettivo di scenario è aggiungere un callback soggetti a coercizione del valore che non disponevano di metadati della proprietà di base. È anche possibile eseguire l'override dei metadati per uno degli altri motivi per cui si esegue l'override dei metadati è in genere appropriata (la modifica il valore predefinito, aggiungendo <xref:System.Windows.FrameworkPropertyMetadataOptions> valori e così via.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tentativo di override dei metadati in una proprietà di dipendenza di sola lettura, che non può essere eseguito utilizzando questa firma.</exception>
        <exception cref="T:System.ArgumentException">I metadati sono già stati definiti per la proprietà, in quanto la proprietà è disponibile nel tipo specificato.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>