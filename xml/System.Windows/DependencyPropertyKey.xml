<Type Name="DependencyPropertyKey" FullName="System.Windows.DependencyPropertyKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9a12e407bc5345e416145c390f8fcd6f8262c445" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30676975" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DependencyPropertyKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyPropertyKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyKey" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyPropertyKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyKey sealed" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornisce l'identificatore di una proprietà di dipendenza per accesso in scrittura limitato a una proprietà di dipendenza di sola lettura.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.DependencyPropertyKey> le istanze vengono ottenute come valore restituito di una chiamata di registrazione di proprietà di dipendenza utilizzando i metodi <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> o <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.  
  
 I tipi che registrano una proprietà di dipendenza è possono utilizzare il <xref:System.Windows.DependencyPropertyKey> nelle chiamate a <xref:System.Windows.DependencyObject.SetValue%2A> e <xref:System.Windows.DependencyObject.ClearValue%2A> che modificano il valore della proprietà come parte della logica di classe. Se consentito dal livello di accesso della chiave, le classi correlate possono utilizzare anche la chiave e la proprietà di dipendenza. Ad esempio, è possibile dichiarare la chiave come interna, e altri tipi all'interno dello stesso assembly possono inoltre impostare tale proprietà di dipendenza.  
  
 Il <xref:System.Windows.DependencyPropertyKey> restituito dalla dipendenza di sola lettura e registrazione di proprietà non deve essere reso pubblica, perché esporre la chiave rende la proprietà impostabili, annullando così il punto di registrazione come una proprietà di dipendenza di sola lettura. Inoltre, esponendo la chiave provoca una mancata corrispondenza tra la dipendenza disponibile comportamenti di proprietà e il relativo [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] implementazioni del wrapper della proprietà, ovvero corretta progettazione delle classi.  
  
 Anziché esporre la chiave stessa, è consigliabile esporre il <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valore il <xref:System.Windows.DependencyPropertyKey> come un `public static readonly` <xref:System.Windows.DependencyProperty> nella classe. In questo modo la proprietà restituire un identificatore della proprietà di dipendenza valido per alcune operazioni di sistema di proprietà quali l'enumerazione di valori impostati in locale. Tuttavia, l'identificatore così ottenuto non dispone di tutte le funzionalità di un <xref:System.Windows.DependencyProperty> per molte operazioni di sistema di proprietà.  
  
   
  
## Examples  
 Nell'esempio seguente registra una proprietà di dipendenza di sola lettura e utilizza anche la chiave per due scopi in altri membri della classe: implementazione get "wrapper" e come identificatore per un'operazione di determinazione protetto che imposta il valore in base a calcoli valori di altre proprietà.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyPropertyKey.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ottiene l'identificatore della proprietà di dipendenza associato all'identificatore della proprietà di dipendenza di sola lettura specializzato.</summary>
        <value>Identificatore della proprietà di dipendenza pertinente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Il <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> valore consente identificatore una proprietà di sola lettura di partecipare a comuni operazioni di sistema di proprietà utilizzando alcune delle interfacce utilizzate per le proprietà di dipendenza di sola lettura.  
  
 Per implementare la funzione di accesso get della proprietà di dipendenza di sola lettura, è necessario creare ed esporre un <xref:System.Windows.DependencyProperty> identificatore nella classe. Questo ha due scopi:  
  
-   La classe necessita di <xref:System.Windows.DependencyProperty> identificatore per implementare la funzione di accesso get per il wrapper della proprietà. Utilizzare il <xref:System.Windows.DependencyProperty> come parametro per il <xref:System.Windows.DependencyObject.GetValue%2A> chiamata che implementa la funzione di accesso get.  
  
-   <xref:System.Windows.DependencyProperty> gli identificatori espongono proprietà di dipendenza per il sistema di proprietà in modo che altri metodi che si basano sui metadati possano accedervi in un formato standard. Ad esempio, se è stato chiamato <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> alcuni <xref:System.Windows.DependencyObject> e ottiene un'enumerazione di proprietà impostate localmente (valori e identificatori), l'identificatore restituito per una proprietà di dipendenza di sola lettura il <xref:System.Windows.DependencyProperty> valore anziché la chiave. Non esporre una <xref:System.Windows.DependencyProperty> identificatore non aumenta la sicurezza della proprietà di dipendenza di sola lettura in alcun modo, ma rende le operazioni che coinvolgono la proprietà più complesse per le classi derivate successive e le istanze di classe.  
  
 Per esporre il <xref:System.Windows.DependencyProperty> identificatore nella classe, chiamare <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> direttamente nella chiave. Utilizzare questo valore per creare un `public static readonly` <xref:System.Windows.DependencyProperty> identificatore sulla classe, che rende parallelo di <xref:System.Windows.DependencyPropertyKey>.  
  
   
  
## Examples  
 L'esempio seguente chiama <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> per esporre il <xref:System.Windows.DependencyProperty> identificatore (`AquariumGraphicProperty`) per il `AquariumGraphic` proprietà di dipendenza di sola lettura in una classe. L'esempio mostra anche la <xref:System.Windows.DependencyPropertyKey> creazione (come un membro interno) e la funzione di accesso get `AquariumGraphic`.  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType">Tipo della proprietà di dipendenza e in cui deve essere eseguito l'override dei metadati.</param>
        <param name="typeMetadata">Metadati forniti per il tipo.</param>
        <summary>Esegue l'override dei metadati di una proprietà di dipendenza di sola lettura rappresentata da questo identificatore di proprietà.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 L'override dei metadati su una proprietà di dipendenza di sola lettura viene eseguita per motivi analoghi a eseguire l'override dei metadati su una proprietà di dipendenza di sola lettura e con restrizioni per l'accesso a livello di chiave perché comportamenti specificati nei metadati possono modificare il comportamento di set (la il valore predefinito, ad esempio).  
  
 Come con le proprietà di dipendenza di sola lettura, si esegue l'override dei metadati su una proprietà di dipendenza di sola lettura deve essere effettuata solo prima di tale proprietà viene inserita in uso dal sistema di proprietà (ciò corrisponde a quella che specifica le istanze degli oggetti che registrano il proprietà viene creata un'istanza). Le chiamate a <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> deve essere eseguita solo all'interno dei costruttori statici del tipo che fornisce se stesso come il `forType` parametro del metodo o di inizializzazione equivalente per la classe.  
  
 Questo metodo inoltra in modo efficace per la <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> , passando il <xref:System.Windows.DependencyPropertyKey> istanza come parametro di chiave.  
  
   
  
## Examples  
 Nell'esempio seguente esegue l'override dei metadati per una proprietà di dipendenza di sola lettura esistente che eredita una classe. In questo caso, l'obiettivo di scenario è stata per aggiungere un callback di valore soggetto a coercizione che non dispone dei metadati della proprietà di base. È anche possibile eseguire l'override dei metadati per i motivi che in genere si esegue l'override dei metadati è appropriata (modifica il valore predefinito, aggiunta di <xref:System.Windows.FrameworkPropertyMetadataOptions> valori, ecc.)  
  
 [!code-csharp[WPFAquariumSln#RODPOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodpoverride)]
 [!code-vb[WPFAquariumSln#RODPOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Tentativo di override dei metadati in una proprietà di dipendenza di sola lettura, che non può essere eseguito utilizzando questa firma.</exception>
        <exception cref="T:System.ArgumentException">I metadati sono già stati definiti per la proprietà, in quanto la proprietà è disponibile nel tipo specificato.</exception>
        <altmember cref="T:System.Windows.DependencyProperty" />
        <altmember cref="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      </Docs>
    </Member>
  </Members>
</Type>