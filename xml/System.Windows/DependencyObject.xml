<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f336eba4edb0ad64b57c0fcad8979eddefe757d8" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39808282" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="21ab0-101">Rappresenta un oggetto che fa parte del sistema di proprietà di dipendenza.</span>
      <span class="sxs-lookup">
        <span data-stu-id="21ab0-101">Represents an object that participates in the dependency property system.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-102">Il <xref:System.Windows.DependencyObject> classe abilita [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] servizi del sistema di proprietà nelle varie classi derivate.</span><span class="sxs-lookup"><span data-stu-id="21ab0-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="21ab0-103">Funzione principale del sistema di proprietà è per calcolare i valori delle proprietà e per fornire la notifica di sistema sui valori che sono stati modificati.</span><span class="sxs-lookup"><span data-stu-id="21ab0-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="21ab0-104">Un'altra classe principale che partecipa al sistema di proprietà è <xref:System.Windows.DependencyProperty>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="21ab0-105"><xref:System.Windows.DependencyProperty> Abilita la registrazione delle proprietà di dipendenza nel sistema di proprietà e vengono fornite informazioni di identificazione e su ogni proprietà di dipendenza, mentre <xref:System.Windows.DependencyObject> come una classe di base consente agli oggetti di usare le proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="21ab0-106"><xref:System.Windows.DependencyObject> servizi e le caratteristiche seguenti:</span><span class="sxs-lookup"><span data-stu-id="21ab0-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="21ab0-107">Supporto per l'hosting di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-107">Dependency property hosting support.</span></span> <span data-ttu-id="21ab0-108">Si registra una proprietà di dipendenza chiamando il <xref:System.Windows.DependencyProperty.Register%2A> (metodo) e l'archiviazione di valore restituito del metodo come un campo statico pubblico della classe.</span><span class="sxs-lookup"><span data-stu-id="21ab0-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="21ab0-109">Supporto per l'hosting proprietà associata.</span><span class="sxs-lookup"><span data-stu-id="21ab0-109">Attached property hosting support.</span></span> <span data-ttu-id="21ab0-110">Si registra una proprietà associata chiamando il <xref:System.Windows.DependencyProperty.RegisterAttached%2A> (metodo) e l'archiviazione di valore restituito del metodo come un campo di sola lettura statico pubblico della classe.</span><span class="sxs-lookup"><span data-stu-id="21ab0-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="21ab0-111">(Sono inoltre presenti requisiti di altri membri; si noti che questo rappresenti un [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] implementazione specifica per le proprietà associate.</span><span class="sxs-lookup"><span data-stu-id="21ab0-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="21ab0-112">Per informazioni dettagliate, vedere [Cenni preliminari sulle proprietà associate](~/docs/framework/wpf/advanced/attached-properties-overview.md).) La proprietà associata può quindi essere impostata su qualsiasi classe che deriva da <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-112">For details, see [Attached Properties Overview](~/docs/framework/wpf/advanced/attached-properties-overview.md).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="21ab0-113">Get, set e deselezionare i metodi di utilità per i valori di qualsiasi proprietà di dipendenza che esiste nel <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="21ab0-114">I metadati, soggetti a coercizione supporto dei valori, la notifica di modifica proprietà e i callback di sostituzione per le proprietà di dipendenza o le proprietà associate.</span><span class="sxs-lookup"><span data-stu-id="21ab0-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="21ab0-115">Inoltre, il <xref:System.Windows.DependencyObject> classe facilita i metadati della proprietà per ogni proprietario di una proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="21ab0-116">Una classe di base comune per le classi derivate da <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, o <xref:System.Windows.Media.Visual>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="21ab0-117">(<xref:System.Windows.UIElement>, un'altra classe di elementi di base, ha una gerarchia di classi che include <xref:System.Windows.Media.Visual>.)</span><span class="sxs-lookup"><span data-stu-id="21ab0-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-118">L'esempio seguente deriva dalla <xref:System.Windows.DependencyObject> per creare una nuova classe astratta.</span><span class="sxs-lookup"><span data-stu-id="21ab0-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="21ab0-119">La classe quindi Registra una proprietà associata e include i membri di supporto per la proprietà associata.</span><span class="sxs-lookup"><span data-stu-id="21ab0-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-120">Inizializza una nuova istanza della classe <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-121">Cancella il valore locale di una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-121">Clears the local value of a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-122">Proprietà di dipendenza da cancellare, identificata da un riferimento a un oggetto <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-123">Cancella il valore locale di una proprietà.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-123">Clears the local value of a property.</span>
          </span>
          <span data-ttu-id="21ab0-124">La proprietà da cancellare è specificata da un identificatore <see cref="T:System.Windows.DependencyProperty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-125">Cancellare il valore della proprietà chiamando <xref:System.Windows.DependencyObject.ClearValue%2A> non necessariamente assegnare una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="21ab0-126">Deselezionare la proprietà solo in particolare Cancella qualsiasi valore locale sono stati applicati.</span><span class="sxs-lookup"><span data-stu-id="21ab0-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="21ab0-127">Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-127">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-128">Nell'esempio seguente esegue l'iterazione di tutte le proprietà che presentano valori locali impostati su un oggetto, quindi chiama <xref:System.Windows.DependencyObject.ClearValue%2A> per cancellare i valori di tali proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-129">Si è tentato di chiamare <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> in un oggetto <see cref="T:System.Windows.DependencyObject" /> sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="21ab0-130">Chiave per la proprietà di dipendenza da cancellare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-130">The key for the dependency property to be cleared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-131">Cancella il valore locale di una proprietà di sola lettura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-131">Clears the local value of a read-only property.</span>
          </span>
          <span data-ttu-id="21ab0-132">La proprietà da cancellare è specificata da un oggetto <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-133">Oggetto <xref:System.Windows.DependencyPropertyKey> identifica una proprietà di dipendenza di sola lettura per le operazioni di sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="21ab0-134">Le classi che definiscono le proprietà di dipendenza di sola lettura non devono esporre questa chiave con accesso pubblico.</span><span class="sxs-lookup"><span data-stu-id="21ab0-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="21ab0-135">Una chiave esposta pubblicamente fornisce un percorso di code pubbliche che nega il carattere di sola lettura della proprietà, se i metodi come <xref:System.Windows.DependencyObject.ClearValue%2A> o <xref:System.Windows.DependencyObject.SetValue%2A> può essere chiamata all'esterno della classe o un assembly, facendo riferimento alla chiave.</span><span class="sxs-lookup"><span data-stu-id="21ab0-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="21ab0-136">Cancellare il valore della proprietà chiamando <xref:System.Windows.DependencyObject.ClearValue%2A> non necessariamente assegnare una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="21ab0-137">Cancellazione del valore in modo specifico solo Cancella qualsiasi valore locale sono stati applicati.</span><span class="sxs-lookup"><span data-stu-id="21ab0-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="21ab0-138">Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-138">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-139">Si è tentato di chiamare <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> in un oggetto <see cref="T:System.Windows.DependencyObject" /> sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-140">Identificatore della proprietà di dipendenza da assegnare forzatamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-140">The identifier for the dependency property to coerce.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-141">Assegna forzatamente il valore della proprietà di dipendenza specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-141">Coerces the value of the specified dependency property.</span>
          </span>
          <span data-ttu-id="21ab0-142">Questa operazione viene eseguita richiamando qualsiasi funzione <see cref="T:System.Windows.CoerceValueCallback" /> specificata nei metadati della proprietà di dipendenza esistente nell'oggetto <see cref="T:System.Windows.DependencyObject" /> chiamante.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-143">Oltre a essere richiamato in modo esplicito tramite la chiamata <xref:System.Windows.DependencyObject.CoerceValue%2A>, il <xref:System.Windows.CoerceValueCallback> una dipendenza da proprietà inoltre viene chiamata internamente ogni volta che il valore di proprietà di dipendenza viene rivalutato dal [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="21ab0-144">Quando si richiama il <xref:System.Windows.DependencyObject.CoerceValue%2A> metodo, si richiama il callback soggetti a coercizione del valore della proprietà specificato.</span><span class="sxs-lookup"><span data-stu-id="21ab0-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="21ab0-145">In genere si richiamerà <xref:System.Windows.DependencyObject.CoerceValue%2A> solo se si sa che esista un callback di soggetti a coercizione del valore, e se si conoscono i criteri del callback per l'assegnazione forzata.</span><span class="sxs-lookup"><span data-stu-id="21ab0-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="21ab0-146">Lo scenario più comune per la chiamata <xref:System.Windows.DependencyObject.CoerceValue%2A> si trova all'interno di callback di modifica di proprietà o la gestione delle classe di proprietà correlate che influenzano i rispettivi valori in modo dipendente.</span><span class="sxs-lookup"><span data-stu-id="21ab0-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="21ab0-147">Per altre informazioni, vedere [Callback e convalida delle proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-147">For more information, see [Dependency Property Callbacks and Validation](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-148">Nell'esempio seguente viene chiamato <xref:System.Windows.DependencyObject.CoerceValue%2A> all'interno di un <xref:System.Windows.PropertyChangedCallback> implementazione che viene utilizzato come il <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> per una proprietà di dipendenza diverse sulla stessa classe.</span><span class="sxs-lookup"><span data-stu-id="21ab0-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="21ab0-149">Si tratta di un modello comune per introdurre il valore true dipendenze tra le proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-150">Il parametro <paramref name="dp" /> specificato o il relativo valore non è valido o non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-151">Ottiene la classe <see cref="T:System.Windows.DependencyObjectType" /> che include il tipo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] di questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21ab0-152">Classe <see cref="T:System.Windows.DependencyObjectType" /> che include il tipo [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] di questa istanza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-153">Questa proprietà è utile se un oggetto restituito da un metodo ha un tipo di valore restituito di <xref:System.Windows.DependencyObject> e si desidera eseguire proprietà sistema specifiche operazioni su di esso a seconda del tipo.</span><span class="sxs-lookup"><span data-stu-id="21ab0-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="21ab0-154">Ad esempio risulta più efficiente per chiamare <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> usando il <xref:System.Windows.DependencyObjectType> anziché il [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] tipo.</span><span class="sxs-lookup"><span data-stu-id="21ab0-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="21ab0-155"><xref:System.Windows.DependencyObjectType> facilita le ricerche più veloci.</span><span class="sxs-lookup"><span data-stu-id="21ab0-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-156">Nell'esempio seguente pseudocodice `MySubClass` preannuncia che altre classi derivate potrebbero modificare il valore predefinito di `MyCustom` proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="21ab0-157">La classe implementa un costruttore predefinito che può determinare l'effettiva classe derivata sfruttando i vantaggi di polimorfismo <xref:System.Windows.DependencyObjectType> valore ogni volta che il costruttore viene utilizzato come instantiator una classe derivata.</span><span class="sxs-lookup"><span data-stu-id="21ab0-157">The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="21ab0-158">Oggetto <see cref="T:System.Windows.DependencyObject" /> da confrontare con l'istanza corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-159">Determina se l'oggetto <see cref="T:System.Windows.DependencyObject" /> specificato equivale all'oggetto <see cref="T:System.Windows.DependencyObject" /> corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-160">
            <see langword="true" /> se le due istanze sono uguali. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-160">
              <see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-161">Questa implementazione è solo l'uguaglianza dei riferimenti e non tenta di valutare l'uguaglianza di valori delle proprietà contenute.</span><span class="sxs-lookup"><span data-stu-id="21ab0-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="21ab0-162">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> esegue l'override e quindi esegue il sealing basic due <see cref="T:System.Object" /> metodi: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> e <see cref="M:System.Windows.DependencyObject.GetHashCode" />. La chiamata esegue l'override di <see cref="T:System.Object" /> implementazioni, determinando un comportamento di verificarne l'uguaglianza di oggetti. Lo scopo di questi override intenzionali è impedire che le classi derivate tenti di definire l'uguaglianza di un valore per un <see cref="T:System.Windows.DependencyObject" />. Predicati di uguaglianza per valore <see cref="T:System.Windows.DependencyObject" /> mai saranno accurati a causa delle funzionalità Modifica valore proprietà innata di un <see cref="T:System.Windows.DependencyObject" /> e le relative proprietà di dipendenza. Ciò include fondamentali [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funzionalità quali associazione dati e di [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-162">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-163">Ottiene un codice hash per l'oggetto <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-163">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-164">Codice hash di valori interi a 32 bit con segno.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-164">A signed 32-bit integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="21ab0-165">
            <para>
              <see cref="T:System.Windows.DependencyObject" /> esegue l'override e quindi esegue il sealing due <see cref="T:System.Object" /> metodi: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> e <see cref="M:System.Windows.DependencyObject.GetHashCode" />. La chiamata esegue l'override di <see cref="T:System.Object" /> implementazioni, determinando un comportamento di verificarne l'uguaglianza di oggetti. Lo scopo di questi override intenzionali è impedire che le classi derivate tenti di definire l'uguaglianza di un valore per un <see cref="T:System.Windows.DependencyObject" />. Predicati di uguaglianza per valore <see cref="T:System.Windows.DependencyObject" /> mai saranno accurati a causa delle funzionalità Modifica valore proprietà innata di un <see cref="T:System.Windows.DependencyObject" /> e le relative proprietà di dipendenza. Ciò include fondamentali [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] funzionalità quali associazione dati e di [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-165">
              <para>
                <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />. The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior. The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />. Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties. This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-166">Crea un enumeratore specializzato per determinare le proprietà di dipendenza che presentano valori impostati localmente nell'oggetto <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-166">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-167">Enumeratore specializzato dei valori locali.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-167">A specialized local value enumerator.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-168">Oggetto *valore locale* è qualsiasi valore di proprietà di dipendenza che è stato impostato da <xref:System.Windows.DependencyObject.SetValue%2A>, a differenza di altri aspetti del sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-168">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="21ab0-169">Il <xref:System.Windows.LocalValueEnumerator> ottenuto chiamando <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> può essere utilizzato per enumerare le proprietà che hanno impostato localmente valore su un <xref:System.Windows.DependencyObject> istanza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-169">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="21ab0-170">Ogni proprietà è rappresentata nell'enumeratore per un <xref:System.Windows.LocalValueEntry> object, che contiene proprietà che fanno riferimento le specifiche <xref:System.Windows.DependencyProperty> e i relativi valori.</span><span class="sxs-lookup"><span data-stu-id="21ab0-170">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="21ab0-171">Questa tecnica dell'enumerazione impostata localmente valori utilizzabile per l'ottimizzazione o per la gestione di altro tipo di valori locali, ad esempio per determinare quali valori di proprietà di un <xref:System.Windows.DependencyObject> cambierebbe se cancellati.</span><span class="sxs-lookup"><span data-stu-id="21ab0-171">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="21ab0-172">L'oggetto restituito <xref:System.Windows.LocalValueEnumerator> potrebbe contenere <xref:System.Windows.LocalValueEntry> record per le proprietà di dipendenza che sono di sola lettura, o le proprietà di dipendenza in cui i valori vengono calcolati dal sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-172">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="21ab0-173">Ad esempio, un elemento del framework visual con una larghezza stabilita tramite layout segnalerà un valore locale per <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-173">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="21ab0-174">Se si ricevono i valori locali al fine di reimpostarli, controllare la <xref:System.Windows.DependencyProperty.ReadOnly%2A> valore nell'identificatore di proprietà della ognuno <xref:System.Windows.LocalValueEntry> per verificare che il <xref:System.Windows.DependencyProperty> in questione non è in sola lettura.</span><span class="sxs-lookup"><span data-stu-id="21ab0-174">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-175">Nell'esempio seguente esegue l'iterazione di tutte le proprietà che presentano valori locali impostati su un oggetto, quindi chiama <xref:System.Windows.DependencyObject.ClearValue%2A> per cancellare i valori di tali proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-175">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-176">Identificatore <see cref="T:System.Windows.DependencyProperty" /> della proprietà per cui recuperare il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-176">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-177">Restituisce il valore effettivo corrente di una proprietà di dipendenza in questa istanza di <see cref="T:System.Windows.DependencyObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-177">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-178">Restituisce il valore effettivo corrente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-178">Returns the current effective value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-179">Il *il valore effettivo* è il valore della proprietà che qualsiasi chiamante che sta richiedendo il valore viene restituito dal sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-179">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="21ab0-180">Il valore effettivo è il risultato del sistema di proprietà avere valutato tutte le possibili input che partecipano alla precedenza dei valori di sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-180">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="21ab0-181">Ciò include la coercizione e animazione.</span><span class="sxs-lookup"><span data-stu-id="21ab0-181">This includes coercion and animation.</span></span> <span data-ttu-id="21ab0-182">Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-182">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="21ab0-183">Questo metodo non restituisce mai <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-183">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="21ab0-184">Il <xref:System.Windows.DependencyProperty.UnsetValue> è un valore di sentinel per il sistema di proprietà che viene usato in varie capacità internamente e talvolta anche esposta tramite i callback di coercizione.</span><span class="sxs-lookup"><span data-stu-id="21ab0-184">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="21ab0-185">Se non si conosce ciò che deve essere il tipo della proprietà, è possibile eseguire una query l'identificatore della proprietà di dipendenza richiesta per determinare se è presente una specifica più <xref:System.Windows.DependencyProperty.PropertyType%2A> che il valore restituito può essere convertito in.</span><span class="sxs-lookup"><span data-stu-id="21ab0-185">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-186">Il parametro <paramref name="dp" /> specificato o il relativo valore non è valido oppure il parametro <paramref name="dp" /> non esiste.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-186">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-187">L’identificatore <see cref="T:System.Windows.DependencyProperty" /> della proprietà di dipendenza da invalidare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-187">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-188">Valuta di nuovo il valore effettivo della proprietà di dipendenza specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-188">Re-evaluates the effective value for the specified dependency property</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-189">Quando si chiama <xref:System.Windows.DependencyObject.InvalidateProperty%2A>associati e qualsiasi applicabili <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funzioni registrato per quella proprietà di dipendenza può essere richiamato.</span><span class="sxs-lookup"><span data-stu-id="21ab0-189">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="21ab0-190">La chiamata a <xref:System.Windows.DependencyObject.InvalidateProperty%2A> su una proprietà che è stato impostato il valore locale avrà alcun effetto, poiché il valore locale ha la precedenza su altri input di sistema di proprietà, ad eccezione delle animazioni.</span><span class="sxs-lookup"><span data-stu-id="21ab0-190">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="21ab0-191">Tuttavia, è possibile chiamare <xref:System.Windows.DependencyObject.ClearValue%2A>, quindi chiamare <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-191">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="21ab0-192">Per altre informazioni, vedere [Precedenza del valore della proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-192">For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 <span data-ttu-id="21ab0-193">La chiamata a <xref:System.Windows.DependencyObject.InvalidateProperty%2A> non è necessariamente applicabili per molti scenari di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-193">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="21ab0-194">Se una proprietà di dipendenza viene invalidata a causa di modifiche dei valori in uno dei componenti, il sistema di proprietà invalida e Rivaluta automaticamente la proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-194">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="21ab0-195">Tuttavia, esistono ancora alcuni scenari appropriate in cui <xref:System.Windows.DependencyObject.InvalidateProperty%2A> è utile.</span><span class="sxs-lookup"><span data-stu-id="21ab0-195">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="21ab0-196">In particolare, è possibile usare <xref:System.Windows.DependencyObject.InvalidateProperty%2A> all'interno di valori soggetti a coercizione o di proprietà modificata callback per una proprietà di dipendenza diverse.</span><span class="sxs-lookup"><span data-stu-id="21ab0-196">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="21ab0-197">È anche possibile usare <xref:System.Windows.DependencyObject.InvalidateProperty%2A> per forzare la rivalutazione di un'associazione in un'origine dati che non è in grado di implementare l'elemento consigliato <xref:System.ComponentModel.INotifyPropertyChanged> meccanismo di notifica (ad esempio se utilizzano le classi di dati che non può essere derivato da o in cui i dati sono un valore statico membro).</span><span class="sxs-lookup"><span data-stu-id="21ab0-197">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-198">L'esempio seguente chiama <xref:System.Windows.DependencyObject.InvalidateProperty%2A> su una proprietà personalizzata, ogni volta che le proprietà che sono coinvolti nei calcoli della proprietà invalidata modificare.</span><span class="sxs-lookup"><span data-stu-id="21ab0-198">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="21ab0-199">Si tratta di una tecnica alternativa alla chiamata di <xref:System.Windows.DependencyObject.CoerceValue%2A> metodo, in quanto invalidando le proprietà vengono chiamati anche qualsiasi registrato <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-199">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-200">Ottiene un valore che indica se l'istanza è attualmente sealed (di sola lettura).</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-200">Gets a value that indicates whether this instance is currently sealed (read-only).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="21ab0-201">
            <see langword="true" /> se l'istanza è sealed. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-201">
              <see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-202">Questo valore è impostato internamente.</span><span class="sxs-lookup"><span data-stu-id="21ab0-202">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="21ab0-203">Dati dell'evento che conterranno l'identificatore della proprietà di dipendenza di interesse, i metadati della proprietà per il tipo e i valori precedenti e nuovi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-203">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-204">Richiamato ogni volta che il valore effettivo di una qualsiasi proprietà di dipendenza di questo oggetto <see cref="T:System.Windows.DependencyObject" /> viene aggiornato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-204">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span>
          </span>
          <span data-ttu-id="21ab0-205">La proprietà di dipendenza specifica modificata viene indicata nei dati dell'evento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-205">The specific dependency property that changed is reported in the event data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-206">Questo metodo non è in genere rileva le modifiche alle singole proprietà o di eseguire le convalide delle proprietà per ogni caso.</span><span class="sxs-lookup"><span data-stu-id="21ab0-206">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="21ab0-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> è invece destinato alle modifiche del criterio di invalidamento generale, se sono noto che alcune informazioni sulle classificazioni a livello delle proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-207"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="21ab0-208">Ad esempio, viene modificato una <xref:System.Windows.Freezable> potrebbero essere modifiche nei tipi di valore del <xref:System.Windows.Freezable>, o potrebbe essere sottoproprietà, in cui le modifiche sono all'interno di altri <xref:System.Windows.Freezable> riferimenti.</span><span class="sxs-lookup"><span data-stu-id="21ab0-208">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="21ab0-209">Il <xref:System.Windows.Freezable> eseguire l'override dell'implementazione <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> utilizza le informazioni interne per determinare se le proprietà sono le sottoproprietà e fornisce la logica di classe di base appropriata per entrambi i casi.</span><span class="sxs-lookup"><span data-stu-id="21ab0-209">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="21ab0-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> viene richiamato potenzialmente più volte nel corso della durata di un oggetto.</span><span class="sxs-lookup"><span data-stu-id="21ab0-210"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="21ab0-211">Pertanto, è possibile ottenere prestazioni migliorate per il sistema di proprietà complessivo se esegue l'override di metadati di proprietà specifiche e quindi collegarli <xref:System.Windows.CoerceValueCallback> o <xref:System.Windows.PropertyChangedCallback> funzioni per le singole proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-211">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="21ab0-212">Questo metodo, tuttavia, è consigliabile se un <xref:System.Windows.DependencyObject> include un numero significativo di proprietà di dipendenza correlata al valore, o se ne include la logica, ad esempio il comportamento di rendering, che deve essere ripetuto per molti casi di convalide di proprietà correlati.</span><span class="sxs-lookup"><span data-stu-id="21ab0-212">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="21ab0-213">
            <para>Chiamare sempre l'implementazione di base. Errore eseguire questa operazione disabiliterà in modo significativo l'intera [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà, provocando valori non corretti da segnalare.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-213">
              <para>Always call the base implementation. Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-214">Identificatore <see cref="T:System.Windows.DependencyProperty" /> della proprietà per cui recuperare il valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-214">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-215">Restituisce il valore locale di una proprietà di dipendenza, se presente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-215">Returns the local value of a dependency property, if it exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-216">Restituisce il valore locale oppure il valore sentinel <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> se non è impostato alcun valore locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-216">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-217">È consigliabile usare <xref:System.Windows.DependencyObject.GetValue%2A> per le operazioni più comuni "get" per una proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-217">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="21ab0-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> non restituisce il valore effettivo per un'ampia gamma di casi in cui il valore non è impostato localmente.</span><span class="sxs-lookup"><span data-stu-id="21ab0-218"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="21ab0-219">I valori impostati per gli stili, temi, modelli, il valore predefinito da metadati o ereditarietà del valore della proprietà non sono considerati sia i valori locali.</span><span class="sxs-lookup"><span data-stu-id="21ab0-219">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="21ab0-220">Tuttavia, associazioni e altre espressioni sono considerati sia i valori locali, dopo che sono state valutate.</span><span class="sxs-lookup"><span data-stu-id="21ab0-220">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="21ab0-221">Quando è impostato alcun valore locale, questo metodo restituisce <xref:System.Windows.DependencyProperty.UnsetValue>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-221">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="21ab0-222">Se il valore restituito è diverso da <xref:System.Windows.DependencyProperty.UnsetValue>, è possibile eseguire una query di metadati della proprietà di dipendenza richiesta per determinare se è presente un tipo più specifico che il valore restituito può essere convertito in.</span><span class="sxs-lookup"><span data-stu-id="21ab0-222">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-223">Identificatore della proprietà di dipendenza da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-223">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="21ab0-224">Nuovo valore locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-224">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-225">Imposta il valore di una proprietà di dipendenza senza modificare l'origine del valore.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-225">Sets the value of a dependency property without changing its value source.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-226">Questo metodo viene utilizzato da un componente che a livello di codice imposta il valore di una delle sue proprietà senza disabilitare uso dichiarato di un'applicazione della proprietà.</span><span class="sxs-lookup"><span data-stu-id="21ab0-226">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="21ab0-227">Il <xref:System.Windows.DependencyObject.SetCurrentValue%2A> metodo modifica il valore effettivo della proprietà, ma i trigger esistenti, data binding e stili continueranno a funzionare.</span><span class="sxs-lookup"><span data-stu-id="21ab0-227">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-228">È stato effettuato un tentativo di modificare una proprietà di dipendenza di sola lettura o una proprietà in un oggetto <see cref="T:System.Windows.DependencyObject" /> sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-228">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21ab0-229">
            <paramref name="value" /> non è il tipo corretto registrato per la proprietà <paramref name="dp" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-229">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="21ab0-230">Imposta il valore locale di una proprietà di dipendenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-230">Sets the local value of a dependency property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-231">Identificatore della proprietà di dipendenza da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-231">The identifier of the dependency property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="21ab0-232">Nuovo valore locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-232">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-233">Imposta il valore locale di una proprietà di dipendenza, specificato dal relativo identificatore della proprietà di dipendenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-233">Sets the local value of a dependency property, specified by its dependency property identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-234">Se il tipo fornito non corrisponde al tipo dichiarato della proprietà di dipendenza in cui è stata originariamente registrata, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="21ab0-234">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="21ab0-235">Il `value` parametro deve sempre essere fornito come il tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="21ab0-235">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="21ab0-236">Le condizioni di eccezione sono potenzialmente influenzate dal <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback che è presente nell'identificatore di proprietà di dipendenza della proprietà di dipendenza da impostare.</span><span class="sxs-lookup"><span data-stu-id="21ab0-236">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="21ab0-237">In caso contrario, il valore fornito non riesca condizioni generali di controllo del tipo (ad esempio, passando una stringa quando il tipo nativo è Double).</span><span class="sxs-lookup"><span data-stu-id="21ab0-237">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="21ab0-238">È stato effettuato un tentativo di modificare una proprietà di dipendenza di sola lettura o una proprietà in un oggetto <see cref="T:System.Windows.DependencyObject" /> sealed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-238">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="21ab0-239">
            <paramref name="value" /> non è il tipo corretto registrato per la proprietà <paramref name="dp" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-239">
              <paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="21ab0-240">Identificatore <see cref="T:System.Windows.DependencyPropertyKey" /> della proprietà da impostare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-240">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="21ab0-241">Nuovo valore locale.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-241">The new local value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-242">Imposta il valore locale di una proprietà di dipendenza di sola lettura, specificato dall'identificatore <see cref="T:System.Windows.DependencyPropertyKey" /> della proprietà di dipendenza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-242">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-243">Questa firma viene in genere utilizzata quando si impostano i valori per le proprietà di dipendenza di sola lettura che sono definiti dalle classi personalizzate.</span><span class="sxs-lookup"><span data-stu-id="21ab0-243">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="21ab0-244">In generale, <xref:System.Windows.DependencyObject.SetValue%2A> viene chiamato solo dal tipo registrato la proprietà di dipendenza, che implementa la logica interna che fornisce il valore della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="21ab0-244">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="21ab0-245">Per altre informazioni, vedere [Proprietà di dipendenza di sola lettura](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span><span class="sxs-lookup"><span data-stu-id="21ab0-245">For more information, see [Read-Only Dependency Properties](~/docs/framework/wpf/advanced/read-only-dependency-properties.md).</span></span>  
  
 <span data-ttu-id="21ab0-246">Se il tipo fornito non corrisponde al tipo dichiarato della proprietà di dipendenza in cui è stata originariamente registrata, viene generata un'eccezione.</span><span class="sxs-lookup"><span data-stu-id="21ab0-246">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="21ab0-247">Il `value` parametro deve sempre essere fornito come il tipo appropriato.</span><span class="sxs-lookup"><span data-stu-id="21ab0-247">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="21ab0-248">Le condizioni di eccezione sono potenzialmente influenzate dal <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback che è presente nell'identificatore di proprietà di dipendenza della proprietà di dipendenza da impostare.</span><span class="sxs-lookup"><span data-stu-id="21ab0-248">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="21ab0-249">L'esempio seguente definisce una proprietà di dipendenza di sola lettura, insieme a un `public static readonly` <xref:System.Windows.DependencyProperty> che fornisce l'esposizione di sola lettura necessaria per i consumer di proprietà e la funzione di accesso get per il [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span><span class="sxs-lookup"><span data-stu-id="21ab0-249">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp">
          <span data-ttu-id="21ab0-250">Identificatore della proprietà di dipendenza da serializzare.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-250">The identifier for the dependency property that should be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="21ab0-251">Restituisce un valore che indica se i processi di serializzazione devono serializzare il valore della proprietà di dipendenza specificata.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-251">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="21ab0-252">
            <see langword="true" /> se per la proprietà di dipendenza fornita deve essere eseguita la serializzazione del valore. In caso contrario <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-252">
              <see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="21ab0-253">L'implementazione predefinita restituisce `true` per tutti i casi in cui una proprietà di dipendenza è un valore locale stabilito nel <xref:System.Windows.DependencyObject>.</span><span class="sxs-lookup"><span data-stu-id="21ab0-253">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="21ab0-254">
            <para>Le sostituzioni per questo metodo potrebbero gestire le proprietà di dipendenza specifica in modo diverso.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="21ab0-254">
              <para>Overrides for this method might handle specific dependency properties differently.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>