<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DependencyObject.xml" source-language="en-US" target-language="it-IT">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac593e067f8bf97d79f7e4525a57db08a4a8d5109c2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93e067f8bf97d79f7e4525a57db08a4a8d5109c2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Represents an object that participates in the dependency property system.</source>
          <target state="translated">Rappresenta un oggetto che fa parte del sistema di proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class enables <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> property system services on its many derived classes.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> classe abilita <ph id="ph2">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> servizi di sistema di proprietà nelle varie classi derivate.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</source>
          <target state="translated">Funzione principale del sistema di proprietà è per calcolare i valori delle proprietà e per fornire la notifica di sistema sui valori che sono stati modificati.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Another key class that participates in the property system is <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</source>
          <target state="translated">Un'altra classe principale che fa parte del sistema di proprietà è <ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> as a base class enables objects to use the dependency properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyProperty&gt;</ph> Abilita la registrazione delle proprietà di dipendenza nel sistema di proprietà e vengono fornite informazioni di identificazione e su ogni proprietà di dipendenza, mentre <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph> come una classe di base consente agli oggetti di usare le proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> services and characteristics include the following:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> servizi e le caratteristiche includono:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Dependency property hosting support.</source>
          <target state="translated">Supporto per l'hosting delle proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register a dependency property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method, and storing the method's return value as a public static field in your class.</source>
          <target state="translated">Si registra una proprietà di dipendenza chiamando il <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> (metodo) e l'archiviazione di valore restituito del metodo come un campo statico pubblico della classe.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Attached property hosting support.</source>
          <target state="translated">Proprietà associata supporto per l'hosting.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>You register an attached property by calling the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> method, and storing the method's return value as a public static read-only field in your class.</source>
          <target state="translated">Si registra una proprietà associata chiamando il <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.RegisterAttached%2A&gt;</ph> (metodo) e l'archiviazione di valore restituito del metodo come un campo di sola lettura statico pubblico della classe.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(There are also additional member requirements; note that this represents a <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> specific implementation for attached properties.</source>
          <target state="translated">(Esistono requisiti di altri membri; si noti che questo rappresenta un <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> implementazione specifica per le proprietà associate.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>For details, see <bpt id="p1">[</bpt>Attached Properties Overview<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.) Your attached property can then be set on any class that derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Per informazioni dettagliate, vedere <bpt id="p1">[</bpt>collegato Cenni preliminari sulle proprietà<ept id="p1">](~/docs/framework/wpf/advanced/attached-properties-overview.md)</ept>.) Quindi è possibile impostare la proprietà associata su qualsiasi classe che deriva da <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Get, set, and clear utility methods for values of any dependency properties that exist on the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">Get, set e cancellare i metodi di utilità per i valori di qualsiasi proprietà di dipendenza che esiste nel <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</source>
          <target state="translated">I metadati, forzare il supporto di valore, la notifica di modifica proprietà e i callback di sostituzione per le proprietà di dipendenza o le proprietà associate.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>Also, the <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> class facilitates the per-owner property metadata for a dependency property.</source>
          <target state="translated">Inoltre, la <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> classe semplifica i metadati della proprietà per proprietario per una proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>A common base class for classes derived from <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</source>
          <target state="translated">Una classe di base comune per le classi derivate da <ph id="ph1">&lt;xref:System.Windows.ContentElement&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, o <ph id="ph3">&lt;xref:System.Windows.Media.Visual&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, another base element class, has a class hierarchy that includes <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>.)</source>
          <target state="translated">(<ph id="ph1">&lt;xref:System.Windows.UIElement&gt;</ph>, un'altra classe di elemento di base, ha una gerarchia di classi che include <ph id="ph2">&lt;xref:System.Windows.Media.Visual&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The following example derives from <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> to create a new abstract class.</source>
          <target state="translated">Nell'esempio seguente deriva da <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> per creare una nuova classe astratta.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.DependencyObject">
          <source>The class then registers an attached property and includes support members for that attached property.</source>
          <target state="translated">La classe quindi Registra una proprietà associata e include i membri di supporto per la proprietà associata.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> class.</source>
          <target state="translated">Inizializza una nuova istanza della classe <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Clears the local value of a property.</source>
          <target state="translated">Cancella il valore locale di una proprietà.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The dependency property to be cleared, identified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> object reference.</source>
          <target state="translated">Proprietà di dipendenza da cancellare, identificata da un riferimento a un oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clears the local value of a property.</source>
          <target state="translated">Cancella il valore locale di una proprietà.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier.</source>
          <target state="translated">La proprietà da cancellare è specificata da un identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">Cancellare il valore della proprietà chiamando <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> non necessariamente fornire una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Clearing the property only specifically clears whatever local value may have been applied.</source>
          <target state="translated">Deselezionare la proprietà in modo specifico solo Cancella qualsiasi valore locale potrebbe essere state applicate.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Precedenza del valore della proprietà di dipendenza<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">Nell'esempio seguente esegue l'iterazione di tutte le proprietà che presentano valori locali impostati su un oggetto, quindi chiama <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> per cancellare i valori di tali proprietà.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Si è tentato di chiamare <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> in un oggetto <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> sealed.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The key for the dependency property to be cleared.</source>
          <target state="translated">Chiave per la proprietà di dipendenza da cancellare.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clears the local value of a read-only property.</source>
          <target state="translated">Cancella il valore locale di una proprietà di sola lettura.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>The property to be cleared is specified by a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph>.</source>
          <target state="translated">La proprietà da cancellare è specificata da un oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> identifies a read-only dependency property for property system operations.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;xref:System.Windows.DependencyPropertyKey&gt;</ph> identifica una proprietà di dipendenza di sola lettura per le operazioni di sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Classes that define read-only dependency properties should not expose this key with public access.</source>
          <target state="translated">Le classi che definiscono le proprietà di dipendenza di sola lettura non devono esporre questa chiave con accesso pubblico.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> could be called outside the class or assembly, referencing the key.</source>
          <target state="translated">Fornisce un percorso di codice pubblico che nega il carattere di sola lettura della proprietà, se una chiave esposta pubblicamente metodi, ad esempio <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> può essere chiamata all'esterno della classe o di un assembly, la chiave di riferimento.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the property value by calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</source>
          <target state="translated">Cancellare il valore della proprietà chiamando <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> non necessariamente fornire una proprietà di dipendenza il valore predefinito specificato nei metadati della proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Clearing the value only specifically clears whatever local value may have been applied.</source>
          <target state="translated">La cancellazione del valore in modo specifico solo Cancella qualsiasi valore locale potrebbe essere state applicate.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Precedenza del valore della proprietà di dipendenza<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
          <source>Attempted to call <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> on a sealed <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Si è tentato di chiamare <ph id="ph1">&lt;see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /&gt;</ph> in un oggetto <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> sealed.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property to coerce.</source>
          <target state="translated">Identificatore della proprietà di dipendenza da assegnare forzatamente.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Coerces the value of the specified dependency property.</source>
          <target state="translated">Assegna forzatamente il valore della proprietà di dipendenza specificata.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is accomplished by invoking any <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> function specified in property metadata for the dependency property as it exists on the calling <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Questa operazione viene eseguita richiamando qualsiasi funzione <ph id="ph1">&lt;see cref="T:System.Windows.CoerceValueCallback" /&gt;</ph> specificata nei metadati della proprietà di dipendenza esistente nell'oggetto <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> chiamante.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>In addition to being explicitly invoked through calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Oltre a cui viene richiamato in modo esplicito tramite la chiamata <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> per una dipendenza di proprietà viene anche richiamata internamente ogni volta che il valore della proprietà di dipendenza viene rivalutato dal <ph id="ph3">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>When you invoke the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, you are ultimately invoking the coerce value callback for the property that you specify.</source>
          <target state="translated">Quando si richiama il <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> metodo, si richiama il callback del valore soggetto a coercizione per la proprietà specificati.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>Typically you will invoke <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</source>
          <target state="translated">In genere si richiamerà <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> solo se si è certi che esista un callback di valore soggetto a coercizione, e se si conoscono i criteri del callback di coercizione.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The most common scenario for calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</source>
          <target state="translated">Lo scenario più comune per chiamare <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> si trova all'interno di callback di modifica di gestione o proprietà classe di proprietà correlate che influenzano i rispettivi valori in modo dipendente.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Callbacks and Validation<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Callback e convalida delle proprietà di dipendenza<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-callbacks-and-validation.md)</ept>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> within a <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> implementation that is used as the <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> for a different dependency properties on the same class.</source>
          <target state="translated">L'esempio seguente chiama <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> all'interno di un <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> implementazione che viene utilizzato come il <ph id="ph3">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> per proprietà di dipendenza diverse sulla stessa classe.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>This is a common pattern for introducing true value dependencies between dependency properties.</source>
          <target state="translated">Si tratta di un modello comune per l'introduzione valore true dipendenze tra le proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value were invalid or do not exist.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> specificato o il relativo valore non è valido o non esiste.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">Ottiene la classe <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> che include il tipo <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> di questa istanza.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> that wraps the <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type of this instance.</source>
          <target state="translated">Classe <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObjectType" /&gt;</ph> che include il tipo <ph id="ph2">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> di questa istanza.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>This property is useful if an object that is returned from a method has a return value type of <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> and you want to perform property system specific operations on it depending on its type.</source>
          <target state="translated">Questa proprietà è utile se un oggetto restituito da un metodo ha un tipo di valore restituito di <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> e si desidera eseguire proprietà specifiche operazioni del sistema, a seconda del tipo.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>For example it is more efficient to call <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph> using the <ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> rather than the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> type.</source>
          <target state="translated">Ad esempio risulta più efficiente chiamare <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29&gt;</ph> utilizzando il <ph id="ph2">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> anziché <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> tipo.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> facilitates faster lookup.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> facilita le ricerche più veloci.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>In the following pseudocode example, <ph id="ph1">`MySubClass`</ph> anticipates that additional derived classes might change the default value of the <ph id="ph2">`MyCustom`</ph> dependency property.</source>
          <target state="translated">Nell'esempio di pseudocodice seguente, <ph id="ph1">`MySubClass`</ph> preannuncia che ulteriori classi derivate potrebbero modificare il valore predefinito di <ph id="ph2">`MyCustom`</ph> proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.DependencyObjectType">
          <source>The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> value whenever that constructor is used as a derived class instantiator.</source>
          <target state="translated">La classe implementa un costruttore predefinito che è possibile determinare l'effettiva classe derivata avvalendosi del polimorfismo sul <ph id="ph1">&lt;xref:System.Windows.DependencyObjectType&gt;</ph> valore ogni volta che il costruttore viene utilizzato come instantiator una classe derivata.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> to compare to the current instance.</source>
          <target state="translated">Oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> da confrontare con l'istanza corrente.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Determines whether a provided <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> is equivalent to the current <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Determina se l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> specificato equivale all'oggetto <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> corrente.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the two instances are the same; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se le due istanze sono uguali. In caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</source>
          <target state="translated">Questa implementazione è solo l'uguaglianza dei riferimenti e non tenta di valutare l'uguaglianza di valori delle proprietà contenute.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two basic <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> esegue l'override e quindi esegue il sealing basic due <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> metodi: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> e <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">La chiamata di sostituzioni di <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementazioni, determinando un comportamento di uguaglianza di oggetti.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Lo scopo di questi override intenzionali è impedire alle classi derivate di provare a definire l'uguaglianza di un valore per un <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">Valore di predicati di uguaglianza per <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> non potranno mai essere accurati a causa delle funzionalità di Modifica valore noto di proprietà di un <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> e le relative proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.Equals(System.Object)">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Ciò include fondamentali <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> funzionalità, ad esempio associazione dati e il <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Gets a hash code for this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Ottiene un codice hash per l'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>A signed 32-bit integer hash code.</source>
          <target state="translated">Codice hash di valori interi a 32 bit con segno.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> overrides and then seals two <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> methods: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> and <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> esegue l'override e quindi esegue il sealing due <ph id="ph2">&lt;see cref="T:System.Object" /&gt;</ph> metodi: <ph id="ph3">&lt;see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /&gt;</ph> e <ph id="ph4">&lt;see cref="M:System.Windows.DependencyObject.GetHashCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The overrides call the <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementations, resulting in an object equality behavior.</source>
          <target state="translated">La chiamata di sostituzioni di <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> implementazioni, determinando un comportamento di uguaglianza di oggetti.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Lo scopo di questi override intenzionali è impedire alle classi derivate di provare a definire l'uguaglianza di un valore per un <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>Value equalities for <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> will never be accurate because of the innate property value-changing capabilities of a <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> and its dependency properties.</source>
          <target state="translated">Valore di predicati di uguaglianza per <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> non potranno mai essere accurati a causa delle funzionalità di Modifica valore noto di proprietà di un <ph id="ph2">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> e le relative proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetHashCode">
          <source>This includes fundamental <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> features such as data binding and the <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system.</source>
          <target state="translated">Ciò include fondamentali <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> funzionalità, ad esempio associazione dati e il <ph id="ph2">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Creates a specialized enumerator for determining which dependency properties have locally set values on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Crea un enumeratore specializzato per determinare le proprietà di dipendenza che presentano valori impostati localmente nell'oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A specialized local value enumerator.</source>
          <target state="translated">Enumeratore specializzato dei valori locali.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>A <bpt id="p1">*</bpt>local value<ept id="p1">*</ept> is any dependency property value that was set by <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>, as opposed to other aspects of the property system.</source>
          <target state="translated">Oggetto <bpt id="p1">*</bpt>valore locale<ept id="p1">*</ept> è qualsiasi valore di proprietà di dipendenza che è stato impostato da <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph>, a differenza di altri aspetti del sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> obtained by calling <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph> can be used to enumerate properties that have a locally set value on a <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> instance.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> ottenuto chiamando <ph id="ph2">&lt;xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A&gt;</ph> può essere utilizzata per enumerare le proprietà che hanno impostato localmente valore un <ph id="ph3">&lt;xref:System.Windows.DependencyObject&gt;</ph> istanza.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>Each such property is represented in the enumerator by a <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> object, which has properties that reference the specific <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> and its values.</source>
          <target state="translated">Ogni proprietà è rappresentata nell'enumeratore da un <ph id="ph1">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> oggetto le cui proprietà che fanno riferimento specifico <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> e i relativi valori.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> would change if they were cleared.</source>
          <target state="translated">Questa tecnica di enumerazione impostati localmente valori utilizzabile per l'ottimizzazione o per la gestione di altro tipo di valori locali, ad esempio per determinare quali valori di proprietà di un <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> comporterebbe la modifica se cancellati.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The returned <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> might contain <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</source>
          <target state="translated">L'oggetto restituito <ph id="ph1">&lt;xref:System.Windows.LocalValueEnumerator&gt;</ph> potrebbe contenere <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> record per la proprietà di dipendenza che sono di sola lettura, o le proprietà di dipendenza in cui i valori vengono calcolati dal sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>For example, a visual framework element that has an established width through layout will report a local value for <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</source>
          <target state="translated">Ad esempio, un elemento di framework visivo che ha una larghezza stabilita mediante layout indicherà un valore locale per <ph id="ph1">&lt;xref:System.Windows.FrameworkElement.ActualWidth%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>If you are getting local values in order to reset them, check the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> value on the property identifier of each <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> to verify that the <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph> in question is not read-only.</source>
          <target state="translated">Se si ricevono valori locali per reimpostarli, controllare il <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ReadOnly%2A&gt;</ph> valore nell'identificatore di proprietà di ogni <ph id="ph2">&lt;xref:System.Windows.LocalValueEntry&gt;</ph> per verificare che il <ph id="ph3">&lt;xref:System.Windows.DependencyProperty&gt;</ph> in questione non è in sola lettura.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
          <source>The following example iterates all properties that have local values set on an object, then calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> to clear the values of each such property.</source>
          <target state="translated">Nell'esempio seguente esegue l'iterazione di tutte le proprietà che presentano valori locali impostati su un oggetto, quindi chiama <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph> per cancellare i valori di tali proprietà.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated">Identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> della proprietà per cui recuperare il valore.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value of a dependency property on this instance of a <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">Restituisce il valore effettivo corrente di una proprietà di dipendenza in questa istanza di <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>Returns the current effective value.</source>
          <target state="translated">Restituisce il valore effettivo corrente.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <bpt id="p1">*</bpt>effective value<ept id="p1">*</ept> is the value of the property that is returned by the property system to any caller that is requesting the value.</source>
          <target state="translated">Il <bpt id="p1">*</bpt>valore effettivo<ept id="p1">*</ept> è il valore della proprietà a qualsiasi chiamante che richiede il valore restituito dal sistema di proprietà.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</source>
          <target state="translated">Il valore effettivo è il risultato del sistema di proprietà con valutati tutti i possibili input che partecipano alla precedenza dei valori di proprietà del sistema.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This includes coercion and animation.</source>
          <target state="translated">Ciò include la coercizione e animazione.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Precedenza del valore della proprietà di dipendenza<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>This method will never return <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">Questo metodo non restituisce mai <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> è un valore di sentinel per il sistema di proprietà utilizzato in vario modo internamente e talvolta anche esposto mediante callback di coercizione.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph> that the return value can be converted to.</source>
          <target state="translated">Se non si conoscono il quale deve essere il tipo della proprietà, è possibile eseguire una query l'identificatore della proprietà di dipendenza richiesta per determinare se è presente più di una specifica <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.PropertyType%2A&gt;</ph> che il valore restituito può essere convertito in.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
          <source>The specified <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> or its value was invalid, or the specified <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> does not exist.</source>
          <target state="translated">Il parametro <ph id="ph1">&lt;paramref name="dp" /&gt;</ph> specificato o il relativo valore non è valido oppure il parametro <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> non esiste.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to invalidate.</source>
          <target state="translated">L’identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> della proprietà di dipendenza da invalidare.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Re-evaluates the effective value for the specified dependency property</source>
          <target state="translated">Valuta di nuovo il valore effettivo della proprietà di dipendenza specificata.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>When you call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>, any associated and applicable <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions registered for that dependency property might be invoked.</source>
          <target state="translated">Quando si chiama <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>, qualsiasi e associati applicabile <ph id="ph2">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> funzioni registrate per tale proprietà di dipendenza può essere richiamata.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> su una proprietà che è stato impostato il valore locale avrà alcun effetto, poiché il valore locale ha la precedenza su altri input di sistema di proprietà, ad eccezione delle animazioni.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, you could call <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>, then call <ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>.</source>
          <target state="translated">Tuttavia, è possibile chiamare <ph id="ph1">&lt;xref:System.Windows.DependencyObject.ClearValue%2A&gt;</ph>, quindi chiamare <ph id="ph2">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>For more information, see <bpt id="p1">[</bpt>Dependency Property Value Precedence<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Precedenza del valore della proprietà di dipendenza<ept id="p1">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is not necessarily applicable for many dependency property scenarios.</source>
          <target state="translated">La chiamata <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> non è necessariamente applicabile per molti scenari di proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</source>
          <target state="translated">Se una proprietà di dipendenza viene invalidata a causa delle modifiche di valore in uno dei componenti, il sistema di proprietà invalida e Rivaluta automaticamente la proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>However, there are still some appropriate scenarios where <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> is useful.</source>
          <target state="translated">Tuttavia, esistono ancora alcuni scenari appropriati in cui <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> è utile.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>In particular, you can use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> inside the coerce value or property changed callback for a different dependency property.</source>
          <target state="translated">In particolare, è possibile utilizzare <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> all'interno del valore soggetto a coercizione o una proprietà modificata callback per una proprietà di dipendenza diversa.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>You can also use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> to force re-evaluation of a binding against a data source that is not able to implement the recommended <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</source>
          <target state="translated">È inoltre possibile utilizzare <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> per forzare la valutazione di un'associazione in un'origine dati che non è in grado di implementare il <ph id="ph2">&lt;xref:System.ComponentModel.INotifyPropertyChanged&gt;</ph> meccanismo di notifica (ad esempio se l'utilizzo di classi di dati che non può essere derivata da, o in cui i dati sono un valore statico membro).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>The following example calls <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</source>
          <target state="translated">L'esempio seguente chiama <ph id="ph1">&lt;xref:System.Windows.DependencyObject.InvalidateProperty%2A&gt;</ph> su una proprietà personalizzata, ogni volta che le proprietà che vengono utilizzate nei calcoli della proprietà invalidato modificare.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
          <source>This is an alternative technique to calling the <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> method, because invalidating the property will also call any registered <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>.</source>
          <target state="translated">Si tratta di una tecnica alternativa alla chiamata di <ph id="ph1">&lt;xref:System.Windows.DependencyObject.CoerceValue%2A&gt;</ph> metodo, perché invalidando la proprietà verrà chiamata anche qualsiasi registrato <ph id="ph2">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>Gets a value that indicates whether this instance is currently sealed (read-only).</source>
          <target state="translated">Ottiene un valore che indica se l'istanza è attualmente sealed (di sola lettura).</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this instance is sealed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se l'istanza è sealed. In caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.DependencyObject.IsSealed">
          <source>This value is set internally.</source>
          <target state="translated">Questo valore è impostato internamente.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</source>
          <target state="translated">Dati dell'evento che conterranno l'identificatore della proprietà di dipendenza di interesse, i metadati della proprietà per il tipo e i valori precedenti e nuovi.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Invoked whenever the effective value of any dependency property on this <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> has been updated.</source>
          <target state="translated">Richiamato ogni volta che il valore effettivo di una qualsiasi proprietà di dipendenza di questo oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> viene aggiornato.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The specific dependency property that changed is reported in the event data.</source>
          <target state="translated">La proprietà di dipendenza specifica modificata viene indicata nei dati dell'evento.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</source>
          <target state="translated">Questo metodo non è in genere rilevare le modifiche alle singole proprietà o eseguire le convalide di proprietà per ogni caso.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> è invece destinato alle modifiche del criterio di invalidamento generale, se sono noto determinate informazioni sulle classificazioni generali delle proprietà.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>For example, changes in a <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> might be changes in the value types of the <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, or might be subproperties, where the changes are within other <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> references.</source>
          <target state="translated">Ad esempio, modifica un <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> potrebbero essere modifiche nei tipi di valore del <ph id="ph2">&lt;xref:System.Windows.Freezable&gt;</ph>, o potrebbero essere sottoproprietà, in cui le modifiche sono all'interno di altri <ph id="ph3">&lt;xref:System.Windows.Freezable&gt;</ph> riferimenti.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> override implementation of <ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.Freezable&gt;</ph> eseguire l'override dell'implementazione di <ph id="ph2">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> utilizza informazioni interne per determinare se le proprietà sono sottoproprietà e fornisce la logica di classe di base appropriata per entrambi i casi.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> is potentially invoked many times during the life of an object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.OnPropertyChanged%2A&gt;</ph> viene richiamato potenzialmente volte durante il ciclo di vita di un oggetto.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> functions for individual properties.</source>
          <target state="translated">Pertanto, è possibile ottenere un miglioramento delle prestazioni del sistema di proprietà globale se si ignora i metadati di proprietà specifiche e quindi collegare <ph id="ph1">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> o <ph id="ph2">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> funzioni per le singole proprietà.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>However, you would use this method if a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</source>
          <target state="translated">Tuttavia, utilizzare questo metodo se un <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> include un numero significativo di proprietà di dipendenza correlata al valore, o se include la logica, ad esempio il comportamento di rendering, che deve essere ripetuto per diversi casi correlati delle convalide di proprietà.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Always call the base implementation.</source>
          <target state="translated">Chiamare sempre l'implementazione di base.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
          <source>Failure to do this will significantly disable the entire <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system, causing incorrect values to be reported.</source>
          <target state="translated">Errore per eseguire questa operazione disabiliterà in modo significativo l'intero <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema di proprietà, provocando valori non corretti da segnalare.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> identifier of the property to retrieve the value for.</source>
          <target state="translated">Identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyProperty" /&gt;</ph> della proprietà per cui recuperare il valore.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value of a dependency property, if it exists.</source>
          <target state="translated">Restituisce il valore locale di una proprietà di dipendenza, se presente.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Returns the local value, or returns the sentinel value <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> if no local value is set.</source>
          <target state="translated">Restituisce il valore locale oppure il valore sentinel <ph id="ph1">&lt;see cref="F:System.Windows.DependencyProperty.UnsetValue" /&gt;</ph> se non è impostato alcun valore locale.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> for most typical "get" operations for a dependency property.</source>
          <target state="translated">È consigliabile utilizzare <ph id="ph1">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> per le operazioni più comuni di "get" per una proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> does not return the effective value for a variety of circumstances where the value was not locally set.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.DependencyObject.ReadLocalValue%2A&gt;</ph> Restituisce il valore effettivo per un'ampia gamma di circostanze in cui il valore non è impostato localmente.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</source>
          <target state="translated">Valori impostati per gli stili, temi e modelli, il valore predefinito di metadati o ereditarietà del valore di proprietà non vengono considerati come valori locali.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>However, bindings and other expressions are considered to be local values, after they have been evaluated.</source>
          <target state="translated">Tuttavia, associazioni e altre espressioni sono considerati valori locali, dopo aver valutati.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>When no local value is set, this method returns <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</source>
          <target state="translated">Quando è impostato alcun valore locale, questo metodo restituisce <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
          <source>If the returned value is other than <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</source>
          <target state="translated">Se il valore restituito è diverso da <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph>, è possibile eseguire una query di metadati della proprietà di dipendenza richiesta per determinare se è presente un tipo più specifico che il valore restituito può essere convertito in.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">Identificatore della proprietà di dipendenza da impostare.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nuovo valore locale.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the value of a dependency property without changing its value source.</source>
          <target state="translated">Imposta il valore di una proprietà di dipendenza senza modificare l'origine del valore.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</source>
          <target state="translated">Questo metodo viene utilizzato da un componente che a livello di codice imposta il valore di una delle sue proprietà senza disabilitare utilizzo dichiarato di un'applicazione della proprietà.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</source>
          <target state="translated">Il <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetCurrentValue%2A&gt;</ph> metodo diventa il valore effettivo della proprietà, ma i trigger esistenti, data binding e stili continueranno a funzionare.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">È stato effettuato un tentativo di modificare una proprietà di dipendenza di sola lettura o una proprietà in un oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> sealed.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è il tipo corretto registrato per la proprietà <ph id="ph2">&lt;paramref name="dp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="T:System.Windows.DependencyObject">
          <source>Sets the local value of a dependency property.</source>
          <target state="translated">Imposta il valore locale di una proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The identifier of the dependency property to set.</source>
          <target state="translated">Identificatore della proprietà di dipendenza da impostare.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nuovo valore locale.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Sets the local value of a dependency property, specified by its dependency property identifier.</source>
          <target state="translated">Imposta il valore locale di una proprietà di dipendenza, specificato dal relativo identificatore della proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">Se il tipo fornito non corrisponde al tipo dichiarato per la proprietà di dipendenza in cui è stata registrata originariamente, viene generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> deve sempre essere specificato come tipo appropriato.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">Le condizioni di eccezione sono potenzialmente influenzate dal <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback esistente nell'identificatore della proprietà di dipendenza viene impostata.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</source>
          <target state="translated">In caso contrario, il valore fornito potrebbe essersi verificato un errore generale condizioni di controllo dei tipi (ad esempio, passando una stringa quando il tipo nativo è Double).</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source>Attempted to modify a read-only dependency property, or a property on a sealed <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph>.</source>
          <target state="translated">È stato effettuato un tentativo di modificare una proprietà di dipendenza di sola lettura o una proprietà in un oggetto <ph id="ph1">&lt;see cref="T:System.Windows.DependencyObject" /&gt;</ph> sealed.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> was not the correct type as registered for the <ph id="ph2">&lt;paramref name="dp" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> non è il tipo corretto registrato per la proprietà <ph id="ph2">&lt;paramref name="dp" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the property to set.</source>
          <target state="translated">Identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> della proprietà da impostare.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The new local value.</source>
          <target state="translated">Nuovo valore locale.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Sets the local value of a read-only dependency property, specified by the <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> identifier of the dependency property.</source>
          <target state="translated">Imposta il valore locale di una proprietà di dipendenza di sola lettura, specificato dall'identificatore <ph id="ph1">&lt;see cref="T:System.Windows.DependencyPropertyKey" /&gt;</ph> della proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</source>
          <target state="translated">Questa firma viene in genere utilizzata quando si impostano i valori per le proprietà di dipendenza di sola lettura che sono definiti nelle classi personalizzate.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>Generally, <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</source>
          <target state="translated">In genere, <ph id="ph1">&lt;xref:System.Windows.DependencyObject.SetValue%2A&gt;</ph> viene chiamato solo dal tipo che ha registrato la proprietà di dipendenza, implementa la logica interna che fornisce il valore determinato per la proprietà di dipendenza.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Read-Only Dependency Properties<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>.</source>
          <target state="translated">Per altre informazioni, vedere <bpt id="p1">[</bpt>Proprietà di dipendenza di sola lettura<ept id="p1">](~/docs/framework/wpf/advanced/read-only-dependency-properties.md)</ept>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</source>
          <target state="translated">Se il tipo fornito non corrisponde al tipo dichiarato per la proprietà di dipendenza in cui è stata registrata originariamente, viene generata un'eccezione.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter should always be provided as the appropriate type.</source>
          <target state="translated">Il <ph id="ph1">`value`</ph> deve sempre essere specificato come tipo appropriato.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The exception conditions are potentially influenced by the <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback that exists on the dependency property identifier of the dependency property being set.</source>
          <target state="translated">Le condizioni di eccezione sono potenzialmente influenzate dal <ph id="ph1">&lt;xref:System.Windows.DependencyProperty.ValidateValueCallback%2A&gt;</ph> callback esistente nell'identificatore della proprietà di dipendenza viene impostata.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
          <source>The following example defines a read-only dependency property, along with a <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> that provides necessary read-only exposure to property consumers, and the get accessor for the <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> wrapper.</source>
          <target state="translated">L'esempio seguente definisce una proprietà di dipendenza di sola lettura, insieme a un <ph id="ph1">`public static readonly`</ph> <ph id="ph2">&lt;xref:System.Windows.DependencyProperty&gt;</ph> che fornisce l'esposizione di sola lettura necessaria per i consumer di proprietà e la funzione di accesso get di <ph id="ph3">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> wrapper.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The identifier for the dependency property that should be serialized.</source>
          <target state="translated">Identificatore della proprietà di dipendenza da serializzare.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</source>
          <target state="translated">Restituisce un valore che indica se i processi di serializzazione devono serializzare il valore della proprietà di dipendenza specificata.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dependency property that is supplied should be value-serialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> se per la proprietà di dipendenza fornita deve essere eseguita la serializzazione del valore. In caso contrario <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>The default implementation returns <ph id="ph1">`true`</ph> for all cases in which a dependency property had a local value established on the <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</source>
          <target state="translated">L'implementazione predefinita restituisce <ph id="ph1">`true`</ph> per tutti i casi in cui una proprietà di dipendenza presenta un valore locale definito per il <ph id="ph2">&lt;xref:System.Windows.DependencyObject&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
          <source>Overrides for this method might handle specific dependency properties differently.</source>
          <target state="translated">Esegue l'override di questo metodo è potrebbero gestire le proprietà di dipendenza specifica in modo diverso.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>