<Type Name="CoerceValueCallback" FullName="System.Windows.CoerceValueCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1e616e4ddce4ac249d5636d5cd6f017ded4ec5fa" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="it-IT" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36461733" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate object CoerceValueCallback(DependencyObject d, object baseValue);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CoerceValueCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.CoerceValueCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function CoerceValueCallback(d As DependencyObject, baseValue As Object) As Object " />
  <TypeSignature Language="C++ CLI" Value="public delegate System::Object ^ CoerceValueCallback(DependencyObject ^ d, System::Object ^ baseValue);" />
  <TypeSignature Language="F#" Value="type CoerceValueCallback = delegate of DependencyObject * obj -&gt; obj" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="d" Type="System.Windows.DependencyObject" />
    <Parameter Name="baseValue" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Object</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="d">
      <span data-ttu-id="955ae-101">Oggetto nel quale esiste la proprietà.</span>
      <span class="sxs-lookup">
        <span data-stu-id="955ae-101">The object that the property exists on.</span>
      </span>
      <span data-ttu-id="955ae-102">Quando viene richiamato il callback, il sistema di proprietà passa questo valore.</span>
      <span class="sxs-lookup">
        <span data-stu-id="955ae-102">When the callback is invoked, the property system will pass this value.</span>
      </span>
    </param>
    <param name="baseValue">
      <span data-ttu-id="955ae-103">Nuovo valore della proprietà prima dei tentativi di coercizione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="955ae-103">The new value of the property, prior to any coercion attempt.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="955ae-104">Fornisce un modello per un metodo chiamato ogni volta che un valore della proprietà di dipendenza viene rivalutato o se è specificamente richiesta la coercizione.</span>
      <span class="sxs-lookup">
        <span data-stu-id="955ae-104">Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="955ae-105">Valore assegnato tramite coercizione (del tipo appropriato).</span>
      <span class="sxs-lookup">
        <span data-stu-id="955ae-105">The coerced value (with appropriate type).</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="955ae-106">I callback basati su <xref:System.Windows.CoerceValueCallback> può essere assegnato a una proprietà di dipendenza tramite alcune tecniche diverse.</span><span class="sxs-lookup"><span data-stu-id="955ae-106">Callbacks based on <xref:System.Windows.CoerceValueCallback> can be assigned to a dependency property through several different techniques.</span></span> <span data-ttu-id="955ae-107">Ognuna di queste tecniche è necessario creare innanzitutto un nuovo oggetto di metadati di proprietà (<xref:System.Windows.PropertyMetadata>, o una classe derivata, ad esempio <xref:System.Windows.FrameworkPropertyMetadata>).</span><span class="sxs-lookup"><span data-stu-id="955ae-107">Each of these techniques requires that you first create a new property metadata object (<xref:System.Windows.PropertyMetadata>, or a derived class such as <xref:System.Windows.FrameworkPropertyMetadata>).</span></span> <span data-ttu-id="955ae-108">Creare l'oggetto di metadati utilizzando una firma del costruttore che accetta il `coerceValueCallback` parametro e assegnare tale parametro per il gestore di callback.</span><span class="sxs-lookup"><span data-stu-id="955ae-108">Create the metadata object using a constructor signature that takes the `coerceValueCallback` parameter, and assign that parameter to your callback handler.</span></span> <span data-ttu-id="955ae-109">O creare i metadati da qualsiasi firma e impostare il <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> proprietà prima di inserire i metadati in uso.</span><span class="sxs-lookup"><span data-stu-id="955ae-109">Or construct the metadata by any signature and set the <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> property prior to putting the metadata in use.</span></span>  
  
 <span data-ttu-id="955ae-110">Quando si dispone di questi metadati, è possibile:</span><span class="sxs-lookup"><span data-stu-id="955ae-110">When you have this metadata, you can:</span></span>  
  
-   <span data-ttu-id="955ae-111">Definire una nuova proprietà di dipendenza in una nuova classe, utilizzando la firma di <xref:System.Windows.DependencyProperty.Register%2A>, fornendo i metadati come il `typeMetadata` valore.</span><span class="sxs-lookup"><span data-stu-id="955ae-111">Define a new dependency property on a new class, using either signature of  <xref:System.Windows.DependencyProperty.Register%2A>, giving the metadata as the `typeMetadata` value.</span></span>  
  
-   <span data-ttu-id="955ae-112">Eseguire l'override dei metadati (chiamare <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) per una proprietà di dipendenza esistente, quando si deriva dalla classe cui appartiene la proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="955ae-112">Override the metadata (call <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) for an existing dependency property, when you derive from the class that owns the dependency property.</span></span>  
  
-   <span data-ttu-id="955ae-113">Aggiungere una proprietà di dipendenza esistente a una nuova <xref:System.Windows.DependencyObject> classe, utilizzando i nuovi metadati, chiamando <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span><span class="sxs-lookup"><span data-stu-id="955ae-113">Add an existing dependency property to a new <xref:System.Windows.DependencyObject> class, using new metadata, by calling <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="955ae-114">Le implementazioni di questo callback devono controllare il valore `baseValue` e determinare in base al valore o il tipo se si tratta di un valore che deve essere ulteriormente assegnato.</span><span class="sxs-lookup"><span data-stu-id="955ae-114">Implementations of this callback should check the value in `baseValue` and determine based on either the value or the type whether this is a value that needs to be further coerced.</span></span>  
  
 <span data-ttu-id="955ae-115">Il <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> per una dipendenza di proprietà viene richiamata ogni volta che il sistema di proprietà o qualsiasi altro chiamante chiama <xref:System.Windows.DependencyObject.CoerceValue%2A> in un <xref:System.Windows.DependencyObject> istanza, specificando l'identificatore della proprietà come il `dp`.</span><span class="sxs-lookup"><span data-stu-id="955ae-115">The <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for a dependency property is invoked any time that the property system or any other caller calls <xref:System.Windows.DependencyObject.CoerceValue%2A> on a <xref:System.Windows.DependencyObject> instance, specifying that property's identifier as the `dp`.</span></span>  
  
 <span data-ttu-id="955ae-116">Le modifiche al valore della proprietà potrebbero provenire da un partecipante possibili nel sistema di proprietà.</span><span class="sxs-lookup"><span data-stu-id="955ae-116">Changes to the property value may have come from any possible participant in the property system.</span></span> <span data-ttu-id="955ae-117">Sono inclusi gli stili, invalidazione generica, trigger, ereditarietà del valore di proprietà e impostazione del valore locale.</span><span class="sxs-lookup"><span data-stu-id="955ae-117">This includes styles, generic invalidation, triggers, property value inheritance, and local value setting.</span></span>  
  
 <span data-ttu-id="955ae-118">In genere, è consigliabile evitare di specificare più di una <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> per una determinata proprietà di dipendenza (si esegue l'override o l'aggiunta di nuovi metadati per una proprietà di dipendenza che dispone già di un <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span><span class="sxs-lookup"><span data-stu-id="955ae-118">Generally you should avoid specifying more than one <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> for any given dependency property (overriding or adding with new metadata for a dependency property that already had a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</span></span> <span data-ttu-id="955ae-119">Solo uno dei callback sarà in grado di agire. Il callback che agisce sarà quello che è stato applicato alla classe più derivata nell'ereditarietà rispetto a quanto il <xref:System.Windows.DependencyObject> chiamante.</span><span class="sxs-lookup"><span data-stu-id="955ae-119">Only one of the callbacks will be able to act. The acting callback will be the one that was applied to the most derived class in the inheritance as compared to the <xref:System.Windows.DependencyObject> caller.</span></span> <span data-ttu-id="955ae-120">Gli altri callback assegnati ai metadati della proprietà di dipendenza esistenti su un valore maggiore nella gerarchia proprietario vengono sostituiti quando si esegue l'override dei metadati.</span><span class="sxs-lookup"><span data-stu-id="955ae-120">Other callbacks as assigned to metadata for the dependency property as it existed higher in the owner hierarchy are replaced when the metadata is overridden.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="955ae-121">L'esempio seguente include un'implementazione di questo callback per assegnare il valore memorizzato di una proprietà di dipendenza basata su altri input, ad esempio un altro valore di proprietà.</span><span class="sxs-lookup"><span data-stu-id="955ae-121">The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value.</span></span> <span data-ttu-id="955ae-122">In questo caso, il callback controlla per vedere se il `ShirtType` proprietà corrisponde a un tipo di camicia con pulsanti; in caso affermativo stabilisce un colore iniziale predefinito per il `ButtonColor`, se il tipo di camicia non dispone di alcun pulsante, forzata la `ButtonColor` valore su un valore inizio, che comporta l'esecuzione di [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (non illustrato) per rimuovere l'elenco a discesa usando le scelte valide.</span><span class="sxs-lookup"><span data-stu-id="955ae-122">In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] (not shown) to remove that dropdown from the effective choices.</span></span>  
  
 [!code-csharp[DPCustom#CoerceValueCallback](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#coercevaluecallback)]
 [!code-vb[DPCustom#CoerceValueCallback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#coercevaluecallback)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
</Type>