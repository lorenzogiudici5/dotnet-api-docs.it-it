<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f0118-101">Restituisce le informazioni ottenute da <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-102">La maggior parte delle informazioni che <xref:System.Windows.ValueSource> trasmette è contenuto nel <xref:System.Windows.ValueSource.BaseValueSource%2A> proprietà.</span><span class="sxs-lookup"><span data-stu-id="f0118-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="f0118-103">Questa proprietà contiene un valore di enumerazione che consente di specificare esattamente un aspetto dell'intero [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema di proprietà che è responsabile per il valore effettivo della proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="f0118-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="f0118-104">Oltre il valore di base, le informazioni potrebbero essere interessanti sul valore di una proprietà di dipendenza sono se il valore è animato e se comporta un'espressione (ad esempio, un'associazione o un riferimento alla risorsa dinamica).</span><span class="sxs-lookup"><span data-stu-id="f0118-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="f0118-105">Questa informazione viene segnalata da <xref:System.Windows.ValueSource.IsAnimated%2A> e <xref:System.Windows.ValueSource.IsExpression%2A> rispettivamente.</span><span class="sxs-lookup"><span data-stu-id="f0118-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="f0118-106">Inoltre, se la coercizione opera su un valore della proprietà, la proprietà mantiene il valore desiderato e il valore della proprietà tenterà di raggiungere il valore desiderato se i vincoli di coercizione specifica vengono modificati o rimossi.</span><span class="sxs-lookup"><span data-stu-id="f0118-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="f0118-107">Segnala che una proprietà di coercizione che non è il valore desiderato <xref:System.Windows.ValueSource.IsCoerced%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="f0118-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0118-108">Ottiene un valore dell'enumerazione <see cref="T:System.Windows.BaseValueSource" />, che restituisce l'origine che ha fornito un valore al sistema di proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="f0118-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span></span></summary>
        <value><span data-ttu-id="f0118-109">Valore dell'enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f0118-109">A value of the enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-110">Il valore di base non è il valore effettivo se coercizione o animazione viene utilizzata nella proprietà.</span><span class="sxs-lookup"><span data-stu-id="f0118-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="f0118-111">Controllare <xref:System.Windows.ValueSource.IsAnimated%2A> e <xref:System.Windows.ValueSource.IsCoerced%2A> se si desidera determinare se il valore di base è il valore effettivo.</span><span class="sxs-lookup"><span data-stu-id="f0118-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="f0118-112">È inoltre possibile controllare <xref:System.Windows.ValueSource.IsExpression%2A> per determinare se il valore di base è stato restituito da un'espressione.</span><span class="sxs-lookup"><span data-stu-id="f0118-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="f0118-113">Oggetto da confrontare con questo oggetto <see cref="T:System.Windows.ValueSource" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span></span></param>
        <summary><span data-ttu-id="f0118-114">Restituisce un valore che indica se <see cref="T:System.Windows.ValueSource" /> equivale a un oggetto specificato.</span><span class="sxs-lookup"><span data-stu-id="f0118-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="f0118-115"><see langword="true" /> se l'oggetto specificato equivale all'oggetto <see cref="T:System.Windows.ValueSource" /> corrente; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-115"><see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-116">Questa implementazione supporta l'uguaglianza di valori, in base a ciascuno dei valori di proprietà di ogni <xref:System.Windows.ValueSource> struttura.</span><span class="sxs-lookup"><span data-stu-id="f0118-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f0118-117">Restituisce il codice hash per questo oggetto <see cref="T:System.Windows.ValueSource" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span></span></summary>
        <returns><span data-ttu-id="f0118-118">Codice hash di un intero senza segno a 32 bit.</span><span class="sxs-lookup"><span data-stu-id="f0118-118">A 32-bit unsigned integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-119">Questo codice hash è basato sul <xref:System.Windows.ValueSource.BaseValueSource%2A> valore.</span><span class="sxs-lookup"><span data-stu-id="f0118-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0118-120">Ottiene un valore che dichiara se la proprietà è animata.</span><span class="sxs-lookup"><span data-stu-id="f0118-120">Gets a value that declares whether the property is being animated.</span></span></summary>
        <value>
          <span data-ttu-id="f0118-121"><see langword="true" /> se la proprietà è animata; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-121"><see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-122">Per qualsiasi proprietà che è attualmente animate, l'origine segnalati da <xref:System.Windows.ValueSource.BaseValueSource%2A> non è immediatamente pertinente, perché l'animazione opera precedenza proprietà di dipendenza superiore rispetto al valore di base.</span><span class="sxs-lookup"><span data-stu-id="f0118-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="f0118-123">Per ulteriori informazioni sulla precedenza e le animazioni, vedere [precedenza dei valori di proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f0118-123">For more information about precedence and animations, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0118-124">Ottiene un valore che dichiara se il valore è il risultato di un'implementazione di <see cref="T:System.Windows.CoerceValueCallback" /> applicata a una proprietà di dipendenza.</span><span class="sxs-lookup"><span data-stu-id="f0118-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span></span></summary>
        <value>
          <span data-ttu-id="f0118-125"><see langword="true" /> se il valore è il risultato di un'implementazione di <see cref="T:System.Windows.CoerceValueCallback" /> applicata a una proprietà di dipendenza; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-125"><see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-126">Se la coercizione opera su un valore della proprietà, la proprietà mantiene il valore desiderato e il valore della proprietà tenterà di raggiungere il valore desiderato se i vincoli di coercizione specifica vengono modificati o rimossi.</span><span class="sxs-lookup"><span data-stu-id="f0118-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="f0118-127">Segnala che una proprietà di coercizione che non è il valore desiderato <xref:System.Windows.ValueSource.IsCoerced%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="f0118-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="f0118-128">Coercizione opera alla precedenza più alta rispetto al valore di base e non è un partecipante nella configurazione il valore di base in senso stretto.</span><span class="sxs-lookup"><span data-stu-id="f0118-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="f0118-129">Di conseguenza lo stato di assegnazione forzata viene segnalato da questa proprietà, anziché da un valore di <xref:System.Windows.BaseValueSource> enumerazione.</span><span class="sxs-lookup"><span data-stu-id="f0118-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="f0118-130">Per ulteriori informazioni sulla coercizione, valori di base e la precedenza, vedere [precedenza dei valori di proprietà di dipendenza](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span><span class="sxs-lookup"><span data-stu-id="f0118-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0118-131">Rileva se il valore è stato impostato dal metodo <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span></span></summary>
        <value>
          <span data-ttu-id="f0118-132"><see langword="true" /> se il valore è stato impostato dal metodo <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-132"><see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f0118-133">Ottiene un valore che dichiara se questo valore è il risultato di un'espressione valutata.</span><span class="sxs-lookup"><span data-stu-id="f0118-133">Gets a value that declares whether this value resulted from an evaluated expression.</span></span> <span data-ttu-id="f0118-134">Potrebbe trattarsi di un oggetto <see cref="T:System.Windows.Data.BindingExpression" /> che supporta un'associazione o di un'espressione interna, ad esempio quelle che supportano l'[estensione di markup DynamicResource](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span><span class="sxs-lookup"><span data-stu-id="f0118-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](~/docs/framework/wpf/advanced/dynamicresource-markup-extension.md).</span></span></summary>
        <value>
          <span data-ttu-id="f0118-135"><see langword="true" /> se il valore è il risultato di un'espressione valutata; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-135"><see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-136">Un'espressione valutata indicherà inoltre il valore di base specifico impostazione condizione in cui è stata applicata l'espressione, come un valore in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="f0118-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="f0118-137">Il <xref:System.Windows.ValueSource.BaseValueSource%2A> è ancora molto rilevanti per qualsiasi proprietà in cui <xref:System.Windows.ValueSource.IsExpression%2A> è `true`.</span><span class="sxs-lookup"><span data-stu-id="f0118-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="f0118-138">Sapere se è stato ricevuto un valore tramite un'espressione può essere particolarmente utile se il valore è stato impostato indirettamente, ad esempio tramite un modello o un valore della proprietà ereditate.</span><span class="sxs-lookup"><span data-stu-id="f0118-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="f0118-139">Se non viene valutata un'espressione (l'associazione non è riuscita; è stata trovata alcuna risorsa del nome), quindi il valore verrà derivare da un altro partecipante nel sistema di proprietà, probabilmente il valore predefinito.</span><span class="sxs-lookup"><span data-stu-id="f0118-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="f0118-140">L'origine viene quindi restituita in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span><span class="sxs-lookup"><span data-stu-id="f0118-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="f0118-141">Espressione non riuscito restituiranno `false` per <xref:System.Windows.ValueSource.IsExpression%2A>.</span><span class="sxs-lookup"><span data-stu-id="f0118-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="f0118-142">Primo oggetto <see cref="T:System.Windows.ValueSource" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="f0118-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="f0118-143">Secondo oggetto <see cref="T:System.Windows.ValueSource" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="f0118-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="f0118-144">Determina se due istanze di <see cref="T:System.Windows.ValueSource" /> hanno lo stesso valore.</span><span class="sxs-lookup"><span data-stu-id="f0118-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="f0118-145"><see langword="true" /> se le due istanze di <see cref="T:System.Windows.ValueSource" /> sono equivalenti; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-145"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-146">Questa implementazione chiama <xref:System.Windows.ValueSource.Equals%2A>, e il valore di supporta l'uguaglianza in base a tutte le proprietà di <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="f0118-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="f0118-147">Primo oggetto <see cref="T:System.Windows.ValueSource" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="f0118-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="f0118-148">Secondo oggetto <see cref="T:System.Windows.ValueSource" /> da confrontare.</span><span class="sxs-lookup"><span data-stu-id="f0118-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="f0118-149">Determina se due istanze di <see cref="T:System.Windows.ValueSource" /> non hanno lo stesso valore.</span><span class="sxs-lookup"><span data-stu-id="f0118-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span></span></summary>
        <returns>
          <span data-ttu-id="f0118-150"><see langword="true" /> se le due istanze di <see cref="T:System.Windows.ValueSource" /> non sono equivalenti; in caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="f0118-150"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f0118-151">Questa implementazione chiama <xref:System.Windows.ValueSource.Equals%2A>, restituendo la negazione e supporta l'uguaglianza di valori in tutte le proprietà di base <xref:System.Windows.ValueSource>.</span><span class="sxs-lookup"><span data-stu-id="f0118-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>